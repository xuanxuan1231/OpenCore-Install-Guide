(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{429:function(e,t,a){e.exports=a.p+"assets/img/config-gpu.9f88fa9d.png"},430:function(e,t,a){e.exports=a.p+"assets/img/corp-windows.cba6825c.png"},612:function(e,t,a){"use strict";a.r(t);var o=a(10),n=Object(o.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"disabling-gpu"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#disabling-gpu"}},[e._v("#")]),e._v(" Disabling GPU")]),e._v(" "),t("p",[e._v("So you need to hide your unsupported GPU? Well with OpenCore things are slightly different, specifically that we need to specify to which exact device we want to spoof. There are 3 ways we can do this:")]),e._v(" "),t("ul",[t("li",[e._v("Boot Flag\n"),t("ul",[t("li",[e._v("Disables all GPUs except the iGPU")])])]),e._v(" "),t("li",[e._v("DeviceProperties\n"),t("ul",[t("li",[e._v("Disables GPU on a per-slot basis")])])]),e._v(" "),t("li",[e._v("SSDT\n"),t("ul",[t("li",[e._v("Disables GPU on a per-slot basis")])])])]),e._v(" "),t("p",[t("strong",[e._v("CSM must be off in the BIOS for the spoofing to work correctly, especially on AMD CPU based systems.")])]),e._v(" "),t("h3",{attrs:{id:"boot-flag"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#boot-flag"}},[e._v("#")]),e._v(" Boot Flag")]),e._v(" "),t("p",[e._v("By far the simplest way, all you need to do is add the following boot-arg:")]),e._v(" "),t("p",[t("code",[e._v("-wegnoegpu")])]),e._v(" "),t("p",[e._v("Do note that this will disable all GPUs excluding the iGPU.")]),e._v(" "),t("h3",{attrs:{id:"deviceproperties-method"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#deviceproperties-method"}},[e._v("#")]),e._v(" DeviceProperties Method")]),e._v(" "),t("p",[e._v("Here is quite simple, find the PCI route with "),t("a",{attrs:{href:"https://github.com/acidanthera/gfxutil/releases",target:"_blank",rel:"noopener noreferrer"}},[e._v("gfxutil"),t("OutboundLink")],1),e._v(" and then create a new DeviceProperties section with your spoof:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("path/to/gfxutil -f GFX0\n")])])]),t("p",[e._v("And the output will result in something similar:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("DevicePath = PciRoot(0x0)/Pci(0x1,0x0)/Pci(0x0,0x0)/Pci(0x0,0x0)/Pci(0x0,0x0)\n")])])]),t("p",[e._v("With this, navigate towards "),t("code",[e._v("Root -> DeviceProperties -> Add")]),e._v(" and add your PCI route with the following properties:")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"left"}},[e._v("Key")]),e._v(" "),t("th",{staticStyle:{"text-align":"left"}},[e._v("Type")]),e._v(" "),t("th",{staticStyle:{"text-align":"left"}},[e._v("Value")])])]),e._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"left"}},[e._v("disable-gpu")]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[e._v("Boolean")]),e._v(" "),t("td",{staticStyle:{"text-align":"left"}},[t("code",[e._v("True")])])])])]),e._v(" "),t("p",[t("img",{attrs:{src:a(429),alt:""}})]),e._v(" "),t("h3",{attrs:{id:"ssdt-method"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ssdt-method"}},[e._v("#")]),e._v(" SSDT Method")]),e._v(" "),t("p",[e._v("There are many ways to find the path but generally, the easiest way is to get into Device Manager under windows and find the PCI path.")]),e._v(" "),t("p",[e._v("Example of device path for "),t("code",[e._v("\\_SB.PCI0.PEG0.PEGP")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('\n    DefinitionBlock ("", "SSDT", 2, "DRTNIA", "spoof", 0x00000000)\n    {\n       External (_SB_.PCI0.PEG0.PEGP, DeviceObj)\n\n       Method (_SB.PCI0.PEG0.PEGP._DSM, 4, NotSerialized)\n       {\n          If ((!Arg2 || !(_OSI ("Darwin"))))\n          {\n             Return (Buffer (One)\n             {\n                0x03\n             })\n          }\n\n          Return (Package (0x0A)\n          {\n             "name",\n             Buffer (0x09)\n             {\n                "#display"\n             },\n\n             "IOName",\n             "#display",\n             "class-code",\n             Buffer (0x04)\n             {\n                0xFF, 0xFF, 0xFF, 0xFF\n             },\n          })\n       }\n    }\n\n')])])]),t("p",[e._v("A copy of this SSDT can be found here: "),t("a",{attrs:{href:"https://github.com/dortania/OpenCore-Install-Guide/blob/master/extra-files/Spoof-SSDT.dsl",target:"_blank",rel:"noopener noreferrer"}},[e._v("Spoof-SSDT.dsl"),t("OutboundLink")],1),e._v(". You will need "),t("a",{attrs:{href:"https://github.com/acidanthera/MaciASL/releases",target:"_blank",rel:"noopener noreferrer"}},[e._v("MaciASL"),t("OutboundLink")],1),e._v(" to compile this. Remember that "),t("code",[e._v(".aml")]),e._v(" is assembled and "),t("code",[e._v(".dsl")]),e._v(" is source code. You can compile with MaciASL by selecting File -> Save As -> ACPI Machine Language.")]),e._v(" "),t("p",[e._v("Source: CorpNewt")]),e._v(" "),t("h2",{attrs:{id:"windows-gpu-selection"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#windows-gpu-selection"}},[e._v("#")]),e._v(" Windows GPU Selection")]),e._v(" "),t("p",[e._v("Depending on your setup, you may find that Windows renders games or applications using an undesired GPU.")]),e._v(" "),t("p",[e._v("Many users only have two GPUs. NVIDIA and the Intel HD/UHD IGPU. Since NVIDIA no longer works on macOS, they may have the monitor plugged into the motherboards HDMI/DP connection for convenience. As a result, Windows will render all games and applications through the IGPU. You can reroute a specific game or application to a different GPU by going to: Settings > System > Display > Graphics settings")]),e._v(" "),t("p",[t("img",{attrs:{src:a(430),alt:"Credit to CorpNewt for image"}})]),e._v(" "),t("p",[e._v("The rendered game or application will have its buffer copied to the IGPU. Which is then displayed to you. This does come with a few downsides:")]),e._v(" "),t("ul",[t("li",[e._v("GSync will no longer work.")]),e._v(" "),t("li",[e._v("NVIDIA settings can no longer be opened. This requires the display to be connected to the GPU")]),e._v(" "),t("li",[e._v("Decreased frame rate.")]),e._v(" "),t("li",[e._v("Increased input latency.")]),e._v(" "),t("li",[e._v("Refresh rate cap.")])]),e._v(" "),t("p",[e._v("If your motherboard only has an HDMI connector for the iGPU, the maximum refresh rate for spec 2.1 is "),t("a",{attrs:{href:"https://www.hdmi.org/spec21Sub/EightK60_FourK120",target:"_blank",rel:"noopener noreferrer"}},[e._v("120Hz"),t("OutboundLink")],1),e._v(". This assumes your board and monitor are of the same spec. This means your 144Hz monitor is only seeing a maximum of 120Hz as determined by the hardware. This limitation "),t("em",[e._v("does not")]),e._v(" apply if your board has a DP connector for the IGPU.")]),e._v(" "),t("p",[e._v("If you have more than two GPUs (AMD, NVIDIA and Intel), this setting is limited. A monitor connected to the AMD GPU means Windows will only allow you to select the AMD GPU or the Intel IGPU. The NVIDIA GPU will not show. In a future version of Windows, this "),t("a",{attrs:{href:"https://pureinfotech.com/windows-10-21h1-new-features/#:~:text=Graphics%20settings",target:"_blank",rel:"noopener noreferrer"}},[e._v("limitation is removed"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("As a recommendation, if you use both operating systems equally and prefer no downsides, your best option is an HDMI or DP switch.")])])}),[],!1,null,null,null);t.default=n.exports}}]);