(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{573:function(e,t,r){"use strict";r.r(t);var o=r(10),n=Object(o.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"converting-common-properties-from-clover-to-opencore"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#converting-common-properties-from-clover-to-opencore"}},[e._v("#")]),e._v(" Converting common properties from Clover to OpenCore")]),e._v(" "),t("p",[e._v("So this little(well not so little as I reread this...) page is for users who are having issues migrating from Clover to OpenCore as some of their legacy quirks are required or the Configuration.pdf isn't well suited for laptop users.")]),e._v(" "),t("h1",{attrs:{id:"kexts-and-firmware-drivers"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kexts-and-firmware-drivers"}},[e._v("#")]),e._v(" Kexts and Firmware drivers")]),e._v(" "),t("p",[e._v("See "),t("a",{attrs:{href:"https://github.com/dortania/OpenCore-Install-Guide/blob/master/clover-conversion/clover-efi.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("Kexts and Firmware drivers"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("h1",{attrs:{id:"acpi"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#acpi"}},[e._v("#")]),e._v(" Acpi")]),e._v(" "),t("p",[t("strong",[e._v("ACPI Renames")]),e._v(":")]),e._v(" "),t("p",[e._v("So with the transition from Clover to OpenCore we should start removing unneeded patches you may have carried along for some time:")]),e._v(" "),t("ul",[t("li",[e._v("EHCI Patches: Recommended to power off the controller with "),t("a",{attrs:{href:"https://github.com/acidanthera/OpenCorePkg/tree/master/Docs/AcpiSamples/Source/SSDT-EHCx_OFF.dsl",target:"_blank",rel:"noopener noreferrer"}},[e._v("SSDT-EHCx_OFF"),t("OutboundLink")],1),e._v(". Skylake and newer users do not have an EHCI controller so no need for this.\n"),t("ul",[t("li",[e._v("change EHC1 to EH01")]),e._v(" "),t("li",[e._v("change EHC2 to EH02")])])]),e._v(" "),t("li",[e._v("XHCI Patches: Not needed once an "),t("a",{attrs:{href:"https://github.com/corpnewt/USBMap",target:"_blank",rel:"noopener noreferrer"}},[e._v("Injector kext"),t("OutboundLink")],1),e._v(" is made\n"),t("ul",[t("li",[e._v("change XHCI to XHC")]),e._v(" "),t("li",[e._v("change XHC1 to XHC")])])]),e._v(" "),t("li",[e._v("SATA patches: Purely cosmetic in macOS now\n"),t("ul",[t("li",[e._v("change SAT0 to SATA")]),e._v(" "),t("li",[e._v("change SAT1 to SATA")])])]),e._v(" "),t("li",[e._v("IMEI Patches: Handled by "),t("a",{attrs:{href:"https://github.com/acidanthera/whatevergreen/releases",target:"_blank",rel:"noopener noreferrer"}},[e._v("WhateverGreen"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("change HECI to IMEI")]),e._v(" "),t("li",[e._v("change HEC1 to IMEI")]),e._v(" "),t("li",[e._v("change MEI to IMEI")]),e._v(" "),t("li",[e._v("change IDER to MEID")])])]),e._v(" "),t("li",[e._v("GFX patches: Handled by "),t("a",{attrs:{href:"https://github.com/acidanthera/whatevergreen/releases",target:"_blank",rel:"noopener noreferrer"}},[e._v("WhateverGreen"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("change GFX0 to IGPU")]),e._v(" "),t("li",[e._v("change PEG0 to GFX0")]),e._v(" "),t("li",[e._v("change PEGP to GFX0")]),e._v(" "),t("li",[e._v("change SL01 to PEGP")])])]),e._v(" "),t("li",[e._v("EC Patches: See here on best solution: "),t("a",{attrs:{href:"https://dortania.github.io/Getting-Started-With-ACPI/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Getting started with ACPI"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("change EC0 to EC")]),e._v(" "),t("li",[e._v("change H_EC to EC")]),e._v(" "),t("li",[e._v("change ECDV to EC")]),e._v(" "),t("li",[e._v("change PGEC to EC")])])]),e._v(" "),t("li",[e._v("Audio renames: Handled by "),t("a",{attrs:{href:"https://github.com/acidanthera/AppleALC",target:"_blank",rel:"noopener noreferrer"}},[e._v("AppleALC"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("change HDAS to HDEF")]),e._v(" "),t("li",[e._v("change CAVS to HDEF")]),e._v(" "),t("li",[e._v("change AZAL to HDEF")]),e._v(" "),t("li",[e._v("change ALZA to HDEF")]),e._v(" "),t("li",[e._v("change B0D3 to HDAU")])])]),e._v(" "),t("li",[e._v("Z390 BIOS RTC bug fix: See here on best solution: "),t("a",{attrs:{href:"https://dortania.github.io/Getting-Started-With-ACPI/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Getting started with ACPI"),t("OutboundLink")],1),e._v("(SSDT-AWAC)\n"),t("ul",[t("li",[e._v("change STAS to [Blank]")]),e._v(" "),t("li",[e._v("Fix Z390 BIOS DSDT Device(RTC) bug")]),e._v(" "),t("li",[e._v("Fix 300-series RTC Bug")])])]),e._v(" "),t("li",[e._v("NVMe patches: "),t("a",{attrs:{href:"https://github.com/acidanthera/NVMeFix",target:"_blank",rel:"noopener noreferrer"}},[e._v("NVMeFix"),t("OutboundLink")],1),e._v(" fixes power management\n"),t("ul",[t("li",[e._v("change PXSX to ANS1")]),e._v(" "),t("li",[e._v("change PXSX to ANS2")])])]),e._v(" "),t("li",[e._v("Airport/WiFi Patches: "),t("a",{attrs:{href:"https://github.com/acidanthera/AirportBrcmFixup",target:"_blank",rel:"noopener noreferrer"}},[e._v("AirportBrcmFixup"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("change PXSX to ARPT")])])]),e._v(" "),t("li",[e._v("Other purely cosmetic patches:\n"),t("ul",[t("li",[e._v("change LPC0 to LPCB(use "),t("a",{attrs:{href:"https://github.com/acidanthera/OpenCorePkg/tree/master/Docs/AcpiSamples/Source/SSDT-SBUS-MCHC.dsl",target:"_blank",rel:"noopener noreferrer"}},[e._v("SSDT-SBUS-MCHC"),t("OutboundLink")],1),e._v(" for fixing SMBUS support)")]),e._v(" "),t("li",[e._v("change PC00 to PCIO")]),e._v(" "),t("li",[e._v("change FPU to MATH")]),e._v(" "),t("li",[e._v("change TMR to TIMR")]),e._v(" "),t("li",[e._v("change PIC to IPIC")]),e._v(" "),t("li",[e._v("change GBE1 to ETH0")])])])]),e._v(" "),t("p",[t("strong",[e._v("Patches")])]),e._v(" "),t("ul",[t("li",[t("p",[e._v("TgtBridge patches:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ACPI -> Patch -> ... -> Base")])])])]),e._v(" "),t("li",[t("p",[e._v("DisableASPM:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("DeviceProperties -> Add -> PciRoot... -> pci-aspm-default | Data | <00>")])])])]),e._v(" "),t("li",[t("p",[e._v("HaltEnabler:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ACPI -> Quirks -> FadtEnableReset -> YES")])])])])]),e._v(" "),t("p",[t("strong",[e._v("Fixes")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("p",[t("strong",[e._v("FixAirport")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/acidanthera/AirportBrcmFixup",target:"_blank",rel:"noopener noreferrer"}},[e._v("AirportBrcmFixup"),t("OutboundLink")],1)])])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("FixIPIC")]),e._v(":")]),e._v(" "),t("ul",[t("li",[e._v("CorpNewt's "),t("a",{attrs:{href:"https://github.com/corpnewt/SSDTTime",target:"_blank",rel:"noopener noreferrer"}},[e._v("SSDTTime"),t("OutboundLink")],1),e._v(" to make the proper SSDT, "),t("code",[e._v("FixHPET - Patch out IRQ Conflicts")])])])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("FixSBUS")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/acidanthera/OpenCorePkg/tree/master/Docs/AcpiSamples/Source/SSDT-SBUS-MCHC.dsl",target:"_blank",rel:"noopener noreferrer"}},[e._v("SSDT-SBUS-MCHC"),t("OutboundLink")],1)])])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("FixShutdown")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/dortania/OpenCore-Post-Install/blob/master/extra-files/FixShutdown-USB-SSDT.dsl",target:"_blank",rel:"noopener noreferrer"}},[e._v("FixShutdown-USB-SSDT"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/dortania/OpenCore-Post-Install/blob/master/extra-files/FixShutdown-Patch.plist",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("_PTS")]),e._v(" to "),t("code",[e._v("ZPTS")]),e._v(" Patch"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("This will not harm Windows or Linux installs as this is just adding missing methods that should've been there to start with. "),t("em",[e._v("Blame the firmware writers")])])])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("FixDisplay")]),e._v(":")]),e._v(" "),t("ul",[t("li",[e._v("Manual framebuffer patching, WhateverGreen does most of the work already")])])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("FixHDA")]),e._v(":")]),e._v(" "),t("ul",[t("li",[e._v("Handled by AppleALC")])])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("FixHPET")]),e._v(":")]),e._v(" "),t("ul",[t("li",[e._v("CorpNewt's "),t("a",{attrs:{href:"https://github.com/corpnewt/SSDTTime",target:"_blank",rel:"noopener noreferrer"}},[e._v("SSDTTime"),t("OutboundLink")],1),e._v(" to make the proper SSDT, "),t("code",[e._v("FixHPET - Patch out IRQ Conflicts")])])])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("FixSATA")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Kernel -> Quirks -> ExternalDiskIcons -> YES")])])])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("FixADP1")]),e._v(":")]),e._v(" "),t("ul",[t("li",[e._v("Renames device "),t("code",[e._v("AC0_")]),e._v(" to "),t("code",[e._v("ADP1")]),e._v(", see "),t("a",{attrs:{href:"https://github.com/dortania/OpenCore-Install-Guide/blob/master/extra-files/Rename-SSDT.dsl",target:"_blank",rel:"noopener noreferrer"}},[e._v("Rename-SSDT"),t("OutboundLink")],1),e._v(" for an example")]),e._v(" "),t("li",[e._v("Also injects "),t("code",[e._v("Name (_PRW, Package (0x02) {0x1C,0x03})")]),e._v(" into the device if not present. "),t("a",{attrs:{href:"https://github.com/CloverHackyColor/CloverBootloader/blob/81f2b91b1552a4387abaa2c48a210c63d5b6233c/rEFIt_UEFI/Platform/FixBiosDsdt.cpp#L1677-L1692",target:"_blank",rel:"noopener noreferrer"}},[e._v("Source"),t("OutboundLink")],1)])])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("FixRTC")]),e._v(":")]),e._v(" "),t("ul",[t("li",[e._v("CorpNewt's "),t("a",{attrs:{href:"https://github.com/corpnewt/SSDTTime",target:"_blank",rel:"noopener noreferrer"}},[e._v("SSDTTime"),t("OutboundLink")],1),e._v(" to make the proper SSDT, "),t("code",[e._v("FixHPET - Patch out IRQ Conflicts")])])])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("FixTMR")]),e._v(":")]),e._v(" "),t("ul",[t("li",[e._v("CorpNewt's "),t("a",{attrs:{href:"https://github.com/corpnewt/SSDTTime",target:"_blank",rel:"noopener noreferrer"}},[e._v("SSDTTime"),t("OutboundLink")],1),e._v(" to make the proper SSDT, "),t("code",[e._v("FixHPET - Patch out IRQ Conflicts")])])])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("AddPNLF")]),e._v(":")]),e._v(" "),t("ul",[t("li",[e._v("See "),t("a",{attrs:{href:"https://dortania.github.io/Getting-Started-With-ACPI/Laptops/backlight.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("SSDT-PNLF"),t("OutboundLink")],1)])])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("AddMCHC")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/acidanthera/OpenCorePkg/tree/master/Docs/AcpiSamples/Source/SSDT-SBUS-MCHC.dsl",target:"_blank",rel:"noopener noreferrer"}},[e._v("SSDT-SBUS-MCHC"),t("OutboundLink")],1)])])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("AddIMEI")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/acidanthera/OpenCorePkg/tree/master/Docs/AcpiSamples/Source/SSDT-SBUS-MCHC.dsl",target:"_blank",rel:"noopener noreferrer"}},[e._v("SSDT-SBUS-MCHC"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("WhateverGreen will also handle fixing IMEI naming")]),e._v(" "),t("li",[e._v("For Sandy Bridge on Z77 or IvyBridge on Z67, the IMEI will need to be faked: "),t("a",{attrs:{href:"https://github.com/acidanthera/OpenCorePkg/tree/master/Docs/AcpiSamples/Source/SSDT-IMEI.dsl",target:"_blank",rel:"noopener noreferrer"}},[e._v("SSDT-IMEI"),t("OutboundLink")],1)])])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("FakeLPC")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("DeviceProperties -> Add -> PciRoot... -> device-id")])]),e._v(" "),t("li",[e._v("You'll want to spoof it to a supported LPC controller already in AppleLPC")])])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("FixIntelGfx")]),e._v(":")]),e._v(" "),t("ul",[t("li",[e._v("WhateverGreen handles this")])])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("AddHDMI")]),e._v(":")]),e._v(" "),t("ul",[t("li",[e._v("WhateverGreen handles this")])])])]),e._v(" "),t("p",[t("strong",[e._v("DropTables")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ACPI -> Delete")])])]),e._v(" "),t("p",[t("strong",[e._v("SSDT")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("p",[t("strong",[e._v("PluginType")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://dortania.github.io/Getting-Started-With-ACPI/Universal/plug.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("SSDT-PLUG"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("See "),t("a",{attrs:{href:"https://dortania.github.io/Getting-Started-With-ACPI/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Getting started with ACPI"),t("OutboundLink")],1),e._v(" for more details")])])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("Generate P States")]),e._v(": "),t("a",{attrs:{href:"https://github.com/Piker-Alpha/ssdtPRGen.sh",target:"_blank",rel:"noopener noreferrer"}},[e._v("ssdtPRGen.sh"),t("OutboundLink")],1),e._v("(For Sandy Bridge and IvyBridge)")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("Generate C States")]),e._v(": "),t("a",{attrs:{href:"https://github.com/Piker-Alpha/ssdtPRGen.sh",target:"_blank",rel:"noopener noreferrer"}},[e._v("ssdtPRGen.sh"),t("OutboundLink")],1),e._v("(For Sandy Bridge and IvyBridge)")])])]),e._v(" "),t("h1",{attrs:{id:"boot"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#boot"}},[e._v("#")]),e._v(" Boot")]),e._v(" "),t("p",[t("strong",[e._v("Boot Argument")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("NVRAM -> Add -> 7C436110-AB2A-4BBB-A880-FE41995C9F82 -> boot-args")])])]),e._v(" "),t("p",[t("strong",[e._v("NeverHibernate")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Misc -> Boot -> HibernateMode -> None")])])]),e._v(" "),t("p",[t("strong",[e._v("Default Boot Volume")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Misc -> Security -> AllowSetDefault -> True")]),e._v(" "),t("ul",[t("li",[e._v("Press Ctrl+Enter in the picker to set default device")])])]),e._v(" "),t("li",[e._v("Alternative is Startup Disk in macOS's System Preferences, just like on real Macs")])]),e._v(" "),t("h1",{attrs:{id:"boot-graphics"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#boot-graphics"}},[e._v("#")]),e._v(" Boot Graphics")]),e._v(" "),t("p",[t("strong",[e._v("DefaultBackgroundColor")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("NVRAM -> Add -> 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 -> DefaultBackgroundColor")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("00000000")]),e._v(": Syrah Black")]),e._v(" "),t("li",[t("code",[e._v("BFBFBF00")]),e._v(": Light Gray")]),e._v(" "),t("li",[e._v("To calculate your own, convert an "),t("code",[e._v("RGB")]),e._v(" value to "),t("code",[e._v("HEX")])])])])]),e._v(" "),t("p",[t("strong",[e._v("EFILoginHiDPI")]),e._v(":")]),e._v(" "),t("ul",[t("li",[e._v("Clover only flag, for OpenCore UI scaling see UIScale and "),t("code",[e._v("UEFI -> Output")])])]),e._v(" "),t("p",[t("strong",[e._v("flagstate")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("NVRAM -> Add -> 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 -> flagstate | Data | <>")]),e._v(" "),t("ul",[t("li",[e._v("0 -> "),t("code",[e._v("<00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000")]),e._v("(dumped from a mac)")]),e._v(" "),t("li",[e._v("NVRAM location needs to be double checked for this one")])])])]),e._v(" "),t("p",[t("strong",[e._v("UIScale")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("UEFI -> Quirks -> UIScale | Integer |")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("1")]),e._v(" —> 1x scaling, corresponds to normal displays.")]),e._v(" "),t("li",[t("code",[e._v("2")]),e._v(" —> 2x scaling, corresponds to HiDPI displays.")]),e._v(" "),t("li",[t("code",[e._v("-1")]),e._v(" —> leaves the current variable unchanged.")]),e._v(" "),t("li",[t("code",[e._v("0")]),e._v(" —> automatically chooses scaling based on the current resolution.")])])])]),e._v(" "),t("h1",{attrs:{id:"cpu"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cpu"}},[e._v("#")]),e._v(" CPU")]),e._v(" "),t("p",[t("strong",[e._v("Type")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("PlatformInfo -> Generic -> ProcessorType")])]),e._v(" "),t("li",[e._v("See "),t("a",{attrs:{href:"https://github.com/acidanthera/OpenCorePkg/blob/master/Include/Apple/IndustryStandard/AppleSmBios.h",target:"_blank",rel:"noopener noreferrer"}},[e._v("AppleSmBios.h"),t("OutboundLink")],1),e._v(" for all supported values")])]),e._v(" "),t("p",[t("strong",[e._v("HWPEnable")]),e._v(": Better alternative is to properly manage "),t("code",[e._v("MSR 0x770")]),e._v(" with "),t("a",{attrs:{href:"https://github.com/headkaze/HWPEnable",target:"_blank",rel:"noopener noreferrer"}},[e._v("HWPEnable"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[e._v("QEMU")]),e._v(": Proper VM/KVM support is implemented in OpenCore")]),e._v(" "),t("p",[t("strong",[e._v("TurboDisable")]),e._v(": Better alternative is to control your frequencies with "),t("a",{attrs:{href:"https://github.com/acidanthera/CPUFriend",target:"_blank",rel:"noopener noreferrer"}},[e._v("CPUFriend"),t("OutboundLink")],1),e._v(" or "),t("a",{attrs:{href:"https://github.com/Piker-Alpha/ssdtPRGen.sh",target:"_blank",rel:"noopener noreferrer"}},[e._v("ssdtPRGen"),t("OutboundLink")],1)]),e._v(" "),t("h1",{attrs:{id:"devices"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#devices"}},[e._v("#")]),e._v(" Devices")]),e._v(" "),t("p",[t("strong",[e._v("USB")]),e._v(":")]),e._v(" "),t("ul",[t("li",[e._v("FixOwnership: "),t("code",[e._v("UEFI -> Quirk -> ReleaseUsbOwnership")]),e._v(" "),t("ul",[t("li",[e._v("You should also enable "),t("code",[e._v("XHCI Hand-off")]),e._v(" in your BIOS")])])]),e._v(" "),t("li",[e._v("ClockID: "),t("code",[e._v("DeviceProperties -> Add -> PciRoot... -> AAPL,clock-id")])]),e._v(" "),t("li",[e._v("HighCurrent: "),t("code",[e._v("DeviceProperties -> Add -> PciRoot... -> AAPL, HighCurrent")]),e._v(" "),t("ul",[t("li",[e._v("Irrelevant for OS X 10.11 and newer")]),e._v(" "),t("li",[e._v("Newer variant is either PowerProperties defined in "),t("code",[e._v("IOUSBHostFamily.kext -> AppleUSBHostPlatformProperties")]),e._v(" or added with a USBX SSDT for Skylake SMBIOS and newer")])])])]),e._v(" "),t("p",[t("strong",[e._v("Audio")]),e._v(":")]),e._v(" "),t("p",[e._v("For the following, you will need to know your PciRoot for your audio controller and its name(commonly known as HDEF but also HDAS, HDAU and such), this can be found with "),t("a",{attrs:{href:"https://github.com/acidanthera/gfxutil/releases",target:"_blank",rel:"noopener noreferrer"}},[e._v("gfxutil"),t("OutboundLink")],1),e._v(":")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("path/to/gfxutil -f HDEF\n")])])]),t("ul",[t("li",[e._v("Inject: "),t("code",[e._v("DeviceProperties -> Add -> PciRoot... -> layout-id")])]),e._v(" "),t("li",[e._v("AFGLowPowerState: "),t("code",[e._v("DeviceProperties -> Add -> PciRoot... -> AFGLowPowerState -> <01000000>")])]),e._v(" "),t("li",[e._v("ResetHDA: "),t("code",[e._v("UEFI -> Audio -> ResetTrafficClass")]),e._v(" "),t("ul",[t("li",[e._v("Optionally there's also AppleALC's "),t("code",[e._v("alctsel=1")]),e._v(" boot-arg or "),t("a",{attrs:{href:"https://github.com/fewtarius/jackfix",target:"_blank",rel:"noopener noreferrer"}},[e._v("JackFix"),t("OutboundLink")],1)])])])]),e._v(" "),t("p",[t("strong",[e._v("Add Properties")]),e._v(":")]),e._v(" "),t("ul",[t("li",[e._v("No equivalent, need to specify with a PciRoot path")])]),e._v(" "),t("p",[t("strong",[e._v("Properties")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("DeviceProperties -> Add")])])]),e._v(" "),t("p",[t("strong",[e._v("FakeID")]),e._v(":\nFor the following, you will need to know your PciRoot for your device and apply their properties with "),t("code",[e._v("DeviceProperties -> Add")]),e._v(", PciRoot can be found with "),t("a",{attrs:{href:"https://github.com/acidanthera/gfxutil/releases",target:"_blank",rel:"noopener noreferrer"}},[e._v("gfxutil"),t("OutboundLink")],1)]),e._v(" "),t("ul",[t("li",[t("p",[t("strong",[e._v("USB")])]),e._v(" "),t("ul",[t("li",[t("code",[e._v("device-id")])]),e._v(" "),t("li",[t("code",[e._v("device_type")])]),e._v(" "),t("li",[t("code",[e._v("device_type")])])])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("IMEI")])]),e._v(" "),t("ul",[t("li",[t("code",[e._v("device-id")])]),e._v(" "),t("li",[t("code",[e._v("vendor-id")])])])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("WIFI")])]),e._v(" "),t("ul",[t("li",[t("code",[e._v("name")])]),e._v(" "),t("li",[t("code",[e._v("compatible")])])])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("LAN")])]),e._v(" "),t("ul",[t("li",[t("code",[e._v("device-id")])]),e._v(" "),t("li",[t("code",[e._v("compatible")])]),e._v(" "),t("li",[t("code",[e._v("vendor-id")])])])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("XHCI")])]),e._v(" "),t("ul",[t("li",[t("code",[e._v("device-id")])]),e._v(" "),t("li",[t("code",[e._v("device_type: UHCI")])]),e._v(" "),t("li",[t("code",[e._v("device_type: OHCI")])])])])]),e._v(" "),t("p",[e._v("device_type: EHCI")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("device-id")])]),e._v(" "),t("li",[t("code",[e._v("AAPL,current-available")])]),e._v(" "),t("li",[t("code",[e._v("AAPL,current-extra")])]),e._v(" "),t("li",[t("code",[e._v("AAPL,current-available")])]),e._v(" "),t("li",[t("code",[e._v("AAPL,current-extra")])]),e._v(" "),t("li",[t("code",[e._v("AAPL,current-in-sleep")])]),e._v(" "),t("li",[t("code",[e._v("built-in")])])]),e._v(" "),t("p",[e._v("device_type: XHCI")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("device-id")])]),e._v(" "),t("li",[t("code",[e._v("AAPL,current-available")])]),e._v(" "),t("li",[t("code",[e._v("AAPL,current-extra")])]),e._v(" "),t("li",[t("code",[e._v("AAPL,current-available")])]),e._v(" "),t("li",[t("code",[e._v("AAPL,current-in-sleep")])]),e._v(" "),t("li",[t("code",[e._v("built-in")])])]),e._v(" "),t("p",[t("strong",[e._v("ForceHPET")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("UEFI -> Quirks -> ActivateHpetSupport")])])]),e._v(" "),t("h1",{attrs:{id:"disable-drivers"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#disable-drivers"}},[e._v("#")]),e._v(" Disable Drivers")]),e._v(" "),t("p",[e._v("Just don't add your drivers to "),t("code",[e._v("UEFI -> Drivers")]),e._v(", alternatively add "),t("code",[e._v("#")]),e._v(" in-front of the driver in your config.plist for OpenCore to skip it.")]),e._v(" "),t("h1",{attrs:{id:"gui"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gui"}},[e._v("#")]),e._v(" Gui")]),e._v(" "),t("h1",{attrs:{id:"graphics"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#graphics"}},[e._v("#")]),e._v(" Graphics")]),e._v(" "),t("ul",[t("li",[e._v("Note: PciRoot... should be replaced with")])]),e._v(" "),t("p",[t("strong",[e._v("InjectIntel")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://dortania.github.io/OpenCore-Post-Install/gpu-patching/",target:"_blank",rel:"noopener noreferrer"}},[e._v("GMA Patching"),t("OutboundLink")],1)])]),e._v(" "),t("p",[t("strong",[e._v("InjectAti")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("DeviceProperties -> Add -> PciRoot... -> device-id")]),e._v(" "),t("ul",[t("li",[e._v("ie: "),t("code",[e._v("<B0670000>")]),e._v(" for the R9 390X")])])]),e._v(" "),t("li",[t("code",[e._v("DeviceProperties -> Add -> PciRoot... -> @0,connector-type")]),e._v(" "),t("ul",[t("li",[e._v("You may need to add additional Connectors (ie. @1,connector-type, @2,connector-type) for the amount of ports you have. See here for the list of connector types:")])])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("LVDS                    <02 00 00 00>\nDVI (Dual Link)         <04 00 00 00>\nDVI (Single Link)       <00 02 00 00>\nVGA                     <10 00 00 00>\nS-Video                 <80 00 00 00>\nDP                      <00 04 00 00>\nHDMI                    <00 08 00 00>\nDUMMY                   <01 00 00 00>\n")])])]),t("p",[t("strong",[e._v("InjectNVIDIA")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://dortania.github.io/OpenCore-Post-Install/gpu-patching/",target:"_blank",rel:"noopener noreferrer"}},[e._v("NVIDIA Patching"),t("OutboundLink")],1)])]),e._v(" "),t("p",[t("strong",[e._v("FakeIntel")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("DeviceProperties -> Add -> PciRoot(0x0)/Pci(0x2,0x0) -> device-id")]),e._v(" "),t("ul",[t("li",[e._v("ie. "),t("code",[e._v("66010003")]),e._v(" for the HD 4000")])])]),e._v(" "),t("li",[t("code",[e._v("DeviceProperties -> Add -> PciRoot(0x0)/Pci(0x2,0x0) -> vendor-id -> <86800000>")])])]),e._v(" "),t("p",[t("strong",[e._v("FakeAti")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("DeviceProperties -> Add -> PciRoot... -> device-id")]),e._v(" "),t("ul",[t("li",[e._v("ie: "),t("code",[e._v("<B0670000>")]),e._v(" for the R9 390X")])])]),e._v(" "),t("li",[t("code",[e._v("DeviceProperties -> Add -> PciRoot... -> ATY,DeviceID")]),e._v(" "),t("ul",[t("li",[e._v("ie: "),t("code",[e._v("<B067>")]),e._v(" for the R9 390X")])])]),e._v(" "),t("li",[t("code",[e._v("DeviceProperties -> Add -> PciRoot... -> @0,compatible")]),e._v(" "),t("ul",[t("li",[e._v("ie. "),t("code",[e._v("ATY,Elodea")]),e._v(" for HD 6970M")])])]),e._v(" "),t("li",[t("code",[e._v("DeviceProperties -> Add -> PciRoot... -> vendor-id-> <02100000>")])]),e._v(" "),t("li",[t("code",[e._v("DeviceProperties -> Add -> PciRoot... -> ATY,VendorID -> <0210>")])])]),e._v(" "),t("p",[t("strong",[e._v("Note")]),e._v(": See here on making an SSDT for GPU Spoofing, DeviceProperties injection via OpenCore seems to fail sometimes when trying to spoof a GPU: "),t("a",{attrs:{href:"https://dortania.github.io/Getting-Started-With-ACPI/Universal/spoof.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Renaming GPUs"),t("OutboundLink")],1),e._v("\nFor others like InjectAti, see the "),t("a",{attrs:{href:"https://github.com/acidanthera/WhateverGreen/blob/master/Manual/Sample.dsl",target:"_blank",rel:"noopener noreferrer"}},[e._v("Sample.dsl"),t("OutboundLink")],1),e._v(" in the WhateverGreen docs")]),e._v(" "),t("p",[t("strong",[e._v("Custom EDID")])]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/acidanthera/WhateverGreen/blob/master/Manual/FAQ.IntelHD.en.md#edid",target:"_blank",rel:"noopener noreferrer"}},[e._v("WhateverGreen's EDID docs"),t("OutboundLink")],1)])]),e._v(" "),t("p",[t("strong",[e._v("Dual Link")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("DeviceProperties -> Add -> PciRoot... -> AAPL00,DualLink")]),e._v(" "),t("ul",[t("li",[e._v("1 -> "),t("code",[e._v("<01000000>")])]),e._v(" "),t("li",[e._v("0 -> "),t("code",[e._v("<00000000>")])])])])]),e._v(" "),t("p",[t("strong",[e._v("NVCAP")])]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://dortania.github.io/OpenCore-Post-Install/gpu-patching/",target:"_blank",rel:"noopener noreferrer"}},[e._v("NVIDIA Patching"),t("OutboundLink")],1)])]),e._v(" "),t("p",[t("strong",[e._v("display-cfg")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("DeviceProperties -> Add -> PciRoot... -> @0,display-cfg")])]),e._v(" "),t("li",[e._v("See fassl's post on the matter: "),t("a",{attrs:{href:"https://www.insanelymac.com/forum/topic/215236-nvidia-injection/",target:"_blank",rel:"noopener noreferrer"}},[e._v("NVIDIA injection"),t("OutboundLink")],1)])]),e._v(" "),t("p",[t("strong",[e._v("LoadVBios")]),e._v(":")]),e._v(" "),t("ul",[t("li",[e._v("See "),t("a",{attrs:{href:"https://github.com/acidanthera/WhateverGreen/blob/master/Manual/Sample.dsl",target:"_blank",rel:"noopener noreferrer"}},[e._v("sample.dsl"),t("OutboundLink")],1),e._v(" for more info on custom VBIOS injection")])]),e._v(" "),t("p",[t("strong",[e._v("PatchVBios")]),e._v(": See LoadVBIOS")]),e._v(" "),t("p",[t("strong",[e._v("NVIDIAGeneric")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("DeviceProperties -> Add -> PciRoot... -> model | string | Add the GPU name")])])]),e._v(" "),t("p",[t("strong",[e._v("NVIDIASingle")]),e._v(": See "),t("a",{attrs:{href:"https://dortania.github.io/OpenCore-Post-Install/",target:"_blank",rel:"noopener noreferrer"}},[e._v("disabling unsupported GPUs"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[e._v("NVIDIANoEFI")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("DeviceProperties -> Add -> PciRoot... -> NVDA,noEFI | Boolean | True")])]),e._v(" "),t("li",[e._v("See FredWst' comment for more info: "),t("a",{attrs:{href:"https://www.insanelymac.com/forum/topic/306156-clover-problems-and-solutions/?do=findComment&comment=2443062",target:"_blank",rel:"noopener noreferrer"}},[e._v("GT 640 scramble"),t("OutboundLink")],1)])]),e._v(" "),t("p",[t("strong",[e._v("ig-platform-id")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("DeviceProperties -> Add -> PciRoot(0x0)/Pci(0x2,0x0) -> APPL,ig-platform-id")])])]),e._v(" "),t("p",[t("strong",[e._v("BootDisplay")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("DeviceProperties -> Add -> PciRoot... -> @0,AAPL,boot-display")])])]),e._v(" "),t("p",[t("strong",[e._v("RadeonDeInit")]),e._v(":")]),e._v(" "),t("p",[e._v("In most cases it is advisable to use WhateverGreen, which handles this automatically. This SSDT is not needed if WhateverGreen is used.")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/dortania/OpenCore-Install-Guide/blob/master/extra-files/Radeon-DeInit-SSDT.dsl",target:"_blank",rel:"noopener noreferrer"}},[e._v("Radeon-DeInit-SSDT"),t("OutboundLink")],1),e._v(" "),t("ul",[t("li",[e._v("Do note that this is meant for GFX0, adjust for your system")])])])]),e._v(" "),t("h1",{attrs:{id:"kernel-and-kext-patches"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kernel-and-kext-patches"}},[e._v("#")]),e._v(" Kernel and Kext Patches")]),e._v(" "),t("p",[t("strong",[e._v("KernelPm")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Kernel -> Quirks -> AppleXcpmCfgLock -> YES")])]),e._v(" "),t("li",[e._v("Note that Clover will auto-apply this patch without setting it if the MSR E2 was locked, so you may actually need AppleXcpmCfgLock even if Clover didn't")])]),e._v(" "),t("p",[t("strong",[e._v("AppleIntelCPUPM")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Kernel -> Quirks -> AppleCpuPmCfgLock -> YES")])])]),e._v(" "),t("p",[t("strong",[e._v("DellSMBIOSPatch")]),e._v(":")]),e._v(" "),t("p",[e._v("An odd quirk for Dell systems running APTIO V")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Kernel -> Quirks -> CustomSMBIOSGuid -> YES")])]),e._v(" "),t("li",[t("code",[e._v("PlatformInfo -> UpdateSMBIOSMode -> Custom")])])]),e._v(" "),t("p",[t("strong",[e._v("KextsToPatch")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Kernel -> Patch")])]),e._v(" "),t("li",[e._v("See "),t("RouterLink",{attrs:{to:"/clover-conversion/clover-patch.html"}},[e._v("Common Kernel and Kext patch conversions")]),e._v(" for common patch conversions")],1)]),e._v(" "),t("p",[t("strong",[e._v("KernelToPatch")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Kernel -> Patch")])]),e._v(" "),t("li",[e._v("See "),t("RouterLink",{attrs:{to:"/clover-conversion/clover-patch.html"}},[e._v("Common Kernel and Kext patch conversions")]),e._v(" for common patch conversions")],1)]),e._v(" "),t("p",[t("strong",[e._v("ForceKextsToLoad")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Kernel -> Force")])])]),e._v(" "),t("p",[t("strong",[e._v("Kernel LAPIC")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Kernel -> Quirks -> LapicKernelPanic -> YES")])])]),e._v(" "),t("p",[t("strong",[e._v("KernelXCPM")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Kernel -> Quirks -> AppleXcpmExtraMsrs -> YES")])])]),e._v(" "),t("p",[e._v("For an extensive list of patches, please compare "),t("a",{attrs:{href:"https://github.com/acidanthera/OpenCorePkg/blob/master/Library/OcAppleKernelLib/CommonPatches.c",target:"_blank",rel:"noopener noreferrer"}},[e._v("OpenCore's "),t("code",[e._v("CommonPatches.c")]),t("OutboundLink")],1),e._v(" with "),t("a",{attrs:{href:"https://github.com/CloverHackyColor/CloverBootloader/blob/master/rEFIt_UEFI/Platform/kernel_patcher.cpp",target:"_blank",rel:"noopener noreferrer"}},[e._v("Clover's kernel_patcher.c"),t("OutboundLink")],1),e._v(". Some patches are not transferred over so if you're having issues this is the section to check, example is converting the "),t("a",{attrs:{href:"https://github.com/CloverHackyColor/CloverBootloader/tree/1a02f530db91fdfa6880295b6a8b3f096c29e7cc/rEFIt_UEFI/Platform/kernel_patcher.cpp#L1617-L1719",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("KernelIvyBridgeXCPM()")]),t("OutboundLink")],1),e._v(" to OpenCore:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Base: _xcpm_bootstrap\nComment: _xcpm_bootstrap (Ivy Bridge) 10.15\nCount: 1\nEnabled: YES\nFind: 8D43C43C22\nIdentifier: kernel\nLimit: 0\nMask: FFFF00FFFF\nMinKernel: 19.\nMaxKernel: 19.99.99\nReplace: 8D43C63C22\nReplaceMask: 0000FF0000\nSkip: 0\n")])])]),t("p",[t("a",{attrs:{href:"https://github.com/khronokernel/OpenCore-Vanilla-Desktop-Guide/issues/32",target:"_blank",rel:"noopener noreferrer"}},[e._v("Source"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("For Low end Haswell+ like Celerons, please see here for recommended patches: "),t("a",{attrs:{href:"https://github.com/acidanthera/bugtracker/issues/365",target:"_blank",rel:"noopener noreferrer"}},[e._v("Bugtracker Issues 365"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("strong",[e._v("USB Port Limit Patches")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Kernel -> Quirks -> XhciPortLimit -> YES")])])]),e._v(" "),t("p",[t("strong",[e._v("External Icons Patch")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Kernel -> Quirks -> ExternalDiskIcons -> YES")])]),e._v(" "),t("li",[e._v("Used for when you internal disk are seen as external on macOS")])]),e._v(" "),t("p",[t("strong",[e._v("AppleRTC")])]),e._v(" "),t("p",[e._v("Issue with AppleRTC, quite a simple fix:")]),e._v(" "),t("ul",[t("li",[e._v("config.plist -> Kernel -> Quirks -> DisableRtcChecksum -> true")])]),e._v(" "),t("p",[e._v("For some versions of MacOS (e.g. Catalina), boot.efi may write to the RTC. To prevent this, the below needs to be added as well:")]),e._v(" "),t("ul",[t("li",[e._v("config.plist -> NVRAM -> Add -> 4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102:rtc-blacklist  = "),t("code",[e._v("<58 59>")])])]),e._v(" "),t("p",[t("strong",[e._v("Note")]),e._v(": If you still have issues, you'll need to use "),t("a",{attrs:{href:"https://github.com/acidanthera/RTCMemoryFixup/releases",target:"_blank",rel:"noopener noreferrer"}},[e._v("RTCMemoryFixup"),t("OutboundLink")],1),e._v(" and exclude ranges. See "),t("a",{attrs:{href:"https://github.com/acidanthera/bugtracker/issues/788#issuecomment-604608329",target:"_blank",rel:"noopener noreferrer"}},[e._v("here for more info"),t("OutboundLink")],1),e._v(", and "),t("a",{attrs:{href:"https://dortania.github.io/OpenCore-Post-Install/misc/rtc.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),t("OutboundLink")],1),e._v(" for a guide.")]),e._v(" "),t("p",[t("strong",[e._v("FakeCPUID")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("Kernel -> Emulate")]),e._v(":\n"),t("ul",[t("li",[t("code",[e._v("Cpuid1Mask")]),e._v(": "),t("code",[e._v("<Clover_FCPUID_Extended_to_4_bytes_Swapped_Bytes> | 00 00 00 00 | 00 00 00 00 | 00 00 00 00")]),e._v(" "),t("ul",[t("li",[e._v("ex("),t("code",[e._v("0x0306A9")]),e._v("): "),t("code",[e._v("A9060300 00000000 00000000 00000000")])])])]),e._v(" "),t("li",[t("code",[e._v("Cpuid1Data")]),e._v("(Swap "),t("code",[e._v("00")]),e._v(" for "),t("code",[e._v("FF")]),e._v(" if needing to swap with a longer value)\n"),t("ul",[t("li",[e._v("ex: "),t("code",[e._v("FFFFFFFF 00000000 00000000 00000000")])])])])])])]),e._v(" "),t("p",[e._v("Note: Finding CPUID's for Intel can be a bit harder than looking at Intel ARK, easiest way to find it is via Microsoft's "),t("a",{attrs:{href:"https://support.microsoft.com/en-ca/help/4093836/summary-of-intel-microcode-updates",target:"_blank",rel:"noopener noreferrer"}},[e._v("Intel microcode update notes"),t("OutboundLink")],1)]),e._v(" "),t("h1",{attrs:{id:"rt-variables"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rt-variables"}},[e._v("#")]),e._v(" Rt Variables")]),e._v(" "),t("p",[t("strong",[e._v("ROM")]),e._v(":")]),e._v(" "),t("ul",[t("li",[e._v("No direct translation for "),t("code",[e._v("UseMacAddr0")]),e._v(" as you need to provide your hardware ROM, can be found in "),t("code",[e._v("System Preferences -> Network -> Advanced -> Hardware")])]),e._v(" "),t("li",[e._v("Also verify your En0 is still built-in when running OpenCore, this can break iMessage and iCloud when there's no "),t("code",[e._v("built-in")]),e._v(" property.")])]),e._v(" "),t("p",[t("strong",[e._v("MLB")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("PlatformInfo -> Generic -> MLB")])])]),e._v(" "),t("p",[t("strong",[e._v("BooterConfig")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("UEFI -> Quirks -> UIScale | Integer |")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("1")]),e._v(" —> 1x scaling, corresponds to normal displays.")]),e._v(" "),t("li",[t("code",[e._v("2")]),e._v(" —> 2x scaling, corresponds to HiDPI displays.")]),e._v(" "),t("li",[t("code",[e._v("-1")]),e._v(" —> leaves the current variable unchanged.")]),e._v(" "),t("li",[t("code",[e._v("0")]),e._v(" —> automatically chooses scaling based on the current resolution.")])])])]),e._v(" "),t("p",[t("strong",[e._v("CsrActiveConfig")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("p",[t("code",[e._v("NVRAM -> Add -> 7C436110-AB2A-4BBB-A880-FE41995C9F82 -> csr-active-config")]),e._v(":")]),e._v(" "),t("ul",[t("li",[e._v("0x0: "),t("code",[e._v("00000000")])]),e._v(" "),t("li",[e._v("0x3: "),t("code",[e._v("03000000")])]),e._v(" "),t("li",[e._v("0x67: "),t("code",[e._v("67000000")])]),e._v(" "),t("li",[e._v("0x3E7: "),t("code",[e._v("E7030000")])])])])]),e._v(" "),t("h1",{attrs:{id:"smbios"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#smbios"}},[e._v("#")]),e._v(" SMBIOS")]),e._v(" "),t("p",[t("strong",[e._v("Product Name")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("PlatformInfo -> Generic -> SystemProductName")])])]),e._v(" "),t("p",[t("strong",[e._v("Serial Number")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("PlatformInfo -> Generic -> SystemSerialNumber")])])]),e._v(" "),t("p",[t("strong",[e._v("Board Serial Number")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("PlatformInfo -> Generic -> MLB")])])]),e._v(" "),t("p",[t("strong",[e._v("SmUUID")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("PlatformInfo -> Generic -> SystemUUID")])])]),e._v(" "),t("p",[t("strong",[e._v("Memory")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("PlatformInfo -> CustomMemory -> True")])]),e._v(" "),t("li",[t("code",[e._v("PlatformInfo -> Memory")]),e._v(" "),t("ul",[t("li",[e._v("See "),t("a",{attrs:{href:"https://github.com/acidanthera/OpenCorePkg/blob/master/Docs/Configuration.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Configuration.pdf"),t("OutboundLink")],1),e._v(" for more info")])])])]),e._v(" "),t("p",[t("strong",[e._v("Slots AAPL Injection")]),e._v(":")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("DeviceProperties -> Add -> PciRoot... -> APPL,slot-name | string | Add slot")])])]),e._v(" "),t("h1",{attrs:{id:"system-parameters"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#system-parameters"}},[e._v("#")]),e._v(" System Parameters")]),e._v(" "),t("p",[t("strong",[e._v("CustomUUID")]),e._v(":")]),e._v(" "),t("ul",[t("li",[e._v("Heavily deprecated and not recommended even on Clover, no equivalent on OpenCore")]),e._v(" "),t("li",[e._v("More info on why: "),t("a",{attrs:{href:"https://github.com/acidanthera/bugtracker/issues/711",target:"_blank",rel:"noopener noreferrer"}},[e._v("Hardware UUID injection for OpenCore #711"),t("OutboundLink")],1)])]),e._v(" "),t("p",[t("strong",[e._v("InjectSystemID")]),e._v(":")]),e._v(" "),t("ul",[t("li",[e._v("Also legacy as it's used for replicating Chameleon user's UUIDs")])]),e._v(" "),t("p",[t("strong",[e._v("BacklightLevel")]),e._v(":")]),e._v(" "),t("ul",[t("li",[e._v("Property set in NVRAM")]),e._v(" "),t("li",[t("code",[e._v("NVRAM -> Add -> 7C436110-AB2A-4BBB-A880-FE41995C9F82 -> backlight-level | Data | <Insert value>")]),e._v(" "),t("ul",[t("li",[e._v("0x0101 -> "),t("code",[e._v("<0101>")])])])])]),e._v(" "),t("p",[t("strong",[e._v("InjectKexts")]),e._v(":")]),e._v(" "),t("ul",[t("li",[e._v("No equivalent but you really have no excuse to keep FakeSMC inside macOS")])]),e._v(" "),t("p",[t("strong",[e._v("NoCaches")]),e._v(":")]),e._v(" "),t("ul",[t("li",[e._v("This only works up to 10.7 on Clover, and OpenCore requires an OS that supports a prelinked(10.7) so there can't be an equivalent")])]),e._v(" "),t("p",[t("strong",[e._v("ExposeSysVariables")]),e._v(":")]),e._v(" "),t("ul",[t("li",[e._v("Just add your SMBIOS properties under "),t("code",[e._v("PlatformInfo")])]),e._v(" "),t("li",[e._v("Confusing quirk tbh, it's not even mentioned in more recent versions of the Clover docs on AppleLife")])]),e._v(" "),t("p",[t("strong",[e._v("NVIDIAWeb")]),e._v(":")]),e._v(" "),t("ul",[t("li",[e._v("What this does is apply "),t("code",[e._v("sudo nvram nvda_drv=1")]),e._v(" on every boot. To get a similar effect you can find it under the following path:")]),e._v(" "),t("li",[t("code",[e._v("NVRAM -> Add -> 7C436110-AB2A-4BBB-A880-FE41995C9F82 -> nvda_drv: <31>")])])]),e._v(" "),t("h1",{attrs:{id:"status"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#status"}},[e._v("#")]),e._v(" Status")]),e._v(" "),t("p",[t("strong",[e._v("Section finished 100%")]),e._v(":")]),e._v(" "),t("ul",[t("li",[e._v("Boot Graphics")]),e._v(" "),t("li",[e._v("Disable Drivers")]),e._v(" "),t("li",[e._v("KernelAndKextPatches")]),e._v(" "),t("li",[e._v("RTVariables")]),e._v(" "),t("li",[e._v("SMBIOS")]),e._v(" "),t("li",[e._v("SystemParameters")])]),e._v(" "),t("p",[t("strong",[e._v("Section mostly finished")]),e._v(":")]),e._v(" "),t("ul",[t("li",[e._v("Acpi")]),e._v(" "),t("li",[e._v("Boot")]),e._v(" "),t("li",[e._v("CPU")]),e._v(" "),t("li",[e._v("Device")])]),e._v(" "),t("p",[t("strong",[e._v("Section missing")]),e._v(":")]),e._v(" "),t("ul",[t("li",[e._v("GUI")])])])}),[],!1,null,null,null);t.default=n.exports}}]);