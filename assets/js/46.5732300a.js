(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{245:function(t,e,i){t.exports=i.p+"assets/img/misc.60f4894d.png"},246:function(t,e,i){t.exports=i.p+"assets/img/nvram.8e75ddde.png"},248:function(t,e,i){t.exports=i.p+"assets/img/aptio-iv-booter.955f215d.png"},272:function(t,e,i){t.exports=i.p+"assets/img/kernel-sandy-usb.8c9e4d73.png"},273:function(t,e,i){t.exports=i.p+"assets/img/smbios.629e7f78.png"},292:function(t,e,i){t.exports=i.p+"assets/img/uefi-sandy-desktop.02008210.png"},315:function(t,e,i){t.exports=i.p+"assets/img/acpi.bf05262b.png"},407:function(t,e,i){t.exports=i.p+"assets/img/desktop-sandy-dgpu.e8af4cf3.png"},600:function(t,e,i){"use strict";i.r(e);var a=i(10),l=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"desktop-sandy-bridge"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#desktop-sandy-bridge"}},[t._v("#")]),t._v(" Desktop Sandy Bridge")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("Support")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Version")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Initial macOS Support")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("OS X 10.6.7, Snow Leopard")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Last Supported OS")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("macOS 12 Monterey")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Note 1")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("For Ventura information, see "),e("RouterLink",{attrs:{to:"/extras/ventura.html#dropped-cpu-support"}},[t._v("macOS 13 Ventura")])],1)]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Note 2")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Sandy Bridge's iGPU is only officially supported up-to macOS 10.13")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Note 3")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Most Sandy bridge boards do not support UEFI")])])])]),t._v(" "),e("h2",{attrs:{id:"starting-point"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#starting-point"}},[t._v("#")]),t._v(" Starting Point")]),t._v(" "),e("p",[t._v("So making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("All properties must be defined")]),t._v(", there are no default OpenCore will fall back on so "),e("strong",[t._v("do not delete sections unless told explicitly so")]),t._v(". If the guide doesn't mention the option, leave it at default.")]),t._v(" "),e("li",[e("strong",[t._v("The Sample.plist cannot be used As-Is")]),t._v(", you must configure it to your system")]),t._v(" "),e("li",[e("strong",[t._v("DO NOT USE CONFIGURATORS")]),t._v(", these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!")])]),t._v(" "),e("p",[t._v("Now with all that, a quick reminder of the tools we need")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://github.com/corpnewt/ProperTree",target:"_blank",rel:"noopener noreferrer"}},[t._v("ProperTree"),e("OutboundLink")],1),t._v(" "),e("ul",[e("li",[t._v("Universal plist editor")])])]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/corpnewt/GenSMBIOS",target:"_blank",rel:"noopener noreferrer"}},[t._v("GenSMBIOS"),e("OutboundLink")],1),t._v(" "),e("ul",[e("li",[t._v("For generating our SMBIOS data")])])]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/acidanthera/OpenCorePkg/releases",target:"_blank",rel:"noopener noreferrer"}},[t._v("Sample/config.plist"),e("OutboundLink")],1),t._v(" "),e("ul",[e("li",[t._v("See previous section on how to obtain: "),e("RouterLink",{attrs:{to:"/config.plist/"}},[t._v("config.plist Setup")])],1)])])]),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),e("p",[t._v("Read this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.")])]),t._v(" "),e("h2",{attrs:{id:"acpi"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#acpi"}},[t._v("#")]),t._v(" ACPI")]),t._v(" "),e("p",[e("img",{attrs:{src:i(315),alt:"ACPI"}})]),t._v(" "),e("h3",{attrs:{id:"add"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#add"}},[t._v("#")]),t._v(" Add")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Info")]),t._v(" "),e("p",[t._v("This is where you'll add SSDTs for your system, these are very important to "),e("strong",[t._v("booting macOS")]),t._v(" and have many uses like "),e("a",{attrs:{href:"https://dortania.github.io/OpenCore-Post-Install/usb/",target:"_blank",rel:"noopener noreferrer"}},[t._v("USB maps"),e("OutboundLink")],1),t._v(", "),e("RouterLink",{attrs:{to:"/extras/spoof.html"}},[t._v("disabling unsupported GPUs")]),t._v(" and such. And with our system, "),e("strong",[t._v("it's even required to boot")]),t._v(". Guide on making them found here: "),e("a",{attrs:{href:"https://dortania.github.io/Getting-Started-With-ACPI/",target:"_blank",rel:"noopener noreferrer"}},[e("strong",[t._v("Getting started with ACPI")]),e("OutboundLink")],1)],1),t._v(" "),e("p",[t._v("For us we'll need a couple of SSDTs to bring back functionality that Clover provided:")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("Required SSDTs")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Description")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[e("a",{attrs:{href:"https://github.com/Piker-Alpha/ssdtPRGen.sh",target:"_blank",rel:"noopener noreferrer"}},[t._v("SSDT-PM"),e("OutboundLink")],1)])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Needed for proper CPU power management, you will need to run Pike's ssdtPRGen.sh script to generate this file. This will be run in "),e("a",{attrs:{href:"https://dortania.github.io/OpenCore-Post-Install/",target:"_blank",rel:"noopener noreferrer"}},[t._v("post install"),e("OutboundLink")],1),t._v(".")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[e("a",{attrs:{href:"https://dortania.github.io/Getting-Started-With-ACPI/",target:"_blank",rel:"noopener noreferrer"}},[t._v("SSDT-EC"),e("OutboundLink")],1)])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Fixes the embedded controller, see "),e("a",{attrs:{href:"https://dortania.github.io/Getting-Started-With-ACPI/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Getting Started With ACPI Guide"),e("OutboundLink")],1),t._v(" for more details.")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[e("a",{attrs:{href:"https://dortania.github.io/Getting-Started-With-ACPI/",target:"_blank",rel:"noopener noreferrer"}},[t._v("SSDT-IMEI"),e("OutboundLink")],1)])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Needed to add a missing IMEI device on Sandy Bridge CPU with 7 series motherboards")])])])]),t._v(" "),e("p",[t._v("Note that you "),e("strong",[t._v("should not")]),t._v(" add your generated "),e("code",[t._v("DSDT.aml")]),t._v(" here, it is already in your firmware. So if present, remove the entry for it in your "),e("code",[t._v("config.plist")]),t._v(" and under EFI/OC/ACPI.")]),t._v(" "),e("p",[t._v("For those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the "),e("a",{attrs:{href:"https://dortania.github.io/Getting-Started-With-ACPI/",target:"_blank",rel:"noopener noreferrer"}},[e("strong",[t._v("Getting started with ACPI")]),e("OutboundLink")],1),t._v(" "),e("strong",[t._v("page.")]),t._v(" Compiled SSDTs have a "),e("strong",[t._v(".aml")]),t._v(" extension(Assembled) and will go into the "),e("code",[t._v("EFI/OC/ACPI")]),t._v(" folder and "),e("strong",[t._v("must")]),t._v(" be specified in your config under "),e("code",[t._v("ACPI -> Add")]),t._v(" as well.")])]),t._v(" "),e("h3",{attrs:{id:"delete"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#delete"}},[t._v("#")]),t._v(" Delete")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Info")]),t._v(" "),e("p",[t._v("This blocks certain ACPI tables from loading, for us we really care about this. Main reason is that Apple's XCPM does not support SandyBridge all too well and can cause AppleIntelCPUPowerManagement panics on boot. To avoid this we make our own PM SSDT in "),e("a",{attrs:{href:"https://dortania.github.io/OpenCore-Post-Install/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Post-Install"),e("OutboundLink")],1),t._v(" and drop the old tables(Note that this is only temporary until we've made our SSDT-PM, we'll re-enable these tables later):")]),t._v(" "),e("p",[t._v("Removing CpuPm:")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("Key")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Type")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Value")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("All")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Boolean")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("YES")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Comment")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("String")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Delete CpuPm")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Enabled")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Boolean")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("YES")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("OemTableId")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Data")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("437075506d000000")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("TableLength")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Number")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("TableSignature")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Data")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("53534454")])])])])]),t._v(" "),e("p",[t._v("Removing Cpu0Ist:")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("Key")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Type")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Value")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("All")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Boolean")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("YES")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Comment")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("String")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Delete Cpu0Ist")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Enabled")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Boolean")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("YES")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("OemTableId")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Data")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("4370753049737400")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("TableLength")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Number")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("TableSignature")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Data")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("53534454")])])])])])]),t._v(" "),e("h3",{attrs:{id:"patch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#patch"}},[t._v("#")]),t._v(" Patch")]),t._v(" "),e("p",[t._v("This section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore")]),t._v(" "),e("h3",{attrs:{id:"quirks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#quirks"}},[t._v("#")]),t._v(" Quirks")]),t._v(" "),e("p",[t._v("Settings relating to ACPI, leave everything here as default as we have no use for these quirks.")]),t._v(" "),e("h2",{attrs:{id:"booter"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#booter"}},[t._v("#")]),t._v(" Booter")]),t._v(" "),e("p",[e("img",{attrs:{src:i(248),alt:"Booter"}})]),t._v(" "),e("p",[t._v("This section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi")]),t._v(" "),e("h3",{attrs:{id:"mmiowhitelist"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mmiowhitelist"}},[t._v("#")]),t._v(" MmioWhitelist")]),t._v(" "),e("p",[t._v("This section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with "),e("code",[t._v("DevirtualiseMmio")])]),t._v(" "),e("h3",{attrs:{id:"quirks-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#quirks-2"}},[t._v("#")]),t._v(" Quirks")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Info")]),t._v(" "),e("p",[t._v("Settings relating to boot.efi patching and firmware fixes, for us, we leave it as default")])]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("More in-depth Info")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("AvoidRuntimeDefrag")]),t._v(": YES\n"),e("ul",[e("li",[t._v("Fixes UEFI runtime services like date, time, NVRAM, power control, etc.")])])]),t._v(" "),e("li",[e("strong",[t._v("EnableSafeModeSlide")]),t._v(": YES\n"),e("ul",[e("li",[t._v("Enables slide variables to be used in safe mode, however this quirk is only applicable to UEFI platforms.")])])]),t._v(" "),e("li",[e("strong",[t._v("EnableWriteUnprotector")]),t._v(": YES\n"),e("ul",[e("li",[t._v("Needed to remove write protection from CR0 register.")])])]),t._v(" "),e("li",[e("strong",[t._v("ProvideCustomSlide")]),t._v(": YES\n"),e("ul",[e("li",[t._v("Used for Slide variable calculation. However the necessity of this quirk is determined by "),e("code",[t._v("OCABC: Only N/256 slide values are usable!")]),t._v(" message in the debug log. If the message "),e("code",[t._v("OCABC: All slides are usable! You can disable ProvideCustomSlide!")]),t._v(" is present in your log, you can disable "),e("code",[t._v("ProvideCustomSlide")]),t._v(".")])])]),t._v(" "),e("li",[e("strong",[t._v("SetupVirtualMap")]),t._v(": YES\n"),e("ul",[e("li",[t._v("Fixes SetVirtualAddresses calls to virtual addresses, required for Gigabyte boards to resolve early kernel panics")])])])])]),t._v(" "),e("h2",{attrs:{id:"deviceproperties"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#deviceproperties"}},[t._v("#")]),t._v(" DeviceProperties")]),t._v(" "),e("p",[e("img",{attrs:{src:i(407),alt:""}})]),t._v(" "),e("h3",{attrs:{id:"add-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#add-2"}},[t._v("#")]),t._v(" Add")]),t._v(" "),e("p",[t._v("Sets device properties from a map.")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("PciRoot(0x0)/Pci(0x2,0x0)")]),t._v(" "),e("p",[t._v("This section is set up via WhateverGreen's "),e("a",{attrs:{href:"https://github.com/acidanthera/WhateverGreen/blob/master/Manual/FAQ.IntelHD.en.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("Framebuffer Patching Guide"),e("OutboundLink")],1),t._v(" and is used for setting important iGPU properties.")]),t._v(" "),e("p",[t._v("The config.plist doesn't already have a section for this so you will have to create it manually.")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("AAPL,snb-platform-id")]),t._v(" is what macOS uses to determine how the iGPU drivers interact with our system, and the two values choose between are as follows:")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("AAPL,snb-platform-id")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Comment")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[e("code",[t._v("10000300")])])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Used when the Desktop iGPU is used to drive a display")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[e("code",[t._v("00000500")])])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Used when the Desktop iGPU is only used for computing tasks and doesn't drive a display")])])])]),t._v(" "),e("p",[t._v("We also have the issue of requiring a supported device-id, just like with the above table you'll want to match up to your hardware configuration:")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("device-id")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Comment")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[e("code",[t._v("26010000")])])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Used when the Desktop iGPU is used to drive a display")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[e("code",[t._v("02010000")])])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Used when the Desktop iGPU is only used for computing tasks and doesn't drive a display")])])])]),t._v(" "),e("p",[t._v("And finally, you should have something like this:")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("Key")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Type")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Value")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("AAPL,snb-platform-id")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Data")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("00000500")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("device-id")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Data")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("26010000")])])])])]),t._v(" "),e("p",[t._v("(This is an example for a desktop HD 3000 with a dGPU used as the output)")])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("PciRoot(0x0)/Pci(0x16,0x0)")]),t._v(" "),e("p",[t._v("This is needed if you're pairing an Sandy Bridge CPU with a 7 series motherboard(ie. B75, Q75, Z75, H77, Q77, Z77), specifically needed to spoof your IMEI device into being supported. Note this property is still required with or without SSDT-IMEI.")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("Key")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Type")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Value")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("device-id")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Data")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("3A1C0000")])])])])]),t._v(" "),e("p",[e("strong",[t._v("Note")]),t._v(": This is not needed if you have a 6 series motherboard(ie. H61, B65, Q65, P67, H67, Q67, Z68)")])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("PciRoot(0x0)/Pci(0x1b,0x0)")]),t._v(" "),e("p",[e("code",[t._v("layout-id")])]),t._v(" "),e("ul",[e("li",[t._v("Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. "),e("a",{attrs:{href:"https://github.com/acidanthera/AppleALC/wiki/Supported-codecs",target:"_blank",rel:"noopener noreferrer"}},[t._v("AppleALC Supported Codecs"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("li",[t._v("You can delete this property outright as it's unused for us at this time")])]),t._v(" "),e("p",[t._v("For us, we'll be using the boot-arg "),e("code",[t._v("alcid=xxx")]),t._v(" instead to accomplish this. "),e("code",[t._v("alcid")]),t._v(" will override all other layout-IDs present. More info on this is covered in the "),e("a",{attrs:{href:"https://dortania.github.io/OpenCore-Post-Install/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Post-Install Page"),e("OutboundLink")],1)])]),t._v(" "),e("h3",{attrs:{id:"delete-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#delete-2"}},[t._v("#")]),t._v(" Delete")]),t._v(" "),e("p",[t._v("Removes device properties from the map, for us we can ignore this")]),t._v(" "),e("h2",{attrs:{id:"kernel"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#kernel"}},[t._v("#")]),t._v(" Kernel")]),t._v(" "),e("p",[e("img",{attrs:{src:i(272),alt:"Kernel"}})]),t._v(" "),e("h3",{attrs:{id:"add-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#add-3"}},[t._v("#")]),t._v(" Add")]),t._v(" "),e("p",[t._v("Here's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:")]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("More in-depth Info")]),t._v(" "),e("p",[t._v("The main thing you need to keep in mind is:")]),t._v(" "),e("ul",[e("li",[t._v("Load order\n"),e("ul",[e("li",[t._v("Remember that any plugins should load "),e("em",[t._v("after")]),t._v(" its dependencies")]),t._v(" "),e("li",[t._v("This means kexts like Lilu "),e("strong",[t._v("must")]),t._v(" come before VirtualSMC, AppleALC, WhateverGreen, etc")])])])]),t._v(" "),e("p",[t._v("A reminder that "),e("a",{attrs:{href:"https://github.com/corpnewt/ProperTree",target:"_blank",rel:"noopener noreferrer"}},[t._v("ProperTree"),e("OutboundLink")],1),t._v(" users can run "),e("strong",[t._v("Cmd/Ctrl + Shift + R")]),t._v(" to add all their kexts in the correct order without manually typing each kext out.")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("Arch")]),t._v(" "),e("ul",[e("li",[t._v("Architectures supported by this kext")]),t._v(" "),e("li",[t._v("Currently supported values are "),e("code",[t._v("Any")]),t._v(", "),e("code",[t._v("i386")]),t._v(" (32-bit), and "),e("code",[t._v("x86_64")]),t._v(" (64-bit)")])])]),t._v(" "),e("li",[e("strong",[t._v("BundlePath")]),t._v(" "),e("ul",[e("li",[t._v("Name of the kext")]),t._v(" "),e("li",[t._v("ex: "),e("code",[t._v("Lilu.kext")])])])]),t._v(" "),e("li",[e("strong",[t._v("Enabled")]),t._v(" "),e("ul",[e("li",[t._v("Self-explanatory, either enables or disables the kext")])])]),t._v(" "),e("li",[e("strong",[t._v("ExecutablePath")]),t._v(" "),e("ul",[e("li",[t._v("Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting "),e("code",[t._v("Show Package Contents")]),t._v(". Generally, they'll be "),e("code",[t._v("Contents/MacOS/Kext")]),t._v(" but some have kexts hidden within under "),e("code",[t._v("Plugin")]),t._v(" folder. Do note that plist only kexts do not need this filled in.")]),t._v(" "),e("li",[t._v("ex: "),e("code",[t._v("Contents/MacOS/Lilu")])])])]),t._v(" "),e("li",[e("strong",[t._v("MinKernel")]),t._v(" "),e("ul",[e("li",[t._v("Lowest kernel version your kext will be injected into, see below table for possible values")]),t._v(" "),e("li",[t._v("ex. "),e("code",[t._v("12.00.00")]),t._v(" for OS X 10.8")])])]),t._v(" "),e("li",[e("strong",[t._v("MaxKernel")]),t._v(" "),e("ul",[e("li",[t._v("Highest kernel version your kext will be injected into, see below table for possible values")]),t._v(" "),e("li",[t._v("ex. "),e("code",[t._v("11.99.99")]),t._v(" for OS X 10.7")])])]),t._v(" "),e("li",[e("strong",[t._v("PlistPath")]),t._v(" "),e("ul",[e("li",[t._v("Path to the "),e("code",[t._v("info.plist")]),t._v(" hidden within the kext")]),t._v(" "),e("li",[t._v("ex: "),e("code",[t._v("Contents/Info.plist")])])])])]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("Kernel Support Table")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("OS X Version")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("MinKernel")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("MaxKernel")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("10.4")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("8.0.0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("8.99.99")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("10.5")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("9.0.0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("9.99.99")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("10.6")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("10.0.0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("10.99.99")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("10.7")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("11.0.0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("11.99.99")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("10.8")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("12.0.0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("12.99.99")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("10.9")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("13.0.0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("13.99.99")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("10.10")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("14.0.0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("14.99.99")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("10.11")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("15.0.0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("15.99.99")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("10.12")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("16.0.0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("16.99.99")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("10.13")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("17.0.0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("17.99.99")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("10.14")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("18.0.0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("18.99.99")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("10.15")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("19.0.0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("19.99.99")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("11")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("20.0.0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("20.99.99")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("12")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("21.0.0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("21.99.99")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("13")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("22.0.0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("22.99.99")])])])])])]),t._v(" "),e("h3",{attrs:{id:"emulate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#emulate"}},[t._v("#")]),t._v(" Emulate")]),t._v(" "),e("p",[t._v("Needed for spoofing unsupported CPUs like Pentiums and Celerons")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("Cpuid1Mask")]),t._v(": Leave this blank")]),t._v(" "),e("li",[e("strong",[t._v("Cpuid1Data")]),t._v(": Leave this blank")])]),t._v(" "),e("h3",{attrs:{id:"force"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#force"}},[t._v("#")]),t._v(" Force")]),t._v(" "),e("p",[t._v("Used for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).")]),t._v(" "),e("p",[t._v("For us, we can ignore.")]),t._v(" "),e("h3",{attrs:{id:"block"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#block"}},[t._v("#")]),t._v(" Block")]),t._v(" "),e("p",[t._v("Blocks certain kexts from loading. Not relevant for us.")]),t._v(" "),e("h3",{attrs:{id:"patch-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#patch-2"}},[t._v("#")]),t._v(" Patch")]),t._v(" "),e("p",[t._v("Patches both the kernel and kexts.")]),t._v(" "),e("h3",{attrs:{id:"quirks-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#quirks-3"}},[t._v("#")]),t._v(" Quirks")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Info")]),t._v(" "),e("p",[t._v("Settings relating to the kernel, for us we'll be enabling the following:")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("Quirk")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Enabled")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Comment")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("AppleCpuPmCfgLock")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("YES")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Not needed if "),e("code",[t._v("CFG-Lock")]),t._v(" is disabled in the BIOS")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("DisableIoMapper")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("YES")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Not needed if "),e("code",[t._v("VT-D")]),t._v(" is disabled in the BIOS")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("LapicKernelPanic")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("NO")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("HP Machines will require this quirk")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("PanicNoKextDump")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("YES")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("PowerTimeoutKernelPanic")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("YES")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("XhciPortLimit")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("YES")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("If your board does not have USB 3.0, you can disable"),e("br"),t._v("Disable if running macOS 11.3+")])])])])]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("More in-depth Info")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("AppleCpuPmCfgLock")]),t._v(": YES\n"),e("ul",[e("li",[t._v("Only needed when CFG-Lock can't be disabled in BIOS")]),t._v(" "),e("li",[t._v("Only applicable for Ivy Bridge and older\n"),e("ul",[e("li",[t._v("Note: Broadwell and older require this when running 10.10 or older")])])])])]),t._v(" "),e("li",[e("strong",[t._v("AppleXcpmCfgLock")]),t._v(": NO\n"),e("ul",[e("li",[t._v("Only needed when CFG-Lock can't be disabled in BIOS")]),t._v(" "),e("li",[t._v("Only applicable for Haswell and newer\n"),e("ul",[e("li",[t._v("Note: Ivy Bridge-E is also included as it's XCPM capable")])])])])]),t._v(" "),e("li",[e("strong",[t._v("CustomSMBIOSGuid")]),t._v(": NO\n"),e("ul",[e("li",[t._v("Performs GUID patching for UpdateSMBIOSMode set to "),e("code",[t._v("Custom")]),t._v(". Usually relevant for Dell laptops")]),t._v(" "),e("li",[t._v('Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into "non-Apple" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk')])])]),t._v(" "),e("li",[e("strong",[t._v("DisableIoMapper")]),t._v(": YES\n"),e("ul",[e("li",[t._v("Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to "),e("code",[t._v("dart=0")]),t._v(" as SIP can stay on in Catalina")])])]),t._v(" "),e("li",[e("strong",[t._v("DisableLinkeditJettison")]),t._v(": YES\n"),e("ul",[e("li",[t._v("Allows Lilu and others to have more reliable performance without "),e("code",[t._v("keepsyms=1")])])])]),t._v(" "),e("li",[e("strong",[t._v("DisableRtcChecksum")]),t._v(": NO\n"),e("ul",[e("li",[t._v("Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown")])])]),t._v(" "),e("li",[e("strong",[t._v("ExtendBTFeatureFlags")]),t._v(" NO\n"),e("ul",[e("li",[t._v("Helpful for those having continuity issues with non-Apple/non-Fenvi cards")])])]),t._v(" "),e("li",[e("strong",[t._v("LapicKernelPanic")]),t._v(": NO\n"),e("ul",[e("li",[t._v("Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is "),e("code",[t._v("Kernel LAPIC")])])])]),t._v(" "),e("li",[e("strong",[t._v("LegacyCommpage")]),t._v(": NO\n"),e("ul",[e("li",[t._v("Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)")])])]),t._v(" "),e("li",[e("strong",[t._v("PanicNoKextDump")]),t._v(": YES\n"),e("ul",[e("li",[t._v("Allows for reading kernel panics logs when kernel panics occur")])])]),t._v(" "),e("li",[e("strong",[t._v("PowerTimeoutKernelPanic")]),t._v(": YES\n"),e("ul",[e("li",[t._v("Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.")])])]),t._v(" "),e("li",[e("strong",[t._v("SetApfsTrimTimeout")]),t._v(": "),e("code",[t._v("-1")]),t._v(" "),e("ul",[e("li",[t._v("Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.")])])]),t._v(" "),e("li",[e("strong",[t._v("XhciPortLimit")]),t._v(": YES\n"),e("ul",[e("li",[t._v("This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a "),e("a",{attrs:{href:"https://dortania.github.io/OpenCore-Post-Install/usb/",target:"_blank",rel:"noopener noreferrer"}},[t._v("USB map"),e("OutboundLink")],1),t._v(" when possible.")]),t._v(" "),e("li",[t._v("With macOS 11.3+, "),e("a",{attrs:{href:"https://github.com/dortania/bugtracker/issues/162",target:"_blank",rel:"noopener noreferrer"}},[t._v("XhciPortLimit may not function as intended."),e("OutboundLink")],1),t._v(" We recommend users either disable this quirk and map before upgrading or "),e("a",{attrs:{href:"https://github.com/USBToolBox/tool",target:"_blank",rel:"noopener noreferrer"}},[t._v("map from Windows"),e("OutboundLink")],1),t._v(". You may also install macOS 11.2.3 or older.")])])])])]),t._v(" "),e("h3",{attrs:{id:"scheme"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#scheme"}},[t._v("#")]),t._v(" Scheme")]),t._v(" "),e("p",[t._v("Settings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:")]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("More in-depth Info")]),t._v(" "),e("ul",[e("li",[e("p",[e("strong",[t._v("FuzzyMatch")]),t._v(": True")]),t._v(" "),e("ul",[e("li",[t._v("Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("KernelArch")]),t._v(": x86_64")]),t._v(" "),e("ul",[e("li",[t._v("Set the kernel's arch type, you can choose between "),e("code",[t._v("Auto")]),t._v(", "),e("code",[t._v("i386")]),t._v(" (32-bit), and "),e("code",[t._v("x86_64")]),t._v(" (64-bit).")]),t._v(" "),e("li",[t._v("If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to "),e("code",[t._v("Auto")]),t._v(" and let macOS decide based on your SMBIOS. See below table for supported values:\n"),e("ul",[e("li",[t._v("10.4-10.5 — "),e("code",[t._v("x86_64")]),t._v(", "),e("code",[t._v("i386")]),t._v(" or "),e("code",[t._v("i386-user32")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("i386-user32")]),t._v(" refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)")]),t._v(" "),e("li",[e("code",[t._v("x86_64")]),t._v(" will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5")])])]),t._v(" "),e("li",[t._v("10.6 — "),e("code",[t._v("i386")]),t._v(", "),e("code",[t._v("i386-user32")]),t._v(", or "),e("code",[t._v("x86_64")])]),t._v(" "),e("li",[t._v("10.7 — "),e("code",[t._v("i386")]),t._v(" or "),e("code",[t._v("x86_64")])]),t._v(" "),e("li",[t._v("10.8 or newer — "),e("code",[t._v("x86_64")])])])])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("KernelCache")]),t._v(": Auto")]),t._v(" "),e("ul",[e("li",[t._v("Set kernel cache type, mainly useful for debugging and so we recommend "),e("code",[t._v("Auto")]),t._v(" for best support")])])])])]),t._v(" "),e("h2",{attrs:{id:"misc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#misc"}},[t._v("#")]),t._v(" Misc")]),t._v(" "),e("p",[e("img",{attrs:{src:i(245),alt:"Misc"}})]),t._v(" "),e("h3",{attrs:{id:"boot"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#boot"}},[t._v("#")]),t._v(" Boot")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Info")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("Quirk")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Enabled")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Comment")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("HideAuxiliary")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("YES")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Press space to show macOS recovery and other auxiliary entries")])])])])]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("More in-depth Info")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("HideAuxiliary")]),t._v(": YES\n"),e("ul",[e("li",[t._v("This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries")])])])])]),t._v(" "),e("h3",{attrs:{id:"debug"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#debug"}},[t._v("#")]),t._v(" Debug")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Info")]),t._v(" "),e("p",[t._v("Helpful for debugging OpenCore boot issues(We'll be changing everything "),e("em",[t._v("but")]),t._v(" "),e("code",[t._v("DisplayDelay")]),t._v("):")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("Quirk")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Enabled")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("AppleDebug")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("YES")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("ApplePanic")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("YES")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("DisableWatchDog")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("YES")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Target")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("67")])])])])]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("More in-depth Info")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("AppleDebug")]),t._v(": YES\n"),e("ul",[e("li",[t._v("Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer")])])]),t._v(" "),e("li",[e("strong",[t._v("ApplePanic")]),t._v(": YES\n"),e("ul",[e("li",[t._v("Attempts to log kernel panics to disk")])])]),t._v(" "),e("li",[e("strong",[t._v("DisableWatchDog")]),t._v(": YES\n"),e("ul",[e("li",[t._v("Disables the UEFI watchdog, can help with early boot issues")])])]),t._v(" "),e("li",[e("strong",[t._v("DisplayLevel")]),t._v(": "),e("code",[t._v("2147483650")]),t._v(" "),e("ul",[e("li",[t._v("Shows even more debug information, requires debug version of OpenCore")])])]),t._v(" "),e("li",[e("strong",[t._v("SysReport")]),t._v(": NO\n"),e("ul",[e("li",[t._v("Helpful for debugging such as dumping ACPI tables")]),t._v(" "),e("li",[t._v("Note that this is limited to DEBUG versions of OpenCore")])])]),t._v(" "),e("li",[e("strong",[t._v("Target")]),t._v(": "),e("code",[t._v("67")]),t._v(" "),e("ul",[e("li",[t._v("Shows more debug information, requires debug version of OpenCore")])])])]),t._v(" "),e("p",[t._v("These values are based of those calculated in "),e("RouterLink",{attrs:{to:"/troubleshooting/debug.html"}},[t._v("OpenCore debugging")])],1)]),t._v(" "),e("h3",{attrs:{id:"security"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#security"}},[t._v("#")]),t._v(" Security")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Info")]),t._v(" "),e("p",[t._v("Security is pretty self-explanatory, "),e("strong",[t._v("do not skip")]),t._v(". We'll be changing the following:")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("Quirk")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Enabled")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Comment")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("AllowSetDefault")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("YES")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("BlacklistAppleUpdate")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("YES")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("ScanPolicy")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("SecureBootModel")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Default")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Leave this as "),e("code",[t._v("Default")]),t._v(" for OpenCore to automatically set the correct value corresponding to your SMBIOS. The next page goes into more detail about this setting.")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Vault")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Optional")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive")])])])])]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("More in-depth Info")]),t._v(" "),e("ul",[e("li",[e("p",[e("strong",[t._v("AllowSetDefault")]),t._v(": YES")]),t._v(" "),e("ul",[e("li",[t._v("Allow "),e("code",[t._v("CTRL+Enter")]),t._v(" and "),e("code",[t._v("CTRL+Index")]),t._v(" to set default boot device in the picker")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("ApECID")]),t._v(": 0")]),t._v(" "),e("ul",[e("li",[t._v("Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("AuthRestart")]),t._v(": NO")]),t._v(" "),e("ul",[e("li",[t._v("Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("BlacklistAppleUpdate")]),t._v(": YES")]),t._v(" "),e("ul",[e("li",[t._v("Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses "),e("code",[t._v("run-efi-updater")]),t._v(" variable")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("DmgLoading")]),t._v(": Signed")]),t._v(" "),e("ul",[e("li",[t._v("Ensures only signed DMGs load")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("ExposeSensitiveData")]),t._v(": "),e("code",[t._v("6")])]),t._v(" "),e("ul",[e("li",[t._v("Shows more debug information, requires debug version of OpenCore")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("Vault")]),t._v(": "),e("code",[t._v("Optional")])]),t._v(" "),e("ul",[e("li",[t._v("We won't be dealing vaulting so we can ignore, "),e("strong",[t._v("you won't boot with this set to Secure")])]),t._v(" "),e("li",[t._v("This is a word, it is not optional to omit this setting. You will regret it if you don't set it to "),e("code",[t._v("Optional")]),t._v(", note that it is case-sensitive")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("ScanPolicy")]),t._v(": "),e("code",[t._v("0")])]),t._v(" "),e("ul",[e("li",[e("code",[t._v("0")]),t._v(" allows you to see all drives available, please refer to "),e("a",{attrs:{href:"https://dortania.github.io/OpenCore-Post-Install/universal/security.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Security"),e("OutboundLink")],1),t._v(" section for further details. "),e("strong",[t._v("Will not boot USB devices with this set to default")])])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("SecureBootModel")]),t._v(": Default")]),t._v(" "),e("ul",[e("li",[t._v("Controls Apple's secure boot functionality in macOS, please refer to "),e("a",{attrs:{href:"https://dortania.github.io/OpenCore-Post-Install/universal/security.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Security"),e("OutboundLink")],1),t._v(" section for further details.")]),t._v(" "),e("li",[t._v("Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: "),e("RouterLink",{attrs:{to:"/troubleshooting/extended/kernel-issues.html#stuck-on-ocb-loadimage-failed-security-violation"}},[t._v("Stuck on OCB: LoadImage failed - Security Violation")])],1)])])])]),t._v(" "),e("h3",{attrs:{id:"serial"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#serial"}},[t._v("#")]),t._v(" Serial")]),t._v(" "),e("p",[t._v("Used for serial debugging (Leave everything as default).")]),t._v(" "),e("h3",{attrs:{id:"tools"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tools"}},[t._v("#")]),t._v(" Tools")]),t._v(" "),e("p",[t._v("Used for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.")]),t._v(" "),e("h3",{attrs:{id:"entries"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#entries"}},[t._v("#")]),t._v(" Entries")]),t._v(" "),e("p",[t._v("Used for specifying irregular boot paths that can't be found naturally with OpenCore.")]),t._v(" "),e("p",[t._v("Won't be covered here, see 8.6 of "),e("a",{attrs:{href:"https://github.com/acidanthera/OpenCorePkg/blob/master/Docs/Configuration.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Configuration.pdf"),e("OutboundLink")],1),t._v(" for more info")]),t._v(" "),e("h2",{attrs:{id:"nvram"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nvram"}},[t._v("#")]),t._v(" NVRAM")]),t._v(" "),e("p",[e("img",{attrs:{src:i(246),alt:"NVRAM"}})]),t._v(" "),e("h3",{attrs:{id:"add-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#add-4"}},[t._v("#")]),t._v(" Add")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14")]),t._v(" "),e("p",[t._v("Used for OpenCore's UI scaling, default will work for us. See in-depth section for more info")])]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("More in-depth Info")]),t._v(" "),e("p",[t._v("Booter Path, mainly used for UI modification")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("DefaultBackgroundColor")]),t._v(": Background color used by boot.efi\n"),e("ul",[e("li",[e("code",[t._v("00000000")]),t._v(": Syrah Black")]),t._v(" "),e("li",[e("code",[t._v("BFBFBF00")]),t._v(": Light Gray")])])])])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102")]),t._v(" "),e("p",[t._v("OpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users")])]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("More in-depth Info")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("rtc-blacklist")]),t._v(": <>\n"),e("ul",[e("li",[t._v("To be used in conjunction with RTCMemoryFixup, see here for more info: "),e("a",{attrs:{href:"https://dortania.github.io/OpenCore-Post-Install/misc/rtc.html#finding-our-bad-rtc-region",target:"_blank",rel:"noopener noreferrer"}},[t._v("Fixing RTC write issues"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("Most users can ignore this section")])])])])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("7C436110-AB2A-4BBB-A880-FE41995C9F82")]),t._v(" "),e("p",[t._v("System Integrity Protection bitmask")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("General Purpose boot-args")]),t._v(":")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("boot-args")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Description")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("-v")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("This enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc.")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("debug=0x100")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("This disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can "),e("em",[t._v("hopefully")]),t._v(" glean some useful info and follow the breadcrumbs to get past the issues.")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("keepsyms=1")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("This is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself.")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("alcid=1")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Used for setting layout-id for AppleALC, see "),e("a",{attrs:{href:"https://github.com/acidanthera/applealc/wiki/supported-codecs",target:"_blank",rel:"noopener noreferrer"}},[t._v("supported codecs"),e("OutboundLink")],1),t._v(" to figure out which layout to use for your specific system. More info on this is covered in the "),e("a",{attrs:{href:"https://dortania.github.io/OpenCore-Post-Install/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Post-Install Page"),e("OutboundLink")],1)])])])]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("GPU-Specific boot-args")]),t._v(":")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("boot-args")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Description")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("agdpmod=pikera")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Used for disabling board ID checks on some Navi GPUs (RX 5000 & 6000 series), without this you'll get a black screen. "),e("strong",[t._v("Don't use if you don't have Navi")]),t._v(" (ie. Polaris and Vega cards shouldn't use this)")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("-radcodec")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Used for allowing officially unsupported AMD GPUs (spoofed) to use the Hardware Video Encoder")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("radpg=15")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Used for disabling some power-gating modes, helpful for properly initializing AMD Cape Verde based GPUs")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("unfairgva=1")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Used for fixing hardware DRM support on supported AMD GPUs")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("nvda_drv_vrl=1")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Used for enabling NVIDIA's Web Drivers on Maxwell and Pascal cards in macOS Sierra and High Sierra")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("strong",[t._v("-wegnoegpu")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Used for disabling all other GPUs than the integrated Intel iGPU, useful for those wanting to run newer versions of macOS where their dGPU isn't supported")])])])]),t._v(" "),e("ul",[e("li",[e("p",[e("strong",[t._v("csr-active-config")]),t._v(": "),e("code",[t._v("00000000")])]),t._v(" "),e("ul",[e("li",[t._v("Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with "),e("code",[t._v("csrutil")]),t._v(" via the recovery partition.")]),t._v(" "),e("li",[t._v("csr-active-config by default is set to "),e("code",[t._v("00000000")]),t._v(" which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: "),e("RouterLink",{attrs:{to:"/troubleshooting/extended/post-issues.html#disabling-sip"}},[t._v("Disabling SIP")])],1)])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("run-efi-updater")]),t._v(": "),e("code",[t._v("No")])]),t._v(" "),e("ul",[e("li",[t._v("This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("prev-lang:kbd")]),t._v(": <>")]),t._v(" "),e("ul",[e("li",[t._v("Needed for non-latin keyboards in the format of "),e("code",[t._v("lang-COUNTRY:keyboard")]),t._v(", recommended to keep blank though you can specify it("),e("strong",[t._v("Default in Sample config is Russian")]),t._v("):")]),t._v(" "),e("li",[t._v("American: "),e("code",[t._v("en-US:0")]),t._v("("),e("code",[t._v("656e2d55533a30")]),t._v(" in HEX)")]),t._v(" "),e("li",[t._v("Full list can be found in "),e("a",{attrs:{href:"https://github.com/acidanthera/OpenCorePkg/blob/master/Utilities/AppleKeyboardLayouts/AppleKeyboardLayouts.txt",target:"_blank",rel:"noopener noreferrer"}},[t._v("AppleKeyboardLayouts.txt"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("Hint: "),e("code",[t._v("prev-lang:kbd")]),t._v(" can be changed into a String so you can input "),e("code",[t._v("en-US:0")]),t._v(" directly instead of converting to HEX")]),t._v(" "),e("li",[t._v("Hint 2: "),e("code",[t._v("prev-lang:kbd")]),t._v(" can be set to a blank variable (eg. "),e("code",[t._v("<>")]),t._v(") which will force the Language Picker to appear instead at first boot up.")])])])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("Key")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Type")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Value")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("prev-lang:kbd")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("String")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("en-US:0")])])])])]),t._v(" "),e("h3",{attrs:{id:"delete-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#delete-3"}},[t._v("#")]),t._v(" Delete")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Info")]),t._v(" "),e("p",[t._v("Forcibly rewrites NVRAM variables, do note that "),e("code",[t._v("Add")]),t._v(" "),e("strong",[t._v("will not overwrite")]),t._v(" values already present in NVRAM so values like "),e("code",[t._v("boot-args")]),t._v(" should be left alone. For us, we'll be changing the following:")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("Quirk")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Enabled")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("WriteFlash")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("YES")])])])])]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("More in-depth Info")]),t._v(" "),e("ul",[e("li",[e("p",[e("strong",[t._v("LegacySchema")])]),t._v(" "),e("ul",[e("li",[t._v("Used for assigning NVRAM variables, used with "),e("code",[t._v("OpenVariableRuntimeDxe.efi")]),t._v(". Only needed for systems without native NVRAM")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("WriteFlash")]),t._v(": YES")]),t._v(" "),e("ul",[e("li",[t._v("Enables writing to flash memory for all added variables.")])])])])]),t._v(" "),e("h2",{attrs:{id:"platforminfo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#platforminfo"}},[t._v("#")]),t._v(" PlatformInfo")]),t._v(" "),e("p",[e("img",{attrs:{src:i(273),alt:"PlatformInfo"}})]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Info")]),t._v(" "),e("p",[t._v("For setting up the SMBIOS info, we'll use CorpNewt's "),e("a",{attrs:{href:"https://github.com/corpnewt/GenSMBIOS",target:"_blank",rel:"noopener noreferrer"}},[t._v("GenSMBIOS"),e("OutboundLink")],1),t._v(" application.")]),t._v(" "),e("p",[t._v("For this Sandy Bridge example, we'll chose the iMac12,2 SMBIOS - this is done intentionally for compatibility's sake. There are two main SMBIOS used for Sandy Bridge:")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("SMBIOS")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Hardware")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("iMac12,2")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Default Sandy Bridge SMBIOS")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("MacPro6,1")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Mojave and newer SMBIOS")])])])]),t._v(" "),e("ul",[e("li",[t._v("If you plan to later run macOS 10.14, Mojave or newer, MacPro6,1 will be the recommended SMBIOS and the iGPU must be disabled in the BIOS due to no longer being supported")])]),t._v(" "),e("p",[t._v("Run GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS.  This will give us an output similar to the following:")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#######################################################")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#               iMac12,2 SMBIOS Info                  #")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#######################################################")]),t._v("\n\nType:         iMac12,2\nSerial:       C02KCYZLDNCW\nBoard Serial: C02309301QXF2FRJC\nSmUUID:       A154B586-874B-4E57-A1FF-9D6E503E4580\n")])])]),e("p",[t._v("The "),e("code",[t._v("Type")]),t._v(" part gets copied to Generic -> SystemProductName.")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("Serial")]),t._v(" part gets copied to Generic -> SystemSerialNumber.")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("Board Serial")]),t._v(" part gets copied to Generic -> MLB.")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("SmUUID")]),t._v(" part gets copied to Generic -> SystemUUID.")]),t._v(" "),e("p",[t._v("We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use "),e("code",[t._v("11223300 0000")]),t._v(". After install follow the "),e("a",{attrs:{href:"https://dortania.github.io/OpenCore-Post-Install/universal/iservices.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Fixing iServices"),e("OutboundLink")],1),t._v(" page on how to find your real MAC Address)")]),t._v(" "),e("p",[e("strong",[t._v("Reminder that you need an invalid serial! When inputting your serial number in "),e("a",{attrs:{href:"https://checkcoverage.apple.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("Apple's Check Coverage Page"),e("OutboundLink")],1),t._v(', you should get a message such as "Unable to check coverage for this serial number."')])]),t._v(" "),e("p",[e("strong",[t._v("Automatic")]),t._v(": YES")]),t._v(" "),e("ul",[e("li",[t._v("Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections")])])]),t._v(" "),e("h3",{attrs:{id:"generic"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#generic"}},[t._v("#")]),t._v(" Generic")]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("More in-depth Info")]),t._v(" "),e("ul",[e("li",[e("p",[e("strong",[t._v("AdviseFeatures")]),t._v(": NO")]),t._v(" "),e("ul",[e("li",[t._v("Used for when the EFI partition isn't first on the Windows drive")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("MaxBIOSVersion")]),t._v(": NO")]),t._v(" "),e("ul",[e("li",[t._v("Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("ProcessorType")]),t._v(": "),e("code",[t._v("0")])]),t._v(" "),e("ul",[e("li",[t._v("Set to "),e("code",[t._v("0")]),t._v(" for automatic type detection, however this value can be overridden if desired. See "),e("a",{attrs:{href:"https://github.com/acidanthera/OpenCorePkg/blob/master/Include/Apple/IndustryStandard/AppleSmBios.h",target:"_blank",rel:"noopener noreferrer"}},[t._v("AppleSmBios.h"),e("OutboundLink")],1),t._v(" for possible values")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("SpoofVendor")]),t._v(": YES")]),t._v(" "),e("ul",[e("li",[t._v("Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("SystemMemoryStatus")]),t._v(": Auto")]),t._v(" "),e("ul",[e("li",[t._v("Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend "),e("code",[t._v("Auto")])])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("UpdateDataHub")]),t._v(": YES")]),t._v(" "),e("ul",[e("li",[t._v("Update Data Hub fields")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("UpdateNVRAM")]),t._v(": YES")]),t._v(" "),e("ul",[e("li",[t._v("Update NVRAM fields")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("UpdateSMBIOS")]),t._v(": YES")]),t._v(" "),e("ul",[e("li",[t._v("Updates SMBIOS fields")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("UpdateSMBIOSMode")]),t._v(": Create")]),t._v(" "),e("ul",[e("li",[t._v("Replace the tables with newly allocated EfiReservedMemoryType, use "),e("code",[t._v("Custom")]),t._v(" on Dell laptops requiring "),e("code",[t._v("CustomSMBIOSGuid")]),t._v(" quirk")]),t._v(" "),e("li",[t._v("Setting to "),e("code",[t._v("Custom")]),t._v(" with "),e("code",[t._v("CustomSMBIOSGuid")]),t._v(' quirk enabled can also disable SMBIOS injection into "non-Apple" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk')])])])])]),t._v(" "),e("h2",{attrs:{id:"uefi"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#uefi"}},[t._v("#")]),t._v(" UEFI")]),t._v(" "),e("p",[e("img",{attrs:{src:i(292),alt:""}})]),t._v(" "),e("p",[e("strong",[t._v("ConnectDrivers")]),t._v(": YES")]),t._v(" "),e("ul",[e("li",[t._v("Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.")])]),t._v(" "),e("h3",{attrs:{id:"drivers"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#drivers"}},[t._v("#")]),t._v(" Drivers")]),t._v(" "),e("p",[t._v("Add your .efi drivers here.")]),t._v(" "),e("p",[t._v("Only drivers present here should be:")]),t._v(" "),e("ul",[e("li",[t._v("HfsPlusLegacy.efi")]),t._v(" "),e("li",[t._v("OpenRuntime.efi")]),t._v(" "),e("li",[t._v("OpenUsbKbDxe.efi(If your firmware does not support UEFI)")])]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("More in-depth Info")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("Key")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Type")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Description")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Path")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("String")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Path of the file from "),e("code",[t._v("OC/Drivers")]),t._v(" directory")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("LoadEarly")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Boolean")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Load the driver early before NVRAM setup, should only be enabled for "),e("code",[t._v("OpenRuntime.efi")]),t._v(" and "),e("code",[t._v("OpenVariableRuntimeDxe.efi")]),t._v(" if using legacy NVRAM")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Arguments")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("String")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Some drivers accept additional arguments which are specified here.")])])])])]),t._v(" "),e("h3",{attrs:{id:"apfs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#apfs"}},[t._v("#")]),t._v(" APFS")]),t._v(" "),e("p",[t._v("By default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date.\nNot setting this can result in OpenCore not finding your macOS partition!")]),t._v(" "),e("p",[t._v("macOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("APFS Versions")]),t._v(" "),e("p",[t._v("Both MinVersion and MinDate need to be set if changing the minimum version.")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("macOS Version")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Min Version")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Min Date")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("High Sierra ("),e("code",[t._v("10.13.6")]),t._v(")")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("748077008000000")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("20180621")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Mojave ("),e("code",[t._v("10.14.6")]),t._v(")")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("945275007000000")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("20190820")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Catalina ("),e("code",[t._v("10.15.4")]),t._v(")")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("1412101001000000")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("20200306")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("No restriction")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("-1")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("-1")])])])])])]),t._v(" "),e("h3",{attrs:{id:"audio"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#audio"}},[t._v("#")]),t._v(" Audio")]),t._v(" "),e("p",[t._v("Related to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.")]),t._v(" "),e("ul",[e("li",[t._v("For further use of AudioDxe and the Audio section, please see the Post Install page: "),e("a",{attrs:{href:"https://dortania.github.io/OpenCore-Post-Install/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Add GUI and Boot-chime"),e("OutboundLink")],1)])]),t._v(" "),e("h3",{attrs:{id:"input"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#input"}},[t._v("#")]),t._v(" Input")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Info")]),t._v(" "),e("p",[t._v("Related to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default besides:")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("Quirk")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Value")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Comment")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("KeySupport")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("NO")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Enable if your BIOS supports UEFI")])])])])]),t._v(" "),e("h3",{attrs:{id:"output"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#output"}},[t._v("#")]),t._v(" Output")]),t._v(" "),e("p",[t._v("Relating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.")]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("More in-depth Info")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("Output")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Value")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Comment")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("UIScale")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("0")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("0")]),t._v(" will automatically set based on resolution"),e("br"),e("code",[t._v("-1")]),t._v(" will leave it unchanged"),e("br"),e("code",[t._v("1")]),t._v(" for 1x scaling, for normal displays"),e("br"),e("code",[t._v("2")]),t._v(" for 2x scaling, for HiDPI displays")])])])])]),t._v(" "),e("h3",{attrs:{id:"protocoloverrides"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#protocoloverrides"}},[t._v("#")]),t._v(" ProtocolOverrides")]),t._v(" "),e("p",[t._v("Mainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: "),e("a",{attrs:{href:"https://dortania.github.io/OpenCore-Post-Install/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Security and FileVault"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"quirks-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#quirks-4"}},[t._v("#")]),t._v(" Quirks")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Info")]),t._v(" "),e("p",[t._v("Relating to quirks with the UEFI environment, for us we'll be changing the following:")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("Quirk")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Enabled")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("Comment")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("IgnoreInvalidFlexRatio")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("YES")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("UnblockFsConnect")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("NO")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Needed mainly by HP motherboards")])])])])]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("More in-depth Info")]),t._v(" "),e("ul",[e("li",[e("p",[e("strong",[t._v("IgnoreInvalidFlexRatio")]),t._v(": YES")]),t._v(" "),e("ul",[e("li",[t._v("Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-Skylake based systems")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("DisableSecurityPolicy")]),t._v(": NO")]),t._v(" "),e("ul",[e("li",[t._v("Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.")]),t._v(" "),e("li",[t._v("If running a Microsoft Surface device, recommended to enable this option")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("RequestBootVarRouting")]),t._v(": YES")]),t._v(" "),e("ul",[e("li",[t._v("Redirects AptioMemoryFix from "),e("code",[t._v("EFI_GLOBAL_VARIABLE_GUID")]),t._v(" to "),e("code",[t._v("OC_VENDOR_VARIABLE_GUID")]),t._v(". Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("UnblockFsConnect")]),t._v(": NO")]),t._v(" "),e("ul",[e("li",[t._v("Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed")])])])])]),t._v(" "),e("h3",{attrs:{id:"reservedmemory"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reservedmemory"}},[t._v("#")]),t._v(" ReservedMemory")]),t._v(" "),e("p",[t._v("Used for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide")]),t._v(" "),e("h2",{attrs:{id:"cleaning-up"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cleaning-up"}},[t._v("#")]),t._v(" Cleaning up")]),t._v(" "),e("p",[t._v("And now you're ready to save and place it into your EFI under EFI/OC.")]),t._v(" "),e("p",[t._v("For those having booting issues, please make sure to read the "),e("RouterLink",{attrs:{to:"/troubleshooting/troubleshooting.html"}},[t._v("Troubleshooting section")]),t._v(" first and if your questions are still unanswered we have plenty of resources at your disposal:")],1),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://www.reddit.com/r/hackintosh/",target:"_blank",rel:"noopener noreferrer"}},[t._v("r/Hackintosh Subreddit"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://discord.gg/2QYd7ZT",target:"_blank",rel:"noopener noreferrer"}},[t._v("r/Hackintosh Discord"),e("OutboundLink")],1)])]),t._v(" "),e("h2",{attrs:{id:"intel-bios-settings"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#intel-bios-settings"}},[t._v("#")]),t._v(" Intel BIOS settings")]),t._v(" "),e("ul",[e("li",[t._v("Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS")])]),t._v(" "),e("h3",{attrs:{id:"disable"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#disable"}},[t._v("#")]),t._v(" Disable")]),t._v(" "),e("ul",[e("li",[t._v("Fast Boot")]),t._v(" "),e("li",[t._v("Secure Boot")]),t._v(" "),e("li",[t._v("Serial/COM Port")]),t._v(" "),e("li",[t._v("Parallel Port")]),t._v(" "),e("li",[t._v("VT-d (can be enabled if you set "),e("code",[t._v("DisableIoMapper")]),t._v(" to YES)")]),t._v(" "),e("li",[t._v("Compatibility Support Module (CSM) ("),e("strong",[t._v("Must be off in most cases, GPU errors/stalls like "),e("code",[t._v("gIO")]),t._v(" are common when this option is enabled")]),t._v(")")]),t._v(" "),e("li",[t._v("Thunderbolt (For initial install, as Thunderbolt can cause issues if not setup correctly)")]),t._v(" "),e("li",[t._v("Intel SGX")]),t._v(" "),e("li",[t._v("Intel Platform Trust")]),t._v(" "),e("li",[t._v("CFG Lock (MSR 0xE2 write protection)("),e("strong",[t._v("This must be off, if you can't find the option then enable "),e("code",[t._v("AppleCpuPmCfgLock")]),t._v(" under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled")]),t._v(")")])]),t._v(" "),e("h3",{attrs:{id:"enable"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#enable"}},[t._v("#")]),t._v(" Enable")]),t._v(" "),e("ul",[e("li",[t._v("VT-x")]),t._v(" "),e("li",[t._v("Above 4G Decoding")]),t._v(" "),e("li",[t._v("Hyper-Threading")]),t._v(" "),e("li",[t._v("Execute Disable Bit")]),t._v(" "),e("li",[t._v("EHCI/XHCI Hand-off")]),t._v(" "),e("li",[t._v('OS type: Windows 8.1/10 UEFI Mode (some motherboards may require "Other OS" instead)')]),t._v(" "),e("li",[t._v("DVMT Pre-Allocated(iGPU Memory): 32MB or higher")]),t._v(" "),e("li",[t._v("SATA Mode: AHCI")])]),t._v(" "),e("h1",{attrs:{id:"once-done-here-we-need-to-edit-a-couple-extra-values-head-to-the-apple-secure-boot-page"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#once-done-here-we-need-to-edit-a-couple-extra-values-head-to-the-apple-secure-boot-page"}},[t._v("#")]),t._v(" Once done here, we need to edit a couple extra values. Head to the "),e("RouterLink",{attrs:{to:"/config.plist/security.html"}},[t._v("Apple Secure Boot Page")])],1)])}),[],!1,null,null,null);e.default=l.exports}}]);