(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(e){function n(n){for(var o,s,r=n[0],l=n[1],d=n[2],u=0,p=[];u<r.length;u++)s=r[u],Object.prototype.hasOwnProperty.call(i,s)&&i[s]&&p.push(i[s][0]),i[s]=0;for(o in l)Object.prototype.hasOwnProperty.call(l,o)&&(e[o]=l[o]);for(c&&c(n);p.length;)p.shift()();return a.push.apply(a,d||[]),t()}function t(){for(var e,n=0;n<a.length;n++){for(var t=a[n],o=!0,r=1;r<t.length;r++){var l=t[r];0!==i[l]&&(o=!1)}o&&(a.splice(n--,1),e=s(s.s=t[0]))}return e}var o={},i={9:0},a=[];function s(n){if(o[n])return o[n].exports;var t=o[n]={i:n,l:!1,exports:{}};return e[n].call(t.exports,t,t.exports,s),t.l=!0,t.exports}s.e=function(e){var n=[],t=i[e];if(0!==t)if(t)n.push(t[2]);else{var o=new Promise((function(n,o){t=i[e]=[n,o]}));n.push(t[2]=o);var a,r=document.createElement("script");r.charset="utf-8",r.timeout=120,s.nc&&r.setAttribute("nonce",s.nc),r.src=function(e){return s.p+"assets/js/"+({10:"vendors~docsearch"}[e]||e)+"."+{1:"eb0df0dd",2:"44cef8d2",3:"6e683ec0",4:"b88b6ccd",5:"849fcf69",6:"1144ef20",7:"e4ec6360",8:"11329640",10:"f6b0f7ac",11:"888d6eb8",12:"b8326ab2",13:"2320b672",14:"7b4f4076",15:"5e7f14d6",16:"8ed63c56",17:"f1a5b4e9",18:"df2b1526",19:"ae097aa0",20:"124395ae",21:"3979bf3f",22:"ed3056bf",23:"a384b5d4",24:"5f03dcb3",25:"d6dfff58",26:"a55402d3",27:"41a722f0",28:"e970fab5",29:"96806536",30:"9b37215e",31:"67887e4f",32:"52a37dc1",33:"586e95ee",34:"4e6e63e7",35:"a3d7c18e",36:"9d501461",37:"8b3acd6f",38:"440fc632",39:"a6add9a6",40:"b16a0dd4",41:"73ed056b",42:"7f70ef45",43:"1fb69124",44:"7ee80775",45:"6eb41208",46:"5732300a",47:"1e53b744",48:"8829334c",49:"5a0062f2",50:"6ca846a3",51:"2b486e99",52:"6a52c6f7",53:"821f31d2",54:"b32342f7",55:"8f901580",56:"5cbfe2ec",57:"fde39532",58:"ae91b4d6",59:"26da553d",60:"f3603cc0",61:"f3e0081e",62:"78ecc14e",63:"4558c0cc",64:"54f2854c",65:"89f31807",66:"d7b18346",67:"f2ccb7d7",68:"fd847f34",69:"54b6cfc4",70:"f1b5eccd",71:"b4b9da5b",72:"db75a182",73:"f944803f",74:"4b160c23",75:"f4d161e0",76:"71939c2a",77:"cf482abe",78:"ef7f4a23",79:"cc6db5b7",80:"3ac18f2a",81:"83c20a05",82:"a478b1f2",83:"4b0b36fd",84:"280057c9",85:"9026441b",86:"d8de3f6d",87:"78c94d48",88:"aa62709c",89:"16e01699",90:"10c30e1e",91:"1190ed54",92:"4ff63a13",93:"a2cc6cc4",94:"3fe952a6",95:"cd9cc883",96:"af35b849",97:"5047add5",98:"c780e033"}[e]+".js"}(e);var l=new Error;a=function(n){r.onerror=r.onload=null,clearTimeout(d);var t=i[e];if(0!==t){if(t){var o=n&&("load"===n.type?"missing":n.type),a=n&&n.target&&n.target.src;l.message="Loading chunk "+e+" failed.\n("+o+": "+a+")",l.name="ChunkLoadError",l.type=o,l.request=a,t[1](l)}i[e]=void 0}};var d=setTimeout((function(){a({type:"timeout",target:r})}),12e4);r.onerror=r.onload=a,document.head.appendChild(r)}return Promise.all(n)},s.m=e,s.c=o,s.d=function(e,n,t){s.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,n){if(1&n&&(e=s(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(s.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)s.d(t,o,function(n){return e[n]}.bind(null,o));return t},s.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(n,"a",n),n},s.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},s.p="/OpenCore-Install-Guide/",s.oe=function(e){throw console.error(e),e};var r=window.webpackJsonp=window.webpackJsonp||[],l=r.push.bind(r);r.push=n,r=r.slice();for(var d=0;d<r.length;d++)n(r[d]);var c=l;a.push([103,0]),t()}([function(e,n,t){"use strict";var o=t(54),i=o.all;e.exports=o.IS_HTMLDDA?function(e){return"function"==typeof e||e===i}:function(e){return"function"==typeof e}},function(e,n,t){"use strict";var o=function(e){return e&&e.Math===Math&&e};e.exports=o("object"==typeof globalThis&&globalThis)||o("object"==typeof window&&window)||o("object"==typeof self&&self)||o("object"==typeof global&&global)||function(){return this}()||this||Function("return this")()},function(e,n,t){"use strict";var o=t(26),i=Function.prototype,a=i.call,s=o&&i.bind.bind(a,a);e.exports=o?s:function(e){return function(){return a.apply(e,arguments)}}},function(e,n,t){"use strict";e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,n,t){"use strict";var o=t(3);e.exports=!o((function(){return 7!==Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(e,n){var t=Array.isArray;e.exports=t},function(e,n,t){var o=t(68),i="object"==typeof self&&self&&self.Object===Object&&self,a=o||i||Function("return this")();e.exports=a},function(e,n,t){"use strict";var o=t(2),i=t(31),a=o({}.hasOwnProperty);e.exports=Object.hasOwn||function(e,n){return a(i(e),n)}},function(e,n,t){"use strict";var o=t(0),i=t(54),a=i.all;e.exports=i.IS_HTMLDDA?function(e){return"object"==typeof e?null!==e:o(e)||e===a}:function(e){return"object"==typeof e?null!==e:o(e)}},function(e,n,t){var o=t(161),i=t(164);e.exports=function(e,n){var t=i(e,n);return o(t)?t:void 0}},function(e,n,t){"use strict";function o(e,n,t,o,i,a,s,r){var l,d="function"==typeof e?e.options:e;if(n&&(d.render=n,d.staticRenderFns=t,d._compiled=!0),o&&(d.functional=!0),a&&(d._scopeId="data-v-"+a),s?(l=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),i&&i.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(s)},d._ssrRegister=l):i&&(l=r?function(){i.call(this,(d.functional?this.parent:this).$root.$options.shadowRoot)}:i),l)if(d.functional){d._injectStyles=l;var c=d.render;d.render=function(e,n){return l.call(n),c(e,n)}}else{var u=d.beforeCreate;d.beforeCreate=u?[].concat(u,l):[l]}return{exports:e,options:d}}t.d(n,"a",(function(){return o}))},function(e,n){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,n,t){var o=t(14),i=t(146),a=t(147),s=o?o.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":s&&s in Object(e)?i(e):a(e)}},function(e,n,t){"use strict";var o=t(4),i=t(15),a=t(34);e.exports=o?function(e,n,t){return i.f(e,n,a(1,t))}:function(e,n,t){return e[n]=t,e}},function(e,n,t){var o=t(6).Symbol;e.exports=o},function(e,n,t){"use strict";var o=t(4),i=t(63),a=t(100),s=t(24),r=t(53),l=TypeError,d=Object.defineProperty,c=Object.getOwnPropertyDescriptor;n.f=o?a?function(e,n,t){if(s(e),n=r(n),s(t),"function"==typeof e&&"prototype"===n&&"value"in t&&"writable"in t&&!t.writable){var o=c(e,n);o&&o.writable&&(e[n]=t.value,t={configurable:"configurable"in t?t.configurable:o.configurable,enumerable:"enumerable"in t?t.enumerable:o.enumerable,writable:!1})}return d(e,n,t)}:d:function(e,n,t){if(s(e),n=r(n),s(t),i)try{return d(e,n,t)}catch(e){}if("get"in t||"set"in t)throw l("Accessors not supported");return"value"in t&&(e[n]=t.value),e}},function(e,n,t){"use strict";var o=t(2),i=o({}.toString),a=o("".slice);e.exports=function(e){return a(i(e),8,-1)}},function(e,n,t){var o=t(151),i=t(152),a=t(153),s=t(154),r=t(155);function l(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var o=e[n];this.set(o[0],o[1])}}l.prototype.clear=o,l.prototype.delete=i,l.prototype.get=a,l.prototype.has=s,l.prototype.set=r,e.exports=l},function(e,n,t){var o=t(70);e.exports=function(e,n){for(var t=e.length;t--;)if(o(e[t][0],n))return t;return-1}},function(e,n,t){var o=t(9)(Object,"create");e.exports=o},function(e,n,t){var o=t(173);e.exports=function(e,n){var t=e.__data__;return o(n)?t["string"==typeof n?"string":"hash"]:t.map}},function(e,n,t){var o=t(44);e.exports=function(e){if("string"==typeof e||o(e))return e;var n=e+"";return"0"==n&&1/e==-1/0?"-0":n}},function(e,n){var t=/^\s+|\s+$/g,o=/^[-+]0x[0-9a-f]+$/i,i=/^0b[01]+$/i,a=/^0o[0-7]+$/i,s=parseInt,r="object"==typeof global&&global&&global.Object===Object&&global,l="object"==typeof self&&self&&self.Object===Object&&self,d=r||l||Function("return this")(),c=Object.prototype.toString,u=Math.max,p=Math.min,h=function(){return d.Date.now()};function m(e){var n=typeof e;return!!e&&("object"==n||"function"==n)}function f(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==c.call(e)}(e))return NaN;if(m(e)){var n="function"==typeof e.valueOf?e.valueOf():e;e=m(n)?n+"":n}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(t,"");var r=i.test(e);return r||a.test(e)?s(e.slice(2),r?2:8):o.test(e)?NaN:+e}e.exports=function(e,n,t){var o,i,a,s,r,l,d=0,c=!1,g=!1,b=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function y(n){var t=o,a=i;return o=i=void 0,d=n,s=e.apply(a,t)}function v(e){return d=e,r=setTimeout(k,n),c?y(e):s}function w(e){var t=e-l;return void 0===l||t>=n||t<0||g&&e-d>=a}function k(){var e=h();if(w(e))return S(e);r=setTimeout(k,function(e){var t=n-(e-l);return g?p(t,a-(e-d)):t}(e))}function S(e){return r=void 0,b&&o?y(e):(o=i=void 0,s)}function x(){var e=h(),t=w(e);if(o=arguments,i=this,l=e,t){if(void 0===r)return v(l);if(g)return r=setTimeout(k,n),y(l)}return void 0===r&&(r=setTimeout(k,n)),s}return n=f(n)||0,m(t)&&(c=!!t.leading,a=(g="maxWait"in t)?u(f(t.maxWait)||0,n):a,b="trailing"in t?!!t.trailing:b),x.cancel=function(){void 0!==r&&clearTimeout(r),d=0,o=l=i=r=void 0},x.flush=function(){return void 0===r?s:S(h())},x}},function(e,n,t){var o,i;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(i="function"==typeof(o=function(){var e,n,t={version:"0.2.0"},o=t.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function i(e,n,t){return e<n?n:e>t?t:e}function a(e){return 100*(-1+e)}t.configure=function(e){var n,t;for(n in e)void 0!==(t=e[n])&&e.hasOwnProperty(n)&&(o[n]=t);return this},t.status=null,t.set=function(e){var n=t.isStarted();e=i(e,o.minimum,1),t.status=1===e?null:e;var l=t.render(!n),d=l.querySelector(o.barSelector),c=o.speed,u=o.easing;return l.offsetWidth,s((function(n){""===o.positionUsing&&(o.positionUsing=t.getPositioningCSS()),r(d,function(e,n,t){var i;return(i="translate3d"===o.positionUsing?{transform:"translate3d("+a(e)+"%,0,0)"}:"translate"===o.positionUsing?{transform:"translate("+a(e)+"%,0)"}:{"margin-left":a(e)+"%"}).transition="all "+n+"ms "+t,i}(e,c,u)),1===e?(r(l,{transition:"none",opacity:1}),l.offsetWidth,setTimeout((function(){r(l,{transition:"all "+c+"ms linear",opacity:0}),setTimeout((function(){t.remove(),n()}),c)}),c)):setTimeout(n,c)})),this},t.isStarted=function(){return"number"==typeof t.status},t.start=function(){t.status||t.set(0);var e=function(){setTimeout((function(){t.status&&(t.trickle(),e())}),o.trickleSpeed)};return o.trickle&&e(),this},t.done=function(e){return e||t.status?t.inc(.3+.5*Math.random()).set(1):this},t.inc=function(e){var n=t.status;return n?("number"!=typeof e&&(e=(1-n)*i(Math.random()*n,.1,.95)),n=i(n+e,0,.994),t.set(n)):t.start()},t.trickle=function(){return t.inc(Math.random()*o.trickleRate)},e=0,n=0,t.promise=function(o){return o&&"resolved"!==o.state()?(0===n&&t.start(),e++,n++,o.always((function(){0==--n?(e=0,t.done()):t.set((e-n)/e)})),this):this},t.render=function(e){if(t.isRendered())return document.getElementById("nprogress");d(document.documentElement,"nprogress-busy");var n=document.createElement("div");n.id="nprogress",n.innerHTML=o.template;var i,s=n.querySelector(o.barSelector),l=e?"-100":a(t.status||0),c=document.querySelector(o.parent);return r(s,{transition:"all 0 linear",transform:"translate3d("+l+"%,0,0)"}),o.showSpinner||(i=n.querySelector(o.spinnerSelector))&&p(i),c!=document.body&&d(c,"nprogress-custom-parent"),c.appendChild(n),n},t.remove=function(){c(document.documentElement,"nprogress-busy"),c(document.querySelector(o.parent),"nprogress-custom-parent");var e=document.getElementById("nprogress");e&&p(e)},t.isRendered=function(){return!!document.getElementById("nprogress")},t.getPositioningCSS=function(){var e=document.body.style,n="WebkitTransform"in e?"Webkit":"MozTransform"in e?"Moz":"msTransform"in e?"ms":"OTransform"in e?"O":"";return n+"Perspective"in e?"translate3d":n+"Transform"in e?"translate":"margin"};var s=function(){var e=[];function n(){var t=e.shift();t&&t(n)}return function(t){e.push(t),1==e.length&&n()}}(),r=function(){var e=["Webkit","O","Moz","ms"],n={};function t(t){return t=t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(e,n){return n.toUpperCase()})),n[t]||(n[t]=function(n){var t=document.body.style;if(n in t)return n;for(var o,i=e.length,a=n.charAt(0).toUpperCase()+n.slice(1);i--;)if((o=e[i]+a)in t)return o;return n}(t))}function o(e,n,o){n=t(n),e.style[n]=o}return function(e,n){var t,i,a=arguments;if(2==a.length)for(t in n)void 0!==(i=n[t])&&n.hasOwnProperty(t)&&o(e,t,i);else o(e,a[1],a[2])}}();function l(e,n){return("string"==typeof e?e:u(e)).indexOf(" "+n+" ")>=0}function d(e,n){var t=u(e),o=t+n;l(t,n)||(e.className=o.substring(1))}function c(e,n){var t,o=u(e);l(e,n)&&(t=o.replace(" "+n+" "," "),e.className=t.substring(1,t.length-1))}function u(e){return(" "+(e.className||"")+" ").replace(/\s+/gi," ")}function p(e){e&&e.parentNode&&e.parentNode.removeChild(e)}return t})?o.call(n,t,n,e):o)||(e.exports=i)},function(e,n,t){"use strict";var o=t(8),i=String,a=TypeError;e.exports=function(e){if(o(e))return e;throw a(i(e)+" is not an object")}},function(e,n,t){"use strict";var o=t(1),i=t(50).f,a=t(13),s=t(94),r=t(36),l=t(64),d=t(122);e.exports=function(e,n){var t,c,u,p,h,m=e.target,f=e.global,g=e.stat;if(t=f?o:g?o[m]||r(m,{}):(o[m]||{}).prototype)for(c in n){if(p=n[c],u=e.dontCallGetSet?(h=i(t,c))&&h.value:t[c],!d(f?c:m+(g?".":"#")+c,e.forced)&&void 0!==u){if(typeof p==typeof u)continue;l(p,u)}(e.sham||u&&u.sham)&&a(p,"sham",!0),s(t,c,p,e)}}},function(e,n,t){"use strict";var o=t(3);e.exports=!o((function(){var e=function(){}.bind();return"function"!=typeof e||e.hasOwnProperty("prototype")}))},function(e,n,t){"use strict";var o=t(47),i=t(51);e.exports=function(e){return o(i(e))}},function(e,n,t){"use strict";var o=t(1),i=t(0),a=function(e){return i(e)?e:void 0};e.exports=function(e,n){return arguments.length<2?a(o[e]):o[e]&&o[e][n]}},function(e,n,t){"use strict";var o=t(0),i=t(109),a=TypeError;e.exports=function(e){if(o(e))return e;throw a(i(e)+" is not a function")}},function(e,n,t){"use strict";var o=t(1),i=t(60),a=t(7),s=t(62),r=t(58),l=t(57),d=o.Symbol,c=i("wks"),u=l?d.for||d:d&&d.withoutSetter||s;e.exports=function(e){return a(c,e)||(c[e]=r&&a(d,e)?d[e]:u("Symbol."+e)),c[e]}},function(e,n,t){"use strict";var o=t(51),i=Object;e.exports=function(e){return i(o(e))}},function(e,n,t){"use strict";var o=t(120);e.exports=function(e){return o(e.length)}},function(e,n,t){"use strict";var o=t(26),i=Function.prototype.call;e.exports=o?i.bind(i):function(){return i.apply(i,arguments)}},function(e,n,t){"use strict";e.exports=function(e,n){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:n}}},function(e,n,t){"use strict";var o=t(1),i=t(36),a=o["__core-js_shared__"]||i("__core-js_shared__",{});e.exports=a},function(e,n,t){"use strict";var o=t(1),i=Object.defineProperty;e.exports=function(e,n){try{i(o,e,{value:n,configurable:!0,writable:!0})}catch(t){o[e]=n}return n}},function(e,n,t){var o=t(145),i=t(11),a=Object.prototype,s=a.hasOwnProperty,r=a.propertyIsEnumerable,l=o(function(){return arguments}())?o:function(e){return i(e)&&s.call(e,"callee")&&!r.call(e,"callee")};e.exports=l},function(e,n,t){var o=t(9)(t(6),"Map");e.exports=o},function(e,n){e.exports=function(e){var n=typeof e;return null!=e&&("object"==n||"function"==n)}},function(e,n,t){var o=t(165),i=t(172),a=t(174),s=t(175),r=t(176);function l(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var o=e[n];this.set(o[0],o[1])}}l.prototype.clear=o,l.prototype.delete=i,l.prototype.get=a,l.prototype.has=s,l.prototype.set=r,e.exports=l},function(e,n){e.exports=function(e){var n=-1,t=Array(e.size);return e.forEach((function(e){t[++n]=e})),t}},function(e,n){e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},function(e,n,t){var o=t(5),i=t(44),a=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,s=/^\w*$/;e.exports=function(e,n){if(o(e))return!1;var t=typeof e;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=e&&!i(e))||(s.test(e)||!a.test(e)||null!=n&&e in Object(n))}},function(e,n,t){var o=t(12),i=t(11);e.exports=function(e){return"symbol"==typeof e||i(e)&&"[object Symbol]"==o(e)}},function(e,n){e.exports=function(e){return e}},function(e,n,t){"use strict";n.a=["ThemeManager","BackToTop"]},function(e,n,t){"use strict";var o=t(2),i=t(3),a=t(16),s=Object,r=o("".split);e.exports=i((function(){return!s("z").propertyIsEnumerable(0)}))?function(e){return"String"===a(e)?r(e,""):s(e)}:s},function(e,n,t){"use strict";e.exports={}},function(e,n){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,n,t){"use strict";var o=t(4),i=t(33),a=t(105),s=t(34),r=t(27),l=t(53),d=t(7),c=t(63),u=Object.getOwnPropertyDescriptor;n.f=o?u:function(e,n){if(e=r(e),n=l(n),c)try{return u(e,n)}catch(e){}if(d(e,n))return s(!i(a.f,e,n),e[n])}},function(e,n,t){"use strict";var o=t(52),i=TypeError;e.exports=function(e){if(o(e))throw i("Can't call method on "+e);return e}},function(e,n,t){"use strict";e.exports=function(e){return null==e}},function(e,n,t){"use strict";var o=t(106),i=t(55);e.exports=function(e){var n=o(e,"string");return i(n)?n:n+""}},function(e,n,t){"use strict";var o="object"==typeof document&&document.all,i=void 0===o&&void 0!==o;e.exports={all:o,IS_HTMLDDA:i}},function(e,n,t){"use strict";var o=t(28),i=t(0),a=t(56),s=t(57),r=Object;e.exports=s?function(e){return"symbol"==typeof e}:function(e){var n=o("Symbol");return i(n)&&a(n.prototype,r(e))}},function(e,n,t){"use strict";var o=t(2);e.exports=o({}.isPrototypeOf)},function(e,n,t){"use strict";var o=t(58);e.exports=o&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(e,n,t){"use strict";var o=t(59),i=t(3),a=t(1).String;e.exports=!!Object.getOwnPropertySymbols&&!i((function(){var e=Symbol("symbol detection");return!a(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&o&&o<41}))},function(e,n,t){"use strict";var o,i,a=t(1),s=t(107),r=a.process,l=a.Deno,d=r&&r.versions||l&&l.version,c=d&&d.v8;c&&(i=(o=c.split("."))[0]>0&&o[0]<4?1:+(o[0]+o[1])),!i&&s&&(!(o=s.match(/Edge\/(\d+)/))||o[1]>=74)&&(o=s.match(/Chrome\/(\d+)/))&&(i=+o[1]),e.exports=i},function(e,n,t){"use strict";var o=t(61),i=t(35);(e.exports=function(e,n){return i[e]||(i[e]=void 0!==n?n:{})})("versions",[]).push({version:"3.32.1",mode:o?"pure":"global",copyright:"© 2014-2023 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.32.1/LICENSE",source:"https://github.com/zloirock/core-js"})},function(e,n,t){"use strict";e.exports=!1},function(e,n,t){"use strict";var o=t(2),i=0,a=Math.random(),s=o(1..toString);e.exports=function(e){return"Symbol("+(void 0===e?"":e)+")_"+s(++i+a,36)}},function(e,n,t){"use strict";var o=t(4),i=t(3),a=t(99);e.exports=!o&&!i((function(){return 7!==Object.defineProperty(a("div"),"a",{get:function(){return 7}}).a}))},function(e,n,t){"use strict";var o=t(7),i=t(115),a=t(50),s=t(15);e.exports=function(e,n,t){for(var r=i(n),l=s.f,d=a.f,c=0;c<r.length;c++){var u=r[c];o(e,u)||t&&o(t,u)||l(e,u,d(n,u))}}},function(e,n,t){"use strict";var o=t(119);e.exports=function(e){var n=+e;return n!=n||0===n?0:o(n)}},function(e,n,t){"use strict";var o=t(132),i=t(24),a=t(133);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,n=!1,t={};try{(e=o(Object.prototype,"__proto__","set"))(t,[]),n=t instanceof Array}catch(e){}return function(t,o){return i(t),a(o),n?e(t,o):t.__proto__=o,t}}():void 0)},function(e,n){e.exports=function(e,n){for(var t=-1,o=n.length,i=e.length;++t<o;)e[i+t]=n[t];return e}},function(e,n){var t="object"==typeof global&&global&&global.Object===Object&&global;e.exports=t},function(e,n,t){var o=t(17),i=t(156),a=t(157),s=t(158),r=t(159),l=t(160);function d(e){var n=this.__data__=new o(e);this.size=n.size}d.prototype.clear=i,d.prototype.delete=a,d.prototype.get=s,d.prototype.has=r,d.prototype.set=l,e.exports=d},function(e,n){e.exports=function(e,n){return e===n||e!=e&&n!=n}},function(e,n,t){var o=t(12),i=t(39);e.exports=function(e){if(!i(e))return!1;var n=o(e);return"[object Function]"==n||"[object GeneratorFunction]"==n||"[object AsyncFunction]"==n||"[object Proxy]"==n}},function(e,n){var t=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return t.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,n,t){var o=t(177),i=t(11);e.exports=function e(n,t,a,s,r){return n===t||(null==n||null==t||!i(n)&&!i(t)?n!=n&&t!=t:o(n,t,a,s,e,r))}},function(e,n,t){var o=t(75),i=t(180),a=t(76);e.exports=function(e,n,t,s,r,l){var d=1&t,c=e.length,u=n.length;if(c!=u&&!(d&&u>c))return!1;var p=l.get(e),h=l.get(n);if(p&&h)return p==n&&h==e;var m=-1,f=!0,g=2&t?new o:void 0;for(l.set(e,n),l.set(n,e);++m<c;){var b=e[m],y=n[m];if(s)var v=d?s(y,b,m,n,e,l):s(b,y,m,e,n,l);if(void 0!==v){if(v)continue;f=!1;break}if(g){if(!i(n,(function(e,n){if(!a(g,n)&&(b===e||r(b,e,t,s,l)))return g.push(n)}))){f=!1;break}}else if(b!==y&&!r(b,y,t,s,l)){f=!1;break}}return l.delete(e),l.delete(n),f}},function(e,n,t){var o=t(40),i=t(178),a=t(179);function s(e){var n=-1,t=null==e?0:e.length;for(this.__data__=new o;++n<t;)this.add(e[n])}s.prototype.add=s.prototype.push=i,s.prototype.has=a,e.exports=s},function(e,n){e.exports=function(e,n){return e.has(n)}},function(e,n,t){var o=t(190),i=t(196),a=t(81);e.exports=function(e){return a(e)?o(e):i(e)}},function(e,n,t){(function(e){var o=t(6),i=t(192),a=n&&!n.nodeType&&n,s=a&&"object"==typeof e&&e&&!e.nodeType&&e,r=s&&s.exports===a?o.Buffer:void 0,l=(r?r.isBuffer:void 0)||i;e.exports=l}).call(this,t(49)(e))},function(e,n){var t=/^(?:0|[1-9]\d*)$/;e.exports=function(e,n){var o=typeof e;return!!(n=null==n?9007199254740991:n)&&("number"==o||"symbol"!=o&&t.test(e))&&e>-1&&e%1==0&&e<n}},function(e,n,t){var o=t(193),i=t(194),a=t(195),s=a&&a.isTypedArray,r=s?i(s):o;e.exports=r},function(e,n,t){var o=t(71),i=t(42);e.exports=function(e){return null!=e&&i(e.length)&&!o(e)}},function(e,n,t){var o=t(9)(t(6),"Set");e.exports=o},function(e,n,t){var o=t(39);e.exports=function(e){return e==e&&!o(e)}},function(e,n){e.exports=function(e,n){return function(t){return null!=t&&(t[e]===n&&(void 0!==n||e in Object(t)))}}},function(e,n,t){var o=t(86),i=t(21);e.exports=function(e,n){for(var t=0,a=(n=o(n,e)).length;null!=e&&t<a;)e=e[i(n[t++])];return t&&t==a?e:void 0}},function(e,n,t){var o=t(5),i=t(43),a=t(207),s=t(210);e.exports=function(e,n){return o(e)?e:i(e,n)?[e]:a(s(e))}},function(e,n,t){},function(e,n,t){},function(e,n,t){},function(e,n,t){var o=t(143),i=t(148),a=t(219),s=t(227),r=t(236),l=t(96),d=a((function(e){var n=l(e);return r(n)&&(n=void 0),s(o(e,1,r,!0),i(n,2))}));e.exports=d},function(e,n,t){"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var o=/["'&<>]/;e.exports=function(e){var n,t=""+e,i=o.exec(t);if(!i)return t;var a="",s=0,r=0;for(s=i.index;s<t.length;s++){switch(t.charCodeAt(s)){case 34:n="&quot;";break;case 38:n="&amp;";break;case 39:n="&#39;";break;case 60:n="&lt;";break;case 62:n="&gt;";break;default:continue}r!==s&&(a+=t.substring(r,s)),r=s+1,a+=n}return r!==s?a+t.substring(r,s):a}},function(e,n,t){!function(){"use strict";e.exports={polyfill:function(){var e=window,n=document;if(!("scrollBehavior"in n.documentElement.style)||!0===e.__forceSmoothScrollPolyfill__){var t,o=e.HTMLElement||e.Element,i={scroll:e.scroll||e.scrollTo,scrollBy:e.scrollBy,elementScroll:o.prototype.scroll||r,scrollIntoView:o.prototype.scrollIntoView},a=e.performance&&e.performance.now?e.performance.now.bind(e.performance):Date.now,s=(t=e.navigator.userAgent,new RegExp(["MSIE ","Trident/","Edge/"].join("|")).test(t)?1:0);e.scroll=e.scrollTo=function(){void 0!==arguments[0]&&(!0!==l(arguments[0])?m.call(e,n.body,void 0!==arguments[0].left?~~arguments[0].left:e.scrollX||e.pageXOffset,void 0!==arguments[0].top?~~arguments[0].top:e.scrollY||e.pageYOffset):i.scroll.call(e,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:e.scrollX||e.pageXOffset,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:e.scrollY||e.pageYOffset))},e.scrollBy=function(){void 0!==arguments[0]&&(l(arguments[0])?i.scrollBy.call(e,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:0,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:0):m.call(e,n.body,~~arguments[0].left+(e.scrollX||e.pageXOffset),~~arguments[0].top+(e.scrollY||e.pageYOffset)))},o.prototype.scroll=o.prototype.scrollTo=function(){if(void 0!==arguments[0])if(!0!==l(arguments[0])){var e=arguments[0].left,n=arguments[0].top;m.call(this,this,void 0===e?this.scrollLeft:~~e,void 0===n?this.scrollTop:~~n)}else{if("number"==typeof arguments[0]&&void 0===arguments[1])throw new SyntaxError("Value could not be converted");i.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left:"object"!=typeof arguments[0]?~~arguments[0]:this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top:void 0!==arguments[1]?~~arguments[1]:this.scrollTop)}},o.prototype.scrollBy=function(){void 0!==arguments[0]&&(!0!==l(arguments[0])?this.scroll({left:~~arguments[0].left+this.scrollLeft,top:~~arguments[0].top+this.scrollTop,behavior:arguments[0].behavior}):i.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left+this.scrollLeft:~~arguments[0]+this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top+this.scrollTop:~~arguments[1]+this.scrollTop))},o.prototype.scrollIntoView=function(){if(!0!==l(arguments[0])){var t=p(this),o=t.getBoundingClientRect(),a=this.getBoundingClientRect();t!==n.body?(m.call(this,t,t.scrollLeft+a.left-o.left,t.scrollTop+a.top-o.top),"fixed"!==e.getComputedStyle(t).position&&e.scrollBy({left:o.left,top:o.top,behavior:"smooth"})):e.scrollBy({left:a.left,top:a.top,behavior:"smooth"})}else i.scrollIntoView.call(this,void 0===arguments[0]||arguments[0])}}function r(e,n){this.scrollLeft=e,this.scrollTop=n}function l(e){if(null===e||"object"!=typeof e||void 0===e.behavior||"auto"===e.behavior||"instant"===e.behavior)return!0;if("object"==typeof e&&"smooth"===e.behavior)return!1;throw new TypeError("behavior member of ScrollOptions "+e.behavior+" is not a valid value for enumeration ScrollBehavior.")}function d(e,n){return"Y"===n?e.clientHeight+s<e.scrollHeight:"X"===n?e.clientWidth+s<e.scrollWidth:void 0}function c(n,t){var o=e.getComputedStyle(n,null)["overflow"+t];return"auto"===o||"scroll"===o}function u(e){var n=d(e,"Y")&&c(e,"Y"),t=d(e,"X")&&c(e,"X");return n||t}function p(e){for(;e!==n.body&&!1===u(e);)e=e.parentNode||e.host;return e}function h(n){var t,o,i,s,r=(a()-n.startTime)/468;s=r=r>1?1:r,t=.5*(1-Math.cos(Math.PI*s)),o=n.startX+(n.x-n.startX)*t,i=n.startY+(n.y-n.startY)*t,n.method.call(n.scrollable,o,i),o===n.x&&i===n.y||e.requestAnimationFrame(h.bind(e,n))}function m(t,o,s){var l,d,c,u,p=a();t===n.body?(l=e,d=e.scrollX||e.pageXOffset,c=e.scrollY||e.pageYOffset,u=i.scroll):(l=t,d=t.scrollLeft,c=t.scrollTop,u=r),h({scrollable:l,method:u,startTime:p,startX:d,startY:c,x:o,y:s})}}}}()},function(e,n,t){"use strict";var o=t(25),i=t(31),a=t(32),s=t(126),r=t(128);o({target:"Array",proto:!0,arity:1,forced:t(3)((function(){return 4294967297!==[].push.call({length:4294967296},1)}))||!function(){try{Object.defineProperty([],"length",{writable:!1}).push()}catch(e){return e instanceof TypeError}}()},{push:function(e){var n=i(this),t=a(n),o=arguments.length;r(t+o);for(var l=0;l<o;l++)n[t]=arguments[l],t++;return s(n,t),t}})},function(e,n,t){"use strict";var o=t(0),i=t(15),a=t(97),s=t(36);e.exports=function(e,n,t,r){r||(r={});var l=r.enumerable,d=void 0!==r.name?r.name:n;if(o(t)&&a(t,d,r),r.global)l?e[n]=t:s(n,t);else{try{r.unsafe?e[n]&&(l=!0):delete e[n]}catch(e){}l?e[n]=t:i.f(e,n,{value:t,enumerable:!1,configurable:!r.nonConfigurable,writable:!r.nonWritable})}return e}},function(e,n,t){"use strict";var o=t(137),i=String;e.exports=function(e){if("Symbol"===o(e))throw TypeError("Cannot convert a Symbol value to a string");return i(e)}},function(e,n){e.exports=function(e){var n=null==e?0:e.length;return n?e[n-1]:void 0}},function(e,n,t){"use strict";var o=t(2),i=t(3),a=t(0),s=t(7),r=t(4),l=t(111).CONFIGURABLE,d=t(112),c=t(113),u=c.enforce,p=c.get,h=String,m=Object.defineProperty,f=o("".slice),g=o("".replace),b=o([].join),y=r&&!i((function(){return 8!==m((function(){}),"length",{value:8}).length})),v=String(String).split("String"),w=e.exports=function(e,n,t){"Symbol("===f(h(n),0,7)&&(n="["+g(h(n),/^Symbol\(([^)]*)\)/,"$1")+"]"),t&&t.getter&&(n="get "+n),t&&t.setter&&(n="set "+n),(!s(e,"name")||l&&e.name!==n)&&(r?m(e,"name",{value:n,configurable:!0}):e.name=n),y&&t&&s(t,"arity")&&e.length!==t.arity&&m(e,"length",{value:t.arity});try{t&&s(t,"constructor")&&t.constructor?r&&m(e,"prototype",{writable:!1}):e.prototype&&(e.prototype=void 0)}catch(e){}var o=u(e);return s(o,"source")||(o.source=b(v,"string"==typeof n?n:"")),e};Function.prototype.toString=w((function(){return a(this)&&p(this).source||d(this)}),"toString")},function(e,n,t){"use strict";e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(e,n,t){"use strict";var o=t(1),i=t(8),a=o.document,s=i(a)&&i(a.createElement);e.exports=function(e){return s?a.createElement(e):{}}},function(e,n,t){"use strict";var o=t(4),i=t(3);e.exports=o&&i((function(){return 42!==Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(e,n,t){"use strict";var o=t(60),i=t(62),a=o("keys");e.exports=function(e){return a[e]||(a[e]=i(e))}},function(e,n,t){"use strict";var o=t(2),i=t(7),a=t(27),s=t(117).indexOf,r=t(48),l=o([].push);e.exports=function(e,n){var t,o=a(e),d=0,c=[];for(t in o)!i(r,t)&&i(o,t)&&l(c,t);for(;n.length>d;)i(o,t=n[d++])&&(~s(c,t)||l(c,t));return c}},function(e,n,t){e.exports=t(244)},function(e,n,t){"use strict";var o=t(25),i=t(123).left,a=t(124),s=t(59);o({target:"Array",proto:!0,forced:!t(125)&&s>79&&s<83||!a("reduce")},{reduce:function(e){var n=arguments.length;return i(this,e,n,n>1?arguments[1]:void 0)}})},function(e,n,t){"use strict";var o={}.propertyIsEnumerable,i=Object.getOwnPropertyDescriptor,a=i&&!o.call({1:2},1);n.f=a?function(e){var n=i(this,e);return!!n&&n.enumerable}:o},function(e,n,t){"use strict";var o=t(33),i=t(8),a=t(55),s=t(108),r=t(110),l=t(30),d=TypeError,c=l("toPrimitive");e.exports=function(e,n){if(!i(e)||a(e))return e;var t,l=s(e,c);if(l){if(void 0===n&&(n="default"),t=o(l,e,n),!i(t)||a(t))return t;throw d("Can't convert object to primitive value")}return void 0===n&&(n="number"),r(e,n)}},function(e,n,t){"use strict";e.exports="undefined"!=typeof navigator&&String(navigator.userAgent)||""},function(e,n,t){"use strict";var o=t(29),i=t(52);e.exports=function(e,n){var t=e[n];return i(t)?void 0:o(t)}},function(e,n,t){"use strict";var o=String;e.exports=function(e){try{return o(e)}catch(e){return"Object"}}},function(e,n,t){"use strict";var o=t(33),i=t(0),a=t(8),s=TypeError;e.exports=function(e,n){var t,r;if("string"===n&&i(t=e.toString)&&!a(r=o(t,e)))return r;if(i(t=e.valueOf)&&!a(r=o(t,e)))return r;if("string"!==n&&i(t=e.toString)&&!a(r=o(t,e)))return r;throw s("Can't convert object to primitive value")}},function(e,n,t){"use strict";var o=t(4),i=t(7),a=Function.prototype,s=o&&Object.getOwnPropertyDescriptor,r=i(a,"name"),l=r&&"something"===function(){}.name,d=r&&(!o||o&&s(a,"name").configurable);e.exports={EXISTS:r,PROPER:l,CONFIGURABLE:d}},function(e,n,t){"use strict";var o=t(2),i=t(0),a=t(35),s=o(Function.toString);i(a.inspectSource)||(a.inspectSource=function(e){return s(e)}),e.exports=a.inspectSource},function(e,n,t){"use strict";var o,i,a,s=t(114),r=t(1),l=t(8),d=t(13),c=t(7),u=t(35),p=t(101),h=t(48),m=r.TypeError,f=r.WeakMap;if(s||u.state){var g=u.state||(u.state=new f);g.get=g.get,g.has=g.has,g.set=g.set,o=function(e,n){if(g.has(e))throw m("Object already initialized");return n.facade=e,g.set(e,n),n},i=function(e){return g.get(e)||{}},a=function(e){return g.has(e)}}else{var b=p("state");h[b]=!0,o=function(e,n){if(c(e,b))throw m("Object already initialized");return n.facade=e,d(e,b,n),n},i=function(e){return c(e,b)?e[b]:{}},a=function(e){return c(e,b)}}e.exports={set:o,get:i,has:a,enforce:function(e){return a(e)?i(e):o(e,{})},getterFor:function(e){return function(n){var t;if(!l(n)||(t=i(n)).type!==e)throw m("Incompatible receiver, "+e+" required");return t}}}},function(e,n,t){"use strict";var o=t(1),i=t(0),a=o.WeakMap;e.exports=i(a)&&/native code/.test(String(a))},function(e,n,t){"use strict";var o=t(28),i=t(2),a=t(116),s=t(121),r=t(24),l=i([].concat);e.exports=o("Reflect","ownKeys")||function(e){var n=a.f(r(e)),t=s.f;return t?l(n,t(e)):n}},function(e,n,t){"use strict";var o=t(102),i=t(98).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(e){return o(e,i)}},function(e,n,t){"use strict";var o=t(27),i=t(118),a=t(32),s=function(e){return function(n,t,s){var r,l=o(n),d=a(l),c=i(s,d);if(e&&t!=t){for(;d>c;)if((r=l[c++])!=r)return!0}else for(;d>c;c++)if((e||c in l)&&l[c]===t)return e||c||0;return!e&&-1}};e.exports={includes:s(!0),indexOf:s(!1)}},function(e,n,t){"use strict";var o=t(65),i=Math.max,a=Math.min;e.exports=function(e,n){var t=o(e);return t<0?i(t+n,0):a(t,n)}},function(e,n,t){"use strict";var o=Math.ceil,i=Math.floor;e.exports=Math.trunc||function(e){var n=+e;return(n>0?i:o)(n)}},function(e,n,t){"use strict";var o=t(65),i=Math.min;e.exports=function(e){return e>0?i(o(e),9007199254740991):0}},function(e,n,t){"use strict";n.f=Object.getOwnPropertySymbols},function(e,n,t){"use strict";var o=t(3),i=t(0),a=/#|\.prototype\./,s=function(e,n){var t=l[r(e)];return t===c||t!==d&&(i(n)?o(n):!!n)},r=s.normalize=function(e){return String(e).replace(a,".").toLowerCase()},l=s.data={},d=s.NATIVE="N",c=s.POLYFILL="P";e.exports=s},function(e,n,t){"use strict";var o=t(29),i=t(31),a=t(47),s=t(32),r=TypeError,l=function(e){return function(n,t,l,d){o(t);var c=i(n),u=a(c),p=s(c),h=e?p-1:0,m=e?-1:1;if(l<2)for(;;){if(h in u){d=u[h],h+=m;break}if(h+=m,e?h<0:p<=h)throw r("Reduce of empty array with no initial value")}for(;e?h>=0:p>h;h+=m)h in u&&(d=t(d,u[h],h,c));return d}};e.exports={left:l(!1),right:l(!0)}},function(e,n,t){"use strict";var o=t(3);e.exports=function(e,n){var t=[][e];return!!t&&o((function(){t.call(null,n||function(){return 1},1)}))}},function(e,n,t){"use strict";var o=t(1),i=t(16);e.exports="process"===i(o.process)},function(e,n,t){"use strict";var o=t(4),i=t(127),a=TypeError,s=Object.getOwnPropertyDescriptor,r=o&&!function(){if(void 0!==this)return!0;try{Object.defineProperty([],"length",{writable:!1}).length=1}catch(e){return e instanceof TypeError}}();e.exports=r?function(e,n){if(i(e)&&!s(e,"length").writable)throw a("Cannot set read only .length");return e.length=n}:function(e,n){return e.length=n}},function(e,n,t){"use strict";var o=t(16);e.exports=Array.isArray||function(e){return"Array"===o(e)}},function(e,n,t){"use strict";var o=TypeError;e.exports=function(e){if(e>9007199254740991)throw o("Maximum allowed index exceeded");return e}},function(e,n,t){"use strict";var o=t(25),i=t(1),a=t(130),s=t(131),r=i.WebAssembly,l=7!==Error("e",{cause:7}).cause,d=function(e,n){var t={};t[e]=s(e,n,l),o({global:!0,constructor:!0,arity:1,forced:l},t)},c=function(e,n){if(r&&r[e]){var t={};t[e]=s("WebAssembly."+e,n,l),o({target:"WebAssembly",stat:!0,constructor:!0,arity:1,forced:l},t)}};d("Error",(function(e){return function(n){return a(e,this,arguments)}})),d("EvalError",(function(e){return function(n){return a(e,this,arguments)}})),d("RangeError",(function(e){return function(n){return a(e,this,arguments)}})),d("ReferenceError",(function(e){return function(n){return a(e,this,arguments)}})),d("SyntaxError",(function(e){return function(n){return a(e,this,arguments)}})),d("TypeError",(function(e){return function(n){return a(e,this,arguments)}})),d("URIError",(function(e){return function(n){return a(e,this,arguments)}})),c("CompileError",(function(e){return function(n){return a(e,this,arguments)}})),c("LinkError",(function(e){return function(n){return a(e,this,arguments)}})),c("RuntimeError",(function(e){return function(n){return a(e,this,arguments)}}))},function(e,n,t){"use strict";var o=t(26),i=Function.prototype,a=i.apply,s=i.call;e.exports="object"==typeof Reflect&&Reflect.apply||(o?s.bind(a):function(){return s.apply(a,arguments)})},function(e,n,t){"use strict";var o=t(28),i=t(7),a=t(13),s=t(56),r=t(66),l=t(64),d=t(134),c=t(135),u=t(136),p=t(139),h=t(140),m=t(4),f=t(61);e.exports=function(e,n,t,g){var b=g?2:1,y=e.split("."),v=y[y.length-1],w=o.apply(null,y);if(w){var k=w.prototype;if(!f&&i(k,"cause")&&delete k.cause,!t)return w;var S=o("Error"),x=n((function(e,n){var t=u(g?n:e,void 0),o=g?new w(e):new w;return void 0!==t&&a(o,"message",t),h(o,x,o.stack,2),this&&s(k,this)&&c(o,this,x),arguments.length>b&&p(o,arguments[b]),o}));if(x.prototype=k,"Error"!==v?r?r(x,S):l(x,S,{name:!0}):m&&"stackTraceLimit"in w&&(d(x,w,"stackTraceLimit"),d(x,w,"prepareStackTrace")),l(x,w),!f)try{k.name!==v&&a(k,"name",v),k.constructor=x}catch(e){}return x}}},function(e,n,t){"use strict";var o=t(2),i=t(29);e.exports=function(e,n,t){try{return o(i(Object.getOwnPropertyDescriptor(e,n)[t]))}catch(e){}}},function(e,n,t){"use strict";var o=t(0),i=String,a=TypeError;e.exports=function(e){if("object"==typeof e||o(e))return e;throw a("Can't set "+i(e)+" as a prototype")}},function(e,n,t){"use strict";var o=t(15).f;e.exports=function(e,n,t){t in e||o(e,t,{configurable:!0,get:function(){return n[t]},set:function(e){n[t]=e}})}},function(e,n,t){"use strict";var o=t(0),i=t(8),a=t(66);e.exports=function(e,n,t){var s,r;return a&&o(s=n.constructor)&&s!==t&&i(r=s.prototype)&&r!==t.prototype&&a(e,r),e}},function(e,n,t){"use strict";var o=t(95);e.exports=function(e,n){return void 0===e?arguments.length<2?"":n:o(e)}},function(e,n,t){"use strict";var o=t(138),i=t(0),a=t(16),s=t(30)("toStringTag"),r=Object,l="Arguments"===a(function(){return arguments}());e.exports=o?a:function(e){var n,t,o;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(t=function(e,n){try{return e[n]}catch(e){}}(n=r(e),s))?t:l?a(n):"Object"===(o=a(n))&&i(n.callee)?"Arguments":o}},function(e,n,t){"use strict";var o={};o[t(30)("toStringTag")]="z",e.exports="[object z]"===String(o)},function(e,n,t){"use strict";var o=t(8),i=t(13);e.exports=function(e,n){o(n)&&"cause"in n&&i(e,"cause",n.cause)}},function(e,n,t){"use strict";var o=t(13),i=t(141),a=t(142),s=Error.captureStackTrace;e.exports=function(e,n,t,r){a&&(s?s(e,n):o(e,"stack",i(t,r)))}},function(e,n,t){"use strict";var o=t(2),i=Error,a=o("".replace),s=String(i("zxcasd").stack),r=/\n\s*at [^:]*:[^\n]*/,l=r.test(s);e.exports=function(e,n){if(l&&"string"==typeof e&&!i.prepareStackTrace)for(;n--;)e=a(e,r,"");return e}},function(e,n,t){"use strict";var o=t(3),i=t(34);e.exports=!o((function(){var e=Error("a");return!("stack"in e)||(Object.defineProperty(e,"stack",i(1,7)),7!==e.stack)}))},function(e,n,t){var o=t(67),i=t(144);e.exports=function e(n,t,a,s,r){var l=-1,d=n.length;for(a||(a=i),r||(r=[]);++l<d;){var c=n[l];t>0&&a(c)?t>1?e(c,t-1,a,s,r):o(r,c):s||(r[r.length]=c)}return r}},function(e,n,t){var o=t(14),i=t(37),a=t(5),s=o?o.isConcatSpreadable:void 0;e.exports=function(e){return a(e)||i(e)||!!(s&&e&&e[s])}},function(e,n,t){var o=t(12),i=t(11);e.exports=function(e){return i(e)&&"[object Arguments]"==o(e)}},function(e,n,t){var o=t(14),i=Object.prototype,a=i.hasOwnProperty,s=i.toString,r=o?o.toStringTag:void 0;e.exports=function(e){var n=a.call(e,r),t=e[r];try{e[r]=void 0;var o=!0}catch(e){}var i=s.call(e);return o&&(n?e[r]=t:delete e[r]),i}},function(e,n){var t=Object.prototype.toString;e.exports=function(e){return t.call(e)}},function(e,n,t){var o=t(149),i=t(205),a=t(45),s=t(5),r=t(216);e.exports=function(e){return"function"==typeof e?e:null==e?a:"object"==typeof e?s(e)?i(e[0],e[1]):o(e):r(e)}},function(e,n,t){var o=t(150),i=t(204),a=t(84);e.exports=function(e){var n=i(e);return 1==n.length&&n[0][2]?a(n[0][0],n[0][1]):function(t){return t===e||o(t,e,n)}}},function(e,n,t){var o=t(69),i=t(73);e.exports=function(e,n,t,a){var s=t.length,r=s,l=!a;if(null==e)return!r;for(e=Object(e);s--;){var d=t[s];if(l&&d[2]?d[1]!==e[d[0]]:!(d[0]in e))return!1}for(;++s<r;){var c=(d=t[s])[0],u=e[c],p=d[1];if(l&&d[2]){if(void 0===u&&!(c in e))return!1}else{var h=new o;if(a)var m=a(u,p,c,e,n,h);if(!(void 0===m?i(p,u,3,a,h):m))return!1}}return!0}},function(e,n){e.exports=function(){this.__data__=[],this.size=0}},function(e,n,t){var o=t(18),i=Array.prototype.splice;e.exports=function(e){var n=this.__data__,t=o(n,e);return!(t<0)&&(t==n.length-1?n.pop():i.call(n,t,1),--this.size,!0)}},function(e,n,t){var o=t(18);e.exports=function(e){var n=this.__data__,t=o(n,e);return t<0?void 0:n[t][1]}},function(e,n,t){var o=t(18);e.exports=function(e){return o(this.__data__,e)>-1}},function(e,n,t){var o=t(18);e.exports=function(e,n){var t=this.__data__,i=o(t,e);return i<0?(++this.size,t.push([e,n])):t[i][1]=n,this}},function(e,n,t){var o=t(17);e.exports=function(){this.__data__=new o,this.size=0}},function(e,n){e.exports=function(e){var n=this.__data__,t=n.delete(e);return this.size=n.size,t}},function(e,n){e.exports=function(e){return this.__data__.get(e)}},function(e,n){e.exports=function(e){return this.__data__.has(e)}},function(e,n,t){var o=t(17),i=t(38),a=t(40);e.exports=function(e,n){var t=this.__data__;if(t instanceof o){var s=t.__data__;if(!i||s.length<199)return s.push([e,n]),this.size=++t.size,this;t=this.__data__=new a(s)}return t.set(e,n),this.size=t.size,this}},function(e,n,t){var o=t(71),i=t(162),a=t(39),s=t(72),r=/^\[object .+?Constructor\]$/,l=Function.prototype,d=Object.prototype,c=l.toString,u=d.hasOwnProperty,p=RegExp("^"+c.call(u).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!a(e)||i(e))&&(o(e)?p:r).test(s(e))}},function(e,n,t){var o,i=t(163),a=(o=/[^.]+$/.exec(i&&i.keys&&i.keys.IE_PROTO||""))?"Symbol(src)_1."+o:"";e.exports=function(e){return!!a&&a in e}},function(e,n,t){var o=t(6)["__core-js_shared__"];e.exports=o},function(e,n){e.exports=function(e,n){return null==e?void 0:e[n]}},function(e,n,t){var o=t(166),i=t(17),a=t(38);e.exports=function(){this.size=0,this.__data__={hash:new o,map:new(a||i),string:new o}}},function(e,n,t){var o=t(167),i=t(168),a=t(169),s=t(170),r=t(171);function l(e){var n=-1,t=null==e?0:e.length;for(this.clear();++n<t;){var o=e[n];this.set(o[0],o[1])}}l.prototype.clear=o,l.prototype.delete=i,l.prototype.get=a,l.prototype.has=s,l.prototype.set=r,e.exports=l},function(e,n,t){var o=t(19);e.exports=function(){this.__data__=o?o(null):{},this.size=0}},function(e,n){e.exports=function(e){var n=this.has(e)&&delete this.__data__[e];return this.size-=n?1:0,n}},function(e,n,t){var o=t(19),i=Object.prototype.hasOwnProperty;e.exports=function(e){var n=this.__data__;if(o){var t=n[e];return"__lodash_hash_undefined__"===t?void 0:t}return i.call(n,e)?n[e]:void 0}},function(e,n,t){var o=t(19),i=Object.prototype.hasOwnProperty;e.exports=function(e){var n=this.__data__;return o?void 0!==n[e]:i.call(n,e)}},function(e,n,t){var o=t(19);e.exports=function(e,n){var t=this.__data__;return this.size+=this.has(e)?0:1,t[e]=o&&void 0===n?"__lodash_hash_undefined__":n,this}},function(e,n,t){var o=t(20);e.exports=function(e){var n=o(this,e).delete(e);return this.size-=n?1:0,n}},function(e,n){e.exports=function(e){var n=typeof e;return"string"==n||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==e:null===e}},function(e,n,t){var o=t(20);e.exports=function(e){return o(this,e).get(e)}},function(e,n,t){var o=t(20);e.exports=function(e){return o(this,e).has(e)}},function(e,n,t){var o=t(20);e.exports=function(e,n){var t=o(this,e),i=t.size;return t.set(e,n),this.size+=t.size==i?0:1,this}},function(e,n,t){var o=t(69),i=t(74),a=t(181),s=t(184),r=t(200),l=t(5),d=t(78),c=t(80),u="[object Object]",p=Object.prototype.hasOwnProperty;e.exports=function(e,n,t,h,m,f){var g=l(e),b=l(n),y=g?"[object Array]":r(e),v=b?"[object Array]":r(n),w=(y="[object Arguments]"==y?u:y)==u,k=(v="[object Arguments]"==v?u:v)==u,S=y==v;if(S&&d(e)){if(!d(n))return!1;g=!0,w=!1}if(S&&!w)return f||(f=new o),g||c(e)?i(e,n,t,h,m,f):a(e,n,y,t,h,m,f);if(!(1&t)){var x=w&&p.call(e,"__wrapped__"),I=k&&p.call(n,"__wrapped__");if(x||I){var C=x?e.value():e,A=I?n.value():n;return f||(f=new o),m(C,A,t,h,f)}}return!!S&&(f||(f=new o),s(e,n,t,h,m,f))}},function(e,n){e.exports=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this}},function(e,n){e.exports=function(e){return this.__data__.has(e)}},function(e,n){e.exports=function(e,n){for(var t=-1,o=null==e?0:e.length;++t<o;)if(n(e[t],t,e))return!0;return!1}},function(e,n,t){var o=t(14),i=t(182),a=t(70),s=t(74),r=t(183),l=t(41),d=o?o.prototype:void 0,c=d?d.valueOf:void 0;e.exports=function(e,n,t,o,d,u,p){switch(t){case"[object DataView]":if(e.byteLength!=n.byteLength||e.byteOffset!=n.byteOffset)return!1;e=e.buffer,n=n.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=n.byteLength||!u(new i(e),new i(n)));case"[object Boolean]":case"[object Date]":case"[object Number]":return a(+e,+n);case"[object Error]":return e.name==n.name&&e.message==n.message;case"[object RegExp]":case"[object String]":return e==n+"";case"[object Map]":var h=r;case"[object Set]":var m=1&o;if(h||(h=l),e.size!=n.size&&!m)return!1;var f=p.get(e);if(f)return f==n;o|=2,p.set(e,n);var g=s(h(e),h(n),o,d,u,p);return p.delete(e),g;case"[object Symbol]":if(c)return c.call(e)==c.call(n)}return!1}},function(e,n,t){var o=t(6).Uint8Array;e.exports=o},function(e,n){e.exports=function(e){var n=-1,t=Array(e.size);return e.forEach((function(e,o){t[++n]=[o,e]})),t}},function(e,n,t){var o=t(185),i=Object.prototype.hasOwnProperty;e.exports=function(e,n,t,a,s,r){var l=1&t,d=o(e),c=d.length;if(c!=o(n).length&&!l)return!1;for(var u=c;u--;){var p=d[u];if(!(l?p in n:i.call(n,p)))return!1}var h=r.get(e),m=r.get(n);if(h&&m)return h==n&&m==e;var f=!0;r.set(e,n),r.set(n,e);for(var g=l;++u<c;){var b=e[p=d[u]],y=n[p];if(a)var v=l?a(y,b,p,n,e,r):a(b,y,p,e,n,r);if(!(void 0===v?b===y||s(b,y,t,a,r):v)){f=!1;break}g||(g="constructor"==p)}if(f&&!g){var w=e.constructor,k=n.constructor;w==k||!("constructor"in e)||!("constructor"in n)||"function"==typeof w&&w instanceof w&&"function"==typeof k&&k instanceof k||(f=!1)}return r.delete(e),r.delete(n),f}},function(e,n,t){var o=t(186),i=t(187),a=t(77);e.exports=function(e){return o(e,a,i)}},function(e,n,t){var o=t(67),i=t(5);e.exports=function(e,n,t){var a=n(e);return i(e)?a:o(a,t(e))}},function(e,n,t){var o=t(188),i=t(189),a=Object.prototype.propertyIsEnumerable,s=Object.getOwnPropertySymbols,r=s?function(e){return null==e?[]:(e=Object(e),o(s(e),(function(n){return a.call(e,n)})))}:i;e.exports=r},function(e,n){e.exports=function(e,n){for(var t=-1,o=null==e?0:e.length,i=0,a=[];++t<o;){var s=e[t];n(s,t,e)&&(a[i++]=s)}return a}},function(e,n){e.exports=function(){return[]}},function(e,n,t){var o=t(191),i=t(37),a=t(5),s=t(78),r=t(79),l=t(80),d=Object.prototype.hasOwnProperty;e.exports=function(e,n){var t=a(e),c=!t&&i(e),u=!t&&!c&&s(e),p=!t&&!c&&!u&&l(e),h=t||c||u||p,m=h?o(e.length,String):[],f=m.length;for(var g in e)!n&&!d.call(e,g)||h&&("length"==g||u&&("offset"==g||"parent"==g)||p&&("buffer"==g||"byteLength"==g||"byteOffset"==g)||r(g,f))||m.push(g);return m}},function(e,n){e.exports=function(e,n){for(var t=-1,o=Array(e);++t<e;)o[t]=n(t);return o}},function(e,n){e.exports=function(){return!1}},function(e,n,t){var o=t(12),i=t(42),a=t(11),s={};s["[object Float32Array]"]=s["[object Float64Array]"]=s["[object Int8Array]"]=s["[object Int16Array]"]=s["[object Int32Array]"]=s["[object Uint8Array]"]=s["[object Uint8ClampedArray]"]=s["[object Uint16Array]"]=s["[object Uint32Array]"]=!0,s["[object Arguments]"]=s["[object Array]"]=s["[object ArrayBuffer]"]=s["[object Boolean]"]=s["[object DataView]"]=s["[object Date]"]=s["[object Error]"]=s["[object Function]"]=s["[object Map]"]=s["[object Number]"]=s["[object Object]"]=s["[object RegExp]"]=s["[object Set]"]=s["[object String]"]=s["[object WeakMap]"]=!1,e.exports=function(e){return a(e)&&i(e.length)&&!!s[o(e)]}},function(e,n){e.exports=function(e){return function(n){return e(n)}}},function(e,n,t){(function(e){var o=t(68),i=n&&!n.nodeType&&n,a=i&&"object"==typeof e&&e&&!e.nodeType&&e,s=a&&a.exports===i&&o.process,r=function(){try{var e=a&&a.require&&a.require("util").types;return e||s&&s.binding&&s.binding("util")}catch(e){}}();e.exports=r}).call(this,t(49)(e))},function(e,n,t){var o=t(197),i=t(198),a=Object.prototype.hasOwnProperty;e.exports=function(e){if(!o(e))return i(e);var n=[];for(var t in Object(e))a.call(e,t)&&"constructor"!=t&&n.push(t);return n}},function(e,n){var t=Object.prototype;e.exports=function(e){var n=e&&e.constructor;return e===("function"==typeof n&&n.prototype||t)}},function(e,n,t){var o=t(199)(Object.keys,Object);e.exports=o},function(e,n){e.exports=function(e,n){return function(t){return e(n(t))}}},function(e,n,t){var o=t(201),i=t(38),a=t(202),s=t(82),r=t(203),l=t(12),d=t(72),c=d(o),u=d(i),p=d(a),h=d(s),m=d(r),f=l;(o&&"[object DataView]"!=f(new o(new ArrayBuffer(1)))||i&&"[object Map]"!=f(new i)||a&&"[object Promise]"!=f(a.resolve())||s&&"[object Set]"!=f(new s)||r&&"[object WeakMap]"!=f(new r))&&(f=function(e){var n=l(e),t="[object Object]"==n?e.constructor:void 0,o=t?d(t):"";if(o)switch(o){case c:return"[object DataView]";case u:return"[object Map]";case p:return"[object Promise]";case h:return"[object Set]";case m:return"[object WeakMap]"}return n}),e.exports=f},function(e,n,t){var o=t(9)(t(6),"DataView");e.exports=o},function(e,n,t){var o=t(9)(t(6),"Promise");e.exports=o},function(e,n,t){var o=t(9)(t(6),"WeakMap");e.exports=o},function(e,n,t){var o=t(83),i=t(77);e.exports=function(e){for(var n=i(e),t=n.length;t--;){var a=n[t],s=e[a];n[t]=[a,s,o(s)]}return n}},function(e,n,t){var o=t(73),i=t(206),a=t(213),s=t(43),r=t(83),l=t(84),d=t(21);e.exports=function(e,n){return s(e)&&r(n)?l(d(e),n):function(t){var s=i(t,e);return void 0===s&&s===n?a(t,e):o(n,s,3)}}},function(e,n,t){var o=t(85);e.exports=function(e,n,t){var i=null==e?void 0:o(e,n);return void 0===i?t:i}},function(e,n,t){var o=t(208),i=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,a=/\\(\\)?/g,s=o((function(e){var n=[];return 46===e.charCodeAt(0)&&n.push(""),e.replace(i,(function(e,t,o,i){n.push(o?i.replace(a,"$1"):t||e)})),n}));e.exports=s},function(e,n,t){var o=t(209);e.exports=function(e){var n=o(e,(function(e){return 500===t.size&&t.clear(),e})),t=n.cache;return n}},function(e,n,t){var o=t(40);function i(e,n){if("function"!=typeof e||null!=n&&"function"!=typeof n)throw new TypeError("Expected a function");var t=function(){var o=arguments,i=n?n.apply(this,o):o[0],a=t.cache;if(a.has(i))return a.get(i);var s=e.apply(this,o);return t.cache=a.set(i,s)||a,s};return t.cache=new(i.Cache||o),t}i.Cache=o,e.exports=i},function(e,n,t){var o=t(211);e.exports=function(e){return null==e?"":o(e)}},function(e,n,t){var o=t(14),i=t(212),a=t(5),s=t(44),r=o?o.prototype:void 0,l=r?r.toString:void 0;e.exports=function e(n){if("string"==typeof n)return n;if(a(n))return i(n,e)+"";if(s(n))return l?l.call(n):"";var t=n+"";return"0"==t&&1/n==-1/0?"-0":t}},function(e,n){e.exports=function(e,n){for(var t=-1,o=null==e?0:e.length,i=Array(o);++t<o;)i[t]=n(e[t],t,e);return i}},function(e,n,t){var o=t(214),i=t(215);e.exports=function(e,n){return null!=e&&i(e,n,o)}},function(e,n){e.exports=function(e,n){return null!=e&&n in Object(e)}},function(e,n,t){var o=t(86),i=t(37),a=t(5),s=t(79),r=t(42),l=t(21);e.exports=function(e,n,t){for(var d=-1,c=(n=o(n,e)).length,u=!1;++d<c;){var p=l(n[d]);if(!(u=null!=e&&t(e,p)))break;e=e[p]}return u||++d!=c?u:!!(c=null==e?0:e.length)&&r(c)&&s(p,c)&&(a(e)||i(e))}},function(e,n,t){var o=t(217),i=t(218),a=t(43),s=t(21);e.exports=function(e){return a(e)?o(s(e)):i(e)}},function(e,n){e.exports=function(e){return function(n){return null==n?void 0:n[e]}}},function(e,n,t){var o=t(85);e.exports=function(e){return function(n){return o(n,e)}}},function(e,n,t){var o=t(45),i=t(220),a=t(222);e.exports=function(e,n){return a(i(e,n,o),e+"")}},function(e,n,t){var o=t(221),i=Math.max;e.exports=function(e,n,t){return n=i(void 0===n?e.length-1:n,0),function(){for(var a=arguments,s=-1,r=i(a.length-n,0),l=Array(r);++s<r;)l[s]=a[n+s];s=-1;for(var d=Array(n+1);++s<n;)d[s]=a[s];return d[n]=t(l),o(e,this,d)}}},function(e,n){e.exports=function(e,n,t){switch(t.length){case 0:return e.call(n);case 1:return e.call(n,t[0]);case 2:return e.call(n,t[0],t[1]);case 3:return e.call(n,t[0],t[1],t[2])}return e.apply(n,t)}},function(e,n,t){var o=t(223),i=t(226)(o);e.exports=i},function(e,n,t){var o=t(224),i=t(225),a=t(45),s=i?function(e,n){return i(e,"toString",{configurable:!0,enumerable:!1,value:o(n),writable:!0})}:a;e.exports=s},function(e,n){e.exports=function(e){return function(){return e}}},function(e,n,t){var o=t(9),i=function(){try{var e=o(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=i},function(e,n){var t=Date.now;e.exports=function(e){var n=0,o=0;return function(){var i=t(),a=16-(i-o);if(o=i,a>0){if(++n>=800)return arguments[0]}else n=0;return e.apply(void 0,arguments)}}},function(e,n,t){var o=t(75),i=t(228),a=t(233),s=t(76),r=t(234),l=t(41);e.exports=function(e,n,t){var d=-1,c=i,u=e.length,p=!0,h=[],m=h;if(t)p=!1,c=a;else if(u>=200){var f=n?null:r(e);if(f)return l(f);p=!1,c=s,m=new o}else m=n?[]:h;e:for(;++d<u;){var g=e[d],b=n?n(g):g;if(g=t||0!==g?g:0,p&&b==b){for(var y=m.length;y--;)if(m[y]===b)continue e;n&&m.push(b),h.push(g)}else c(m,b,t)||(m!==h&&m.push(b),h.push(g))}return h}},function(e,n,t){var o=t(229);e.exports=function(e,n){return!!(null==e?0:e.length)&&o(e,n,0)>-1}},function(e,n,t){var o=t(230),i=t(231),a=t(232);e.exports=function(e,n,t){return n==n?a(e,n,t):o(e,i,t)}},function(e,n){e.exports=function(e,n,t,o){for(var i=e.length,a=t+(o?1:-1);o?a--:++a<i;)if(n(e[a],a,e))return a;return-1}},function(e,n){e.exports=function(e){return e!=e}},function(e,n){e.exports=function(e,n,t){for(var o=t-1,i=e.length;++o<i;)if(e[o]===n)return o;return-1}},function(e,n){e.exports=function(e,n,t){for(var o=-1,i=null==e?0:e.length;++o<i;)if(t(n,e[o]))return!0;return!1}},function(e,n,t){var o=t(82),i=t(235),a=t(41),s=o&&1/a(new o([,-0]))[1]==1/0?function(e){return new o(e)}:i;e.exports=s},function(e,n){e.exports=function(){}},function(e,n,t){var o=t(81),i=t(11);e.exports=function(e){return i(e)&&o(e)}},function(e,n,t){},function(e,n,t){},function(e,n,t){},function(e,n,t){"use strict";t(87)},function(e,n,t){},function(e,n,t){"use strict";t(88)},function(e,n,t){"use strict";t(89)},function(e,n,t){"use strict";t.r(n);
/*!
 * Vue.js v2.7.14
 * (c) 2014-2022 Evan You
 * Released under the MIT License.
 */
var o=Object.freeze({}),i=Array.isArray;function a(e){return null==e}function s(e){return null!=e}function r(e){return!0===e}function l(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e||"boolean"==typeof e}function d(e){return"function"==typeof e}function c(e){return null!==e&&"object"==typeof e}var u=Object.prototype.toString;function p(e){return"[object Object]"===u.call(e)}function h(e){return"[object RegExp]"===u.call(e)}function m(e){var n=parseFloat(String(e));return n>=0&&Math.floor(n)===n&&isFinite(e)}function f(e){return s(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function g(e){return null==e?"":Array.isArray(e)||p(e)&&e.toString===u?JSON.stringify(e,null,2):String(e)}function b(e){var n=parseFloat(e);return isNaN(n)?e:n}function y(e,n){for(var t=Object.create(null),o=e.split(","),i=0;i<o.length;i++)t[o[i]]=!0;return n?function(e){return t[e.toLowerCase()]}:function(e){return t[e]}}y("slot,component",!0);var v=y("key,ref,slot,slot-scope,is");function w(e,n){var t=e.length;if(t){if(n===e[t-1])return void(e.length=t-1);var o=e.indexOf(n);if(o>-1)return e.splice(o,1)}}var k=Object.prototype.hasOwnProperty;function S(e,n){return k.call(e,n)}function x(e){var n=Object.create(null);return function(t){return n[t]||(n[t]=e(t))}}var I=/-(\w)/g,C=x((function(e){return e.replace(I,(function(e,n){return n?n.toUpperCase():""}))})),A=x((function(e){return e.charAt(0).toUpperCase()+e.slice(1)})),O=/\B([A-Z])/g,P=x((function(e){return e.replace(O,"-$1").toLowerCase()}));var M=Function.prototype.bind?function(e,n){return e.bind(n)}:function(e,n){function t(t){var o=arguments.length;return o?o>1?e.apply(n,arguments):e.call(n,t):e.call(n)}return t._length=e.length,t};function T(e,n){n=n||0;for(var t=e.length-n,o=new Array(t);t--;)o[t]=e[t+n];return o}function E(e,n){for(var t in n)e[t]=n[t];return e}function D(e){for(var n={},t=0;t<e.length;t++)e[t]&&E(n,e[t]);return n}function B(e,n,t){}var U=function(e,n,t){return!1},F=function(e){return e};function R(e,n){if(e===n)return!0;var t=c(e),o=c(n);if(!t||!o)return!t&&!o&&String(e)===String(n);try{var i=Array.isArray(e),a=Array.isArray(n);if(i&&a)return e.length===n.length&&e.every((function(e,t){return R(e,n[t])}));if(e instanceof Date&&n instanceof Date)return e.getTime()===n.getTime();if(i||a)return!1;var s=Object.keys(e),r=Object.keys(n);return s.length===r.length&&s.every((function(t){return R(e[t],n[t])}))}catch(e){return!1}}function N(e,n){for(var t=0;t<e.length;t++)if(R(e[t],n))return t;return-1}function L(e){var n=!1;return function(){n||(n=!0,e.apply(this,arguments))}}function q(e,n){return e===n?0===e&&1/e!=1/n:e==e||n==n}var G=["component","directive","filter"],z=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch","renderTracked","renderTriggered"],_={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:U,isReservedAttr:U,isUnknownElement:U,getTagNamespace:B,parsePlatformTagName:F,mustUseProp:U,async:!0,_lifecycleHooks:z},V=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function H(e){var n=(e+"").charCodeAt(0);return 36===n||95===n}function Y(e,n,t,o){Object.defineProperty(e,n,{value:t,enumerable:!!o,writable:!0,configurable:!0})}var K=new RegExp("[^".concat(V.source,".$_\\d]"));var j="__proto__"in{},W="undefined"!=typeof window,X=W&&window.navigator.userAgent.toLowerCase(),Q=X&&/msie|trident/.test(X),$=X&&X.indexOf("msie 9.0")>0,J=X&&X.indexOf("edge/")>0;X&&X.indexOf("android");var Z=X&&/iphone|ipad|ipod|ios/.test(X);X&&/chrome\/\d+/.test(X),X&&/phantomjs/.test(X);var ee,ne=X&&X.match(/firefox\/(\d+)/),te={}.watch,oe=!1;if(W)try{var ie={};Object.defineProperty(ie,"passive",{get:function(){oe=!0}}),window.addEventListener("test-passive",null,ie)}catch(e){}var ae=function(){return void 0===ee&&(ee=!W&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),ee},se=W&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function re(e){return"function"==typeof e&&/native code/.test(e.toString())}var le,de="undefined"!=typeof Symbol&&re(Symbol)&&"undefined"!=typeof Reflect&&re(Reflect.ownKeys);le="undefined"!=typeof Set&&re(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var ce=null;function ue(e){void 0===e&&(e=null),e||ce&&ce._scope.off(),ce=e,e&&e._scope.on()}var pe=function(){function e(e,n,t,o,i,a,s,r){this.tag=e,this.data=n,this.children=t,this.text=o,this.elm=i,this.ns=void 0,this.context=a,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=n&&n.key,this.componentOptions=s,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=r,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1}return Object.defineProperty(e.prototype,"child",{get:function(){return this.componentInstance},enumerable:!1,configurable:!0}),e}(),he=function(e){void 0===e&&(e="");var n=new pe;return n.text=e,n.isComment=!0,n};function me(e){return new pe(void 0,void 0,void 0,String(e))}function fe(e){var n=new pe(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return n.ns=e.ns,n.isStatic=e.isStatic,n.key=e.key,n.isComment=e.isComment,n.fnContext=e.fnContext,n.fnOptions=e.fnOptions,n.fnScopeId=e.fnScopeId,n.asyncMeta=e.asyncMeta,n.isCloned=!0,n}var ge=0,be=[],ye=function(){function e(){this._pending=!1,this.id=ge++,this.subs=[]}return e.prototype.addSub=function(e){this.subs.push(e)},e.prototype.removeSub=function(e){this.subs[this.subs.indexOf(e)]=null,this._pending||(this._pending=!0,be.push(this))},e.prototype.depend=function(n){e.target&&e.target.addDep(this)},e.prototype.notify=function(e){var n=this.subs.filter((function(e){return e}));for(var t=0,o=n.length;t<o;t++){0,n[t].update()}},e}();ye.target=null;var ve=[];function we(e){ve.push(e),ye.target=e}function ke(){ve.pop(),ye.target=ve[ve.length-1]}var Se=Array.prototype,xe=Object.create(Se);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(e){var n=Se[e];Y(xe,e,(function(){for(var t=[],o=0;o<arguments.length;o++)t[o]=arguments[o];var i,a=n.apply(this,t),s=this.__ob__;switch(e){case"push":case"unshift":i=t;break;case"splice":i=t.slice(2)}return i&&s.observeArray(i),s.dep.notify(),a}))}));var Ie=Object.getOwnPropertyNames(xe),Ce={},Ae=!0;function Oe(e){Ae=e}var Pe={notify:B,depend:B,addSub:B,removeSub:B},Me=function(){function e(e,n,t){if(void 0===n&&(n=!1),void 0===t&&(t=!1),this.value=e,this.shallow=n,this.mock=t,this.dep=t?Pe:new ye,this.vmCount=0,Y(e,"__ob__",this),i(e)){if(!t)if(j)e.__proto__=xe;else for(var o=0,a=Ie.length;o<a;o++){Y(e,r=Ie[o],xe[r])}n||this.observeArray(e)}else{var s=Object.keys(e);for(o=0;o<s.length;o++){var r;Ee(e,r=s[o],Ce,void 0,n,t)}}}return e.prototype.observeArray=function(e){for(var n=0,t=e.length;n<t;n++)Te(e[n],!1,this.mock)},e}();function Te(e,n,t){return e&&S(e,"__ob__")&&e.__ob__ instanceof Me?e.__ob__:!Ae||!t&&ae()||!i(e)&&!p(e)||!Object.isExtensible(e)||e.__v_skip||Le(e)||e instanceof pe?void 0:new Me(e,n,t)}function Ee(e,n,t,o,a,s){var r=new ye,l=Object.getOwnPropertyDescriptor(e,n);if(!l||!1!==l.configurable){var d=l&&l.get,c=l&&l.set;d&&!c||t!==Ce&&2!==arguments.length||(t=e[n]);var u=!a&&Te(t,!1,s);return Object.defineProperty(e,n,{enumerable:!0,configurable:!0,get:function(){var n=d?d.call(e):t;return ye.target&&(r.depend(),u&&(u.dep.depend(),i(n)&&Ue(n))),Le(n)&&!a?n.value:n},set:function(n){var o=d?d.call(e):t;if(q(o,n)){if(c)c.call(e,n);else{if(d)return;if(!a&&Le(o)&&!Le(n))return void(o.value=n);t=n}u=!a&&Te(n,!1,s),r.notify()}}}),r}}function De(e,n,t){if(!Ne(e)){var o=e.__ob__;return i(e)&&m(n)?(e.length=Math.max(e.length,n),e.splice(n,1,t),o&&!o.shallow&&o.mock&&Te(t,!1,!0),t):n in e&&!(n in Object.prototype)?(e[n]=t,t):e._isVue||o&&o.vmCount?t:o?(Ee(o.value,n,t,void 0,o.shallow,o.mock),o.dep.notify(),t):(e[n]=t,t)}}function Be(e,n){if(i(e)&&m(n))e.splice(n,1);else{var t=e.__ob__;e._isVue||t&&t.vmCount||Ne(e)||S(e,n)&&(delete e[n],t&&t.dep.notify())}}function Ue(e){for(var n=void 0,t=0,o=e.length;t<o;t++)(n=e[t])&&n.__ob__&&n.__ob__.dep.depend(),i(n)&&Ue(n)}function Fe(e){return Re(e,!0),Y(e,"__v_isShallow",!0),e}function Re(e,n){if(!Ne(e)){Te(e,n,ae());0}}function Ne(e){return!(!e||!e.__v_isReadonly)}function Le(e){return!(!e||!0!==e.__v_isRef)}function qe(e,n,t){Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var e=n[t];if(Le(e))return e.value;var o=e&&e.__ob__;return o&&o.dep.depend(),e},set:function(e){var o=n[t];Le(o)&&!Le(e)?o.value=e:n[t]=e}})}"".concat("watcher"," callback"),"".concat("watcher"," getter"),"".concat("watcher"," cleanup");var Ge;var ze=function(){function e(e){void 0===e&&(e=!1),this.detached=e,this.active=!0,this.effects=[],this.cleanups=[],this.parent=Ge,!e&&Ge&&(this.index=(Ge.scopes||(Ge.scopes=[])).push(this)-1)}return e.prototype.run=function(e){if(this.active){var n=Ge;try{return Ge=this,e()}finally{Ge=n}}else 0},e.prototype.on=function(){Ge=this},e.prototype.off=function(){Ge=this.parent},e.prototype.stop=function(e){if(this.active){var n=void 0,t=void 0;for(n=0,t=this.effects.length;n<t;n++)this.effects[n].teardown();for(n=0,t=this.cleanups.length;n<t;n++)this.cleanups[n]();if(this.scopes)for(n=0,t=this.scopes.length;n<t;n++)this.scopes[n].stop(!0);if(!this.detached&&this.parent&&!e){var o=this.parent.scopes.pop();o&&o!==this&&(this.parent.scopes[this.index]=o,o.index=this.index)}this.parent=void 0,this.active=!1}},e}();function _e(e){var n=e._provided,t=e.$parent&&e.$parent._provided;return t===n?e._provided=Object.create(t):n}var Ve=x((function(e){var n="&"===e.charAt(0),t="~"===(e=n?e.slice(1):e).charAt(0),o="!"===(e=t?e.slice(1):e).charAt(0);return{name:e=o?e.slice(1):e,once:t,capture:o,passive:n}}));function He(e,n){function t(){var e=t.fns;if(!i(e))return On(e,null,arguments,n,"v-on handler");for(var o=e.slice(),a=0;a<o.length;a++)On(o[a],null,arguments,n,"v-on handler")}return t.fns=e,t}function Ye(e,n,t,o,i,s){var l,d,c,u;for(l in e)d=e[l],c=n[l],u=Ve(l),a(d)||(a(c)?(a(d.fns)&&(d=e[l]=He(d,s)),r(u.once)&&(d=e[l]=i(u.name,d,u.capture)),t(u.name,d,u.capture,u.passive,u.params)):d!==c&&(c.fns=d,e[l]=c));for(l in n)a(e[l])&&o((u=Ve(l)).name,n[l],u.capture)}function Ke(e,n,t){var o;e instanceof pe&&(e=e.data.hook||(e.data.hook={}));var i=e[n];function l(){t.apply(this,arguments),w(o.fns,l)}a(i)?o=He([l]):s(i.fns)&&r(i.merged)?(o=i).fns.push(l):o=He([i,l]),o.merged=!0,e[n]=o}function je(e,n,t,o,i){if(s(n)){if(S(n,t))return e[t]=n[t],i||delete n[t],!0;if(S(n,o))return e[t]=n[o],i||delete n[o],!0}return!1}function We(e){return l(e)?[me(e)]:i(e)?function e(n,t){var o,d,c,u,p=[];for(o=0;o<n.length;o++)a(d=n[o])||"boolean"==typeof d||(c=p.length-1,u=p[c],i(d)?d.length>0&&(Xe((d=e(d,"".concat(t||"","_").concat(o)))[0])&&Xe(u)&&(p[c]=me(u.text+d[0].text),d.shift()),p.push.apply(p,d)):l(d)?Xe(u)?p[c]=me(u.text+d):""!==d&&p.push(me(d)):Xe(d)&&Xe(u)?p[c]=me(u.text+d.text):(r(n._isVList)&&s(d.tag)&&a(d.key)&&s(t)&&(d.key="__vlist".concat(t,"_").concat(o,"__")),p.push(d)));return p}(e):void 0}function Xe(e){return s(e)&&s(e.text)&&!1===e.isComment}function Qe(e,n){var t,o,a,r,l=null;if(i(e)||"string"==typeof e)for(l=new Array(e.length),t=0,o=e.length;t<o;t++)l[t]=n(e[t],t);else if("number"==typeof e)for(l=new Array(e),t=0;t<e;t++)l[t]=n(t+1,t);else if(c(e))if(de&&e[Symbol.iterator]){l=[];for(var d=e[Symbol.iterator](),u=d.next();!u.done;)l.push(n(u.value,l.length)),u=d.next()}else for(a=Object.keys(e),l=new Array(a.length),t=0,o=a.length;t<o;t++)r=a[t],l[t]=n(e[r],r,t);return s(l)||(l=[]),l._isVList=!0,l}function $e(e,n,t,o){var i,a=this.$scopedSlots[e];a?(t=t||{},o&&(t=E(E({},o),t)),i=a(t)||(d(n)?n():n)):i=this.$slots[e]||(d(n)?n():n);var s=t&&t.slot;return s?this.$createElement("template",{slot:s},i):i}function Je(e){return Tt(this.$options,"filters",e,!0)||F}function Ze(e,n){return i(e)?-1===e.indexOf(n):e!==n}function en(e,n,t,o,i){var a=_.keyCodes[n]||t;return i&&o&&!_.keyCodes[n]?Ze(i,o):a?Ze(a,e):o?P(o)!==n:void 0===e}function nn(e,n,t,o,a){if(t)if(c(t)){i(t)&&(t=D(t));var s=void 0,r=function(i){if("class"===i||"style"===i||v(i))s=e;else{var r=e.attrs&&e.attrs.type;s=o||_.mustUseProp(n,r,i)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var l=C(i),d=P(i);l in s||d in s||(s[i]=t[i],a&&((e.on||(e.on={}))["update:".concat(i)]=function(e){t[i]=e}))};for(var l in t)r(l)}else;return e}function tn(e,n){var t=this._staticTrees||(this._staticTrees=[]),o=t[e];return o&&!n||an(o=t[e]=this.$options.staticRenderFns[e].call(this._renderProxy,this._c,this),"__static__".concat(e),!1),o}function on(e,n,t){return an(e,"__once__".concat(n).concat(t?"_".concat(t):""),!0),e}function an(e,n,t){if(i(e))for(var o=0;o<e.length;o++)e[o]&&"string"!=typeof e[o]&&sn(e[o],"".concat(n,"_").concat(o),t);else sn(e,n,t)}function sn(e,n,t){e.isStatic=!0,e.key=n,e.isOnce=t}function rn(e,n){if(n)if(p(n)){var t=e.on=e.on?E({},e.on):{};for(var o in n){var i=t[o],a=n[o];t[o]=i?[].concat(i,a):a}}else;return e}function ln(e,n,t,o){n=n||{$stable:!t};for(var a=0;a<e.length;a++){var s=e[a];i(s)?ln(s,n,t):s&&(s.proxy&&(s.fn.proxy=!0),n[s.key]=s.fn)}return o&&(n.$key=o),n}function dn(e,n){for(var t=0;t<n.length;t+=2){var o=n[t];"string"==typeof o&&o&&(e[n[t]]=n[t+1])}return e}function cn(e,n){return"string"==typeof e?n+e:e}function un(e){e._o=on,e._n=b,e._s=g,e._l=Qe,e._t=$e,e._q=R,e._i=N,e._m=tn,e._f=Je,e._k=en,e._b=nn,e._v=me,e._e=he,e._u=ln,e._g=rn,e._d=dn,e._p=cn}function pn(e,n){if(!e||!e.length)return{};for(var t={},o=0,i=e.length;o<i;o++){var a=e[o],s=a.data;if(s&&s.attrs&&s.attrs.slot&&delete s.attrs.slot,a.context!==n&&a.fnContext!==n||!s||null==s.slot)(t.default||(t.default=[])).push(a);else{var r=s.slot,l=t[r]||(t[r]=[]);"template"===a.tag?l.push.apply(l,a.children||[]):l.push(a)}}for(var d in t)t[d].every(hn)&&delete t[d];return t}function hn(e){return e.isComment&&!e.asyncFactory||" "===e.text}function mn(e){return e.isComment&&e.asyncFactory}function fn(e,n,t,i){var a,s=Object.keys(t).length>0,r=n?!!n.$stable:!s,l=n&&n.$key;if(n){if(n._normalized)return n._normalized;if(r&&i&&i!==o&&l===i.$key&&!s&&!i.$hasNormal)return i;for(var d in a={},n)n[d]&&"$"!==d[0]&&(a[d]=gn(e,t,d,n[d]))}else a={};for(var c in t)c in a||(a[c]=bn(t,c));return n&&Object.isExtensible(n)&&(n._normalized=a),Y(a,"$stable",r),Y(a,"$key",l),Y(a,"$hasNormal",s),a}function gn(e,n,t,o){var a=function(){var n=ce;ue(e);var t=arguments.length?o.apply(null,arguments):o({}),a=(t=t&&"object"==typeof t&&!i(t)?[t]:We(t))&&t[0];return ue(n),t&&(!a||1===t.length&&a.isComment&&!mn(a))?void 0:t};return o.proxy&&Object.defineProperty(n,t,{get:a,enumerable:!0,configurable:!0}),a}function bn(e,n){return function(){return e[n]}}function yn(e){return{get attrs(){if(!e._attrsProxy){var n=e._attrsProxy={};Y(n,"_v_attr_proxy",!0),vn(n,e.$attrs,o,e,"$attrs")}return e._attrsProxy},get listeners(){e._listenersProxy||vn(e._listenersProxy={},e.$listeners,o,e,"$listeners");return e._listenersProxy},get slots(){return function(e){e._slotsProxy||kn(e._slotsProxy={},e.$scopedSlots);return e._slotsProxy}(e)},emit:M(e.$emit,e),expose:function(n){n&&Object.keys(n).forEach((function(t){return qe(e,n,t)}))}}}function vn(e,n,t,o,i){var a=!1;for(var s in n)s in e?n[s]!==t[s]&&(a=!0):(a=!0,wn(e,s,o,i));for(var s in e)s in n||(a=!0,delete e[s]);return a}function wn(e,n,t,o){Object.defineProperty(e,n,{enumerable:!0,configurable:!0,get:function(){return t[o][n]}})}function kn(e,n){for(var t in n)e[t]=n[t];for(var t in e)t in n||delete e[t]}var Sn=null;function xn(e,n){return(e.__esModule||de&&"Module"===e[Symbol.toStringTag])&&(e=e.default),c(e)?n.extend(e):e}function In(e){if(i(e))for(var n=0;n<e.length;n++){var t=e[n];if(s(t)&&(s(t.componentOptions)||mn(t)))return t}}function Cn(e,n,t,o,u,p){return(i(t)||l(t))&&(u=o,o=t,t=void 0),r(p)&&(u=2),function(e,n,t,o,l){if(s(t)&&s(t.__ob__))return he();s(t)&&s(t.is)&&(n=t.is);if(!n)return he();0;i(o)&&d(o[0])&&((t=t||{}).scopedSlots={default:o[0]},o.length=0);2===l?o=We(o):1===l&&(o=function(e){for(var n=0;n<e.length;n++)if(i(e[n]))return Array.prototype.concat.apply([],e);return e}(o));var u,p;if("string"==typeof n){var h=void 0;p=e.$vnode&&e.$vnode.ns||_.getTagNamespace(n),u=_.isReservedTag(n)?new pe(_.parsePlatformTagName(n),t,o,void 0,void 0,e):t&&t.pre||!s(h=Tt(e.$options,"components",n))?new pe(n,t,o,void 0,void 0,e):wt(h,t,e,o,n)}else u=wt(n,t,e,o);return i(u)?u:s(u)?(s(p)&&function e(n,t,o){n.ns=t,"foreignObject"===n.tag&&(t=void 0,o=!0);if(s(n.children))for(var i=0,l=n.children.length;i<l;i++){var d=n.children[i];s(d.tag)&&(a(d.ns)||r(o)&&"svg"!==d.tag)&&e(d,t,o)}}(u,p),s(t)&&function(e){c(e.style)&&_n(e.style);c(e.class)&&_n(e.class)}(t),u):he()}(e,n,t,o,u)}function An(e,n,t){we();try{if(n)for(var o=n;o=o.$parent;){var i=o.$options.errorCaptured;if(i)for(var a=0;a<i.length;a++)try{if(!1===i[a].call(o,e,n,t))return}catch(e){Pn(e,o,"errorCaptured hook")}}Pn(e,n,t)}finally{ke()}}function On(e,n,t,o,i){var a;try{(a=t?e.apply(n,t):e.call(n))&&!a._isVue&&f(a)&&!a._handled&&(a.catch((function(e){return An(e,o,i+" (Promise/async)")})),a._handled=!0)}catch(e){An(e,o,i)}return a}function Pn(e,n,t){if(_.errorHandler)try{return _.errorHandler.call(null,e,n,t)}catch(n){n!==e&&Mn(n,null,"config.errorHandler")}Mn(e,n,t)}function Mn(e,n,t){if(!W||"undefined"==typeof console)throw e;console.error(e)}var Tn,En=!1,Dn=[],Bn=!1;function Un(){Bn=!1;var e=Dn.slice(0);Dn.length=0;for(var n=0;n<e.length;n++)e[n]()}if("undefined"!=typeof Promise&&re(Promise)){var Fn=Promise.resolve();Tn=function(){Fn.then(Un),Z&&setTimeout(B)},En=!0}else if(Q||"undefined"==typeof MutationObserver||!re(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Tn="undefined"!=typeof setImmediate&&re(setImmediate)?function(){setImmediate(Un)}:function(){setTimeout(Un,0)};else{var Rn=1,Nn=new MutationObserver(Un),Ln=document.createTextNode(String(Rn));Nn.observe(Ln,{characterData:!0}),Tn=function(){Rn=(Rn+1)%2,Ln.data=String(Rn)},En=!0}function qn(e,n){var t;if(Dn.push((function(){if(e)try{e.call(n)}catch(e){An(e,n,"nextTick")}else t&&t(n)})),Bn||(Bn=!0,Tn()),!e&&"undefined"!=typeof Promise)return new Promise((function(e){t=e}))}function Gn(e){return function(n,t){if(void 0===t&&(t=ce),t)return function(e,n,t){var o=e.$options;o[n]=At(o[n],t)}(t,e,n)}}Gn("beforeMount"),Gn("mounted"),Gn("beforeUpdate"),Gn("updated"),Gn("beforeDestroy"),Gn("destroyed"),Gn("activated"),Gn("deactivated"),Gn("serverPrefetch"),Gn("renderTracked"),Gn("renderTriggered"),Gn("errorCaptured");var zn=new le;function _n(e){return function e(n,t){var o,a,s=i(n);if(!s&&!c(n)||n.__v_skip||Object.isFrozen(n)||n instanceof pe)return;if(n.__ob__){var r=n.__ob__.dep.id;if(t.has(r))return;t.add(r)}if(s)for(o=n.length;o--;)e(n[o],t);else if(Le(n))e(n.value,t);else for(a=Object.keys(n),o=a.length;o--;)e(n[a[o]],t)}(e,zn),zn.clear(),e}var Vn,Hn=0,Yn=function(){function e(e,n,t,o,i){var a,s;a=this,void 0===(s=Ge&&!Ge._vm?Ge:e?e._scope:void 0)&&(s=Ge),s&&s.active&&s.effects.push(a),(this.vm=e)&&i&&(e._watcher=this),o?(this.deep=!!o.deep,this.user=!!o.user,this.lazy=!!o.lazy,this.sync=!!o.sync,this.before=o.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=t,this.id=++Hn,this.active=!0,this.post=!1,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new le,this.newDepIds=new le,this.expression="",d(n)?this.getter=n:(this.getter=function(e){if(!K.test(e)){var n=e.split(".");return function(e){for(var t=0;t<n.length;t++){if(!e)return;e=e[n[t]]}return e}}}(n),this.getter||(this.getter=B)),this.value=this.lazy?void 0:this.get()}return e.prototype.get=function(){var e;we(this);var n=this.vm;try{e=this.getter.call(n,n)}catch(e){if(!this.user)throw e;An(e,n,'getter for watcher "'.concat(this.expression,'"'))}finally{this.deep&&_n(e),ke(),this.cleanupDeps()}return e},e.prototype.addDep=function(e){var n=e.id;this.newDepIds.has(n)||(this.newDepIds.add(n),this.newDeps.push(e),this.depIds.has(n)||e.addSub(this))},e.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var n=this.deps[e];this.newDepIds.has(n.id)||n.removeSub(this)}var t=this.depIds;this.depIds=this.newDepIds,this.newDepIds=t,this.newDepIds.clear(),t=this.deps,this.deps=this.newDeps,this.newDeps=t,this.newDeps.length=0},e.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():pt(this)},e.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||c(e)||this.deep){var n=this.value;if(this.value=e,this.user){var t='callback for watcher "'.concat(this.expression,'"');On(this.cb,this.vm,[e,n],this.vm,t)}else this.cb.call(this.vm,e,n)}}},e.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},e.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},e.prototype.teardown=function(){if(this.vm&&!this.vm._isBeingDestroyed&&w(this.vm._scope.effects,this),this.active){for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1,this.onStop&&this.onStop()}},e}();function Kn(e,n){Vn.$on(e,n)}function jn(e,n){Vn.$off(e,n)}function Wn(e,n){var t=Vn;return function o(){var i=n.apply(null,arguments);null!==i&&t.$off(e,o)}}function Xn(e,n,t){Vn=e,Ye(n,t||{},Kn,jn,Wn,e),Vn=void 0}var Qn=null;function $n(e){var n=Qn;return Qn=e,function(){Qn=n}}function Jn(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function Zn(e,n){if(n){if(e._directInactive=!1,Jn(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var t=0;t<e.$children.length;t++)Zn(e.$children[t]);et(e,"activated")}}function et(e,n,t,o){void 0===o&&(o=!0),we();var i=ce;o&&ue(e);var a=e.$options[n],s="".concat(n," hook");if(a)for(var r=0,l=a.length;r<l;r++)On(a[r],e,t||null,e,s);e._hasHookEvent&&e.$emit("hook:"+n),o&&ue(i),ke()}var nt=[],tt=[],ot={},it=!1,at=!1,st=0;var rt=0,lt=Date.now;if(W&&!Q){var dt=window.performance;dt&&"function"==typeof dt.now&&lt()>document.createEvent("Event").timeStamp&&(lt=function(){return dt.now()})}var ct=function(e,n){if(e.post){if(!n.post)return 1}else if(n.post)return-1;return e.id-n.id};function ut(){var e,n;for(rt=lt(),at=!0,nt.sort(ct),st=0;st<nt.length;st++)(e=nt[st]).before&&e.before(),n=e.id,ot[n]=null,e.run();var t=tt.slice(),o=nt.slice();st=nt.length=tt.length=0,ot={},it=at=!1,function(e){for(var n=0;n<e.length;n++)e[n]._inactive=!0,Zn(e[n],!0)}(t),function(e){var n=e.length;for(;n--;){var t=e[n],o=t.vm;o&&o._watcher===t&&o._isMounted&&!o._isDestroyed&&et(o,"updated")}}(o),function(){for(var e=0;e<be.length;e++){var n=be[e];n.subs=n.subs.filter((function(e){return e})),n._pending=!1}be.length=0}(),se&&_.devtools&&se.emit("flush")}function pt(e){var n=e.id;if(null==ot[n]&&(e!==ye.target||!e.noRecurse)){if(ot[n]=!0,at){for(var t=nt.length-1;t>st&&nt[t].id>e.id;)t--;nt.splice(t+1,0,e)}else nt.push(e);it||(it=!0,qn(ut))}}function ht(e,n){if(e){for(var t=Object.create(null),o=de?Reflect.ownKeys(e):Object.keys(e),i=0;i<o.length;i++){var a=o[i];if("__ob__"!==a){var s=e[a].from;if(s in n._provided)t[a]=n._provided[s];else if("default"in e[a]){var r=e[a].default;t[a]=d(r)?r.call(n):r}else 0}}return t}}function mt(e,n,t,a,s){var l,d=this,c=s.options;S(a,"_uid")?(l=Object.create(a))._original=a:(l=a,a=a._original);var u=r(c._compiled),p=!u;this.data=e,this.props=n,this.children=t,this.parent=a,this.listeners=e.on||o,this.injections=ht(c.inject,a),this.slots=function(){return d.$slots||fn(a,e.scopedSlots,d.$slots=pn(t,a)),d.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return fn(a,e.scopedSlots,this.slots())}}),u&&(this.$options=c,this.$slots=this.slots(),this.$scopedSlots=fn(a,e.scopedSlots,this.$slots)),c._scopeId?this._c=function(e,n,t,o){var s=Cn(l,e,n,t,o,p);return s&&!i(s)&&(s.fnScopeId=c._scopeId,s.fnContext=a),s}:this._c=function(e,n,t,o){return Cn(l,e,n,t,o,p)}}function ft(e,n,t,o,i){var a=fe(e);return a.fnContext=t,a.fnOptions=o,n.slot&&((a.data||(a.data={})).slot=n.slot),a}function gt(e,n){for(var t in n)e[C(t)]=n[t]}function bt(e){return e.name||e.__name||e._componentTag}un(mt.prototype);var yt={init:function(e,n){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var t=e;yt.prepatch(t,t)}else{(e.componentInstance=function(e,n){var t={_isComponent:!0,_parentVnode:e,parent:n},o=e.data.inlineTemplate;s(o)&&(t.render=o.render,t.staticRenderFns=o.staticRenderFns);return new e.componentOptions.Ctor(t)}(e,Qn)).$mount(n?e.elm:void 0,n)}},prepatch:function(e,n){var t=n.componentOptions;!function(e,n,t,i,a){var s=i.data.scopedSlots,r=e.$scopedSlots,l=!!(s&&!s.$stable||r!==o&&!r.$stable||s&&e.$scopedSlots.$key!==s.$key||!s&&e.$scopedSlots.$key),d=!!(a||e.$options._renderChildren||l),c=e.$vnode;e.$options._parentVnode=i,e.$vnode=i,e._vnode&&(e._vnode.parent=i),e.$options._renderChildren=a;var u=i.data.attrs||o;e._attrsProxy&&vn(e._attrsProxy,u,c.data&&c.data.attrs||o,e,"$attrs")&&(d=!0),e.$attrs=u,t=t||o;var p=e.$options._parentListeners;if(e._listenersProxy&&vn(e._listenersProxy,t,p||o,e,"$listeners"),e.$listeners=e.$options._parentListeners=t,Xn(e,t,p),n&&e.$options.props){Oe(!1);for(var h=e._props,m=e.$options._propKeys||[],f=0;f<m.length;f++){var g=m[f],b=e.$options.props;h[g]=Et(g,b,n,e)}Oe(!0),e.$options.propsData=n}d&&(e.$slots=pn(a,i.context),e.$forceUpdate())}(n.componentInstance=e.componentInstance,t.propsData,t.listeners,n,t.children)},insert:function(e){var n,t=e.context,o=e.componentInstance;o._isMounted||(o._isMounted=!0,et(o,"mounted")),e.data.keepAlive&&(t._isMounted?((n=o)._inactive=!1,tt.push(n)):Zn(o,!0))},destroy:function(e){var n=e.componentInstance;n._isDestroyed||(e.data.keepAlive?function e(n,t){if(!(t&&(n._directInactive=!0,Jn(n))||n._inactive)){n._inactive=!0;for(var o=0;o<n.$children.length;o++)e(n.$children[o]);et(n,"deactivated")}}(n,!0):n.$destroy())}},vt=Object.keys(yt);function wt(e,n,t,l,d){if(!a(e)){var u=t.$options._base;if(c(e)&&(e=u.extend(e)),"function"==typeof e){var p;if(a(e.cid)&&void 0===(e=function(e,n){if(r(e.error)&&s(e.errorComp))return e.errorComp;if(s(e.resolved))return e.resolved;var t=Sn;if(t&&s(e.owners)&&-1===e.owners.indexOf(t)&&e.owners.push(t),r(e.loading)&&s(e.loadingComp))return e.loadingComp;if(t&&!s(e.owners)){var o=e.owners=[t],i=!0,l=null,d=null;t.$on("hook:destroyed",(function(){return w(o,t)}));var u=function(e){for(var n=0,t=o.length;n<t;n++)o[n].$forceUpdate();e&&(o.length=0,null!==l&&(clearTimeout(l),l=null),null!==d&&(clearTimeout(d),d=null))},p=L((function(t){e.resolved=xn(t,n),i?o.length=0:u(!0)})),h=L((function(n){s(e.errorComp)&&(e.error=!0,u(!0))})),m=e(p,h);return c(m)&&(f(m)?a(e.resolved)&&m.then(p,h):f(m.component)&&(m.component.then(p,h),s(m.error)&&(e.errorComp=xn(m.error,n)),s(m.loading)&&(e.loadingComp=xn(m.loading,n),0===m.delay?e.loading=!0:l=setTimeout((function(){l=null,a(e.resolved)&&a(e.error)&&(e.loading=!0,u(!1))}),m.delay||200)),s(m.timeout)&&(d=setTimeout((function(){d=null,a(e.resolved)&&h(null)}),m.timeout)))),i=!1,e.loading?e.loadingComp:e.resolved}}(p=e,u)))return function(e,n,t,o,i){var a=he();return a.asyncFactory=e,a.asyncMeta={data:n,context:t,children:o,tag:i},a}(p,n,t,l,d);n=n||{},Yt(e),s(n.model)&&function(e,n){var t=e.model&&e.model.prop||"value",o=e.model&&e.model.event||"input";(n.attrs||(n.attrs={}))[t]=n.model.value;var a=n.on||(n.on={}),r=a[o],l=n.model.callback;s(r)?(i(r)?-1===r.indexOf(l):r!==l)&&(a[o]=[l].concat(r)):a[o]=l}(e.options,n);var h=function(e,n,t){var o=n.options.props;if(!a(o)){var i={},r=e.attrs,l=e.props;if(s(r)||s(l))for(var d in o){var c=P(d);je(i,l,d,c,!0)||je(i,r,d,c,!1)}return i}}(n,e);if(r(e.options.functional))return function(e,n,t,a,r){var l=e.options,d={},c=l.props;if(s(c))for(var u in c)d[u]=Et(u,c,n||o);else s(t.attrs)&&gt(d,t.attrs),s(t.props)&&gt(d,t.props);var p=new mt(t,d,r,a,e),h=l.render.call(null,p._c,p);if(h instanceof pe)return ft(h,t,p.parent,l,p);if(i(h)){for(var m=We(h)||[],f=new Array(m.length),g=0;g<m.length;g++)f[g]=ft(m[g],t,p.parent,l,p);return f}}(e,h,n,t,l);var m=n.on;if(n.on=n.nativeOn,r(e.options.abstract)){var g=n.slot;n={},g&&(n.slot=g)}!function(e){for(var n=e.hook||(e.hook={}),t=0;t<vt.length;t++){var o=vt[t],i=n[o],a=yt[o];i===a||i&&i._merged||(n[o]=i?kt(a,i):a)}}(n);var b=bt(e.options)||d;return new pe("vue-component-".concat(e.cid).concat(b?"-".concat(b):""),n,void 0,void 0,void 0,t,{Ctor:e,propsData:h,listeners:m,tag:d,children:l},p)}}}function kt(e,n){var t=function(t,o){e(t,o),n(t,o)};return t._merged=!0,t}var St=B,xt=_.optionMergeStrategies;function It(e,n,t){if(void 0===t&&(t=!0),!n)return e;for(var o,i,a,s=de?Reflect.ownKeys(n):Object.keys(n),r=0;r<s.length;r++)"__ob__"!==(o=s[r])&&(i=e[o],a=n[o],t&&S(e,o)?i!==a&&p(i)&&p(a)&&It(i,a):De(e,o,a));return e}function Ct(e,n,t){return t?function(){var o=d(n)?n.call(t,t):n,i=d(e)?e.call(t,t):e;return o?It(o,i):i}:n?e?function(){return It(d(n)?n.call(this,this):n,d(e)?e.call(this,this):e)}:n:e}function At(e,n){var t=n?e?e.concat(n):i(n)?n:[n]:e;return t?function(e){for(var n=[],t=0;t<e.length;t++)-1===n.indexOf(e[t])&&n.push(e[t]);return n}(t):t}function Ot(e,n,t,o){var i=Object.create(e||null);return n?E(i,n):i}xt.data=function(e,n,t){return t?Ct(e,n,t):n&&"function"!=typeof n?e:Ct(e,n)},z.forEach((function(e){xt[e]=At})),G.forEach((function(e){xt[e+"s"]=Ot})),xt.watch=function(e,n,t,o){if(e===te&&(e=void 0),n===te&&(n=void 0),!n)return Object.create(e||null);if(!e)return n;var a={};for(var s in E(a,e),n){var r=a[s],l=n[s];r&&!i(r)&&(r=[r]),a[s]=r?r.concat(l):i(l)?l:[l]}return a},xt.props=xt.methods=xt.inject=xt.computed=function(e,n,t,o){if(!e)return n;var i=Object.create(null);return E(i,e),n&&E(i,n),i},xt.provide=function(e,n){return e?function(){var t=Object.create(null);return It(t,d(e)?e.call(this):e),n&&It(t,d(n)?n.call(this):n,!1),t}:n};var Pt=function(e,n){return void 0===n?e:n};function Mt(e,n,t){if(d(n)&&(n=n.options),function(e,n){var t=e.props;if(t){var o,a,s={};if(i(t))for(o=t.length;o--;)"string"==typeof(a=t[o])&&(s[C(a)]={type:null});else if(p(t))for(var r in t)a=t[r],s[C(r)]=p(a)?a:{type:a};else 0;e.props=s}}(n),function(e,n){var t=e.inject;if(t){var o=e.inject={};if(i(t))for(var a=0;a<t.length;a++)o[t[a]]={from:t[a]};else if(p(t))for(var s in t){var r=t[s];o[s]=p(r)?E({from:s},r):{from:r}}else 0}}(n),function(e){var n=e.directives;if(n)for(var t in n){var o=n[t];d(o)&&(n[t]={bind:o,update:o})}}(n),!n._base&&(n.extends&&(e=Mt(e,n.extends,t)),n.mixins))for(var o=0,a=n.mixins.length;o<a;o++)e=Mt(e,n.mixins[o],t);var s,r={};for(s in e)l(s);for(s in n)S(e,s)||l(s);function l(o){var i=xt[o]||Pt;r[o]=i(e[o],n[o],t,o)}return r}function Tt(e,n,t,o){if("string"==typeof t){var i=e[n];if(S(i,t))return i[t];var a=C(t);if(S(i,a))return i[a];var s=A(a);return S(i,s)?i[s]:i[t]||i[a]||i[s]}}function Et(e,n,t,o){var i=n[e],a=!S(t,e),s=t[e],r=Ft(Boolean,i.type);if(r>-1)if(a&&!S(i,"default"))s=!1;else if(""===s||s===P(e)){var l=Ft(String,i.type);(l<0||r<l)&&(s=!0)}if(void 0===s){s=function(e,n,t){if(!S(n,"default"))return;var o=n.default;0;if(e&&e.$options.propsData&&void 0===e.$options.propsData[t]&&void 0!==e._props[t])return e._props[t];return d(o)&&"Function"!==Bt(n.type)?o.call(e):o}(o,i,e);var c=Ae;Oe(!0),Te(s),Oe(c)}return s}var Dt=/^\s*function (\w+)/;function Bt(e){var n=e&&e.toString().match(Dt);return n?n[1]:""}function Ut(e,n){return Bt(e)===Bt(n)}function Ft(e,n){if(!i(n))return Ut(n,e)?0:-1;for(var t=0,o=n.length;t<o;t++)if(Ut(n[t],e))return t;return-1}var Rt={enumerable:!0,configurable:!0,get:B,set:B};function Nt(e,n,t){Rt.get=function(){return this[n][t]},Rt.set=function(e){this[n][t]=e},Object.defineProperty(e,t,Rt)}function Lt(e){var n=e.$options;if(n.props&&function(e,n){var t=e.$options.propsData||{},o=e._props=Fe({}),i=e.$options._propKeys=[];e.$parent&&Oe(!1);var a=function(a){i.push(a);var s=Et(a,n,t,e);Ee(o,a,s),a in e||Nt(e,"_props",a)};for(var s in n)a(s);Oe(!0)}(e,n.props),function(e){var n=e.$options,t=n.setup;if(t){var o=e._setupContext=yn(e);ue(e),we();var i=On(t,null,[e._props||Fe({}),o],e,"setup");if(ke(),ue(),d(i))n.render=i;else if(c(i))if(e._setupState=i,i.__sfc){var a=e._setupProxy={};for(var s in i)"__sfc"!==s&&qe(a,i,s)}else for(var s in i)H(s)||qe(e,i,s);else 0}}(e),n.methods&&function(e,n){e.$options.props;for(var t in n)e[t]="function"!=typeof n[t]?B:M(n[t],e)}(e,n.methods),n.data)!function(e){var n=e.$options.data;p(n=e._data=d(n)?function(e,n){we();try{return e.call(n,n)}catch(e){return An(e,n,"data()"),{}}finally{ke()}}(n,e):n||{})||(n={});var t=Object.keys(n),o=e.$options.props,i=(e.$options.methods,t.length);for(;i--;){var a=t[i];0,o&&S(o,a)||H(a)||Nt(e,"_data",a)}var s=Te(n);s&&s.vmCount++}(e);else{var t=Te(e._data={});t&&t.vmCount++}n.computed&&function(e,n){var t=e._computedWatchers=Object.create(null),o=ae();for(var i in n){var a=n[i],s=d(a)?a:a.get;0,o||(t[i]=new Yn(e,s||B,B,qt)),i in e||Gt(e,i,a)}}(e,n.computed),n.watch&&n.watch!==te&&function(e,n){for(var t in n){var o=n[t];if(i(o))for(var a=0;a<o.length;a++)Vt(e,t,o[a]);else Vt(e,t,o)}}(e,n.watch)}var qt={lazy:!0};function Gt(e,n,t){var o=!ae();d(t)?(Rt.get=o?zt(n):_t(t),Rt.set=B):(Rt.get=t.get?o&&!1!==t.cache?zt(n):_t(t.get):B,Rt.set=t.set||B),Object.defineProperty(e,n,Rt)}function zt(e){return function(){var n=this._computedWatchers&&this._computedWatchers[e];if(n)return n.dirty&&n.evaluate(),ye.target&&n.depend(),n.value}}function _t(e){return function(){return e.call(this,this)}}function Vt(e,n,t,o){return p(t)&&(o=t,t=t.handler),"string"==typeof t&&(t=e[t]),e.$watch(n,t,o)}var Ht=0;function Yt(e){var n=e.options;if(e.super){var t=Yt(e.super);if(t!==e.superOptions){e.superOptions=t;var o=function(e){var n,t=e.options,o=e.sealedOptions;for(var i in t)t[i]!==o[i]&&(n||(n={}),n[i]=t[i]);return n}(e);o&&E(e.extendOptions,o),(n=e.options=Mt(t,e.extendOptions)).name&&(n.components[n.name]=e)}}return n}function Kt(e){this._init(e)}function jt(e){e.cid=0;var n=1;e.extend=function(e){e=e||{};var t=this,o=t.cid,i=e._Ctor||(e._Ctor={});if(i[o])return i[o];var a=bt(e)||bt(t.options);var s=function(e){this._init(e)};return(s.prototype=Object.create(t.prototype)).constructor=s,s.cid=n++,s.options=Mt(t.options,e),s.super=t,s.options.props&&function(e){var n=e.options.props;for(var t in n)Nt(e.prototype,"_props",t)}(s),s.options.computed&&function(e){var n=e.options.computed;for(var t in n)Gt(e.prototype,t,n[t])}(s),s.extend=t.extend,s.mixin=t.mixin,s.use=t.use,G.forEach((function(e){s[e]=t[e]})),a&&(s.options.components[a]=s),s.superOptions=t.options,s.extendOptions=e,s.sealedOptions=E({},s.options),i[o]=s,s}}function Wt(e){return e&&(bt(e.Ctor.options)||e.tag)}function Xt(e,n){return i(e)?e.indexOf(n)>-1:"string"==typeof e?e.split(",").indexOf(n)>-1:!!h(e)&&e.test(n)}function Qt(e,n){var t=e.cache,o=e.keys,i=e._vnode;for(var a in t){var s=t[a];if(s){var r=s.name;r&&!n(r)&&$t(t,a,o,i)}}}function $t(e,n,t,o){var i=e[n];!i||o&&i.tag===o.tag||i.componentInstance.$destroy(),e[n]=null,w(t,n)}Kt.prototype._init=function(e){var n=this;n._uid=Ht++,n._isVue=!0,n.__v_skip=!0,n._scope=new ze(!0),n._scope._vm=!0,e&&e._isComponent?function(e,n){var t=e.$options=Object.create(e.constructor.options),o=n._parentVnode;t.parent=n.parent,t._parentVnode=o;var i=o.componentOptions;t.propsData=i.propsData,t._parentListeners=i.listeners,t._renderChildren=i.children,t._componentTag=i.tag,n.render&&(t.render=n.render,t.staticRenderFns=n.staticRenderFns)}(n,e):n.$options=Mt(Yt(n.constructor),e||{},n),n._renderProxy=n,n._self=n,function(e){var n=e.$options,t=n.parent;if(t&&!n.abstract){for(;t.$options.abstract&&t.$parent;)t=t.$parent;t.$children.push(e)}e.$parent=t,e.$root=t?t.$root:e,e.$children=[],e.$refs={},e._provided=t?t._provided:Object.create(null),e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}(n),function(e){e._events=Object.create(null),e._hasHookEvent=!1;var n=e.$options._parentListeners;n&&Xn(e,n)}(n),function(e){e._vnode=null,e._staticTrees=null;var n=e.$options,t=e.$vnode=n._parentVnode,i=t&&t.context;e.$slots=pn(n._renderChildren,i),e.$scopedSlots=t?fn(e.$parent,t.data.scopedSlots,e.$slots):o,e._c=function(n,t,o,i){return Cn(e,n,t,o,i,!1)},e.$createElement=function(n,t,o,i){return Cn(e,n,t,o,i,!0)};var a=t&&t.data;Ee(e,"$attrs",a&&a.attrs||o,null,!0),Ee(e,"$listeners",n._parentListeners||o,null,!0)}(n),et(n,"beforeCreate",void 0,!1),function(e){var n=ht(e.$options.inject,e);n&&(Oe(!1),Object.keys(n).forEach((function(t){Ee(e,t,n[t])})),Oe(!0))}(n),Lt(n),function(e){var n=e.$options.provide;if(n){var t=d(n)?n.call(e):n;if(!c(t))return;for(var o=_e(e),i=de?Reflect.ownKeys(t):Object.keys(t),a=0;a<i.length;a++){var s=i[a];Object.defineProperty(o,s,Object.getOwnPropertyDescriptor(t,s))}}}(n),et(n,"created"),n.$options.el&&n.$mount(n.$options.el)},function(e){var n={get:function(){return this._data}},t={get:function(){return this._props}};Object.defineProperty(e.prototype,"$data",n),Object.defineProperty(e.prototype,"$props",t),e.prototype.$set=De,e.prototype.$delete=Be,e.prototype.$watch=function(e,n,t){if(p(n))return Vt(this,e,n,t);(t=t||{}).user=!0;var o=new Yn(this,e,n,t);if(t.immediate){var i='callback for immediate watcher "'.concat(o.expression,'"');we(),On(n,this,[o.value],this,i),ke()}return function(){o.teardown()}}}(Kt),function(e){var n=/^hook:/;e.prototype.$on=function(e,t){var o=this;if(i(e))for(var a=0,s=e.length;a<s;a++)o.$on(e[a],t);else(o._events[e]||(o._events[e]=[])).push(t),n.test(e)&&(o._hasHookEvent=!0);return o},e.prototype.$once=function(e,n){var t=this;function o(){t.$off(e,o),n.apply(t,arguments)}return o.fn=n,t.$on(e,o),t},e.prototype.$off=function(e,n){var t=this;if(!arguments.length)return t._events=Object.create(null),t;if(i(e)){for(var o=0,a=e.length;o<a;o++)t.$off(e[o],n);return t}var s,r=t._events[e];if(!r)return t;if(!n)return t._events[e]=null,t;for(var l=r.length;l--;)if((s=r[l])===n||s.fn===n){r.splice(l,1);break}return t},e.prototype.$emit=function(e){var n=this,t=n._events[e];if(t){t=t.length>1?T(t):t;for(var o=T(arguments,1),i='event handler for "'.concat(e,'"'),a=0,s=t.length;a<s;a++)On(t[a],n,o,n,i)}return n}}(Kt),function(e){e.prototype._update=function(e,n){var t=this,o=t.$el,i=t._vnode,a=$n(t);t._vnode=e,t.$el=i?t.__patch__(i,e):t.__patch__(t.$el,e,n,!1),a(),o&&(o.__vue__=null),t.$el&&(t.$el.__vue__=t);for(var s=t;s&&s.$vnode&&s.$parent&&s.$vnode===s.$parent._vnode;)s.$parent.$el=s.$el,s=s.$parent},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){et(e,"beforeDestroy"),e._isBeingDestroyed=!0;var n=e.$parent;!n||n._isBeingDestroyed||e.$options.abstract||w(n.$children,e),e._scope.stop(),e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),et(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}(Kt),function(e){un(e.prototype),e.prototype.$nextTick=function(e){return qn(e,this)},e.prototype._render=function(){var e,n=this,t=n.$options,o=t.render,a=t._parentVnode;a&&n._isMounted&&(n.$scopedSlots=fn(n.$parent,a.data.scopedSlots,n.$slots,n.$scopedSlots),n._slotsProxy&&kn(n._slotsProxy,n.$scopedSlots)),n.$vnode=a;try{ue(n),Sn=n,e=o.call(n._renderProxy,n.$createElement)}catch(t){An(t,n,"render"),e=n._vnode}finally{Sn=null,ue()}return i(e)&&1===e.length&&(e=e[0]),e instanceof pe||(e=he()),e.parent=a,e}}(Kt);var Jt=[String,RegExp,Array],Zt={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Jt,exclude:Jt,max:[String,Number]},methods:{cacheVNode:function(){var e=this.cache,n=this.keys,t=this.vnodeToCache,o=this.keyToCache;if(t){var i=t.tag,a=t.componentInstance,s=t.componentOptions;e[o]={name:Wt(s),tag:i,componentInstance:a},n.push(o),this.max&&n.length>parseInt(this.max)&&$t(e,n[0],n,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)$t(this.cache,e,this.keys)},mounted:function(){var e=this;this.cacheVNode(),this.$watch("include",(function(n){Qt(e,(function(e){return Xt(n,e)}))})),this.$watch("exclude",(function(n){Qt(e,(function(e){return!Xt(n,e)}))}))},updated:function(){this.cacheVNode()},render:function(){var e=this.$slots.default,n=In(e),t=n&&n.componentOptions;if(t){var o=Wt(t),i=this.include,a=this.exclude;if(i&&(!o||!Xt(i,o))||a&&o&&Xt(a,o))return n;var s=this.cache,r=this.keys,l=null==n.key?t.Ctor.cid+(t.tag?"::".concat(t.tag):""):n.key;s[l]?(n.componentInstance=s[l].componentInstance,w(r,l),r.push(l)):(this.vnodeToCache=n,this.keyToCache=l),n.data.keepAlive=!0}return n||e&&e[0]}}};!function(e){var n={get:function(){return _}};Object.defineProperty(e,"config",n),e.util={warn:St,extend:E,mergeOptions:Mt,defineReactive:Ee},e.set=De,e.delete=Be,e.nextTick=qn,e.observable=function(e){return Te(e),e},e.options=Object.create(null),G.forEach((function(n){e.options[n+"s"]=Object.create(null)})),e.options._base=e,E(e.options.components,Zt),function(e){e.use=function(e){var n=this._installedPlugins||(this._installedPlugins=[]);if(n.indexOf(e)>-1)return this;var t=T(arguments,1);return t.unshift(this),d(e.install)?e.install.apply(e,t):d(e)&&e.apply(null,t),n.push(e),this}}(e),function(e){e.mixin=function(e){return this.options=Mt(this.options,e),this}}(e),jt(e),function(e){G.forEach((function(n){e[n]=function(e,t){return t?("component"===n&&p(t)&&(t.name=t.name||e,t=this.options._base.extend(t)),"directive"===n&&d(t)&&(t={bind:t,update:t}),this.options[n+"s"][e]=t,t):this.options[n+"s"][e]}}))}(e)}(Kt),Object.defineProperty(Kt.prototype,"$isServer",{get:ae}),Object.defineProperty(Kt.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Kt,"FunctionalRenderContext",{value:mt}),Kt.version="2.7.14";var eo=y("style,class"),no=y("input,textarea,option,select,progress"),to=y("contenteditable,draggable,spellcheck"),oo=y("events,caret,typing,plaintext-only"),io=y("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),ao="http://www.w3.org/1999/xlink",so=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},ro=function(e){return so(e)?e.slice(6,e.length):""},lo=function(e){return null==e||!1===e};function co(e){for(var n=e.data,t=e,o=e;s(o.componentInstance);)(o=o.componentInstance._vnode)&&o.data&&(n=uo(o.data,n));for(;s(t=t.parent);)t&&t.data&&(n=uo(n,t.data));return function(e,n){if(s(e)||s(n))return po(e,ho(n));return""}(n.staticClass,n.class)}function uo(e,n){return{staticClass:po(e.staticClass,n.staticClass),class:s(e.class)?[e.class,n.class]:n.class}}function po(e,n){return e?n?e+" "+n:e:n||""}function ho(e){return Array.isArray(e)?function(e){for(var n,t="",o=0,i=e.length;o<i;o++)s(n=ho(e[o]))&&""!==n&&(t&&(t+=" "),t+=n);return t}(e):c(e)?function(e){var n="";for(var t in e)e[t]&&(n&&(n+=" "),n+=t);return n}(e):"string"==typeof e?e:""}var mo={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},fo=y("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),go=y("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),bo=function(e){return fo(e)||go(e)};var yo=Object.create(null);var vo=y("text,number,password,search,email,tel,url");var wo=Object.freeze({__proto__:null,createElement:function(e,n){var t=document.createElement(e);return"select"!==e||n.data&&n.data.attrs&&void 0!==n.data.attrs.multiple&&t.setAttribute("multiple","multiple"),t},createElementNS:function(e,n){return document.createElementNS(mo[e],n)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,n,t){e.insertBefore(n,t)},removeChild:function(e,n){e.removeChild(n)},appendChild:function(e,n){e.appendChild(n)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,n){e.textContent=n},setStyleScope:function(e,n){e.setAttribute(n,"")}}),ko={create:function(e,n){So(n)},update:function(e,n){e.data.ref!==n.data.ref&&(So(e,!0),So(n))},destroy:function(e){So(e,!0)}};function So(e,n){var t=e.data.ref;if(s(t)){var o=e.context,a=e.componentInstance||e.elm,r=n?null:a,l=n?void 0:a;if(d(t))On(t,o,[r],o,"template ref function");else{var c=e.data.refInFor,u="string"==typeof t||"number"==typeof t,p=Le(t),h=o.$refs;if(u||p)if(c){var m=u?h[t]:t.value;n?i(m)&&w(m,a):i(m)?m.includes(a)||m.push(a):u?(h[t]=[a],xo(o,t,h[t])):t.value=[a]}else if(u){if(n&&h[t]!==a)return;h[t]=l,xo(o,t,r)}else if(p){if(n&&t.value!==a)return;t.value=r}else 0}}}function xo(e,n,t){var o=e._setupState;o&&S(o,n)&&(Le(o[n])?o[n].value=t:o[n]=t)}var Io=new pe("",{},[]),Co=["create","activate","update","remove","destroy"];function Ao(e,n){return e.key===n.key&&e.asyncFactory===n.asyncFactory&&(e.tag===n.tag&&e.isComment===n.isComment&&s(e.data)===s(n.data)&&function(e,n){if("input"!==e.tag)return!0;var t,o=s(t=e.data)&&s(t=t.attrs)&&t.type,i=s(t=n.data)&&s(t=t.attrs)&&t.type;return o===i||vo(o)&&vo(i)}(e,n)||r(e.isAsyncPlaceholder)&&a(n.asyncFactory.error))}function Oo(e,n,t){var o,i,a={};for(o=n;o<=t;++o)s(i=e[o].key)&&(a[i]=o);return a}var Po={create:Mo,update:Mo,destroy:function(e){Mo(e,Io)}};function Mo(e,n){(e.data.directives||n.data.directives)&&function(e,n){var t,o,i,a=e===Io,s=n===Io,r=Eo(e.data.directives,e.context),l=Eo(n.data.directives,n.context),d=[],c=[];for(t in l)o=r[t],i=l[t],o?(i.oldValue=o.value,i.oldArg=o.arg,Bo(i,"update",n,e),i.def&&i.def.componentUpdated&&c.push(i)):(Bo(i,"bind",n,e),i.def&&i.def.inserted&&d.push(i));if(d.length){var u=function(){for(var t=0;t<d.length;t++)Bo(d[t],"inserted",n,e)};a?Ke(n,"insert",u):u()}c.length&&Ke(n,"postpatch",(function(){for(var t=0;t<c.length;t++)Bo(c[t],"componentUpdated",n,e)}));if(!a)for(t in r)l[t]||Bo(r[t],"unbind",e,e,s)}(e,n)}var To=Object.create(null);function Eo(e,n){var t,o,i=Object.create(null);if(!e)return i;for(t=0;t<e.length;t++){if((o=e[t]).modifiers||(o.modifiers=To),i[Do(o)]=o,n._setupState&&n._setupState.__sfc){var a=o.def||Tt(n,"_setupState","v-"+o.name);o.def="function"==typeof a?{bind:a,update:a}:a}o.def=o.def||Tt(n.$options,"directives",o.name)}return i}function Do(e){return e.rawName||"".concat(e.name,".").concat(Object.keys(e.modifiers||{}).join("."))}function Bo(e,n,t,o,i){var a=e.def&&e.def[n];if(a)try{a(t.elm,e,t,o,i)}catch(o){An(o,t.context,"directive ".concat(e.name," ").concat(n," hook"))}}var Uo=[ko,Po];function Fo(e,n){var t=n.componentOptions;if(!(s(t)&&!1===t.Ctor.options.inheritAttrs||a(e.data.attrs)&&a(n.data.attrs))){var o,i,l=n.elm,d=e.data.attrs||{},c=n.data.attrs||{};for(o in(s(c.__ob__)||r(c._v_attr_proxy))&&(c=n.data.attrs=E({},c)),c)i=c[o],d[o]!==i&&Ro(l,o,i,n.data.pre);for(o in(Q||J)&&c.value!==d.value&&Ro(l,"value",c.value),d)a(c[o])&&(so(o)?l.removeAttributeNS(ao,ro(o)):to(o)||l.removeAttribute(o))}}function Ro(e,n,t,o){o||e.tagName.indexOf("-")>-1?No(e,n,t):io(n)?lo(t)?e.removeAttribute(n):(t="allowfullscreen"===n&&"EMBED"===e.tagName?"true":n,e.setAttribute(n,t)):to(n)?e.setAttribute(n,function(e,n){return lo(n)||"false"===n?"false":"contenteditable"===e&&oo(n)?n:"true"}(n,t)):so(n)?lo(t)?e.removeAttributeNS(ao,ro(n)):e.setAttributeNS(ao,n,t):No(e,n,t)}function No(e,n,t){if(lo(t))e.removeAttribute(n);else{if(Q&&!$&&"TEXTAREA"===e.tagName&&"placeholder"===n&&""!==t&&!e.__ieph){var o=function(n){n.stopImmediatePropagation(),e.removeEventListener("input",o)};e.addEventListener("input",o),e.__ieph=!0}e.setAttribute(n,t)}}var Lo={create:Fo,update:Fo};function qo(e,n){var t=n.elm,o=n.data,i=e.data;if(!(a(o.staticClass)&&a(o.class)&&(a(i)||a(i.staticClass)&&a(i.class)))){var r=co(n),l=t._transitionClasses;s(l)&&(r=po(r,ho(l))),r!==t._prevClass&&(t.setAttribute("class",r),t._prevClass=r)}}var Go,zo={create:qo,update:qo};function _o(e,n,t){var o=Go;return function i(){var a=n.apply(null,arguments);null!==a&&Yo(e,i,t,o)}}var Vo=En&&!(ne&&Number(ne[1])<=53);function Ho(e,n,t,o){if(Vo){var i=rt,a=n;n=a._wrapper=function(e){if(e.target===e.currentTarget||e.timeStamp>=i||e.timeStamp<=0||e.target.ownerDocument!==document)return a.apply(this,arguments)}}Go.addEventListener(e,n,oe?{capture:t,passive:o}:t)}function Yo(e,n,t,o){(o||Go).removeEventListener(e,n._wrapper||n,t)}function Ko(e,n){if(!a(e.data.on)||!a(n.data.on)){var t=n.data.on||{},o=e.data.on||{};Go=n.elm||e.elm,function(e){if(s(e.__r)){var n=Q?"change":"input";e[n]=[].concat(e.__r,e[n]||[]),delete e.__r}s(e.__c)&&(e.change=[].concat(e.__c,e.change||[]),delete e.__c)}(t),Ye(t,o,Ho,Yo,_o,n.context),Go=void 0}}var jo,Wo={create:Ko,update:Ko,destroy:function(e){return Ko(e,Io)}};function Xo(e,n){if(!a(e.data.domProps)||!a(n.data.domProps)){var t,o,i=n.elm,l=e.data.domProps||{},d=n.data.domProps||{};for(t in(s(d.__ob__)||r(d._v_attr_proxy))&&(d=n.data.domProps=E({},d)),l)t in d||(i[t]="");for(t in d){if(o=d[t],"textContent"===t||"innerHTML"===t){if(n.children&&(n.children.length=0),o===l[t])continue;1===i.childNodes.length&&i.removeChild(i.childNodes[0])}if("value"===t&&"PROGRESS"!==i.tagName){i._value=o;var c=a(o)?"":String(o);Qo(i,c)&&(i.value=c)}else if("innerHTML"===t&&go(i.tagName)&&a(i.innerHTML)){(jo=jo||document.createElement("div")).innerHTML="<svg>".concat(o,"</svg>");for(var u=jo.firstChild;i.firstChild;)i.removeChild(i.firstChild);for(;u.firstChild;)i.appendChild(u.firstChild)}else if(o!==l[t])try{i[t]=o}catch(e){}}}}function Qo(e,n){return!e.composing&&("OPTION"===e.tagName||function(e,n){var t=!0;try{t=document.activeElement!==e}catch(e){}return t&&e.value!==n}(e,n)||function(e,n){var t=e.value,o=e._vModifiers;if(s(o)){if(o.number)return b(t)!==b(n);if(o.trim)return t.trim()!==n.trim()}return t!==n}(e,n))}var $o={create:Xo,update:Xo},Jo=x((function(e){var n={},t=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach((function(e){if(e){var o=e.split(t);o.length>1&&(n[o[0].trim()]=o[1].trim())}})),n}));function Zo(e){var n=ei(e.style);return e.staticStyle?E(e.staticStyle,n):n}function ei(e){return Array.isArray(e)?D(e):"string"==typeof e?Jo(e):e}var ni,ti=/^--/,oi=/\s*!important$/,ii=function(e,n,t){if(ti.test(n))e.style.setProperty(n,t);else if(oi.test(t))e.style.setProperty(P(n),t.replace(oi,""),"important");else{var o=si(n);if(Array.isArray(t))for(var i=0,a=t.length;i<a;i++)e.style[o]=t[i];else e.style[o]=t}},ai=["Webkit","Moz","ms"],si=x((function(e){if(ni=ni||document.createElement("div").style,"filter"!==(e=C(e))&&e in ni)return e;for(var n=e.charAt(0).toUpperCase()+e.slice(1),t=0;t<ai.length;t++){var o=ai[t]+n;if(o in ni)return o}}));function ri(e,n){var t=n.data,o=e.data;if(!(a(t.staticStyle)&&a(t.style)&&a(o.staticStyle)&&a(o.style))){var i,r,l=n.elm,d=o.staticStyle,c=o.normalizedStyle||o.style||{},u=d||c,p=ei(n.data.style)||{};n.data.normalizedStyle=s(p.__ob__)?E({},p):p;var h=function(e,n){var t,o={};if(n)for(var i=e;i.componentInstance;)(i=i.componentInstance._vnode)&&i.data&&(t=Zo(i.data))&&E(o,t);(t=Zo(e.data))&&E(o,t);for(var a=e;a=a.parent;)a.data&&(t=Zo(a.data))&&E(o,t);return o}(n,!0);for(r in u)a(h[r])&&ii(l,r,"");for(r in h)(i=h[r])!==u[r]&&ii(l,r,null==i?"":i)}}var li={create:ri,update:ri},di=/\s+/;function ci(e,n){if(n&&(n=n.trim()))if(e.classList)n.indexOf(" ")>-1?n.split(di).forEach((function(n){return e.classList.add(n)})):e.classList.add(n);else{var t=" ".concat(e.getAttribute("class")||""," ");t.indexOf(" "+n+" ")<0&&e.setAttribute("class",(t+n).trim())}}function ui(e,n){if(n&&(n=n.trim()))if(e.classList)n.indexOf(" ")>-1?n.split(di).forEach((function(n){return e.classList.remove(n)})):e.classList.remove(n),e.classList.length||e.removeAttribute("class");else{for(var t=" ".concat(e.getAttribute("class")||""," "),o=" "+n+" ";t.indexOf(o)>=0;)t=t.replace(o," ");(t=t.trim())?e.setAttribute("class",t):e.removeAttribute("class")}}function pi(e){if(e){if("object"==typeof e){var n={};return!1!==e.css&&E(n,hi(e.name||"v")),E(n,e),n}return"string"==typeof e?hi(e):void 0}}var hi=x((function(e){return{enterClass:"".concat(e,"-enter"),enterToClass:"".concat(e,"-enter-to"),enterActiveClass:"".concat(e,"-enter-active"),leaveClass:"".concat(e,"-leave"),leaveToClass:"".concat(e,"-leave-to"),leaveActiveClass:"".concat(e,"-leave-active")}})),mi=W&&!$,fi="transition",gi="transitionend",bi="animation",yi="animationend";mi&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(fi="WebkitTransition",gi="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(bi="WebkitAnimation",yi="webkitAnimationEnd"));var vi=W?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function wi(e){vi((function(){vi(e)}))}function ki(e,n){var t=e._transitionClasses||(e._transitionClasses=[]);t.indexOf(n)<0&&(t.push(n),ci(e,n))}function Si(e,n){e._transitionClasses&&w(e._transitionClasses,n),ui(e,n)}function xi(e,n,t){var o=Ci(e,n),i=o.type,a=o.timeout,s=o.propCount;if(!i)return t();var r="transition"===i?gi:yi,l=0,d=function(){e.removeEventListener(r,c),t()},c=function(n){n.target===e&&++l>=s&&d()};setTimeout((function(){l<s&&d()}),a+1),e.addEventListener(r,c)}var Ii=/\b(transform|all)(,|$)/;function Ci(e,n){var t,o=window.getComputedStyle(e),i=(o[fi+"Delay"]||"").split(", "),a=(o[fi+"Duration"]||"").split(", "),s=Ai(i,a),r=(o[bi+"Delay"]||"").split(", "),l=(o[bi+"Duration"]||"").split(", "),d=Ai(r,l),c=0,u=0;return"transition"===n?s>0&&(t="transition",c=s,u=a.length):"animation"===n?d>0&&(t="animation",c=d,u=l.length):u=(t=(c=Math.max(s,d))>0?s>d?"transition":"animation":null)?"transition"===t?a.length:l.length:0,{type:t,timeout:c,propCount:u,hasTransform:"transition"===t&&Ii.test(o[fi+"Property"])}}function Ai(e,n){for(;e.length<n.length;)e=e.concat(e);return Math.max.apply(null,n.map((function(n,t){return Oi(n)+Oi(e[t])})))}function Oi(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function Pi(e,n){var t=e.elm;s(t._leaveCb)&&(t._leaveCb.cancelled=!0,t._leaveCb());var o=pi(e.data.transition);if(!a(o)&&!s(t._enterCb)&&1===t.nodeType){for(var i=o.css,r=o.type,l=o.enterClass,u=o.enterToClass,p=o.enterActiveClass,h=o.appearClass,m=o.appearToClass,f=o.appearActiveClass,g=o.beforeEnter,y=o.enter,v=o.afterEnter,w=o.enterCancelled,k=o.beforeAppear,S=o.appear,x=o.afterAppear,I=o.appearCancelled,C=o.duration,A=Qn,O=Qn.$vnode;O&&O.parent;)A=O.context,O=O.parent;var P=!A._isMounted||!e.isRootInsert;if(!P||S||""===S){var M=P&&h?h:l,T=P&&f?f:p,E=P&&m?m:u,D=P&&k||g,B=P&&d(S)?S:y,U=P&&x||v,F=P&&I||w,R=b(c(C)?C.enter:C);0;var N=!1!==i&&!$,q=Ei(B),G=t._enterCb=L((function(){N&&(Si(t,E),Si(t,T)),G.cancelled?(N&&Si(t,M),F&&F(t)):U&&U(t),t._enterCb=null}));e.data.show||Ke(e,"insert",(function(){var n=t.parentNode,o=n&&n._pending&&n._pending[e.key];o&&o.tag===e.tag&&o.elm._leaveCb&&o.elm._leaveCb(),B&&B(t,G)})),D&&D(t),N&&(ki(t,M),ki(t,T),wi((function(){Si(t,M),G.cancelled||(ki(t,E),q||(Ti(R)?setTimeout(G,R):xi(t,r,G)))}))),e.data.show&&(n&&n(),B&&B(t,G)),N||q||G()}}}function Mi(e,n){var t=e.elm;s(t._enterCb)&&(t._enterCb.cancelled=!0,t._enterCb());var o=pi(e.data.transition);if(a(o)||1!==t.nodeType)return n();if(!s(t._leaveCb)){var i=o.css,r=o.type,l=o.leaveClass,d=o.leaveToClass,u=o.leaveActiveClass,p=o.beforeLeave,h=o.leave,m=o.afterLeave,f=o.leaveCancelled,g=o.delayLeave,y=o.duration,v=!1!==i&&!$,w=Ei(h),k=b(c(y)?y.leave:y);0;var S=t._leaveCb=L((function(){t.parentNode&&t.parentNode._pending&&(t.parentNode._pending[e.key]=null),v&&(Si(t,d),Si(t,u)),S.cancelled?(v&&Si(t,l),f&&f(t)):(n(),m&&m(t)),t._leaveCb=null}));g?g(x):x()}function x(){S.cancelled||(!e.data.show&&t.parentNode&&((t.parentNode._pending||(t.parentNode._pending={}))[e.key]=e),p&&p(t),v&&(ki(t,l),ki(t,u),wi((function(){Si(t,l),S.cancelled||(ki(t,d),w||(Ti(k)?setTimeout(S,k):xi(t,r,S)))}))),h&&h(t,S),v||w||S())}}function Ti(e){return"number"==typeof e&&!isNaN(e)}function Ei(e){if(a(e))return!1;var n=e.fns;return s(n)?Ei(Array.isArray(n)?n[0]:n):(e._length||e.length)>1}function Di(e,n){!0!==n.data.show&&Pi(n)}var Bi=function(e){var n,t,o={},d=e.modules,c=e.nodeOps;for(n=0;n<Co.length;++n)for(o[Co[n]]=[],t=0;t<d.length;++t)s(d[t][Co[n]])&&o[Co[n]].push(d[t][Co[n]]);function u(e){var n=c.parentNode(e);s(n)&&c.removeChild(n,e)}function p(e,n,t,i,a,l,d){if(s(e.elm)&&s(l)&&(e=l[d]=fe(e)),e.isRootInsert=!a,!function(e,n,t,i){var a=e.data;if(s(a)){var l=s(e.componentInstance)&&a.keepAlive;if(s(a=a.hook)&&s(a=a.init)&&a(e,!1),s(e.componentInstance))return h(e,n),m(t,e.elm,i),r(l)&&function(e,n,t,i){var a,r=e;for(;r.componentInstance;)if(r=r.componentInstance._vnode,s(a=r.data)&&s(a=a.transition)){for(a=0;a<o.activate.length;++a)o.activate[a](Io,r);n.push(r);break}m(t,e.elm,i)}(e,n,t,i),!0}}(e,n,t,i)){var u=e.data,p=e.children,g=e.tag;s(g)?(e.elm=e.ns?c.createElementNS(e.ns,g):c.createElement(g,e),v(e),f(e,p,n),s(u)&&b(e,n),m(t,e.elm,i)):r(e.isComment)?(e.elm=c.createComment(e.text),m(t,e.elm,i)):(e.elm=c.createTextNode(e.text),m(t,e.elm,i))}}function h(e,n){s(e.data.pendingInsert)&&(n.push.apply(n,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,g(e)?(b(e,n),v(e)):(So(e),n.push(e))}function m(e,n,t){s(e)&&(s(t)?c.parentNode(t)===e&&c.insertBefore(e,n,t):c.appendChild(e,n))}function f(e,n,t){if(i(n)){0;for(var o=0;o<n.length;++o)p(n[o],t,e.elm,null,!0,n,o)}else l(e.text)&&c.appendChild(e.elm,c.createTextNode(String(e.text)))}function g(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return s(e.tag)}function b(e,t){for(var i=0;i<o.create.length;++i)o.create[i](Io,e);s(n=e.data.hook)&&(s(n.create)&&n.create(Io,e),s(n.insert)&&t.push(e))}function v(e){var n;if(s(n=e.fnScopeId))c.setStyleScope(e.elm,n);else for(var t=e;t;)s(n=t.context)&&s(n=n.$options._scopeId)&&c.setStyleScope(e.elm,n),t=t.parent;s(n=Qn)&&n!==e.context&&n!==e.fnContext&&s(n=n.$options._scopeId)&&c.setStyleScope(e.elm,n)}function w(e,n,t,o,i,a){for(;o<=i;++o)p(t[o],a,e,n,!1,t,o)}function k(e){var n,t,i=e.data;if(s(i))for(s(n=i.hook)&&s(n=n.destroy)&&n(e),n=0;n<o.destroy.length;++n)o.destroy[n](e);if(s(n=e.children))for(t=0;t<e.children.length;++t)k(e.children[t])}function S(e,n,t){for(;n<=t;++n){var o=e[n];s(o)&&(s(o.tag)?(x(o),k(o)):u(o.elm))}}function x(e,n){if(s(n)||s(e.data)){var t,i=o.remove.length+1;for(s(n)?n.listeners+=i:n=function(e,n){function t(){0==--t.listeners&&u(e)}return t.listeners=n,t}(e.elm,i),s(t=e.componentInstance)&&s(t=t._vnode)&&s(t.data)&&x(t,n),t=0;t<o.remove.length;++t)o.remove[t](e,n);s(t=e.data.hook)&&s(t=t.remove)?t(e,n):n()}else u(e.elm)}function I(e,n,t,o){for(var i=t;i<o;i++){var a=n[i];if(s(a)&&Ao(e,a))return i}}function C(e,n,t,i,l,d){if(e!==n){s(n.elm)&&s(i)&&(n=i[l]=fe(n));var u=n.elm=e.elm;if(r(e.isAsyncPlaceholder))s(n.asyncFactory.resolved)?P(e.elm,n,t):n.isAsyncPlaceholder=!0;else if(r(n.isStatic)&&r(e.isStatic)&&n.key===e.key&&(r(n.isCloned)||r(n.isOnce)))n.componentInstance=e.componentInstance;else{var h,m=n.data;s(m)&&s(h=m.hook)&&s(h=h.prepatch)&&h(e,n);var f=e.children,b=n.children;if(s(m)&&g(n)){for(h=0;h<o.update.length;++h)o.update[h](e,n);s(h=m.hook)&&s(h=h.update)&&h(e,n)}a(n.text)?s(f)&&s(b)?f!==b&&function(e,n,t,o,i){var r,l,d,u=0,h=0,m=n.length-1,f=n[0],g=n[m],b=t.length-1,y=t[0],v=t[b],k=!i;for(0;u<=m&&h<=b;)a(f)?f=n[++u]:a(g)?g=n[--m]:Ao(f,y)?(C(f,y,o,t,h),f=n[++u],y=t[++h]):Ao(g,v)?(C(g,v,o,t,b),g=n[--m],v=t[--b]):Ao(f,v)?(C(f,v,o,t,b),k&&c.insertBefore(e,f.elm,c.nextSibling(g.elm)),f=n[++u],v=t[--b]):Ao(g,y)?(C(g,y,o,t,h),k&&c.insertBefore(e,g.elm,f.elm),g=n[--m],y=t[++h]):(a(r)&&(r=Oo(n,u,m)),a(l=s(y.key)?r[y.key]:I(y,n,u,m))?p(y,o,e,f.elm,!1,t,h):Ao(d=n[l],y)?(C(d,y,o,t,h),n[l]=void 0,k&&c.insertBefore(e,d.elm,f.elm)):p(y,o,e,f.elm,!1,t,h),y=t[++h]);u>m?w(e,a(t[b+1])?null:t[b+1].elm,t,h,b,o):h>b&&S(n,u,m)}(u,f,b,t,d):s(b)?(s(e.text)&&c.setTextContent(u,""),w(u,null,b,0,b.length-1,t)):s(f)?S(f,0,f.length-1):s(e.text)&&c.setTextContent(u,""):e.text!==n.text&&c.setTextContent(u,n.text),s(m)&&s(h=m.hook)&&s(h=h.postpatch)&&h(e,n)}}}function A(e,n,t){if(r(t)&&s(e.parent))e.parent.data.pendingInsert=n;else for(var o=0;o<n.length;++o)n[o].data.hook.insert(n[o])}var O=y("attrs,class,staticClass,staticStyle,key");function P(e,n,t,o){var i,a=n.tag,l=n.data,d=n.children;if(o=o||l&&l.pre,n.elm=e,r(n.isComment)&&s(n.asyncFactory))return n.isAsyncPlaceholder=!0,!0;if(s(l)&&(s(i=l.hook)&&s(i=i.init)&&i(n,!0),s(i=n.componentInstance)))return h(n,t),!0;if(s(a)){if(s(d))if(e.hasChildNodes())if(s(i=l)&&s(i=i.domProps)&&s(i=i.innerHTML)){if(i!==e.innerHTML)return!1}else{for(var c=!0,u=e.firstChild,p=0;p<d.length;p++){if(!u||!P(u,d[p],t,o)){c=!1;break}u=u.nextSibling}if(!c||u)return!1}else f(n,d,t);if(s(l)){var m=!1;for(var g in l)if(!O(g)){m=!0,b(n,t);break}!m&&l.class&&_n(l.class)}}else e.data!==n.text&&(e.data=n.text);return!0}return function(e,n,t,i){if(!a(n)){var l,d=!1,u=[];if(a(e))d=!0,p(n,u);else{var h=s(e.nodeType);if(!h&&Ao(e,n))C(e,n,u,null,null,i);else{if(h){if(1===e.nodeType&&e.hasAttribute("data-server-rendered")&&(e.removeAttribute("data-server-rendered"),t=!0),r(t)&&P(e,n,u))return A(n,u,!0),e;l=e,e=new pe(c.tagName(l).toLowerCase(),{},[],void 0,l)}var m=e.elm,f=c.parentNode(m);if(p(n,u,m._leaveCb?null:f,c.nextSibling(m)),s(n.parent))for(var b=n.parent,y=g(n);b;){for(var v=0;v<o.destroy.length;++v)o.destroy[v](b);if(b.elm=n.elm,y){for(var w=0;w<o.create.length;++w)o.create[w](Io,b);var x=b.data.hook.insert;if(x.merged)for(var I=1;I<x.fns.length;I++)x.fns[I]()}else So(b);b=b.parent}s(f)?S([e],0,0):s(e.tag)&&k(e)}}return A(n,u,d),n.elm}s(e)&&k(e)}}({nodeOps:wo,modules:[Lo,zo,Wo,$o,li,W?{create:Di,activate:Di,remove:function(e,n){!0!==e.data.show?Mi(e,n):n()}}:{}].concat(Uo)});$&&document.addEventListener("selectionchange",(function(){var e=document.activeElement;e&&e.vmodel&&zi(e,"input")}));var Ui={inserted:function(e,n,t,o){"select"===t.tag?(o.elm&&!o.elm._vOptions?Ke(t,"postpatch",(function(){Ui.componentUpdated(e,n,t)})):Fi(e,n,t.context),e._vOptions=[].map.call(e.options,Li)):("textarea"===t.tag||vo(e.type))&&(e._vModifiers=n.modifiers,n.modifiers.lazy||(e.addEventListener("compositionstart",qi),e.addEventListener("compositionend",Gi),e.addEventListener("change",Gi),$&&(e.vmodel=!0)))},componentUpdated:function(e,n,t){if("select"===t.tag){Fi(e,n,t.context);var o=e._vOptions,i=e._vOptions=[].map.call(e.options,Li);if(i.some((function(e,n){return!R(e,o[n])})))(e.multiple?n.value.some((function(e){return Ni(e,i)})):n.value!==n.oldValue&&Ni(n.value,i))&&zi(e,"change")}}};function Fi(e,n,t){Ri(e,n,t),(Q||J)&&setTimeout((function(){Ri(e,n,t)}),0)}function Ri(e,n,t){var o=n.value,i=e.multiple;if(!i||Array.isArray(o)){for(var a,s,r=0,l=e.options.length;r<l;r++)if(s=e.options[r],i)a=N(o,Li(s))>-1,s.selected!==a&&(s.selected=a);else if(R(Li(s),o))return void(e.selectedIndex!==r&&(e.selectedIndex=r));i||(e.selectedIndex=-1)}}function Ni(e,n){return n.every((function(n){return!R(n,e)}))}function Li(e){return"_value"in e?e._value:e.value}function qi(e){e.target.composing=!0}function Gi(e){e.target.composing&&(e.target.composing=!1,zi(e.target,"input"))}function zi(e,n){var t=document.createEvent("HTMLEvents");t.initEvent(n,!0,!0),e.dispatchEvent(t)}function _i(e){return!e.componentInstance||e.data&&e.data.transition?e:_i(e.componentInstance._vnode)}var Vi={model:Ui,show:{bind:function(e,n,t){var o=n.value,i=(t=_i(t)).data&&t.data.transition,a=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;o&&i?(t.data.show=!0,Pi(t,(function(){e.style.display=a}))):e.style.display=o?a:"none"},update:function(e,n,t){var o=n.value;!o!=!n.oldValue&&((t=_i(t)).data&&t.data.transition?(t.data.show=!0,o?Pi(t,(function(){e.style.display=e.__vOriginalDisplay})):Mi(t,(function(){e.style.display="none"}))):e.style.display=o?e.__vOriginalDisplay:"none")},unbind:function(e,n,t,o,i){i||(e.style.display=e.__vOriginalDisplay)}}},Hi={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function Yi(e){var n=e&&e.componentOptions;return n&&n.Ctor.options.abstract?Yi(In(n.children)):e}function Ki(e){var n={},t=e.$options;for(var o in t.propsData)n[o]=e[o];var i=t._parentListeners;for(var o in i)n[C(o)]=i[o];return n}function ji(e,n){if(/\d-keep-alive$/.test(n.tag))return e("keep-alive",{props:n.componentOptions.propsData})}var Wi=function(e){return e.tag||mn(e)},Xi=function(e){return"show"===e.name},Qi={name:"transition",props:Hi,abstract:!0,render:function(e){var n=this,t=this.$slots.default;if(t&&(t=t.filter(Wi)).length){0;var o=this.mode;0;var i=t[0];if(function(e){for(;e=e.parent;)if(e.data.transition)return!0}(this.$vnode))return i;var a=Yi(i);if(!a)return i;if(this._leaving)return ji(e,i);var s="__transition-".concat(this._uid,"-");a.key=null==a.key?a.isComment?s+"comment":s+a.tag:l(a.key)?0===String(a.key).indexOf(s)?a.key:s+a.key:a.key;var r=(a.data||(a.data={})).transition=Ki(this),d=this._vnode,c=Yi(d);if(a.data.directives&&a.data.directives.some(Xi)&&(a.data.show=!0),c&&c.data&&!function(e,n){return n.key===e.key&&n.tag===e.tag}(a,c)&&!mn(c)&&(!c.componentInstance||!c.componentInstance._vnode.isComment)){var u=c.data.transition=E({},r);if("out-in"===o)return this._leaving=!0,Ke(u,"afterLeave",(function(){n._leaving=!1,n.$forceUpdate()})),ji(e,i);if("in-out"===o){if(mn(a))return d;var p,h=function(){p()};Ke(r,"afterEnter",h),Ke(r,"enterCancelled",h),Ke(u,"delayLeave",(function(e){p=e}))}}return i}}},$i=E({tag:String,moveClass:String},Hi);function Ji(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function Zi(e){e.data.newPos=e.elm.getBoundingClientRect()}function ea(e){var n=e.data.pos,t=e.data.newPos,o=n.left-t.left,i=n.top-t.top;if(o||i){e.data.moved=!0;var a=e.elm.style;a.transform=a.WebkitTransform="translate(".concat(o,"px,").concat(i,"px)"),a.transitionDuration="0s"}}delete $i.mode;var na={Transition:Qi,TransitionGroup:{props:$i,beforeMount:function(){var e=this,n=this._update;this._update=function(t,o){var i=$n(e);e.__patch__(e._vnode,e.kept,!1,!0),e._vnode=e.kept,i(),n.call(e,t,o)}},render:function(e){for(var n=this.tag||this.$vnode.data.tag||"span",t=Object.create(null),o=this.prevChildren=this.children,i=this.$slots.default||[],a=this.children=[],s=Ki(this),r=0;r<i.length;r++){if((c=i[r]).tag)if(null!=c.key&&0!==String(c.key).indexOf("__vlist"))a.push(c),t[c.key]=c,(c.data||(c.data={})).transition=s;else;}if(o){var l=[],d=[];for(r=0;r<o.length;r++){var c;(c=o[r]).data.transition=s,c.data.pos=c.elm.getBoundingClientRect(),t[c.key]?l.push(c):d.push(c)}this.kept=e(n,null,l),this.removed=d}return e(n,null,a)},updated:function(){var e=this.prevChildren,n=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,n)&&(e.forEach(Ji),e.forEach(Zi),e.forEach(ea),this._reflow=document.body.offsetHeight,e.forEach((function(e){if(e.data.moved){var t=e.elm,o=t.style;ki(t,n),o.transform=o.WebkitTransform=o.transitionDuration="",t.addEventListener(gi,t._moveCb=function e(o){o&&o.target!==t||o&&!/transform$/.test(o.propertyName)||(t.removeEventListener(gi,e),t._moveCb=null,Si(t,n))})}})))},methods:{hasMove:function(e,n){if(!mi)return!1;if(this._hasMove)return this._hasMove;var t=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach((function(e){ui(t,e)})),ci(t,n),t.style.display="none",this.$el.appendChild(t);var o=Ci(t);return this.$el.removeChild(t),this._hasMove=o.hasTransform}}}};function ta(e,n){for(var t in n)e[t]=n[t];return e}Kt.config.mustUseProp=function(e,n,t){return"value"===t&&no(e)&&"button"!==n||"selected"===t&&"option"===e||"checked"===t&&"input"===e||"muted"===t&&"video"===e},Kt.config.isReservedTag=bo,Kt.config.isReservedAttr=eo,Kt.config.getTagNamespace=function(e){return go(e)?"svg":"math"===e?"math":void 0},Kt.config.isUnknownElement=function(e){if(!W)return!0;if(bo(e))return!1;if(e=e.toLowerCase(),null!=yo[e])return yo[e];var n=document.createElement(e);return e.indexOf("-")>-1?yo[e]=n.constructor===window.HTMLUnknownElement||n.constructor===window.HTMLElement:yo[e]=/HTMLUnknownElement/.test(n.toString())},E(Kt.options.directives,Vi),E(Kt.options.components,na),Kt.prototype.__patch__=W?Bi:B,Kt.prototype.$mount=function(e,n){return function(e,n,t){var o;e.$el=n,e.$options.render||(e.$options.render=he),et(e,"beforeMount"),o=function(){e._update(e._render(),t)},new Yn(e,o,B,{before:function(){e._isMounted&&!e._isDestroyed&&et(e,"beforeUpdate")}},!0),t=!1;var i=e._preWatchers;if(i)for(var a=0;a<i.length;a++)i[a].run();return null==e.$vnode&&(e._isMounted=!0,et(e,"mounted")),e}(this,e=e&&W?function(e){if("string"==typeof e){var n=document.querySelector(e);return n||document.createElement("div")}return e}(e):void 0,n)},W&&setTimeout((function(){_.devtools&&se&&se.emit("init",Kt)}),0);var oa=/[!'()*]/g,ia=function(e){return"%"+e.charCodeAt(0).toString(16)},aa=/%2C/g,sa=function(e){return encodeURIComponent(e).replace(oa,ia).replace(aa,",")};function ra(e){try{return decodeURIComponent(e)}catch(e){0}return e}var la=function(e){return null==e||"object"==typeof e?e:String(e)};function da(e){var n={};return(e=e.trim().replace(/^(\?|#|&)/,""))?(e.split("&").forEach((function(e){var t=e.replace(/\+/g," ").split("="),o=ra(t.shift()),i=t.length>0?ra(t.join("=")):null;void 0===n[o]?n[o]=i:Array.isArray(n[o])?n[o].push(i):n[o]=[n[o],i]})),n):n}function ca(e){var n=e?Object.keys(e).map((function(n){var t=e[n];if(void 0===t)return"";if(null===t)return sa(n);if(Array.isArray(t)){var o=[];return t.forEach((function(e){void 0!==e&&(null===e?o.push(sa(n)):o.push(sa(n)+"="+sa(e)))})),o.join("&")}return sa(n)+"="+sa(t)})).filter((function(e){return e.length>0})).join("&"):null;return n?"?"+n:""}var ua=/\/?$/;function pa(e,n,t,o){var i=o&&o.options.stringifyQuery,a=n.query||{};try{a=ha(a)}catch(e){}var s={name:n.name||e&&e.name,meta:e&&e.meta||{},path:n.path||"/",hash:n.hash||"",query:a,params:n.params||{},fullPath:ga(n,i),matched:e?fa(e):[]};return t&&(s.redirectedFrom=ga(t,i)),Object.freeze(s)}function ha(e){if(Array.isArray(e))return e.map(ha);if(e&&"object"==typeof e){var n={};for(var t in e)n[t]=ha(e[t]);return n}return e}var ma=pa(null,{path:"/"});function fa(e){for(var n=[];e;)n.unshift(e),e=e.parent;return n}function ga(e,n){var t=e.path,o=e.query;void 0===o&&(o={});var i=e.hash;return void 0===i&&(i=""),(t||"/")+(n||ca)(o)+i}function ba(e,n,t){return n===ma?e===n:!!n&&(e.path&&n.path?e.path.replace(ua,"")===n.path.replace(ua,"")&&(t||e.hash===n.hash&&ya(e.query,n.query)):!(!e.name||!n.name)&&(e.name===n.name&&(t||e.hash===n.hash&&ya(e.query,n.query)&&ya(e.params,n.params))))}function ya(e,n){if(void 0===e&&(e={}),void 0===n&&(n={}),!e||!n)return e===n;var t=Object.keys(e).sort(),o=Object.keys(n).sort();return t.length===o.length&&t.every((function(t,i){var a=e[t];if(o[i]!==t)return!1;var s=n[t];return null==a||null==s?a===s:"object"==typeof a&&"object"==typeof s?ya(a,s):String(a)===String(s)}))}function va(e){for(var n=0;n<e.matched.length;n++){var t=e.matched[n];for(var o in t.instances){var i=t.instances[o],a=t.enteredCbs[o];if(i&&a){delete t.enteredCbs[o];for(var s=0;s<a.length;s++)i._isBeingDestroyed||a[s](i)}}}}var wa={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(e,n){var t=n.props,o=n.children,i=n.parent,a=n.data;a.routerView=!0;for(var s=i.$createElement,r=t.name,l=i.$route,d=i._routerViewCache||(i._routerViewCache={}),c=0,u=!1;i&&i._routerRoot!==i;){var p=i.$vnode?i.$vnode.data:{};p.routerView&&c++,p.keepAlive&&i._directInactive&&i._inactive&&(u=!0),i=i.$parent}if(a.routerViewDepth=c,u){var h=d[r],m=h&&h.component;return m?(h.configProps&&ka(m,a,h.route,h.configProps),s(m,a,o)):s()}var f=l.matched[c],g=f&&f.components[r];if(!f||!g)return d[r]=null,s();d[r]={component:g},a.registerRouteInstance=function(e,n){var t=f.instances[r];(n&&t!==e||!n&&t===e)&&(f.instances[r]=n)},(a.hook||(a.hook={})).prepatch=function(e,n){f.instances[r]=n.componentInstance},a.hook.init=function(e){e.data.keepAlive&&e.componentInstance&&e.componentInstance!==f.instances[r]&&(f.instances[r]=e.componentInstance),va(l)};var b=f.props&&f.props[r];return b&&(ta(d[r],{route:l,configProps:b}),ka(g,a,l,b)),s(g,a,o)}};function ka(e,n,t,o){var i=n.props=function(e,n){switch(typeof n){case"undefined":return;case"object":return n;case"function":return n(e);case"boolean":return n?e.params:void 0;default:0}}(t,o);if(i){i=n.props=ta({},i);var a=n.attrs=n.attrs||{};for(var s in i)e.props&&s in e.props||(a[s]=i[s],delete i[s])}}function Sa(e,n,t){var o=e.charAt(0);if("/"===o)return e;if("?"===o||"#"===o)return n+e;var i=n.split("/");t&&i[i.length-1]||i.pop();for(var a=e.replace(/^\//,"").split("/"),s=0;s<a.length;s++){var r=a[s];".."===r?i.pop():"."!==r&&i.push(r)}return""!==i[0]&&i.unshift(""),i.join("/")}function xa(e){return e.replace(/\/(?:\s*\/)+/g,"/")}var Ia=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)},Ca=qa,Aa=Ea,Oa=function(e,n){return Ba(Ea(e,n),n)},Pa=Ba,Ma=La,Ta=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function Ea(e,n){for(var t,o=[],i=0,a=0,s="",r=n&&n.delimiter||"/";null!=(t=Ta.exec(e));){var l=t[0],d=t[1],c=t.index;if(s+=e.slice(a,c),a=c+l.length,d)s+=d[1];else{var u=e[a],p=t[2],h=t[3],m=t[4],f=t[5],g=t[6],b=t[7];s&&(o.push(s),s="");var y=null!=p&&null!=u&&u!==p,v="+"===g||"*"===g,w="?"===g||"*"===g,k=t[2]||r,S=m||f;o.push({name:h||i++,prefix:p||"",delimiter:k,optional:w,repeat:v,partial:y,asterisk:!!b,pattern:S?Fa(S):b?".*":"[^"+Ua(k)+"]+?"})}}return a<e.length&&(s+=e.substr(a)),s&&o.push(s),o}function Da(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function Ba(e,n){for(var t=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(t[o]=new RegExp("^(?:"+e[o].pattern+")$",Na(n)));return function(n,o){for(var i="",a=n||{},s=(o||{}).pretty?Da:encodeURIComponent,r=0;r<e.length;r++){var l=e[r];if("string"!=typeof l){var d,c=a[l.name];if(null==c){if(l.optional){l.partial&&(i+=l.prefix);continue}throw new TypeError('Expected "'+l.name+'" to be defined')}if(Ia(c)){if(!l.repeat)throw new TypeError('Expected "'+l.name+'" to not repeat, but received `'+JSON.stringify(c)+"`");if(0===c.length){if(l.optional)continue;throw new TypeError('Expected "'+l.name+'" to not be empty')}for(var u=0;u<c.length;u++){if(d=s(c[u]),!t[r].test(d))throw new TypeError('Expected all "'+l.name+'" to match "'+l.pattern+'", but received `'+JSON.stringify(d)+"`");i+=(0===u?l.prefix:l.delimiter)+d}}else{if(d=l.asterisk?encodeURI(c).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):s(c),!t[r].test(d))throw new TypeError('Expected "'+l.name+'" to match "'+l.pattern+'", but received "'+d+'"');i+=l.prefix+d}}else i+=l}return i}}function Ua(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function Fa(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function Ra(e,n){return e.keys=n,e}function Na(e){return e&&e.sensitive?"":"i"}function La(e,n,t){Ia(n)||(t=n||t,n=[]);for(var o=(t=t||{}).strict,i=!1!==t.end,a="",s=0;s<e.length;s++){var r=e[s];if("string"==typeof r)a+=Ua(r);else{var l=Ua(r.prefix),d="(?:"+r.pattern+")";n.push(r),r.repeat&&(d+="(?:"+l+d+")*"),a+=d=r.optional?r.partial?l+"("+d+")?":"(?:"+l+"("+d+"))?":l+"("+d+")"}}var c=Ua(t.delimiter||"/"),u=a.slice(-c.length)===c;return o||(a=(u?a.slice(0,-c.length):a)+"(?:"+c+"(?=$))?"),a+=i?"$":o&&u?"":"(?="+c+"|$)",Ra(new RegExp("^"+a,Na(t)),n)}function qa(e,n,t){return Ia(n)||(t=n||t,n=[]),t=t||{},e instanceof RegExp?function(e,n){var t=e.source.match(/\((?!\?)/g);if(t)for(var o=0;o<t.length;o++)n.push({name:o,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return Ra(e,n)}(e,n):Ia(e)?function(e,n,t){for(var o=[],i=0;i<e.length;i++)o.push(qa(e[i],n,t).source);return Ra(new RegExp("(?:"+o.join("|")+")",Na(t)),n)}(e,n,t):function(e,n,t){return La(Ea(e,t),n,t)}(e,n,t)}Ca.parse=Aa,Ca.compile=Oa,Ca.tokensToFunction=Pa,Ca.tokensToRegExp=Ma;var Ga=Object.create(null);function za(e,n,t){n=n||{};try{var o=Ga[e]||(Ga[e]=Ca.compile(e));return"string"==typeof n.pathMatch&&(n[0]=n.pathMatch),o(n,{pretty:!0})}catch(e){return""}finally{delete n[0]}}function _a(e,n,t,o){var i="string"==typeof e?{path:e}:e;if(i._normalized)return i;if(i.name){var a=(i=ta({},e)).params;return a&&"object"==typeof a&&(i.params=ta({},a)),i}if(!i.path&&i.params&&n){(i=ta({},i))._normalized=!0;var s=ta(ta({},n.params),i.params);if(n.name)i.name=n.name,i.params=s;else if(n.matched.length){var r=n.matched[n.matched.length-1].path;i.path=za(r,s,n.path)}else 0;return i}var l=function(e){var n="",t="",o=e.indexOf("#");o>=0&&(n=e.slice(o),e=e.slice(0,o));var i=e.indexOf("?");return i>=0&&(t=e.slice(i+1),e=e.slice(0,i)),{path:e,query:t,hash:n}}(i.path||""),d=n&&n.path||"/",c=l.path?Sa(l.path,d,t||i.append):d,u=function(e,n,t){void 0===n&&(n={});var o,i=t||da;try{o=i(e||"")}catch(e){o={}}for(var a in n){var s=n[a];o[a]=Array.isArray(s)?s.map(la):la(s)}return o}(l.query,i.query,o&&o.options.parseQuery),p=i.hash||l.hash;return p&&"#"!==p.charAt(0)&&(p="#"+p),{_normalized:!0,path:c,query:u,hash:p}}var Va,Ha=function(){},Ya={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(e){var n=this,t=this.$router,o=this.$route,i=t.resolve(this.to,o,this.append),a=i.location,s=i.route,r=i.href,l={},d=t.options.linkActiveClass,c=t.options.linkExactActiveClass,u=null==d?"router-link-active":d,p=null==c?"router-link-exact-active":c,h=null==this.activeClass?u:this.activeClass,m=null==this.exactActiveClass?p:this.exactActiveClass,f=s.redirectedFrom?pa(null,_a(s.redirectedFrom),null,t):s;l[m]=ba(o,f,this.exactPath),l[h]=this.exact||this.exactPath?l[m]:function(e,n){return 0===e.path.replace(ua,"/").indexOf(n.path.replace(ua,"/"))&&(!n.hash||e.hash===n.hash)&&function(e,n){for(var t in n)if(!(t in e))return!1;return!0}(e.query,n.query)}(o,f);var g=l[m]?this.ariaCurrentValue:null,b=function(e){Ka(e)&&(n.replace?t.replace(a,Ha):t.push(a,Ha))},y={click:Ka};Array.isArray(this.event)?this.event.forEach((function(e){y[e]=b})):y[this.event]=b;var v={class:l},w=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:r,route:s,navigate:b,isActive:l[h],isExactActive:l[m]});if(w){if(1===w.length)return w[0];if(w.length>1||!w.length)return 0===w.length?e():e("span",{},w)}if("a"===this.tag)v.on=y,v.attrs={href:r,"aria-current":g};else{var k=function e(n){var t;if(n)for(var o=0;o<n.length;o++){if("a"===(t=n[o]).tag)return t;if(t.children&&(t=e(t.children)))return t}}(this.$slots.default);if(k){k.isStatic=!1;var S=k.data=ta({},k.data);for(var x in S.on=S.on||{},S.on){var I=S.on[x];x in y&&(S.on[x]=Array.isArray(I)?I:[I])}for(var C in y)C in S.on?S.on[C].push(y[C]):S.on[C]=b;var A=k.data.attrs=ta({},k.data.attrs);A.href=r,A["aria-current"]=g}else v.on=y}return e(this.tag,v,this.$slots.default)}};function Ka(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey||e.defaultPrevented||void 0!==e.button&&0!==e.button)){if(e.currentTarget&&e.currentTarget.getAttribute){var n=e.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(n))return}return e.preventDefault&&e.preventDefault(),!0}}var ja="undefined"!=typeof window;function Wa(e,n,t,o,i){var a=n||[],s=t||Object.create(null),r=o||Object.create(null);e.forEach((function(e){!function e(n,t,o,i,a,s){var r=i.path,l=i.name;0;var d=i.pathToRegexpOptions||{},c=function(e,n,t){t||(e=e.replace(/\/$/,""));if("/"===e[0])return e;if(null==n)return e;return xa(n.path+"/"+e)}(r,a,d.strict);"boolean"==typeof i.caseSensitive&&(d.sensitive=i.caseSensitive);var u={path:c,regex:Xa(c,d),components:i.components||{default:i.component},alias:i.alias?"string"==typeof i.alias?[i.alias]:i.alias:[],instances:{},enteredCbs:{},name:l,parent:a,matchAs:s,redirect:i.redirect,beforeEnter:i.beforeEnter,meta:i.meta||{},props:null==i.props?{}:i.components?i.props:{default:i.props}};i.children&&i.children.forEach((function(i){var a=s?xa(s+"/"+i.path):void 0;e(n,t,o,i,u,a)}));t[u.path]||(n.push(u.path),t[u.path]=u);if(void 0!==i.alias)for(var p=Array.isArray(i.alias)?i.alias:[i.alias],h=0;h<p.length;++h){0;var m={path:p[h],children:i.children};e(n,t,o,m,a,u.path||"/")}l&&(o[l]||(o[l]=u))}(a,s,r,e,i)}));for(var l=0,d=a.length;l<d;l++)"*"===a[l]&&(a.push(a.splice(l,1)[0]),d--,l--);return{pathList:a,pathMap:s,nameMap:r}}function Xa(e,n){return Ca(e,[],n)}function Qa(e,n){var t=Wa(e),o=t.pathList,i=t.pathMap,a=t.nameMap;function s(e,t,s){var r=_a(e,t,!1,n),d=r.name;if(d){var c=a[d];if(!c)return l(null,r);var u=c.regex.keys.filter((function(e){return!e.optional})).map((function(e){return e.name}));if("object"!=typeof r.params&&(r.params={}),t&&"object"==typeof t.params)for(var p in t.params)!(p in r.params)&&u.indexOf(p)>-1&&(r.params[p]=t.params[p]);return r.path=za(c.path,r.params),l(c,r,s)}if(r.path){r.params={};for(var h=0;h<o.length;h++){var m=o[h],f=i[m];if($a(f.regex,r.path,r.params))return l(f,r,s)}}return l(null,r)}function r(e,t){var o=e.redirect,i="function"==typeof o?o(pa(e,t,null,n)):o;if("string"==typeof i&&(i={path:i}),!i||"object"!=typeof i)return l(null,t);var r=i,d=r.name,c=r.path,u=t.query,p=t.hash,h=t.params;if(u=r.hasOwnProperty("query")?r.query:u,p=r.hasOwnProperty("hash")?r.hash:p,h=r.hasOwnProperty("params")?r.params:h,d){a[d];return s({_normalized:!0,name:d,query:u,hash:p,params:h},void 0,t)}if(c){var m=function(e,n){return Sa(e,n.parent?n.parent.path:"/",!0)}(c,e);return s({_normalized:!0,path:za(m,h),query:u,hash:p},void 0,t)}return l(null,t)}function l(e,t,o){return e&&e.redirect?r(e,o||t):e&&e.matchAs?function(e,n,t){var o=s({_normalized:!0,path:za(t,n.params)});if(o){var i=o.matched,a=i[i.length-1];return n.params=o.params,l(a,n)}return l(null,n)}(0,t,e.matchAs):pa(e,t,o,n)}return{match:s,addRoute:function(e,n){var t="object"!=typeof e?a[e]:void 0;Wa([n||e],o,i,a,t),t&&t.alias.length&&Wa(t.alias.map((function(e){return{path:e,children:[n]}})),o,i,a,t)},getRoutes:function(){return o.map((function(e){return i[e]}))},addRoutes:function(e){Wa(e,o,i,a)}}}function $a(e,n,t){var o=n.match(e);if(!o)return!1;if(!t)return!0;for(var i=1,a=o.length;i<a;++i){var s=e.keys[i-1];s&&(t[s.name||"pathMatch"]="string"==typeof o[i]?ra(o[i]):o[i])}return!0}var Ja=ja&&window.performance&&window.performance.now?window.performance:Date;function Za(){return Ja.now().toFixed(3)}var es=Za();function ns(){return es}function ts(e){return es=e}var os=Object.create(null);function is(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var e=window.location.protocol+"//"+window.location.host,n=window.location.href.replace(e,""),t=ta({},window.history.state);return t.key=ns(),window.history.replaceState(t,"",n),window.addEventListener("popstate",rs),function(){window.removeEventListener("popstate",rs)}}function as(e,n,t,o){if(e.app){var i=e.options.scrollBehavior;i&&e.app.$nextTick((function(){var a=function(){var e=ns();if(e)return os[e]}(),s=i.call(e,n,t,o?a:null);s&&("function"==typeof s.then?s.then((function(e){ps(e,a)})).catch((function(e){0})):ps(s,a))}))}}function ss(){var e=ns();e&&(os[e]={x:window.pageXOffset,y:window.pageYOffset})}function rs(e){ss(),e.state&&e.state.key&&ts(e.state.key)}function ls(e){return cs(e.x)||cs(e.y)}function ds(e){return{x:cs(e.x)?e.x:window.pageXOffset,y:cs(e.y)?e.y:window.pageYOffset}}function cs(e){return"number"==typeof e}var us=/^#\d/;function ps(e,n){var t,o="object"==typeof e;if(o&&"string"==typeof e.selector){var i=us.test(e.selector)?document.getElementById(e.selector.slice(1)):document.querySelector(e.selector);if(i){var a=e.offset&&"object"==typeof e.offset?e.offset:{};n=function(e,n){var t=document.documentElement.getBoundingClientRect(),o=e.getBoundingClientRect();return{x:o.left-t.left-n.x,y:o.top-t.top-n.y}}(i,a={x:cs((t=a).x)?t.x:0,y:cs(t.y)?t.y:0})}else ls(e)&&(n=ds(e))}else o&&ls(e)&&(n=ds(e));n&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:n.x,top:n.y,behavior:e.behavior}):window.scrollTo(n.x,n.y))}var hs,ms=ja&&((-1===(hs=window.navigator.userAgent).indexOf("Android 2.")&&-1===hs.indexOf("Android 4.0")||-1===hs.indexOf("Mobile Safari")||-1!==hs.indexOf("Chrome")||-1!==hs.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function fs(e,n){ss();var t=window.history;try{if(n){var o=ta({},t.state);o.key=ns(),t.replaceState(o,"",e)}else t.pushState({key:ts(Za())},"",e)}catch(t){window.location[n?"replace":"assign"](e)}}function gs(e){fs(e,!0)}var bs={redirected:2,aborted:4,cancelled:8,duplicated:16};function ys(e,n){return ws(e,n,bs.redirected,'Redirected when going from "'+e.fullPath+'" to "'+function(e){if("string"==typeof e)return e;if("path"in e)return e.path;var n={};return ks.forEach((function(t){t in e&&(n[t]=e[t])})),JSON.stringify(n,null,2)}(n)+'" via a navigation guard.')}function vs(e,n){return ws(e,n,bs.cancelled,'Navigation cancelled from "'+e.fullPath+'" to "'+n.fullPath+'" with a new navigation.')}function ws(e,n,t,o){var i=new Error(o);return i._isRouter=!0,i.from=e,i.to=n,i.type=t,i}var ks=["params","query","hash"];function Ss(e){return Object.prototype.toString.call(e).indexOf("Error")>-1}function xs(e,n){return Ss(e)&&e._isRouter&&(null==n||e.type===n)}function Is(e,n,t){var o=function(i){i>=e.length?t():e[i]?n(e[i],(function(){o(i+1)})):o(i+1)};o(0)}function Cs(e){return function(n,t,o){var i=!1,a=0,s=null;As(e,(function(e,n,t,r){if("function"==typeof e&&void 0===e.cid){i=!0,a++;var l,d=Ms((function(n){var i;((i=n).__esModule||Ps&&"Module"===i[Symbol.toStringTag])&&(n=n.default),e.resolved="function"==typeof n?n:Va.extend(n),t.components[r]=n,--a<=0&&o()})),c=Ms((function(e){var n="Failed to resolve async component "+r+": "+e;s||(s=Ss(e)?e:new Error(n),o(s))}));try{l=e(d,c)}catch(e){c(e)}if(l)if("function"==typeof l.then)l.then(d,c);else{var u=l.component;u&&"function"==typeof u.then&&u.then(d,c)}}})),i||o()}}function As(e,n){return Os(e.map((function(e){return Object.keys(e.components).map((function(t){return n(e.components[t],e.instances[t],e,t)}))})))}function Os(e){return Array.prototype.concat.apply([],e)}var Ps="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function Ms(e){var n=!1;return function(){for(var t=[],o=arguments.length;o--;)t[o]=arguments[o];if(!n)return n=!0,e.apply(this,t)}}var Ts=function(e,n){this.router=e,this.base=function(e){if(!e)if(ja){var n=document.querySelector("base");e=(e=n&&n.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else e="/";"/"!==e.charAt(0)&&(e="/"+e);return e.replace(/\/$/,"")}(n),this.current=ma,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function Es(e,n,t,o){var i=As(e,(function(e,o,i,a){var s=function(e,n){"function"!=typeof e&&(e=Va.extend(e));return e.options[n]}(e,n);if(s)return Array.isArray(s)?s.map((function(e){return t(e,o,i,a)})):t(s,o,i,a)}));return Os(o?i.reverse():i)}function Ds(e,n){if(n)return function(){return e.apply(n,arguments)}}Ts.prototype.listen=function(e){this.cb=e},Ts.prototype.onReady=function(e,n){this.ready?e():(this.readyCbs.push(e),n&&this.readyErrorCbs.push(n))},Ts.prototype.onError=function(e){this.errorCbs.push(e)},Ts.prototype.transitionTo=function(e,n,t){var o,i=this;try{o=this.router.match(e,this.current)}catch(e){throw this.errorCbs.forEach((function(n){n(e)})),e}var a=this.current;this.confirmTransition(o,(function(){i.updateRoute(o),n&&n(o),i.ensureURL(),i.router.afterHooks.forEach((function(e){e&&e(o,a)})),i.ready||(i.ready=!0,i.readyCbs.forEach((function(e){e(o)})))}),(function(e){t&&t(e),e&&!i.ready&&(xs(e,bs.redirected)&&a===ma||(i.ready=!0,i.readyErrorCbs.forEach((function(n){n(e)}))))}))},Ts.prototype.confirmTransition=function(e,n,t){var o=this,i=this.current;this.pending=e;var a,s,r=function(e){!xs(e)&&Ss(e)&&(o.errorCbs.length?o.errorCbs.forEach((function(n){n(e)})):console.error(e)),t&&t(e)},l=e.matched.length-1,d=i.matched.length-1;if(ba(e,i)&&l===d&&e.matched[l]===i.matched[d])return this.ensureURL(),e.hash&&as(this.router,i,e,!1),r(((s=ws(a=i,e,bs.duplicated,'Avoided redundant navigation to current location: "'+a.fullPath+'".')).name="NavigationDuplicated",s));var c=function(e,n){var t,o=Math.max(e.length,n.length);for(t=0;t<o&&e[t]===n[t];t++);return{updated:n.slice(0,t),activated:n.slice(t),deactivated:e.slice(t)}}(this.current.matched,e.matched),u=c.updated,p=c.deactivated,h=c.activated,m=[].concat(function(e){return Es(e,"beforeRouteLeave",Ds,!0)}(p),this.router.beforeHooks,function(e){return Es(e,"beforeRouteUpdate",Ds)}(u),h.map((function(e){return e.beforeEnter})),Cs(h)),f=function(n,t){if(o.pending!==e)return r(vs(i,e));try{n(e,i,(function(n){!1===n?(o.ensureURL(!0),r(function(e,n){return ws(e,n,bs.aborted,'Navigation aborted from "'+e.fullPath+'" to "'+n.fullPath+'" via a navigation guard.')}(i,e))):Ss(n)?(o.ensureURL(!0),r(n)):"string"==typeof n||"object"==typeof n&&("string"==typeof n.path||"string"==typeof n.name)?(r(ys(i,e)),"object"==typeof n&&n.replace?o.replace(n):o.push(n)):t(n)}))}catch(e){r(e)}};Is(m,f,(function(){Is(function(e){return Es(e,"beforeRouteEnter",(function(e,n,t,o){return function(e,n,t){return function(o,i,a){return e(o,i,(function(e){"function"==typeof e&&(n.enteredCbs[t]||(n.enteredCbs[t]=[]),n.enteredCbs[t].push(e)),a(e)}))}}(e,t,o)}))}(h).concat(o.router.resolveHooks),f,(function(){if(o.pending!==e)return r(vs(i,e));o.pending=null,n(e),o.router.app&&o.router.app.$nextTick((function(){va(e)}))}))}))},Ts.prototype.updateRoute=function(e){this.current=e,this.cb&&this.cb(e)},Ts.prototype.setupListeners=function(){},Ts.prototype.teardown=function(){this.listeners.forEach((function(e){e()})),this.listeners=[],this.current=ma,this.pending=null};var Bs=function(e){function n(n,t){e.call(this,n,t),this._startLocation=Us(this.base)}return e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n,n.prototype.setupListeners=function(){var e=this;if(!(this.listeners.length>0)){var n=this.router,t=n.options.scrollBehavior,o=ms&&t;o&&this.listeners.push(is());var i=function(){var t=e.current,i=Us(e.base);e.current===ma&&i===e._startLocation||e.transitionTo(i,(function(e){o&&as(n,e,t,!0)}))};window.addEventListener("popstate",i),this.listeners.push((function(){window.removeEventListener("popstate",i)}))}},n.prototype.go=function(e){window.history.go(e)},n.prototype.push=function(e,n,t){var o=this,i=this.current;this.transitionTo(e,(function(e){fs(xa(o.base+e.fullPath)),as(o.router,e,i,!1),n&&n(e)}),t)},n.prototype.replace=function(e,n,t){var o=this,i=this.current;this.transitionTo(e,(function(e){gs(xa(o.base+e.fullPath)),as(o.router,e,i,!1),n&&n(e)}),t)},n.prototype.ensureURL=function(e){if(Us(this.base)!==this.current.fullPath){var n=xa(this.base+this.current.fullPath);e?fs(n):gs(n)}},n.prototype.getCurrentLocation=function(){return Us(this.base)},n}(Ts);function Us(e){var n=window.location.pathname,t=n.toLowerCase(),o=e.toLowerCase();return!e||t!==o&&0!==t.indexOf(xa(o+"/"))||(n=n.slice(e.length)),(n||"/")+window.location.search+window.location.hash}var Fs=function(e){function n(n,t,o){e.call(this,n,t),o&&function(e){var n=Us(e);if(!/^\/#/.test(n))return window.location.replace(xa(e+"/#"+n)),!0}(this.base)||Rs()}return e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n,n.prototype.setupListeners=function(){var e=this;if(!(this.listeners.length>0)){var n=this.router.options.scrollBehavior,t=ms&&n;t&&this.listeners.push(is());var o=function(){var n=e.current;Rs()&&e.transitionTo(Ns(),(function(o){t&&as(e.router,o,n,!0),ms||Gs(o.fullPath)}))},i=ms?"popstate":"hashchange";window.addEventListener(i,o),this.listeners.push((function(){window.removeEventListener(i,o)}))}},n.prototype.push=function(e,n,t){var o=this,i=this.current;this.transitionTo(e,(function(e){qs(e.fullPath),as(o.router,e,i,!1),n&&n(e)}),t)},n.prototype.replace=function(e,n,t){var o=this,i=this.current;this.transitionTo(e,(function(e){Gs(e.fullPath),as(o.router,e,i,!1),n&&n(e)}),t)},n.prototype.go=function(e){window.history.go(e)},n.prototype.ensureURL=function(e){var n=this.current.fullPath;Ns()!==n&&(e?qs(n):Gs(n))},n.prototype.getCurrentLocation=function(){return Ns()},n}(Ts);function Rs(){var e=Ns();return"/"===e.charAt(0)||(Gs("/"+e),!1)}function Ns(){var e=window.location.href,n=e.indexOf("#");return n<0?"":e=e.slice(n+1)}function Ls(e){var n=window.location.href,t=n.indexOf("#");return(t>=0?n.slice(0,t):n)+"#"+e}function qs(e){ms?fs(Ls(e)):window.location.hash=e}function Gs(e){ms?gs(Ls(e)):window.location.replace(Ls(e))}var zs=function(e){function n(n,t){e.call(this,n,t),this.stack=[],this.index=-1}return e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n,n.prototype.push=function(e,n,t){var o=this;this.transitionTo(e,(function(e){o.stack=o.stack.slice(0,o.index+1).concat(e),o.index++,n&&n(e)}),t)},n.prototype.replace=function(e,n,t){var o=this;this.transitionTo(e,(function(e){o.stack=o.stack.slice(0,o.index).concat(e),n&&n(e)}),t)},n.prototype.go=function(e){var n=this,t=this.index+e;if(!(t<0||t>=this.stack.length)){var o=this.stack[t];this.confirmTransition(o,(function(){var e=n.current;n.index=t,n.updateRoute(o),n.router.afterHooks.forEach((function(n){n&&n(o,e)}))}),(function(e){xs(e,bs.duplicated)&&(n.index=t)}))}},n.prototype.getCurrentLocation=function(){var e=this.stack[this.stack.length-1];return e?e.fullPath:"/"},n.prototype.ensureURL=function(){},n}(Ts),_s=function(e){void 0===e&&(e={}),this.app=null,this.apps=[],this.options=e,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=Qa(e.routes||[],this);var n=e.mode||"hash";switch(this.fallback="history"===n&&!ms&&!1!==e.fallback,this.fallback&&(n="hash"),ja||(n="abstract"),this.mode=n,n){case"history":this.history=new Bs(this,e.base);break;case"hash":this.history=new Fs(this,e.base,this.fallback);break;case"abstract":this.history=new zs(this,e.base);break;default:0}},Vs={currentRoute:{configurable:!0}};_s.prototype.match=function(e,n,t){return this.matcher.match(e,n,t)},Vs.currentRoute.get=function(){return this.history&&this.history.current},_s.prototype.init=function(e){var n=this;if(this.apps.push(e),e.$once("hook:destroyed",(function(){var t=n.apps.indexOf(e);t>-1&&n.apps.splice(t,1),n.app===e&&(n.app=n.apps[0]||null),n.app||n.history.teardown()})),!this.app){this.app=e;var t=this.history;if(t instanceof Bs||t instanceof Fs){var o=function(e){t.setupListeners(),function(e){var o=t.current,i=n.options.scrollBehavior;ms&&i&&"fullPath"in e&&as(n,e,o,!1)}(e)};t.transitionTo(t.getCurrentLocation(),o,o)}t.listen((function(e){n.apps.forEach((function(n){n._route=e}))}))}},_s.prototype.beforeEach=function(e){return Ys(this.beforeHooks,e)},_s.prototype.beforeResolve=function(e){return Ys(this.resolveHooks,e)},_s.prototype.afterEach=function(e){return Ys(this.afterHooks,e)},_s.prototype.onReady=function(e,n){this.history.onReady(e,n)},_s.prototype.onError=function(e){this.history.onError(e)},_s.prototype.push=function(e,n,t){var o=this;if(!n&&!t&&"undefined"!=typeof Promise)return new Promise((function(n,t){o.history.push(e,n,t)}));this.history.push(e,n,t)},_s.prototype.replace=function(e,n,t){var o=this;if(!n&&!t&&"undefined"!=typeof Promise)return new Promise((function(n,t){o.history.replace(e,n,t)}));this.history.replace(e,n,t)},_s.prototype.go=function(e){this.history.go(e)},_s.prototype.back=function(){this.go(-1)},_s.prototype.forward=function(){this.go(1)},_s.prototype.getMatchedComponents=function(e){var n=e?e.matched?e:this.resolve(e).route:this.currentRoute;return n?[].concat.apply([],n.matched.map((function(e){return Object.keys(e.components).map((function(n){return e.components[n]}))}))):[]},_s.prototype.resolve=function(e,n,t){var o=_a(e,n=n||this.history.current,t,this),i=this.match(o,n),a=i.redirectedFrom||i.fullPath;return{location:o,route:i,href:function(e,n,t){var o="hash"===t?"#"+n:n;return e?xa(e+"/"+o):o}(this.history.base,a,this.mode),normalizedTo:o,resolved:i}},_s.prototype.getRoutes=function(){return this.matcher.getRoutes()},_s.prototype.addRoute=function(e,n){this.matcher.addRoute(e,n),this.history.current!==ma&&this.history.transitionTo(this.history.getCurrentLocation())},_s.prototype.addRoutes=function(e){this.matcher.addRoutes(e),this.history.current!==ma&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(_s.prototype,Vs);var Hs=_s;function Ys(e,n){return e.push(n),function(){var t=e.indexOf(n);t>-1&&e.splice(t,1)}}_s.install=function e(n){if(!e.installed||Va!==n){e.installed=!0,Va=n;var t=function(e){return void 0!==e},o=function(e,n){var o=e.$options._parentVnode;t(o)&&t(o=o.data)&&t(o=o.registerRouteInstance)&&o(e,n)};n.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),n.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,o(this,this)},destroyed:function(){o(this)}}),Object.defineProperty(n.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(n.prototype,"$route",{get:function(){return this._routerRoot._route}}),n.component("RouterView",wa),n.component("RouterLink",Ya);var i=n.config.optionMergeStrategies;i.beforeRouteEnter=i.beforeRouteLeave=i.beforeRouteUpdate=i.created}},_s.version="3.6.5",_s.isNavigationFailure=xs,_s.NavigationFailureType=bs,_s.START_LOCATION=ma,ja&&window.Vue&&window.Vue.use(_s);t(104);t(93),t(129);var Ks={"components/AlgoliaSearchBox":()=>Promise.all([t.e(0),t.e(50)]).then(t.bind(null,559)),"components/DropdownLink":()=>Promise.all([t.e(0),t.e(51)]).then(t.bind(null,275)),"components/DropdownTransition":()=>Promise.all([t.e(0),t.e(63)]).then(t.bind(null,255)),"components/Home":()=>Promise.all([t.e(0),t.e(57)]).then(t.bind(null,337)),"components/NavLink":()=>t.e(69).then(t.bind(null,252)),"components/NavLinks":()=>Promise.all([t.e(0),t.e(17)]).then(t.bind(null,293)),"components/Navbar":()=>Promise.all([t.e(0),t.e(1)]).then(t.bind(null,556)),"components/Page":()=>Promise.all([t.e(0),t.e(18)]).then(t.bind(null,338)),"components/PageEdit":()=>Promise.all([t.e(0),t.e(58)]).then(t.bind(null,295)),"components/PageNav":()=>Promise.all([t.e(0),t.e(54)]).then(t.bind(null,296)),"components/Sidebar":()=>Promise.all([t.e(0),t.e(12)]).then(t.bind(null,339)),"components/SidebarButton":()=>Promise.all([t.e(0),t.e(64)]).then(t.bind(null,340)),"components/SidebarGroup":()=>Promise.all([t.e(0),t.e(3)]).then(t.bind(null,294)),"components/SidebarLink":()=>Promise.all([t.e(0),t.e(61)]).then(t.bind(null,277)),"components/SidebarLinks":()=>Promise.all([t.e(0),t.e(3)]).then(t.bind(null,274)),"global-components/Badge":()=>Promise.all([t.e(0),t.e(6)]).then(t.bind(null,565)),"global-components/CodeBlock":()=>Promise.all([t.e(0),t.e(4)]).then(t.bind(null,560)),"global-components/CodeGroup":()=>Promise.all([t.e(0),t.e(5)]).then(t.bind(null,561)),"layouts/404":()=>t.e(8).then(t.bind(null,562)),"layouts/Layout":()=>Promise.all([t.e(0),t.e(1),t.e(2)]).then(t.bind(null,563)),NotFound:()=>t.e(8).then(t.bind(null,562)),Layout:()=>Promise.all([t.e(0),t.e(1),t.e(2)]).then(t.bind(null,563)),"components/ThemeSwitcher":()=>t.e(75).then(t.bind(null,276)),"global-components/ThemeManager":()=>t.e(7).then(t.bind(null,564))},js={"v-fee899d4":()=>t.e(76).then(t.bind(null,566)),"v-466e0560":()=>t.e(21).then(t.bind(null,567)),"v-599a4736":()=>t.e(22).then(t.bind(null,568)),"v-bdcc2064":()=>t.e(77).then(t.bind(null,569)),"v-2601fe56":()=>t.e(78).then(t.bind(null,570)),"v-cbef71f6":()=>t.e(79).then(t.bind(null,571)),"v-54915676":()=>t.e(80).then(t.bind(null,572)),"v-14cbf754":()=>t.e(81).then(t.bind(null,573)),"v-32830097":()=>t.e(82).then(t.bind(null,574)),"v-6c6748c0":()=>t.e(83).then(t.bind(null,575)),"v-39a5e4a0":()=>t.e(84).then(t.bind(null,576)),"v-3ccffb54":()=>t.e(28).then(t.bind(null,577)),"v-6b07bb96":()=>t.e(29).then(t.bind(null,578)),"v-6407a8b0":()=>t.e(30).then(t.bind(null,579)),"v-4b53c656":()=>t.e(23).then(t.bind(null,580)),"v-4837bb36":()=>t.e(31).then(t.bind(null,581)),"v-5b055c76":()=>t.e(24).then(t.bind(null,582)),"v-368e92f6":()=>t.e(32).then(t.bind(null,583)),"v-3914d740":()=>t.e(33).then(t.bind(null,584)),"v-79bd6d14":()=>t.e(34).then(t.bind(null,585)),"v-050f7914":()=>t.e(35).then(t.bind(null,586)),"v-09b461b6":()=>t.e(36).then(t.bind(null,587)),"v-5ab0a08c":()=>t.e(37).then(t.bind(null,588)),"v-6f69b1d4":()=>t.e(38).then(t.bind(null,589)),"v-4d26e368":()=>t.e(39).then(t.bind(null,590)),"v-3fc29c76":()=>t.e(40).then(t.bind(null,591)),"v-67fca2b5":()=>t.e(52).then(t.bind(null,592)),"v-1fe9e6ee":()=>t.e(25).then(t.bind(null,593)),"v-44d7f3dc":()=>t.e(41).then(t.bind(null,594)),"v-6328d154":()=>t.e(42).then(t.bind(null,595)),"v-d8e2a728":()=>t.e(43).then(t.bind(null,596)),"v-16891616":()=>t.e(44).then(t.bind(null,597)),"v-41eb98c4":()=>t.e(45).then(t.bind(null,598)),"v-6c32ae16":()=>t.e(26).then(t.bind(null,599)),"v-dae15e14":()=>t.e(46).then(t.bind(null,600)),"v-b7d4d9d4":()=>t.e(85).then(t.bind(null,601)),"v-02d0bedc":()=>t.e(47).then(t.bind(null,602)),"v-095bc056":()=>t.e(53).then(t.bind(null,603)),"v-5c149794":()=>t.e(15).then(t.bind(null,604)),"v-f9ebde94":()=>t.e(70).then(t.bind(null,605)),"v-39a90a8c":()=>t.e(86).then(t.bind(null,606)),"v-753edfe4":()=>t.e(71).then(t.bind(null,607)),"v-1bf0bb16":()=>t.e(87).then(t.bind(null,608)),"v-3c062454":()=>t.e(88).then(t.bind(null,609)),"v-42cf4456":()=>t.e(89).then(t.bind(null,610)),"v-262ab396":()=>t.e(90).then(t.bind(null,611)),"v-1238a4a8":()=>t.e(65).then(t.bind(null,612)),"v-bd251b96":()=>t.e(92).then(t.bind(null,613)),"v-139624c0":()=>t.e(93).then(t.bind(null,614)),"v-77e1f516":()=>t.e(66).then(t.bind(null,615)),"v-6b3aba76":()=>t.e(14).then(t.bind(null,616)),"v-4bcae236":()=>t.e(67).then(t.bind(null,617)),"v-26c27776":()=>t.e(59).then(t.bind(null,618)),"v-04e4f2a8":()=>t.e(60).then(t.bind(null,619)),"v-653bc856":()=>t.e(16).then(t.bind(null,620)),"v-d26f5a2c":()=>t.e(55).then(t.bind(null,621)),"v-5a334256":()=>t.e(13).then(t.bind(null,622)),"v-aef69694":()=>t.e(72).then(t.bind(null,623)),"v-077d4a3e":()=>t.e(94).then(t.bind(null,624)),"v-5d771336":()=>t.e(95).then(t.bind(null,625)),"v-a7f64bd4":()=>t.e(96).then(t.bind(null,626)),"v-d8e807d4":()=>t.e(97).then(t.bind(null,627)),"v-5ec70dd4":()=>t.e(48).then(t.bind(null,628)),"v-6296e1f6":()=>t.e(68).then(t.bind(null,629)),"v-553a6410":()=>t.e(27).then(t.bind(null,630)),"v-e2d292a4":()=>t.e(73).then(t.bind(null,631)),"v-18796e28":()=>t.e(74).then(t.bind(null,632)),"v-fcb203d4":()=>t.e(56).then(t.bind(null,633)),"v-d2375ad4":()=>t.e(49).then(t.bind(null,634)),"v-28172d7c":()=>t.e(19).then(t.bind(null,635)),"v-7c34b9d6":()=>t.e(98).then(t.bind(null,636)),"v-19ea0ab0":()=>t.e(20).then(t.bind(null,637)),"v-5f1eef94":()=>t.e(11).then(t.bind(null,638)),"v-2b0aa648":()=>t.e(91).then(t.bind(null,639))};function Ws(e){const n=Object.create(null);return function(t){return n[t]||(n[t]=e(t))}}const Xs=/-(\w)/g,Qs=Ws(e=>e.replace(Xs,(e,n)=>n?n.toUpperCase():"")),$s=/\B([A-Z])/g,Js=Ws(e=>e.replace($s,"-$1").toLowerCase()),Zs=Ws(e=>e.charAt(0).toUpperCase()+e.slice(1));function er(e,n){if(!n)return;if(e(n))return e(n);return n.includes("-")?e(Zs(Qs(n))):e(Zs(n))||e(Js(n))}const nr=Object.assign({},Ks,js),tr=e=>nr[e],or=e=>js[e],ir=e=>Ks[e],ar=e=>Kt.component(e);function sr(e){return er(or,e)}function rr(e){return er(ir,e)}function lr(e){return er(tr,e)}function dr(e){return er(ar,e)}function cr(...e){return Promise.all(e.filter(e=>e).map(async e=>{if(!dr(e)&&lr(e)){const n=await lr(e)();Kt.component(e,n.default)}}))}function ur(e,n){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[e]=n)}var pr=t(90),hr=t.n(pr),mr=t(91),fr=t.n(mr),gr={created(){if(this.siteMeta=this.$site.headTags.filter(([e])=>"meta"===e).map(([e,n])=>n),this.$ssrContext){const n=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(e=n)?e.map(e=>{let n="<meta";return Object.keys(e).forEach(t=>{n+=` ${t}="${fr()(e[t])}"`}),n+">"}).join("\n    "):"",this.$ssrContext.canonicalLink=yr(this.$canonicalUrl)}var e},mounted(){this.currentMetaTags=[...document.querySelectorAll("meta")],this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta(){document.title=this.$title,document.documentElement.lang=this.$lang;const e=this.getMergedMetaTags();this.currentMetaTags=vr(e,this.currentMetaTags)},getMergedMetaTags(){const e=this.$page.frontmatter.meta||[];return hr()([{name:"description",content:this.$description}],e,this.siteMeta,wr)},updateCanonicalLink(){br(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",yr(this.$canonicalUrl))}},watch:{$page(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy(){vr(null,this.currentMetaTags),br()}};function br(){const e=document.querySelector("link[rel='canonical']");e&&e.remove()}function yr(e=""){return e?`<link href="${e}" rel="canonical" />`:""}function vr(e,n){if(n&&[...n].filter(e=>e.parentNode===document.head).forEach(e=>document.head.removeChild(e)),e)return e.map(e=>{const n=document.createElement("meta");return Object.keys(e).forEach(t=>{n.setAttribute(t,e[t])}),document.head.appendChild(n),n})}function wr(e){for(const n of["name","property","itemprop"])if(e.hasOwnProperty(n))return e[n]+n;return JSON.stringify(e)}var kr=t(22),Sr=t.n(kr),xr={mounted(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:Sr()((function(){this.setActiveHash()}),300),setActiveHash(){const e=[].slice.call(document.querySelectorAll(".sidebar-link")),n=[].slice.call(document.querySelectorAll(".header-anchor")).filter(n=>e.some(e=>e.hash===n.hash)),t=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),o=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),i=window.innerHeight+t;for(let e=0;e<n.length;e++){const a=n[e],s=n[e+1],r=0===e&&0===t||t>=a.parentElement.offsetTop+10&&(!s||t<s.parentElement.offsetTop-10),l=decodeURIComponent(this.$route.hash);if(r&&l!==decodeURIComponent(a.hash)){const t=a;if(i===o)for(let t=e+1;t<n.length;t++)if(l===decodeURIComponent(n[t].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(t.hash),()=>{this.$nextTick(()=>{this.$vuepress.$set("disableScrollBehavior",!1)})})}}}},beforeDestroy(){window.removeEventListener("scroll",this.onScroll)}},Ir=t(23),Cr=t.n(Ir),Ar={mounted(){Cr.a.configure({showSpinner:!1}),this.$router.beforeEach((e,n,t)=>{e.path===n.path||Kt.component(e.name)||Cr.a.start(),t()}),this.$router.afterEach(()=>{Cr.a.done(),this.isSidebarOpen=!1})}},Or=t(92),Pr=t.n(Or),Mr={mounted(){Pr.a.polyfill()}},Tr=(t(237),Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}),Er=function(e){return"IMG"===e.tagName},Dr=function(e){return e&&1===e.nodeType},Br=function(e){return".svg"===(e.currentSrc||e.src).substr(-4).toLowerCase()},Ur=function(e){try{return Array.isArray(e)?e.filter(Er):function(e){return NodeList.prototype.isPrototypeOf(e)}(e)?[].slice.call(e).filter(Er):Dr(e)?[e].filter(Er):"string"==typeof e?[].slice.call(document.querySelectorAll(e)).filter(Er):[]}catch(e){throw new TypeError("The provided selector is invalid.\nExpects a CSS selector, a Node element, a NodeList or an array.\nSee: https://github.com/francoischalifour/medium-zoom")}},Fr=function(e){var n=document.createElement("div");return n.classList.add("medium-zoom-overlay"),n.style.background=e,n},Rr=function(e){var n=e.getBoundingClientRect(),t=n.top,o=n.left,i=n.width,a=n.height,s=e.cloneNode(),r=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0,l=window.pageXOffset||document.documentElement.scrollLeft||document.body.scrollLeft||0;return s.removeAttribute("id"),s.style.position="absolute",s.style.top=t+r+"px",s.style.left=o+l+"px",s.style.width=i+"px",s.style.height=a+"px",s.style.transform="",s},Nr=function(e,n){var t=Tr({bubbles:!1,cancelable:!1,detail:void 0},n);if("function"==typeof window.CustomEvent)return new CustomEvent(e,t);var o=document.createEvent("CustomEvent");return o.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),o};!function(e,n){void 0===n&&(n={});var t=n.insertAt;if(e&&"undefined"!=typeof document){var o=document.head||document.getElementsByTagName("head")[0],i=document.createElement("style");i.type="text/css","top"===t&&o.firstChild?o.insertBefore(i,o.firstChild):o.appendChild(i),i.styleSheet?i.styleSheet.cssText=e:i.appendChild(document.createTextNode(e))}}(".medium-zoom-overlay{position:fixed;top:0;right:0;bottom:0;left:0;opacity:0;transition:opacity .3s;will-change:opacity}.medium-zoom--opened .medium-zoom-overlay{cursor:pointer;cursor:zoom-out;opacity:1}.medium-zoom-image{cursor:pointer;cursor:zoom-in;transition:transform .3s cubic-bezier(.2,0,.2,1)!important}.medium-zoom-image--hidden{visibility:hidden}.medium-zoom-image--opened{position:relative;cursor:pointer;cursor:zoom-out;will-change:transform}");var Lr=function e(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=window.Promise||function(e){function n(){}e(n,n)},i=function(e){var n=e.target;n!==C?-1!==v.indexOf(n)&&f({target:n}):m()},a=function(){if(!k&&I.original){var e=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0;Math.abs(S-e)>x.scrollOffset&&setTimeout(m,150)}},s=function(e){var n=e.key||e.keyCode;"Escape"!==n&&"Esc"!==n&&27!==n||m()},r=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e;if(e.background&&(C.style.background=e.background),e.container&&e.container instanceof Object&&(n.container=Tr({},x.container,e.container)),e.template){var t=Dr(e.template)?e.template:document.querySelector(e.template);n.template=t}return x=Tr({},x,n),v.forEach((function(e){e.dispatchEvent(Nr("medium-zoom:update",{detail:{zoom:A}}))})),A},l=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return e(Tr({},x,n))},d=function(){for(var e=arguments.length,n=Array(e),t=0;t<e;t++)n[t]=arguments[t];var o=n.reduce((function(e,n){return[].concat(e,Ur(n))}),[]);return o.filter((function(e){return-1===v.indexOf(e)})).forEach((function(e){v.push(e),e.classList.add("medium-zoom-image")})),w.forEach((function(e){var n=e.type,t=e.listener,i=e.options;o.forEach((function(e){e.addEventListener(n,t,i)}))})),A},c=function(){for(var e=arguments.length,n=Array(e),t=0;t<e;t++)n[t]=arguments[t];I.zoomed&&m();var o=n.length>0?n.reduce((function(e,n){return[].concat(e,Ur(n))}),[]):v;return o.forEach((function(e){e.classList.remove("medium-zoom-image"),e.dispatchEvent(Nr("medium-zoom:detach",{detail:{zoom:A}}))})),v=v.filter((function(e){return-1===o.indexOf(e)})),A},u=function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return v.forEach((function(o){o.addEventListener("medium-zoom:"+e,n,t)})),w.push({type:"medium-zoom:"+e,listener:n,options:t}),A},p=function(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return v.forEach((function(o){o.removeEventListener("medium-zoom:"+e,n,t)})),w=w.filter((function(t){return!(t.type==="medium-zoom:"+e&&t.listener.toString()===n.toString())})),A},h=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.target,t=function(){var e={width:document.documentElement.clientWidth,height:document.documentElement.clientHeight,left:0,top:0,right:0,bottom:0},n=void 0,t=void 0;if(x.container)if(x.container instanceof Object)n=(e=Tr({},e,x.container)).width-e.left-e.right-2*x.margin,t=e.height-e.top-e.bottom-2*x.margin;else{var o=(Dr(x.container)?x.container:document.querySelector(x.container)).getBoundingClientRect(),i=o.width,a=o.height,s=o.left,r=o.top;e=Tr({},e,{width:i,height:a,left:s,top:r})}n=n||e.width-2*x.margin,t=t||e.height-2*x.margin;var l=I.zoomedHd||I.original,d=Br(l)?n:l.naturalWidth||n,c=Br(l)?t:l.naturalHeight||t,u=l.getBoundingClientRect(),p=u.top,h=u.left,m=u.width,f=u.height,g=Math.min(d,n)/m,b=Math.min(c,t)/f,y=Math.min(g,b),v="scale("+y+") translate3d("+((n-m)/2-h+x.margin+e.left)/y+"px, "+((t-f)/2-p+x.margin+e.top)/y+"px, 0)";I.zoomed.style.transform=v,I.zoomedHd&&(I.zoomedHd.style.transform=v)};return new o((function(e){if(n&&-1===v.indexOf(n))e(A);else{if(I.zoomed)e(A);else{if(n)I.original=n;else{if(!(v.length>0))return void e(A);var o=v;I.original=o[0]}if(I.original.dispatchEvent(Nr("medium-zoom:open",{detail:{zoom:A}})),S=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0,k=!0,I.zoomed=Rr(I.original),document.body.appendChild(C),x.template){var i=Dr(x.template)?x.template:document.querySelector(x.template);I.template=document.createElement("div"),I.template.appendChild(i.content.cloneNode(!0)),document.body.appendChild(I.template)}if(document.body.appendChild(I.zoomed),window.requestAnimationFrame((function(){document.body.classList.add("medium-zoom--opened")})),I.original.classList.add("medium-zoom-image--hidden"),I.zoomed.classList.add("medium-zoom-image--opened"),I.zoomed.addEventListener("click",m),I.zoomed.addEventListener("transitionend",(function n(){k=!1,I.zoomed.removeEventListener("transitionend",n),I.original.dispatchEvent(Nr("medium-zoom:opened",{detail:{zoom:A}})),e(A)})),I.original.getAttribute("data-zoom-src")){I.zoomedHd=I.zoomed.cloneNode(),I.zoomedHd.removeAttribute("srcset"),I.zoomedHd.removeAttribute("sizes"),I.zoomedHd.src=I.zoomed.getAttribute("data-zoom-src"),I.zoomedHd.onerror=function(){clearInterval(a),console.warn("Unable to reach the zoom image target "+I.zoomedHd.src),I.zoomedHd=null,t()};var a=setInterval((function(){I.zoomedHd.complete&&(clearInterval(a),I.zoomedHd.classList.add("medium-zoom-image--opened"),I.zoomedHd.addEventListener("click",m),document.body.appendChild(I.zoomedHd),t())}),10)}else if(I.original.hasAttribute("srcset")){I.zoomedHd=I.zoomed.cloneNode(),I.zoomedHd.removeAttribute("sizes"),I.zoomedHd.removeAttribute("loading");var s=I.zoomedHd.addEventListener("load",(function(){I.zoomedHd.removeEventListener("load",s),I.zoomedHd.classList.add("medium-zoom-image--opened"),I.zoomedHd.addEventListener("click",m),document.body.appendChild(I.zoomedHd),t()}))}else t()}}}))},m=function(){return new o((function(e){if(!k&&I.original){k=!0,document.body.classList.remove("medium-zoom--opened"),I.zoomed.style.transform="",I.zoomedHd&&(I.zoomedHd.style.transform=""),I.template&&(I.template.style.transition="opacity 150ms",I.template.style.opacity=0),I.original.dispatchEvent(Nr("medium-zoom:close",{detail:{zoom:A}})),I.zoomed.addEventListener("transitionend",(function n(){I.original.classList.remove("medium-zoom-image--hidden"),document.body.removeChild(I.zoomed),I.zoomedHd&&document.body.removeChild(I.zoomedHd),document.body.removeChild(C),I.zoomed.classList.remove("medium-zoom-image--opened"),I.template&&document.body.removeChild(I.template),k=!1,I.zoomed.removeEventListener("transitionend",n),I.original.dispatchEvent(Nr("medium-zoom:closed",{detail:{zoom:A}})),I.original=null,I.zoomed=null,I.zoomedHd=null,I.template=null,e(A)}))}else e(A)}))},f=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.target;return I.original?m():h({target:n})},g=function(){return x},b=function(){return v},y=function(){return I.original},v=[],w=[],k=!1,S=0,x=t,I={original:null,zoomed:null,zoomedHd:null,template:null};"[object Object]"===Object.prototype.toString.call(n)?x=n:(n||"string"==typeof n)&&d(n),x=Tr({margin:0,background:"#fff",scrollOffset:40,container:null,template:null},x);var C=Fr(x.background);document.addEventListener("click",i),document.addEventListener("keyup",s),document.addEventListener("scroll",a),window.addEventListener("resize",m);var A={open:h,close:m,toggle:f,update:r,clone:l,attach:d,detach:c,on:u,off:p,getOptions:g,getImages:b,getZoomedImage:y};return A},qr=[gr,xr,Ar,Mr,{data:()=>({zoom:null}),mounted(){this.updateZoom()},updated(){this.updateZoom()},methods:{updateZoom(){setTimeout(()=>{this.zoom&&this.zoom.detach(),this.zoom=Lr(".theme-succinct-content :not(a) > img",{background:"var(--bodyBgColor)"})},1e3)}}}],Gr={name:"GlobalLayout",computed:{layout(){const e=this.getLayout();return ur("layout",e),Kt.component(e)}},methods:{getLayout(){if(this.$page.path){const e=this.$page.frontmatter.layout;return e&&(this.$vuepress.getLayoutAsyncComponent(e)||this.$vuepress.getVueComponent(e))?e:"Layout"}return"NotFound"}}},zr=t(10),_r=Object(zr.a)(Gr,(function(){return(0,this._self._c)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(e,n,t){switch(n){case"components":e[n]||(e[n]={}),Object.assign(e[n],t);break;case"mixins":e[n]||(e[n]=[]),e[n].push(...t);break;default:throw new Error("Unknown option name.")}}(_r,"mixins",qr);const Vr=[{name:"v-fee899d4",path:"/AMD/AMD-USB-map.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-fee899d4").then(t)}},{name:"v-466e0560",path:"/AMD/fx.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-466e0560").then(t)}},{name:"v-599a4736",path:"/AMD/zen.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-599a4736").then(t)}},{name:"v-bdcc2064",path:"/CONTRIBUTING.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-bdcc2064").then(t)}},{name:"v-2601fe56",path:"/LICENSE.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-2601fe56").then(t)}},{name:"v-cbef71f6",path:"/",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-cbef71f6").then(t)}},{path:"/index.html",redirect:"/"},{name:"v-54915676",path:"/clover-conversion/Clover-boot-arg.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-54915676").then(t)}},{name:"v-14cbf754",path:"/clover-conversion/Clover-config.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-14cbf754").then(t)}},{name:"v-32830097",path:"/clover-conversion/",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-32830097").then(t)}},{path:"/clover-conversion/index.html",redirect:"/clover-conversion/"},{name:"v-6c6748c0",path:"/clover-conversion/clover-efi.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-6c6748c0").then(t)}},{name:"v-39a5e4a0",path:"/clover-conversion/clover-patch.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-39a5e4a0").then(t)}},{name:"v-3ccffb54",path:"/config-HEDT/broadwell-e.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-3ccffb54").then(t)}},{name:"v-6b07bb96",path:"/config-HEDT/haswell-e.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-6b07bb96").then(t)}},{name:"v-6407a8b0",path:"/config-HEDT/ivy-bridge-e.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-6407a8b0").then(t)}},{name:"v-4b53c656",path:"/config-HEDT/nehalem.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-4b53c656").then(t)}},{name:"v-4837bb36",path:"/config-HEDT/skylake-x.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-4837bb36").then(t)}},{name:"v-5b055c76",path:"/config-laptop.plist/arrandale.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-5b055c76").then(t)}},{name:"v-368e92f6",path:"/config-laptop.plist/broadwell.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-368e92f6").then(t)}},{name:"v-3914d740",path:"/config-laptop.plist/coffee-lake-plus.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-3914d740").then(t)}},{name:"v-79bd6d14",path:"/config-laptop.plist/coffee-lake.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-79bd6d14").then(t)}},{name:"v-050f7914",path:"/config-laptop.plist/haswell.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-050f7914").then(t)}},{name:"v-09b461b6",path:"/config-laptop.plist/icelake.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-09b461b6").then(t)}},{name:"v-5ab0a08c",path:"/config-laptop.plist/ivy-bridge.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-5ab0a08c").then(t)}},{name:"v-6f69b1d4",path:"/config-laptop.plist/kaby-lake.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-6f69b1d4").then(t)}},{name:"v-4d26e368",path:"/config-laptop.plist/sandy-bridge.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-4d26e368").then(t)}},{name:"v-3fc29c76",path:"/config-laptop.plist/skylake.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-3fc29c76").then(t)}},{name:"v-67fca2b5",path:"/config.plist/",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-67fca2b5").then(t)}},{path:"/config.plist/index.html",redirect:"/config.plist/"},{name:"v-1fe9e6ee",path:"/config.plist/clarkdale.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-1fe9e6ee").then(t)}},{name:"v-44d7f3dc",path:"/config.plist/coffee-lake.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-44d7f3dc").then(t)}},{name:"v-6328d154",path:"/config.plist/comet-lake.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-6328d154").then(t)}},{name:"v-d8e2a728",path:"/config.plist/haswell.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-d8e2a728").then(t)}},{name:"v-16891616",path:"/config.plist/ivy-bridge.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-16891616").then(t)}},{name:"v-41eb98c4",path:"/config.plist/kaby-lake.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-41eb98c4").then(t)}},{name:"v-6c32ae16",path:"/config.plist/penryn.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-6c32ae16").then(t)}},{name:"v-dae15e14",path:"/config.plist/sandy-bridge.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-dae15e14").then(t)}},{name:"v-b7d4d9d4",path:"/config.plist/security.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-b7d4d9d4").then(t)}},{name:"v-02d0bedc",path:"/config.plist/skylake.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-02d0bedc").then(t)}},{name:"v-095bc056",path:"/extras/big-sur/",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-095bc056").then(t)}},{path:"/extras/big-sur/index.html",redirect:"/extras/big-sur/"},{name:"v-5c149794",path:"/extras/big-sur/fusion.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-5c149794").then(t)}},{name:"v-f9ebde94",path:"/extras/big-sur/virtualbox.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-f9ebde94").then(t)}},{name:"v-39a90a8c",path:"/extras/big-sur/workstation.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-39a90a8c").then(t)}},{name:"v-753edfe4",path:"/extras/kaslr-fix.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-753edfe4").then(t)}},{name:"v-1bf0bb16",path:"/extras/legacy.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-1bf0bb16").then(t)}},{name:"v-3c062454",path:"/extras/monterey.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-3c062454").then(t)}},{name:"v-42cf4456",path:"/extras/smbios-support.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-42cf4456").then(t)}},{name:"v-262ab396",path:"/extras/smbios.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-262ab396").then(t)}},{name:"v-1238a4a8",path:"/extras/spoof.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-1238a4a8").then(t)}},{name:"v-bd251b96",path:"/installer-guide/",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-bd251b96").then(t)}},{path:"/installer-guide/index.html",redirect:"/installer-guide/"},{name:"v-139624c0",path:"/installer-guide/legacy-mac-install.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-139624c0").then(t)}},{name:"v-77e1f516",path:"/installation/installation-process.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-77e1f516").then(t)}},{name:"v-6b3aba76",path:"/installer-guide/linux-install.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-6b3aba76").then(t)}},{name:"v-4bcae236",path:"/installer-guide/mac-install-pkg.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-4bcae236").then(t)}},{name:"v-26c27776",path:"/installer-guide/mac-install-dmg.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-26c27776").then(t)}},{name:"v-04e4f2a8",path:"/installer-guide/mac-install-recovery.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-04e4f2a8").then(t)}},{name:"v-653bc856",path:"/installer-guide/mac-install.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-653bc856").then(t)}},{name:"v-d26f5a2c",path:"/installer-guide/opencore-efi.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-d26f5a2c").then(t)}},{name:"v-5a334256",path:"/installer-guide/windows-install.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-5a334256").then(t)}},{name:"v-aef69694",path:"/ktext.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-aef69694").then(t)}},{name:"v-077d4a3e",path:"/macos-limits.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-077d4a3e").then(t)}},{name:"v-5d771336",path:"/misc/credit.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-5d771336").then(t)}},{name:"v-a7f64bd4",path:"/prerequisites.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-a7f64bd4").then(t)}},{name:"v-d8e807d4",path:"/terminology.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-d8e807d4").then(t)}},{name:"v-5ec70dd4",path:"/troubleshooting/boot.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-5ec70dd4").then(t)}},{name:"v-6296e1f6",path:"/troubleshooting/debug.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-6296e1f6").then(t)}},{name:"v-553a6410",path:"/troubleshooting/extended/kernel-issues.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-553a6410").then(t)}},{name:"v-e2d292a4",path:"/troubleshooting/extended/misc-issues.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-e2d292a4").then(t)}},{name:"v-18796e28",path:"/troubleshooting/extended/opencore-issues.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-18796e28").then(t)}},{name:"v-fcb203d4",path:"/troubleshooting/extended/post-issues.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-fcb203d4").then(t)}},{name:"v-d2375ad4",path:"/troubleshooting/extended/userspace-issues.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-d2375ad4").then(t)}},{name:"v-28172d7c",path:"/troubleshooting/kernel-debugging.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-28172d7c").then(t)}},{name:"v-7c34b9d6",path:"/troubleshooting/troubleshooting.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-7c34b9d6").then(t)}},{name:"v-19ea0ab0",path:"/why-oc.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-19ea0ab0").then(t)}},{name:"v-5f1eef94",path:"/find-hardware.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-5f1eef94").then(t)}},{name:"v-2b0aa648",path:"/extras/ventura.html",component:_r,beforeEnter:(e,n,t)=>{cr("Layout","v-2b0aa648").then(t)}},{path:"*",component:_r}],Hr={title:"OpenCore安装指南",description:"",base:"/OpenCore-Install-Guide/",headTags:[["meta",{name:"theme-color",content:"#3eaf7c"}],["meta",{name:"apple-mobile-web-app-capable",content:"yes"}],["meta",{name:"apple-mobile-web-app-status-bar-style",content:"black"}],["link",{rel:"'stylesheet",href:"/OpenCore-Install-Guide/styles/website.css"}],["link",{rel:"shortcut icon",type:"image/x-icon",href:"/OpenCore-Install-Guide/favicon.ico"}]],pages:[{title:"AMD USB Map",frontmatter:{search:!1},regularPath:"/AMD/AMD-USB-map.html",relativePath:"AMD/AMD-USB-map.md",key:"v-fee899d4",path:"/AMD/AMD-USB-map.html",lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:null,content:"# AMD USB Map\n\nFor those looking for the AMD USB map guide, it has been moved here:\n\n * USB Map guide\n\nFor a more user-friendly guide, see Aleksander's post: Why you need to care about USB mapping",normalizedContent:"# amd usb map\n\nfor those looking for the amd usb map guide, it has been moved here:\n\n * usb map guide\n\nfor a more user-friendly guide, see aleksander's post: why you need to care about usb mapping",charsets:{}},{title:"Bulldozer(15h) and Jaguar(16h)",frontmatter:{},regularPath:"/AMD/fx.html",relativePath:"AMD/fx.md",key:"v-466e0560",path:"/AMD/fx.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:231},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1636},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1647},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2575},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:1217},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:2912},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:3020},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:3157},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:2912},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:4181},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1647},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2575},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:1210},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1647},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:6862},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:8428},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:8629},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:1217},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:2912},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:12679},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:13829},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:3020},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:14280},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:15133},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:17475},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:17544},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:17662},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:3505},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1647},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2575},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:10832},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:23667},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:3466},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:20583},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:12207},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:27217},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:27459},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:27669},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:28054},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:2912},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:25417},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:29425},{level:2,title:"AMD BIOS Settings",slug:"amd-bios-settings",normalizedTitle:"amd bios settings",charIndex:29741},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:10292},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3534}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up AMD BIOS Settings Disable Enable",content:"# Bulldozer(15h) and Jaguar(16h)\n\nSUPPORT                 VERSION\nInitial macOS Support   macOS 10.13, High Sierra\nLast Supported OS       macOS 12 Monterey\nNote                    For Ventura information, see macOS 13 Ventura\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n * AMD Kernel Patches\n   * Needed for booting macOS on AMD hardware(save these for later, we'll go over how to use them below)\n   * Supporting AMD Family 15h, 16h, 17h and 19h\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-EC-USBX     Fixes both the embedded controller and USB power, see\n                 Getting Started With ACPI Guide for more details.\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: YES\n   * Needed to remove write protection from CR0 register.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses, required for Gigabyte boards to resolve early kernel panics\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nBy default, the Sample.plist has this section set for audio which we'll be setting up by setting the layout ID in the boot-args section, so removal of PciRoot(0x0)/Pci(0x1b,0x0) is also recommended from the Add section.\n\nTL;DR, delete all the PciRoot's here as we won't be using this section.\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\nKERNEL   KERNEL PATCHES\n         \n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nInfo\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons and to disable CPU power management on unsupported CPUs (such as AMD CPUs)\n\nQUIRK                  ENABLED\nDummyPowerManagement   YES\n\nMore in-depth Info\n * Cpuid1Mask: Leave this blank\n   * Mask for fake CPUID\n * Cpuid1Data: Leave this blank\n   * Fake CPUID entry\n * DummyPowerManagement: YES\n   * New alternative to NullCPUPowerManagement, required for all AMD CPU based systems as there's no native power management.\n * MinKernel: Leave this blank\n   * Lowest kernel version the above patches will be injected into, if no value specified it'll be applied to all versions of macOS. See below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel: Leave this blank\n   * Highest kernel version the above patches will be injected into, if no value specified it'll be applied to all versions of macOS. See below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nThis is where the AMD kernel patching magic happens. Please do note that if coming from Clover, KernelToPatch and MatchOS from Clover becomes Kernel and MinKernel/ MaxKernel in OpenCore. The latest AMD kernel patches can always be found on the AMD Vanilla GitHub Repository.\n\nKernel patches:\n\n * Bulldozer/Jaguar (15h/16h) (10.13 - 12.x)\n\nTo merge:\n\n * Open both files,\n * Delete the Kernel -> Patch section from config.plist\n * Copy the Kernel -> Patch section from patches.plist\n * Paste into where old patches were in config.plist\n\n\n\nYou will also need to modify four patches, all named algrey - Force cpuid_cores_per_package. You only need to change the Replace value. You should change:\n\n * B8000000 0000 => B8 <core count> 0000 0000\n * BA000000 0000 => BA <core count> 0000 0000\n * BA000000 0090 => BA <core count> 0000 0090\n * BA000000 00 => BA <core count> 0000 00\n\nWhere <core count> is replaced with the physical core count of your CPU in hexadecimal. For example, an 8-Core 5800X would have the new Replace value be:\n\n * B8 08 0000 0000\n * BA 08 0000 0000\n * BA 08 0000 0090\n * BA 08 0000 00\n\nCore Count => Hexadecimal Table\n\nCORE COUNT   HEXADECIMAL\n2 Core       02\n4 Core       04\n6 Core       06\n8 Core       08\n12 Core      0C\n16 Core      10\n24 Core      18\n32 Core      20\n64 Core      40\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nProvideCurrentCpuInfo     YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS. AMD users can ignore\n * AppleXcpmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS. AMD users can ignore\n * AppleXcpmExtraMsrs: NO\n   * Disables multiple MSR access needed for unsupported CPUs like Pentiums and certain Xeons\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk in tandem with PlatformInfo -> UpdateSMBIOSMode -> Custom will disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk.\n * DisableIoMapper: NO\n   * AMD doesn't have DMAR or VT-D support so irrelevant\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * ProvideCurrentCpuInfo: YES\n   * Provides the kernel with CPU frequency values for AMD.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues:\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nnpci=0x3000   This disables some PCI debugging related to\n              kIOPCIConfiguratorPFM64 and gIOPCITunnelledKey. This is an\n              alternative to having Above 4G Decoding enabled in your\n              BIOS. Do not use this unless you don't have it in your BIOS.\n              Required for when getting stuck on [PCI configuration begin]\n              as there are IRQ conflicts relating to your PCI lanes.\n              Source\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS        DESCRIPTION\nagdpmod=pikera   Used for disabling board ID checks on some Navi GPUs (RX\n                 5000 & 6000 series), without this you'll get a black screen.\n                 Don't use if you don't have Navi (ie. Polaris and Vega cards\n                 shouldn't use this)\n-radcodec        Used for allowing officially unsupported AMD GPUs (spoofed)\n                 to use the Hardware Video Encoder\nradpg=15         Used for disabling some power-gating modes, helpful for\n                 properly initializing AMD Cape Verde based GPUs\nunfairgva=1      Used for fixing hardware DRM support on supported AMD GPUs\nnvda_drv_vrl=1   Used for enabling NVIDIA's Web Drivers on Maxwell and Pascal\n                 cards in macOS Sierra and High Sierra\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nInfo\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. For us, we'll be changing the following:\n\nQUIRK        ENABLED\nWriteFlash   YES\n\nMore in-depth Info\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this example, we'll choose the MacPro7,1 SMBIOS but some SMBIOS play with certain GPUs better than others:\n\n * MacPro7,1: AMD Polaris and newer\n   * Note that MacPro7,1 is exclusive to macOS 10.15, Catalina and newer\n * iMacPro1,1: NVIDIA Maxwell and Pascal or AMD Polaris and newer\n   * Use if you need High Sierra or Mojave, otherwise use MacPro7,1\n * iMac14,2: NVIDIA Maxwell and Pascal\n   * Use if you get black screens on iMacPro1,1 after installing Web Drivers with an NVIDIA GPU\n * MacPro6,1: AMD GCN GPUs (supported HD and R5/R7/R9 series)\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               MacPro7,1 SMBIOS Info                 #\n#######################################################\n\nType:         MacPro7,1\nSerial:       F5KZV0JVP7QM\nBoard Serial: F5K9518024NK3F7JC\nSmUUID:       535B897C-55F7-4D65-A8F4-40F4B96ED394\nApple ROM:    001D4F0D5E22\n\n\nThe order is Product | Serial | Board Serial (MLB)\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nThe Apple ROM part gets copied to Generic -> ROM.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK              ENABLED   COMMENT\nUnblockFsConnect   NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * AMD OS X Discord\n * r/Hackintosh Subreddit\n\n\n# AMD BIOS Settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * IOMMU\n\n\n# Enable\n\n * Above 4G Decoding (This must be on, if you can't find the option then add npci=0x3000 to boot-args. Do not have both this option and npci enabled at the same time.)\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# bulldozer(15h) and jaguar(16h)\n\nsupport                 version\ninitial macos support   macos 10.13, high sierra\nlast supported os       macos 12 monterey\nnote                    for ventura information, see macos 13 ventura\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n * amd kernel patches\n   * needed for booting macos on amd hardware(save these for later, we'll go over how to use them below)\n   * supporting amd family 15h, 16h, 17h and 19h\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nrequired ssdts   description\nssdt-ec-usbx     fixes both the embedded controller and usb power, see\n                 getting started with acpi guide for more details.\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, our patches are handled by our ssdts. this is a much cleaner solution as this will allow us to boot windows and other oses with opencore\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be passthrough to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: yes\n   * needed to remove write protection from cr0 register.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses, required for gigabyte boards to resolve early kernel panics\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\nby default, the sample.plist has this section set for audio which we'll be setting up by setting the layout id in the boot-args section, so removal of pciroot(0x0)/pci(0x1b,0x0) is also recommended from the add section.\n\ntl;dr, delete all the pciroot's here as we won't be using this section.\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\nkernel   kernel patches\n         \n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\ninfo\n\nneeded for spoofing unsupported cpus like pentiums and celerons and to disable cpu power management on unsupported cpus (such as amd cpus)\n\nquirk                  enabled\ndummypowermanagement   yes\n\nmore in-depth info\n * cpuid1mask: leave this blank\n   * mask for fake cpuid\n * cpuid1data: leave this blank\n   * fake cpuid entry\n * dummypowermanagement: yes\n   * new alternative to nullcpupowermanagement, required for all amd cpu based systems as there's no native power management.\n * minkernel: leave this blank\n   * lowest kernel version the above patches will be injected into, if no value specified it'll be applied to all versions of macos. see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel: leave this blank\n   * highest kernel version the above patches will be injected into, if no value specified it'll be applied to all versions of macos. see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\nthis is where the amd kernel patching magic happens. please do note that if coming from clover, kerneltopatch and matchos from clover becomes kernel and minkernel/ maxkernel in opencore. the latest amd kernel patches can always be found on the amd vanilla github repository.\n\nkernel patches:\n\n * bulldozer/jaguar (15h/16h) (10.13 - 12.x)\n\nto merge:\n\n * open both files,\n * delete the kernel -> patch section from config.plist\n * copy the kernel -> patch section from patches.plist\n * paste into where old patches were in config.plist\n\n\n\nyou will also need to modify four patches, all named algrey - force cpuid_cores_per_package. you only need to change the replace value. you should change:\n\n * b8000000 0000 => b8 <core count> 0000 0000\n * ba000000 0000 => ba <core count> 0000 0000\n * ba000000 0090 => ba <core count> 0000 0090\n * ba000000 00 => ba <core count> 0000 00\n\nwhere <core count> is replaced with the physical core count of your cpu in hexadecimal. for example, an 8-core 5800x would have the new replace value be:\n\n * b8 08 0000 0000\n * ba 08 0000 0000\n * ba 08 0000 0090\n * ba 08 0000 00\n\ncore count => hexadecimal table\n\ncore count   hexadecimal\n2 core       02\n4 core       04\n6 core       06\n8 core       08\n12 core      0c\n16 core      10\n24 core      18\n32 core      20\n64 core      40\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nprovidecurrentcpuinfo     yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios. amd users can ignore\n * applexcpmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios. amd users can ignore\n * applexcpmextramsrs: no\n   * disables multiple msr access needed for unsupported cpus like pentiums and certain xeons\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk in tandem with platforminfo -> updatesmbiosmode -> custom will disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk.\n * disableiomapper: no\n   * amd doesn't have dmar or vt-d support so irrelevant\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * providecurrentcpuinfo: yes\n   * provides the kernel with cpu frequency values for amd.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues:\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nnpci=0x3000   this disables some pci debugging related to\n              kiopciconfiguratorpfm64 and giopcitunnelledkey. this is an\n              alternative to having above 4g decoding enabled in your\n              bios. do not use this unless you don't have it in your bios.\n              required for when getting stuck on [pci configuration begin]\n              as there are irq conflicts relating to your pci lanes.\n              source\n\n * gpu-specific boot-args:\n\nboot-args        description\nagdpmod=pikera   used for disabling board id checks on some navi gpus (rx\n                 5000 & 6000 series), without this you'll get a black screen.\n                 don't use if you don't have navi (ie. polaris and vega cards\n                 shouldn't use this)\n-radcodec        used for allowing officially unsupported amd gpus (spoofed)\n                 to use the hardware video encoder\nradpg=15         used for disabling some power-gating modes, helpful for\n                 properly initializing amd cape verde based gpus\nunfairgva=1      used for fixing hardware drm support on supported amd gpus\nnvda_drv_vrl=1   used for enabling nvidia's web drivers on maxwell and pascal\n                 cards in macos sierra and high sierra\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\ninfo\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone. for us, we'll be changing the following:\n\nquirk        enabled\nwriteflash   yes\n\nmore in-depth info\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this example, we'll choose the macpro7,1 smbios but some smbios play with certain gpus better than others:\n\n * macpro7,1: amd polaris and newer\n   * note that macpro7,1 is exclusive to macos 10.15, catalina and newer\n * imacpro1,1: nvidia maxwell and pascal or amd polaris and newer\n   * use if you need high sierra or mojave, otherwise use macpro7,1\n * imac14,2: nvidia maxwell and pascal\n   * use if you get black screens on imacpro1,1 after installing web drivers with an nvidia gpu\n * macpro6,1: amd gcn gpus (supported hd and r5/r7/r9 series)\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               macpro7,1 smbios info                 #\n#######################################################\n\ntype:         macpro7,1\nserial:       f5kzv0jvp7qm\nboard serial: f5k9518024nk3f7jc\nsmuuid:       535b897c-55f7-4d65-a8f4-40f4b96ed394\napple rom:    001d4f0d5e22\n\n\nthe order is product | serial | board serial (mlb)\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nthe apple rom part gets copied to generic -> rom.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk              enabled   comment\nunblockfsconnect   no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * amd os x discord\n * r/hackintosh subreddit\n\n\n# amd bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * iommu\n\n\n# enable\n\n * above 4g decoding (this must be on, if you can't find the option then add npci=0x3000 to boot-args. do not have both this option and npci enabled at the same time.)\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{cjk:!0}},{title:"Ryzen and Threadripper(17h and 19h)",frontmatter:{},regularPath:"/AMD/zen.html",relativePath:"AMD/zen.md",key:"v-599a4736",path:"/AMD/zen.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:124},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1529},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1540},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2675},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:1110},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:3012},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:3120},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:3257},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:3012},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:6253},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1540},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2675},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:1103},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1540},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:8934},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:10500},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:10701},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:1110},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:3012},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:14753},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:15903},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:3120},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:16354},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:17207},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:19549},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:19618},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:19736},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:4464},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1540},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2675},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:12906},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:25889},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:4425},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:22889},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:14281},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:29163},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:29405},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:29615},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:3e4},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:3012},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:27363},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:31371},{level:2,title:"AMD BIOS Settings",slug:"amd-bios-settings",normalizedTitle:"amd bios settings",charIndex:31687},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:12366},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3813}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up AMD BIOS Settings Disable Enable",content:"# Ryzen and Threadripper(17h and 19h)\n\nSUPPORT                 VERSION\nInitial macOS Support   macOS 10.13, High Sierra\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n * AMD Kernel Patches\n   * Needed for booting macOS on AMD hardware(save these for later, we'll go over how to use them below)\n   * Supporting AMD Family 15h, 16h, 17h and 19h\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-EC-USBX     Fixes both the embedded controller and USB power, see\n                 Getting Started With ACPI Guide for more details.\nSSDT-CPUR        Fixes CPU definitions with B550 and A520 motherboards, do\n                 not use if you don't have an AMD B550 or A520 system. You\n                 can find a prebuilt here: SSDT-CPUR.aml\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we need to change the following:\n\nQUIRK                    ENABLED   COMMENT\nDevirtualiseMmio         NO        If you have a TRx40 system, enable this and follow the\n                                   instructions here:\n                                   https://dortania.github.io/OpenCore-Install-Guide/extras/kaslr-fix.html\nEnableWriteUnprotector   NO        \nRebuildAppleMemoryMap    YES       \nResizeAppleGpuBars       -1        If your firmware supports increasing GPU Bar sizes (ie\n                                   Resizable BAR Support), set this to 0\nSetupVirtualMap          YES       - Note X570, B550, A520 and TRx40 boards might need this\n                                   disabled\n                                   - X470 and B450 with late 2020 BIOS updates might also\n                                   require this disabled\nSyncRuntimePermissions   YES       \n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: NO\n   * This quirk and RebuildAppleMemoryMap can commonly conflict, recommended to enable the latter on newer platforms and disable this entry.\n   * However, due to issues with OEMs not using the latest EDKII builds you may find that the above combo will result in early boot failures. This is due to missing the MEMORY_ATTRIBUTE_TABLE and such we recommend disabling RebuildAppleMemoryMap and enabling EnableWriteUnprotector. More info on this is covered in the troubleshooting section\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * RebuildAppleMemoryMap: YES\n   * Generates Memory Map compatible with macOS, can break on some laptop OEM firmwares so if you receive early boot failures disable this\n * ResizeAppleGpuBars: -1\n   * Will reduce the size of GPU PCI Bars if set to 0 when booting macOS, set to -1 to disable\n   * Setting other PCI Bar values is possible with this quirk, though can cause instabilities\n   * This quirk being set to zero is only necessary if Resizable BAR Support is enabled in your firmware.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses\n   * B550, A520 and TRx40 boards should disable this quirk\n * SyncRuntimePermissions: YES\n   * Fixes alignment with MAT tables and required to boot Windows and Linux with MAT tables, also recommended for macOS. Mainly relevant for RebuildAppleMemoryMap users\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nBy default, the Sample.plist has this section set for audio which we'll be setting up by setting the layout ID in the boot-args section, so removal of PciRoot(0x0)/Pci(0x1b,0x0) is also recommended from the Add section.\n\nTL;DR, delete all the PciRoot's here as we won't be using this section.\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\nKERNEL   KERNEL PATCHES\n         \n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nInfo\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons and to disable CPU power management on unsupported CPUs (such as AMD CPUs)\n\nQUIRK                  ENABLED\nDummyPowerManagement   YES\n\nMore in-depth Info\n * Cpuid1Mask: Leave this blank\n   * Mask for fake CPUID\n * Cpuid1Data: Leave this blank\n   * Fake CPUID entry\n * DummyPowerManagement: YES\n   * New alternative to NullCPUPowerManagement, required for all AMD CPU based systems as there's no native power management.\n * MinKernel: Leave this blank\n   * Lowest kernel version the above patches will be injected into, if no value specified it'll be applied to all versions of macOS. See below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel: Leave this blank\n   * Highest kernel version the above patches will be injected into, if no value specified it'll be applied to all versions of macOS. See below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nThis is where the AMD kernel patching magic happens. Please do note that if coming from Clover, KernelToPatch and MatchOS from Clover becomes Kernel and MinKernel/ MaxKernel in OpenCore. The latest AMD kernel patches can always be found on the AMD Vanilla GitHub Repository.\n\nKernel patches:\n\n * Ryzen/Threadripper (17h/19h) (10.13 - 12.x)\n\nTo merge:\n\n * Open both files,\n * Delete the Kernel -> Patch section from config.plist\n * Copy the Kernel -> Patch section from patches.plist\n * Paste into where old patches were in config.plist\n\n\n\nYou will also need to modify four patches, all named algrey - Force cpuid_cores_per_package. You only need to change the Replace value. You should change:\n\n * B8000000 0000 => B8 <core count> 0000 0000\n * BA000000 0000 => BA <core count> 0000 0000\n * BA000000 0090 => BA <core count> 0000 0090\n * BA000000 00 => BA <core count> 0000 00\n\nWhere <core count> is replaced with the physical core count of your CPU in hexadecimal. For example, an 8-Core 5800X would have the new Replace value be:\n\n * B8 08 0000 0000\n * BA 08 0000 0000\n * BA 08 0000 0090\n * BA 08 0000 00\n\nCore Count => Hexadecimal Table\n\nCORE COUNT   HEXADECIMAL\n2 Core       02\n4 Core       04\n6 Core       06\n8 Core       08\n12 Core      0C\n16 Core      10\n24 Core      18\n32 Core      20\n64 Core      40\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nProvideCurrentCpuInfo     YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS. AMD users can ignore\n * AppleXcpmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS. AMD users can ignore\n * AppleXcpmExtraMsrs: NO\n   * Disables multiple MSR access needed for unsupported CPUs like Pentiums and certain Xeons\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk in tandem with PlatformInfo -> UpdateSMBIOSMode -> Custom will disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk.\n * DisableIoMapper: NO\n   * AMD doesn't have DMAR or VT-D support so irrelevant\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * ProvideCurrentCpuInfo: YES\n   * Provides the kernel with CPU frequency values for AMD.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues:\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nnpci=0x3000   This disables some PCI debugging related to\n              kIOPCIConfiguratorPFM64 and gIOPCITunnelledKey. This is an\n              alternative to having Above 4G Decoding enabled in your\n              BIOS. Do not use this unless you don't have it in your BIOS.\n              Required for when getting stuck on [PCI configuration begin]\n              as there are IRQ conflicts relating to your PCI lanes.\n              Source\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS        DESCRIPTION\nagdpmod=pikera   Used for disabling board ID checks on some Navi GPUs (RX\n                 5000 & 6000 series), without this you'll get a black screen.\n                 Don't use if you don't have Navi (ie. Polaris and Vega cards\n                 shouldn't use this)\n-radcodec        Used for allowing officially unsupported AMD GPUs (spoofed)\n                 to use the Hardware Video Encoder\nradpg=15         Used for disabling some power-gating modes, helpful for\n                 properly initializing AMD Cape Verde based GPUs\nunfairgva=1      Used for fixing hardware DRM support on supported AMD GPUs\nnvda_drv_vrl=1   Used for enabling NVIDIA's Web Drivers on Maxwell and Pascal\n                 cards in macOS Sierra and High Sierra\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP).\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nInfo\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. For us, we'll be changing the following:\n\nQUIRK        ENABLED\nWriteFlash   YES\n\nMore in-depth Info\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this example, we'll choose the MacPro7,1 SMBIOS but some SMBIOS play with certain GPUs better than others:\n\n * MacPro7,1: AMD Polaris and newer\n   * Note that MacPro7,1 is exclusive to macOS 10.15, Catalina and newer\n * iMacPro1,1: NVIDIA Maxwell and Pascal or AMD Polaris and newer\n   * Use if you need High Sierra or Mojave, otherwise use MacPro7,1\n * iMac14,2: NVIDIA Maxwell and Pascal\n   * Use if you get black screens on iMacPro1,1 after installing Web Drivers with an NVIDIA GPU\n * MacPro6,1: AMD GCN GPUs (supported HD and R5/R7/R9 series)\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               MacPro7,1 SMBIOS Info                 #\n#######################################################\n\nType:         MacPro7,1\nSerial:       F5KZV0JVP7QM\nBoard Serial: F5K9518024NK3F7JC\nSmUUID:       535B897C-55F7-4D65-A8F4-40F4B96ED394\nApple ROM:    001D4F0D5E22\n\n\nThe order is Product | Serial | Board Serial (MLB)\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nThe Apple ROM part gets copied to Generic -> ROM.\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK              ENABLED   COMMENT\nUnblockFsConnect   NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * AMD OS X Discord\n * r/Hackintosh Subreddit\n\n\n# AMD BIOS Settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * IOMMU\n\nSpecial note for 3990X users: macOS currently does not support more than 64 threads in the kernel, and so will kernel panic if it sees more. The 3990X CPU has 128 threads total and so requires half of that disabled. We recommend disabling hyper threading in the BIOS for these situations.\n\n\n# Enable\n\n * Above 4G Decoding (This must be on, if you can't find the option then add npci=0x3000 to boot-args. Do not have both this option and npci enabled at the same time.)\n   * If you are on a Gigabyte/Aorus or an AsRock motherboard, enabling this option may break certain drivers(ie. Ethernet) and/or boot failures on other OSes, if it does happen then disable this option and opt for npci instead\n   * 2020+ BIOS Notes: When enabling Above4G, Resizable BAR Support may become an available on some X570 and newer motherboards. Please ensure that Booter -> Quirks -> ResizeAppleGpuBars is set to 0 if this is enabled.\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# ryzen and threadripper(17h and 19h)\n\nsupport                 version\ninitial macos support   macos 10.13, high sierra\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n * amd kernel patches\n   * needed for booting macos on amd hardware(save these for later, we'll go over how to use them below)\n   * supporting amd family 15h, 16h, 17h and 19h\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nrequired ssdts   description\nssdt-ec-usbx     fixes both the embedded controller and usb power, see\n                 getting started with acpi guide for more details.\nssdt-cpur        fixes cpu definitions with b550 and a520 motherboards, do\n                 not use if you don't have an amd b550 or a520 system. you\n                 can find a prebuilt here: ssdt-cpur.aml\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, our patches are handled by our ssdts. this is a much cleaner solution as this will allow us to boot windows and other oses with opencore\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be passthrough to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we need to change the following:\n\nquirk                    enabled   comment\ndevirtualisemmio         no        if you have a trx40 system, enable this and follow the\n                                   instructions here:\n                                   https://dortania.github.io/opencore-install-guide/extras/kaslr-fix.html\nenablewriteunprotector   no        \nrebuildapplememorymap    yes       \nresizeapplegpubars       -1        if your firmware supports increasing gpu bar sizes (ie\n                                   resizable bar support), set this to 0\nsetupvirtualmap          yes       - note x570, b550, a520 and trx40 boards might need this\n                                   disabled\n                                   - x470 and b450 with late 2020 bios updates might also\n                                   require this disabled\nsyncruntimepermissions   yes       \n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: no\n   * this quirk and rebuildapplememorymap can commonly conflict, recommended to enable the latter on newer platforms and disable this entry.\n   * however, due to issues with oems not using the latest edkii builds you may find that the above combo will result in early boot failures. this is due to missing the memory_attribute_table and such we recommend disabling rebuildapplememorymap and enabling enablewriteunprotector. more info on this is covered in the troubleshooting section\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * rebuildapplememorymap: yes\n   * generates memory map compatible with macos, can break on some laptop oem firmwares so if you receive early boot failures disable this\n * resizeapplegpubars: -1\n   * will reduce the size of gpu pci bars if set to 0 when booting macos, set to -1 to disable\n   * setting other pci bar values is possible with this quirk, though can cause instabilities\n   * this quirk being set to zero is only necessary if resizable bar support is enabled in your firmware.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses\n   * b550, a520 and trx40 boards should disable this quirk\n * syncruntimepermissions: yes\n   * fixes alignment with mat tables and required to boot windows and linux with mat tables, also recommended for macos. mainly relevant for rebuildapplememorymap users\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\nby default, the sample.plist has this section set for audio which we'll be setting up by setting the layout id in the boot-args section, so removal of pciroot(0x0)/pci(0x1b,0x0) is also recommended from the add section.\n\ntl;dr, delete all the pciroot's here as we won't be using this section.\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\nkernel   kernel patches\n         \n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\ninfo\n\nneeded for spoofing unsupported cpus like pentiums and celerons and to disable cpu power management on unsupported cpus (such as amd cpus)\n\nquirk                  enabled\ndummypowermanagement   yes\n\nmore in-depth info\n * cpuid1mask: leave this blank\n   * mask for fake cpuid\n * cpuid1data: leave this blank\n   * fake cpuid entry\n * dummypowermanagement: yes\n   * new alternative to nullcpupowermanagement, required for all amd cpu based systems as there's no native power management.\n * minkernel: leave this blank\n   * lowest kernel version the above patches will be injected into, if no value specified it'll be applied to all versions of macos. see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel: leave this blank\n   * highest kernel version the above patches will be injected into, if no value specified it'll be applied to all versions of macos. see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\nthis is where the amd kernel patching magic happens. please do note that if coming from clover, kerneltopatch and matchos from clover becomes kernel and minkernel/ maxkernel in opencore. the latest amd kernel patches can always be found on the amd vanilla github repository.\n\nkernel patches:\n\n * ryzen/threadripper (17h/19h) (10.13 - 12.x)\n\nto merge:\n\n * open both files,\n * delete the kernel -> patch section from config.plist\n * copy the kernel -> patch section from patches.plist\n * paste into where old patches were in config.plist\n\n\n\nyou will also need to modify four patches, all named algrey - force cpuid_cores_per_package. you only need to change the replace value. you should change:\n\n * b8000000 0000 => b8 <core count> 0000 0000\n * ba000000 0000 => ba <core count> 0000 0000\n * ba000000 0090 => ba <core count> 0000 0090\n * ba000000 00 => ba <core count> 0000 00\n\nwhere <core count> is replaced with the physical core count of your cpu in hexadecimal. for example, an 8-core 5800x would have the new replace value be:\n\n * b8 08 0000 0000\n * ba 08 0000 0000\n * ba 08 0000 0090\n * ba 08 0000 00\n\ncore count => hexadecimal table\n\ncore count   hexadecimal\n2 core       02\n4 core       04\n6 core       06\n8 core       08\n12 core      0c\n16 core      10\n24 core      18\n32 core      20\n64 core      40\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nprovidecurrentcpuinfo     yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios. amd users can ignore\n * applexcpmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios. amd users can ignore\n * applexcpmextramsrs: no\n   * disables multiple msr access needed for unsupported cpus like pentiums and certain xeons\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk in tandem with platforminfo -> updatesmbiosmode -> custom will disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk.\n * disableiomapper: no\n   * amd doesn't have dmar or vt-d support so irrelevant\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * providecurrentcpuinfo: yes\n   * provides the kernel with cpu frequency values for amd.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues:\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nnpci=0x3000   this disables some pci debugging related to\n              kiopciconfiguratorpfm64 and giopcitunnelledkey. this is an\n              alternative to having above 4g decoding enabled in your\n              bios. do not use this unless you don't have it in your bios.\n              required for when getting stuck on [pci configuration begin]\n              as there are irq conflicts relating to your pci lanes.\n              source\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args        description\nagdpmod=pikera   used for disabling board id checks on some navi gpus (rx\n                 5000 & 6000 series), without this you'll get a black screen.\n                 don't use if you don't have navi (ie. polaris and vega cards\n                 shouldn't use this)\n-radcodec        used for allowing officially unsupported amd gpus (spoofed)\n                 to use the hardware video encoder\nradpg=15         used for disabling some power-gating modes, helpful for\n                 properly initializing amd cape verde based gpus\nunfairgva=1      used for fixing hardware drm support on supported amd gpus\nnvda_drv_vrl=1   used for enabling nvidia's web drivers on maxwell and pascal\n                 cards in macos sierra and high sierra\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip).\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\ninfo\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone. for us, we'll be changing the following:\n\nquirk        enabled\nwriteflash   yes\n\nmore in-depth info\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this example, we'll choose the macpro7,1 smbios but some smbios play with certain gpus better than others:\n\n * macpro7,1: amd polaris and newer\n   * note that macpro7,1 is exclusive to macos 10.15, catalina and newer\n * imacpro1,1: nvidia maxwell and pascal or amd polaris and newer\n   * use if you need high sierra or mojave, otherwise use macpro7,1\n * imac14,2: nvidia maxwell and pascal\n   * use if you get black screens on imacpro1,1 after installing web drivers with an nvidia gpu\n * macpro6,1: amd gcn gpus (supported hd and r5/r7/r9 series)\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               macpro7,1 smbios info                 #\n#######################################################\n\ntype:         macpro7,1\nserial:       f5kzv0jvp7qm\nboard serial: f5k9518024nk3f7jc\nsmuuid:       535b897c-55f7-4d65-a8f4-40f4b96ed394\napple rom:    001d4f0d5e22\n\n\nthe order is product | serial | board serial (mlb)\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nthe apple rom part gets copied to generic -> rom.\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk              enabled   comment\nunblockfsconnect   no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * amd os x discord\n * r/hackintosh subreddit\n\n\n# amd bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * iommu\n\nspecial note for 3990x users: macos currently does not support more than 64 threads in the kernel, and so will kernel panic if it sees more. the 3990x cpu has 128 threads total and so requires half of that disabled. we recommend disabling hyper threading in the bios for these situations.\n\n\n# enable\n\n * above 4g decoding (this must be on, if you can't find the option then add npci=0x3000 to boot-args. do not have both this option and npci enabled at the same time.)\n   * if you are on a gigabyte/aorus or an asrock motherboard, enabling this option may break certain drivers(ie. ethernet) and/or boot failures on other oses, if it does happen then disable this option and opt for npci instead\n   * 2020+ bios notes: when enabling above4g, resizable bar support may become an available on some x570 and newer motherboards. please ensure that booter -> quirks -> resizeapplegpubars is set to 0 if this is enabled.\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{cjk:!0}},{title:"Supporting the guides",frontmatter:{},regularPath:"/CONTRIBUTING.html",relativePath:"CONTRIBUTING.md",key:"v-bdcc2064",path:"/CONTRIBUTING.html",headers:[{level:2,title:"Contributing via Issues",slug:"contributing-via-issues",normalizedTitle:"contributing via issues",charIndex:246},{level:2,title:"Contributing via PRs",slug:"contributing-via-prs",normalizedTitle:"contributing via prs",charIndex:273},{level:3,title:"How to Contribute",slug:"how-to-contribute",normalizedTitle:"how to contribute",charIndex:299},{level:3,title:"Tips",slug:"tips",normalizedTitle:"tips",charIndex:322},{level:2,title:"Contributing via Translations",slug:"contributing-via-translations",normalizedTitle:"contributing via translations",charIndex:330}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Contributing via Issues Contributing via PRs How to Contribute Tips Contributing via Translations",content:"# Supporting the guides\n\nNote: This is a community run guide which is not officially endorsed by Acidanthera. Please do not bug Acidanthera with issues about this guide.\n\nWant to help support the guide? Well there's some ways you can help!\n\n\n\n * Contributing via Issues\n * Contributing via PRs\n   * How to Contribute\n   * Tips\n * Contributing via Translations\n\n\n\nNote: For those wanting to contribute financially, we seriously appreciate it but we're a non-profit organization. We do this to teach, not to make money. If you have some money left over we highly recommend donating it to a charity. Crohn's and Colitis Canada is one we recommend if you have none on mind.\n\n\n# Contributing via Issues\n\nContributing via Issues is pretty simple but there are some rules:\n\n * Keep issues tab dedicated to guides issues only, no personal hackintosh issues. It is not a place to discuss installation issues.\n * If for a typo or better clarification, please indicate what page it was on. Would appreciate not going for a scavenger hunt on where these issues are.\n\nYou can find the bugtracker here: Bugtracker\n\n\n# Contributing via PRs\n\nSome guidelines when contributing via PRs:\n\n * Use your brain (please).\n * Proofread your submissions.\n * Pull Requests can be denied if we feel it does not fit or has inaccurate information. We will generally tell you why it is rejected though or ask for revisions.\n   * We would also appreciate sources for any bigger commits to make it easier on us to verify the info you provide is valid\n * Images must be hosted locally in the repo under the ../images/ folder\n * Your PR must be run through a markdown lint and have all issues fixed.\n * In general, try to avoid using \"non-Acidanthera\" tools when possible. Generally we want to avoid use of third-party tools - though if it's impossible otherwise, then you can link it.\n   * Tools explicitly banned:\n     * UniBeast, MultiBeast and KextBeast\n       * More info can be found here: Tonymacx86-stance\n     * TransMac\n       * Know for creating borked USB drives\n     * Niresh Installers\n       * We'd like to avoid piracy with the guides\n\n\n# How to Contribute\n\nBest way to test your commits and make sure they are formatted correctly is by downloading Node.js then running npm install to install dependencies. When you run npm run dev, it will set up a local webserver which you can connect to view the changes you made. npm test will throw any errors at you about formatting and spellchecking as well. If you want markdownlint to automatically attempt to fix linting, run npm run fix-lint.\n\nSimple step-by-steps:\n\n * Fork this repo\n * Install the required tools:\n   * Node.js\n * Make your changes.\n * Build the site:\n   * npm install (To install all the required plugins)\n   * npm run dev (Preview the site)\n     * Can be found at http://localhost:8080\n * Check linting and spellcheck:\n   * npm test\n   * npm run lint and npm run spellcheck (to run the tests individually)\n   * npm run fix-lint (To fix any potential issues)\n   * For words not supported by the default spellcheck, please add them to the dictionary.txt and run npm run sort-dict\n\n\n# Tips\n\nSome tools that make contributing a bit easier:\n\n * Visual Studio Code\n * Typora for real time markdown rendering.\n * TextMate for easy and powerful mass find/replace.\n * GitHub Desktop for more user friendly GUI.\n\n\n# Contributing via Translations\n\nWhile Dortania's guide are primarily English based, we know there's plenty of other languages in the world and that not everyone is fluent in English. If you want to help translate our guides into different languages, we're more than happy to support you.\n\nMain things to keep in mind:\n\n * Translations must be a dedicated fork and won't be merged into Dortania's guide\n * Forks must indicate they're translations of Dortania and are not official\n * Forks must also comply with our License\n\nIf the above are met, you're free to host your translation without issue! Dortania's sites are built with VuePress using GitHub Actions and finally hosted on GitHub Pages, so there is no cost to hosting your own translation.\n\nIf you have any questions or concerns with either translations or hosting, feel free to reach out on our Bugtracker.\n\nCurrent known translations:\n\n * InyextcionES(Spanish)\n * macOS86(Italian, no longer maintained)\n * Technopat(Turkish)\n * ThrRip(Chinese, no longer maintained)\n * sumingyd(Chinese)\n * Shijuro(Russian)\n * viOpenCore(Vietnamese)\n\nAnd note that these translations are subject to authors preferences, translation changes and human errors. Please keep this in mind when reading as they're no longer official Dortania guides.",normalizedContent:"# supporting the guides\n\nnote: this is a community run guide which is not officially endorsed by acidanthera. please do not bug acidanthera with issues about this guide.\n\nwant to help support the guide? well there's some ways you can help!\n\n\n\n * contributing via issues\n * contributing via prs\n   * how to contribute\n   * tips\n * contributing via translations\n\n\n\nnote: for those wanting to contribute financially, we seriously appreciate it but we're a non-profit organization. we do this to teach, not to make money. if you have some money left over we highly recommend donating it to a charity. crohn's and colitis canada is one we recommend if you have none on mind.\n\n\n# contributing via issues\n\ncontributing via issues is pretty simple but there are some rules:\n\n * keep issues tab dedicated to guides issues only, no personal hackintosh issues. it is not a place to discuss installation issues.\n * if for a typo or better clarification, please indicate what page it was on. would appreciate not going for a scavenger hunt on where these issues are.\n\nyou can find the bugtracker here: bugtracker\n\n\n# contributing via prs\n\nsome guidelines when contributing via prs:\n\n * use your brain (please).\n * proofread your submissions.\n * pull requests can be denied if we feel it does not fit or has inaccurate information. we will generally tell you why it is rejected though or ask for revisions.\n   * we would also appreciate sources for any bigger commits to make it easier on us to verify the info you provide is valid\n * images must be hosted locally in the repo under the ../images/ folder\n * your pr must be run through a markdown lint and have all issues fixed.\n * in general, try to avoid using \"non-acidanthera\" tools when possible. generally we want to avoid use of third-party tools - though if it's impossible otherwise, then you can link it.\n   * tools explicitly banned:\n     * unibeast, multibeast and kextbeast\n       * more info can be found here: tonymacx86-stance\n     * transmac\n       * know for creating borked usb drives\n     * niresh installers\n       * we'd like to avoid piracy with the guides\n\n\n# how to contribute\n\nbest way to test your commits and make sure they are formatted correctly is by downloading node.js then running npm install to install dependencies. when you run npm run dev, it will set up a local webserver which you can connect to view the changes you made. npm test will throw any errors at you about formatting and spellchecking as well. if you want markdownlint to automatically attempt to fix linting, run npm run fix-lint.\n\nsimple step-by-steps:\n\n * fork this repo\n * install the required tools:\n   * node.js\n * make your changes.\n * build the site:\n   * npm install (to install all the required plugins)\n   * npm run dev (preview the site)\n     * can be found at http://localhost:8080\n * check linting and spellcheck:\n   * npm test\n   * npm run lint and npm run spellcheck (to run the tests individually)\n   * npm run fix-lint (to fix any potential issues)\n   * for words not supported by the default spellcheck, please add them to the dictionary.txt and run npm run sort-dict\n\n\n# tips\n\nsome tools that make contributing a bit easier:\n\n * visual studio code\n * typora for real time markdown rendering.\n * textmate for easy and powerful mass find/replace.\n * github desktop for more user friendly gui.\n\n\n# contributing via translations\n\nwhile dortania's guide are primarily english based, we know there's plenty of other languages in the world and that not everyone is fluent in english. if you want to help translate our guides into different languages, we're more than happy to support you.\n\nmain things to keep in mind:\n\n * translations must be a dedicated fork and won't be merged into dortania's guide\n * forks must indicate they're translations of dortania and are not official\n * forks must also comply with our license\n\nif the above are met, you're free to host your translation without issue! dortania's sites are built with vuepress using github actions and finally hosted on github pages, so there is no cost to hosting your own translation.\n\nif you have any questions or concerns with either translations or hosting, feel free to reach out on our bugtracker.\n\ncurrent known translations:\n\n * inyextciones(spanish)\n * macos86(italian, no longer maintained)\n * technopat(turkish)\n * thrrip(chinese, no longer maintained)\n * sumingyd(chinese)\n * shijuro(russian)\n * viopencore(vietnamese)\n\nand note that these translations are subject to authors preferences, translation changes and human errors. please keep this in mind when reading as they're no longer official dortania guides.",charsets:{}},{title:"Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)",frontmatter:{},regularPath:"/LICENSE.html",relativePath:"LICENSE.md",key:"v-2601fe56",path:"/LICENSE.html",lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:null,content:"# Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)\n\nNote: This is a human-readable version, to find the full license see here: Legal Code\n\nYou are free to:\n\n * Share — copy and redistribute the material in any medium or format\n * Adapt — remix, transform, and build upon the material\n\nThe licensor cannot revoke these freedoms as long as you follow the license terms.\n\nUnder the following terms:\n\n * Attribution — You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.\n * NonCommercial — You may not use the material for commercial purposes.\n * ShareAlike — If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original.\n * No additional restrictions — You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.\n\nNotices:\n\n * You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation.\n * No warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material.",normalizedContent:"# attribution-noncommercial-sharealike 4.0 international (cc by-nc-sa 4.0)\n\nnote: this is a human-readable version, to find the full license see here: legal code\n\nyou are free to:\n\n * share — copy and redistribute the material in any medium or format\n * adapt — remix, transform, and build upon the material\n\nthe licensor cannot revoke these freedoms as long as you follow the license terms.\n\nunder the following terms:\n\n * attribution — you must give appropriate credit, provide a link to the license, and indicate if changes were made. you may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.\n * noncommercial — you may not use the material for commercial purposes.\n * sharealike — if you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original.\n * no additional restrictions — you may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.\n\nnotices:\n\n * you do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation.\n * no warranties are given. the license may not give you all of the permissions necessary for your intended use. for example, other rights such as publicity, privacy, or moral rights may limit how you use the material.",charsets:{}},{title:"Home",frontmatter:{home:!0,heroImage:"/dortania-logo-clear.png",heroText:"Dortania的OpenCore安装指南",actionText:"入门→",actionLink:"prerequisites.md",meta:[{name:"description",content:"当前支持版本0.9.1"}]},regularPath:"/",relativePath:"README.md",key:"v-cbef71f6",path:"/",lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:null,content:"更新状态：\n\n\n# 什么是OpenCore？本指南针对谁？\n\nOpenCore就是我们所说的“引导加载程序”——它是一个复杂的软件，我们用它来为macOS准备我们的系统——特别是通过为macOS注入新的数据，比如SMBIOS、ACPI表和kext。这个工具与Clover等其他工具的不同之处在于，它在设计时考虑了安全性和质量，允许我们使用许多在真实Mac上发现的安全功能，例如系统完整性保护和文件保险箱。更深入的了解可以在这里找到:为什么OpenCore胜过Clover和其他的\n\n本指南特别关注两个主要方面:\n\n * 在x86 PC上安装macOS\n * 教你如何让你的黑苹果工作\n\n正因为如此，你需要阅读、学习甚至使用谷歌。这不是简单的一键安装设置。\n\n请记住，OpenCore仍然是新的，目前处于测试阶段。虽然它相当稳定，而且可以说在各方面都比Clover稳定得多，但它仍然在频繁更新，所以配置的大块变化相当频繁(即新的quick取代旧的)。\n\n最后，那些有问题的人可以访问r/Hackintosh subreddit和r/Hackintosh Discord寻求更多帮助。",normalizedContent:"更新状态：\n\n\n# 什么是opencore？本指南针对谁？\n\nopencore就是我们所说的“引导加载程序”——它是一个复杂的软件，我们用它来为macos准备我们的系统——特别是通过为macos注入新的数据，比如smbios、acpi表和kext。这个工具与clover等其他工具的不同之处在于，它在设计时考虑了安全性和质量，允许我们使用许多在真实mac上发现的安全功能，例如系统完整性保护和文件保险箱。更深入的了解可以在这里找到:为什么opencore胜过clover和其他的\n\n本指南特别关注两个主要方面:\n\n * 在x86 pc上安装macos\n * 教你如何让你的黑苹果工作\n\n正因为如此，你需要阅读、学习甚至使用谷歌。这不是简单的一键安装设置。\n\n请记住，opencore仍然是新的，目前处于测试阶段。虽然它相当稳定，而且可以说在各方面都比clover稳定得多，但它仍然在频繁更新，所以配置的大块变化相当频繁(即新的quick取代旧的)。\n\n最后，那些有问题的人可以访问r/hackintosh subreddit和r/hackintosh discord寻求更多帮助。",charsets:{cjk:!0}},{title:"Clover Boot Arg Conversion",frontmatter:{search:!1},regularPath:"/clover-conversion/Clover-boot-arg.html",relativePath:"clover-conversion/Clover-boot-arg.md",key:"v-54915676",path:"/clover-conversion/Clover-boot-arg.html",headers:[{level:2,title:"macOS flags",slug:"macos-flags",normalizedTitle:"macos flags",charIndex:442},{level:2,title:"Kexts flags",slug:"kexts-flags",normalizedTitle:"kexts flags",charIndex:1085},{level:2,title:"Chameleon flags",slug:"chameleon-flags",normalizedTitle:"chameleon flags",charIndex:1266}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"macOS flags Kexts flags Chameleon flags",content:"# Clover Boot Arg Conversion\n\nThis section is mainly used for explaining what boot-args are no longer relevant, it's quite common for users to be still carrying legacy args which have little to no real affect in newer versions of macOS or have little use in OpenCore\n\nThis list is based of memory and an annoyed self with seeing these flags keep popping up, got other flags to add then I recommend opening an issue. All help is welcomed!\n\n\n# macOS flags\n\ndart=0:\n\n * Used for disabling VT-D support\n * With Clover, when this flag was present it would also drop your DMAR table from ACPI\n * This flag also requires SIP to be disabled in macOS 10.15 Catalina, so with OpenCore this flag is no longer recommended and instead replaced with Kernel -> Quirks -> DisableIoMapper\n\nkext-dev-mode=1:\n\n * Used for allowing unsigned kexts to be loaded, flag only present in Yosemite\n * CSR_ALLOW_UNSIGNED_KEXTS bit to be flipped in csr-active-config NVRAM variable for newer releases\n * This is not needed on OpenCore due to the kernel injection method used: Attaching to the prelinked kernel\n\n\n# Kexts flags\n\nnvda_drv=1: Used for enabling NVIDIA's Web Drivers, no longer works in macOS 10.12\n\n * This flag was actually turned into nvda_drv_vrl=1 for Sierra and High Sierra\n\n\n# Chameleon flags\n\nFor some reason people kept using these flags into Clover which had no effect, and so we really need to stop the train on this one with OpenCore\n\nPCIRootUID=Value\n\n * This sets the _UID of Device (PCI0) to whatever the value is, supposedly needed on legacy AMD GPUs but this is debatable. Ironically Clover still uses this flag but most users know it from Chameleon. Source\n\nGraphicsEnabler=Yes/No\n\n * InjectAMD/NVIDIA was the Clover equivalent but no feature parity in OpenCore besides running WhateverGreen\n\nIGPEnabler=Yes/No\n\n * Same idea as GraphicsEnabler, Clover equivalent is InjectIntel so feature parity would be WhateverGreen's Framebuffer patching\n\n-f\n\n * Enables cacheless booting on Chameleon and Clover, OpenCore has a slightly different option under Kernel -> Scheme -> KernelCache and set the entry to Cacheless\n   * Currently cacheless booting is only supported on 64-bit kernels from OS X 10.6 to 10.9",normalizedContent:"# clover boot arg conversion\n\nthis section is mainly used for explaining what boot-args are no longer relevant, it's quite common for users to be still carrying legacy args which have little to no real affect in newer versions of macos or have little use in opencore\n\nthis list is based of memory and an annoyed self with seeing these flags keep popping up, got other flags to add then i recommend opening an issue. all help is welcomed!\n\n\n# macos flags\n\ndart=0:\n\n * used for disabling vt-d support\n * with clover, when this flag was present it would also drop your dmar table from acpi\n * this flag also requires sip to be disabled in macos 10.15 catalina, so with opencore this flag is no longer recommended and instead replaced with kernel -> quirks -> disableiomapper\n\nkext-dev-mode=1:\n\n * used for allowing unsigned kexts to be loaded, flag only present in yosemite\n * csr_allow_unsigned_kexts bit to be flipped in csr-active-config nvram variable for newer releases\n * this is not needed on opencore due to the kernel injection method used: attaching to the prelinked kernel\n\n\n# kexts flags\n\nnvda_drv=1: used for enabling nvidia's web drivers, no longer works in macos 10.12\n\n * this flag was actually turned into nvda_drv_vrl=1 for sierra and high sierra\n\n\n# chameleon flags\n\nfor some reason people kept using these flags into clover which had no effect, and so we really need to stop the train on this one with opencore\n\npcirootuid=value\n\n * this sets the _uid of device (pci0) to whatever the value is, supposedly needed on legacy amd gpus but this is debatable. ironically clover still uses this flag but most users know it from chameleon. source\n\ngraphicsenabler=yes/no\n\n * injectamd/nvidia was the clover equivalent but no feature parity in opencore besides running whatevergreen\n\nigpenabler=yes/no\n\n * same idea as graphicsenabler, clover equivalent is injectintel so feature parity would be whatevergreen's framebuffer patching\n\n-f\n\n * enables cacheless booting on chameleon and clover, opencore has a slightly different option under kernel -> scheme -> kernelcache and set the entry to cacheless\n   * currently cacheless booting is only supported on 64-bit kernels from os x 10.6 to 10.9",charsets:{}},{title:"Converting common properties from Clover to OpenCore",frontmatter:{search:!1},regularPath:"/clover-conversion/Clover-config.html",relativePath:"clover-conversion/Clover-config.md",key:"v-14cbf754",path:"/clover-conversion/Clover-config.html",lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:null,content:"# Converting common properties from Clover to OpenCore\n\nSo this little(well not so little as I reread this...) page is for users who are having issues migrating from Clover to OpenCore as some of their legacy quirks are required or the Configuration.pdf isn't well suited for laptop users.\n\n\n# Kexts and Firmware drivers\n\nSee Kexts and Firmware drivers.\n\n\n# Acpi\n\nACPI Renames:\n\nSo with the transition from Clover to OpenCore we should start removing unneeded patches you may have carried along for some time:\n\n * EHCI Patches: Recommended to power off the controller with SSDT-EHCx_OFF. Skylake and newer users do not have an EHCI controller so no need for this.\n   * change EHC1 to EH01\n   * change EHC2 to EH02\n * XHCI Patches: Not needed once an Injector kext is made\n   * change XHCI to XHC\n   * change XHC1 to XHC\n * SATA patches: Purely cosmetic in macOS now\n   * change SAT0 to SATA\n   * change SAT1 to SATA\n * IMEI Patches: Handled by WhateverGreen\n   * change HECI to IMEI\n   * change HEC1 to IMEI\n   * change MEI to IMEI\n   * change IDER to MEID\n * GFX patches: Handled by WhateverGreen\n   * change GFX0 to IGPU\n   * change PEG0 to GFX0\n   * change PEGP to GFX0\n   * change SL01 to PEGP\n * EC Patches: See here on best solution: Getting started with ACPI\n   * change EC0 to EC\n   * change H_EC to EC\n   * change ECDV to EC\n   * change PGEC to EC\n * Audio renames: Handled by AppleALC\n   * change HDAS to HDEF\n   * change CAVS to HDEF\n   * change AZAL to HDEF\n   * change ALZA to HDEF\n   * change B0D3 to HDAU\n * Z390 BIOS RTC bug fix: See here on best solution: Getting started with ACPI(SSDT-AWAC)\n   * change STAS to [Blank]\n   * Fix Z390 BIOS DSDT Device(RTC) bug\n   * Fix 300-series RTC Bug\n * NVMe patches: NVMeFix fixes power management\n   * change PXSX to ANS1\n   * change PXSX to ANS2\n * Airport/WiFi Patches: AirportBrcmFixup\n   * change PXSX to ARPT\n * Other purely cosmetic patches:\n   * change LPC0 to LPCB(use SSDT-SBUS-MCHC for fixing SMBUS support)\n   * change PC00 to PCIO\n   * change FPU to MATH\n   * change TMR to TIMR\n   * change PIC to IPIC\n   * change GBE1 to ETH0\n\nPatches\n\n * TgtBridge patches:\n   \n   * ACPI -> Patch -> ... -> Base\n\n * DisableASPM:\n   \n   * DeviceProperties -> Add -> PciRoot... -> pci-aspm-default | Data | <00>\n\n * HaltEnabler:\n   \n   * ACPI -> Quirks -> FadtEnableReset -> YES\n\nFixes:\n\n * FixAirport:\n   \n   * AirportBrcmFixup\n\n * FixIPIC:\n   \n   * CorpNewt's SSDTTime to make the proper SSDT, FixHPET - Patch out IRQ Conflicts\n\n * FixSBUS:\n   \n   * SSDT-SBUS-MCHC\n\n * FixShutdown:\n   \n   * FixShutdown-USB-SSDT\n   * _PTS to ZPTS Patch\n   * This will not harm Windows or Linux installs as this is just adding missing methods that should've been there to start with. Blame the firmware writers\n\n * FixDisplay:\n   \n   * Manual framebuffer patching, WhateverGreen does most of the work already\n\n * FixHDA:\n   \n   * Handled by AppleALC\n\n * FixHPET:\n   \n   * CorpNewt's SSDTTime to make the proper SSDT, FixHPET - Patch out IRQ Conflicts\n\n * FixSATA:\n   \n   * Kernel -> Quirks -> ExternalDiskIcons -> YES\n\n * FixADP1:\n   \n   * Renames device AC0_ to ADP1, see Rename-SSDT for an example\n   * Also injects Name (_PRW, Package (0x02) {0x1C,0x03}) into the device if not present. Source\n\n * FixRTC:\n   \n   * CorpNewt's SSDTTime to make the proper SSDT, FixHPET - Patch out IRQ Conflicts\n\n * FixTMR:\n   \n   * CorpNewt's SSDTTime to make the proper SSDT, FixHPET - Patch out IRQ Conflicts\n\n * AddPNLF:\n   \n   * See SSDT-PNLF\n\n * AddMCHC:\n   \n   * SSDT-SBUS-MCHC\n\n * AddIMEI:\n   \n   * SSDT-SBUS-MCHC\n   * WhateverGreen will also handle fixing IMEI naming\n   * For Sandy Bridge on Z77 or IvyBridge on Z67, the IMEI will need to be faked: SSDT-IMEI\n\n * FakeLPC:\n   \n   * DeviceProperties -> Add -> PciRoot... -> device-id\n   * You'll want to spoof it to a supported LPC controller already in AppleLPC\n\n * FixIntelGfx:\n   \n   * WhateverGreen handles this\n\n * AddHDMI:\n   \n   * WhateverGreen handles this\n\nDropTables:\n\n * ACPI -> Delete\n\nSSDT:\n\n * PluginType:\n   \n   * SSDT-PLUG\n   * See Getting started with ACPI for more details\n\n * Generate P States: ssdtPRGen.sh(For Sandy Bridge and IvyBridge)\n\n * Generate C States: ssdtPRGen.sh(For Sandy Bridge and IvyBridge)\n\n\n# Boot\n\nBoot Argument:\n\n * NVRAM -> Add -> 7C436110-AB2A-4BBB-A880-FE41995C9F82 -> boot-args\n\nNeverHibernate:\n\n * Misc -> Boot -> HibernateMode -> None\n\nDefault Boot Volume:\n\n * Misc -> Security -> AllowSetDefault -> True\n   * Press Ctrl+Enter in the picker to set default device\n * Alternative is Startup Disk in macOS's System Preferences, just like on real Macs\n\n\n# Boot Graphics\n\nDefaultBackgroundColor:\n\n * NVRAM -> Add -> 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 -> DefaultBackgroundColor\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n   * To calculate your own, convert an RGB value to HEX\n\nEFILoginHiDPI:\n\n * Clover only flag, for OpenCore UI scaling see UIScale and UEFI -> Output\n\nflagstate:\n\n * NVRAM -> Add -> 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14 -> flagstate | Data | <>\n   * 0 -> <00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000(dumped from a mac)\n   * NVRAM location needs to be double checked for this one\n\nUIScale:\n\n * UEFI -> Quirks -> UIScale | Integer |\n   * 1 —> 1x scaling, corresponds to normal displays.\n   * 2 —> 2x scaling, corresponds to HiDPI displays.\n   * -1 —> leaves the current variable unchanged.\n   * 0 —> automatically chooses scaling based on the current resolution.\n\n\n# CPU\n\nType:\n\n * PlatformInfo -> Generic -> ProcessorType\n * See AppleSmBios.h for all supported values\n\nHWPEnable: Better alternative is to properly manage MSR 0x770 with HWPEnable\n\nQEMU: Proper VM/KVM support is implemented in OpenCore\n\nTurboDisable: Better alternative is to control your frequencies with CPUFriend or ssdtPRGen\n\n\n# Devices\n\nUSB:\n\n * FixOwnership: UEFI -> Quirk -> ReleaseUsbOwnership\n   * You should also enable XHCI Hand-off in your BIOS\n * ClockID: DeviceProperties -> Add -> PciRoot... -> AAPL,clock-id\n * HighCurrent: DeviceProperties -> Add -> PciRoot... -> AAPL, HighCurrent\n   * Irrelevant for OS X 10.11 and newer\n   * Newer variant is either PowerProperties defined in IOUSBHostFamily.kext -> AppleUSBHostPlatformProperties or added with a USBX SSDT for Skylake SMBIOS and newer\n\nAudio:\n\nFor the following, you will need to know your PciRoot for your audio controller and its name(commonly known as HDEF but also HDAS, HDAU and such), this can be found with gfxutil:\n\npath/to/gfxutil -f HDEF\n\n\n * Inject: DeviceProperties -> Add -> PciRoot... -> layout-id\n * AFGLowPowerState: DeviceProperties -> Add -> PciRoot... -> AFGLowPowerState -> <01000000>\n * ResetHDA: UEFI -> Audio -> ResetTrafficClass\n   * Optionally there's also AppleALC's alctsel=1 boot-arg or JackFix\n\nAdd Properties:\n\n * No equivalent, need to specify with a PciRoot path\n\nProperties:\n\n * DeviceProperties -> Add\n\nFakeID: For the following, you will need to know your PciRoot for your device and apply their properties with DeviceProperties -> Add, PciRoot can be found with gfxutil\n\n * USB\n   \n   * device-id\n   * device_type\n   * device_type\n\n * IMEI\n   \n   * device-id\n   * vendor-id\n\n * WIFI\n   \n   * name\n   * compatible\n\n * LAN\n   \n   * device-id\n   * compatible\n   * vendor-id\n\n * XHCI\n   \n   * device-id\n   * device_type: UHCI\n   * device_type: OHCI\n\ndevice_type: EHCI\n\n * device-id\n * AAPL,current-available\n * AAPL,current-extra\n * AAPL,current-available\n * AAPL,current-extra\n * AAPL,current-in-sleep\n * built-in\n\ndevice_type: XHCI\n\n * device-id\n * AAPL,current-available\n * AAPL,current-extra\n * AAPL,current-available\n * AAPL,current-in-sleep\n * built-in\n\nForceHPET:\n\n * UEFI -> Quirks -> ActivateHpetSupport\n\n\n# Disable Drivers\n\nJust don't add your drivers to UEFI -> Drivers, alternatively add # in-front of the driver in your config.plist for OpenCore to skip it.\n\n\n# Gui\n\n\n# Graphics\n\n * Note: PciRoot... should be replaced with\n\nInjectIntel:\n\n * GMA Patching\n\nInjectAti:\n\n * DeviceProperties -> Add -> PciRoot... -> device-id\n   * ie: <B0670000> for the R9 390X\n * DeviceProperties -> Add -> PciRoot... -> @0,connector-type\n   * You may need to add additional Connectors (ie. @1,connector-type, @2,connector-type) for the amount of ports you have. See here for the list of connector types:\n\nLVDS                    <02 00 00 00>\nDVI (Dual Link)         <04 00 00 00>\nDVI (Single Link)       <00 02 00 00>\nVGA                     <10 00 00 00>\nS-Video                 <80 00 00 00>\nDP                      <00 04 00 00>\nHDMI                    <00 08 00 00>\nDUMMY                   <01 00 00 00>\n\n\nInjectNVIDIA:\n\n * NVIDIA Patching\n\nFakeIntel:\n\n * DeviceProperties -> Add -> PciRoot(0x0)/Pci(0x2,0x0) -> device-id\n   * ie. 66010003 for the HD 4000\n * DeviceProperties -> Add -> PciRoot(0x0)/Pci(0x2,0x0) -> vendor-id -> <86800000>\n\nFakeAti:\n\n * DeviceProperties -> Add -> PciRoot... -> device-id\n   * ie: <B0670000> for the R9 390X\n * DeviceProperties -> Add -> PciRoot... -> ATY,DeviceID\n   * ie: <B067> for the R9 390X\n * DeviceProperties -> Add -> PciRoot... -> @0,compatible\n   * ie. ATY,Elodea for HD 6970M\n * DeviceProperties -> Add -> PciRoot... -> vendor-id-> <02100000>\n * DeviceProperties -> Add -> PciRoot... -> ATY,VendorID -> <0210>\n\nNote: See here on making an SSDT for GPU Spoofing, DeviceProperties injection via OpenCore seems to fail sometimes when trying to spoof a GPU: Renaming GPUs For others like InjectAti, see the Sample.dsl in the WhateverGreen docs\n\nCustom EDID\n\n * WhateverGreen's EDID docs\n\nDual Link:\n\n * DeviceProperties -> Add -> PciRoot... -> AAPL00,DualLink\n   * 1 -> <01000000>\n   * 0 -> <00000000>\n\nNVCAP\n\n * NVIDIA Patching\n\ndisplay-cfg:\n\n * DeviceProperties -> Add -> PciRoot... -> @0,display-cfg\n * See fassl's post on the matter: NVIDIA injection\n\nLoadVBios:\n\n * See sample.dsl for more info on custom VBIOS injection\n\nPatchVBios: See LoadVBIOS\n\nNVIDIAGeneric:\n\n * DeviceProperties -> Add -> PciRoot... -> model | string | Add the GPU name\n\nNVIDIASingle: See disabling unsupported GPUs\n\nNVIDIANoEFI:\n\n * DeviceProperties -> Add -> PciRoot... -> NVDA,noEFI | Boolean | True\n * See FredWst' comment for more info: GT 640 scramble\n\nig-platform-id:\n\n * DeviceProperties -> Add -> PciRoot(0x0)/Pci(0x2,0x0) -> APPL,ig-platform-id\n\nBootDisplay:\n\n * DeviceProperties -> Add -> PciRoot... -> @0,AAPL,boot-display\n\nRadeonDeInit:\n\nIn most cases it is advisable to use WhateverGreen, which handles this automatically. This SSDT is not needed if WhateverGreen is used.\n\n * Radeon-DeInit-SSDT\n   * Do note that this is meant for GFX0, adjust for your system\n\n\n# Kernel and Kext Patches\n\nKernelPm:\n\n * Kernel -> Quirks -> AppleXcpmCfgLock -> YES\n * Note that Clover will auto-apply this patch without setting it if the MSR E2 was locked, so you may actually need AppleXcpmCfgLock even if Clover didn't\n\nAppleIntelCPUPM:\n\n * Kernel -> Quirks -> AppleCpuPmCfgLock -> YES\n\nDellSMBIOSPatch:\n\nAn odd quirk for Dell systems running APTIO V\n\n * Kernel -> Quirks -> CustomSMBIOSGuid -> YES\n * PlatformInfo -> UpdateSMBIOSMode -> Custom\n\nKextsToPatch:\n\n * Kernel -> Patch\n * See Common Kernel and Kext patch conversions for common patch conversions\n\nKernelToPatch:\n\n * Kernel -> Patch\n * See Common Kernel and Kext patch conversions for common patch conversions\n\nForceKextsToLoad:\n\n * Kernel -> Force\n\nKernel LAPIC:\n\n * Kernel -> Quirks -> LapicKernelPanic -> YES\n\nKernelXCPM:\n\n * Kernel -> Quirks -> AppleXcpmExtraMsrs -> YES\n\nFor an extensive list of patches, please compare OpenCore's CommonPatches.c with Clover's kernel_patcher.c. Some patches are not transferred over so if you're having issues this is the section to check, example is converting the KernelIvyBridgeXCPM() to OpenCore:\n\nBase: _xcpm_bootstrap\nComment: _xcpm_bootstrap (Ivy Bridge) 10.15\nCount: 1\nEnabled: YES\nFind: 8D43C43C22\nIdentifier: kernel\nLimit: 0\nMask: FFFF00FFFF\nMinKernel: 19.\nMaxKernel: 19.99.99\nReplace: 8D43C63C22\nReplaceMask: 0000FF0000\nSkip: 0\n\n\nSource\n\nFor Low end Haswell+ like Celerons, please see here for recommended patches: Bugtracker Issues 365\n\nUSB Port Limit Patches:\n\n * Kernel -> Quirks -> XhciPortLimit -> YES\n\nExternal Icons Patch:\n\n * Kernel -> Quirks -> ExternalDiskIcons -> YES\n * Used for when you internal disk are seen as external on macOS\n\nAppleRTC\n\nIssue with AppleRTC, quite a simple fix:\n\n * config.plist -> Kernel -> Quirks -> DisableRtcChecksum -> true\n\nFor some versions of MacOS (e.g. Catalina), boot.efi may write to the RTC. To prevent this, the below needs to be added as well:\n\n * config.plist -> NVRAM -> Add -> 4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102:rtc-blacklist = <58 59>\n\nNote: If you still have issues, you'll need to use RTCMemoryFixup and exclude ranges. See here for more info, and here for a guide.\n\nFakeCPUID:\n\n * Kernel -> Emulate:\n   * Cpuid1Mask: <Clover_FCPUID_Extended_to_4_bytes_Swapped_Bytes> | 00 00 00 00 | 00 00 00 00 | 00 00 00 00\n     * ex(0x0306A9): A9060300 00000000 00000000 00000000\n   * Cpuid1Data(Swap 00 for FF if needing to swap with a longer value)\n     * ex: FFFFFFFF 00000000 00000000 00000000\n\nNote: Finding CPUID's for Intel can be a bit harder than looking at Intel ARK, easiest way to find it is via Microsoft's Intel microcode update notes\n\n\n# Rt Variables\n\nROM:\n\n * No direct translation for UseMacAddr0 as you need to provide your hardware ROM, can be found in System Preferences -> Network -> Advanced -> Hardware\n * Also verify your En0 is still built-in when running OpenCore, this can break iMessage and iCloud when there's no built-in property.\n\nMLB:\n\n * PlatformInfo -> Generic -> MLB\n\nBooterConfig:\n\n * UEFI -> Quirks -> UIScale | Integer |\n   * 1 —> 1x scaling, corresponds to normal displays.\n   * 2 —> 2x scaling, corresponds to HiDPI displays.\n   * -1 —> leaves the current variable unchanged.\n   * 0 —> automatically chooses scaling based on the current resolution.\n\nCsrActiveConfig:\n\n * NVRAM -> Add -> 7C436110-AB2A-4BBB-A880-FE41995C9F82 -> csr-active-config:\n   \n   * 0x0: 00000000\n   * 0x3: 03000000\n   * 0x67: 67000000\n   * 0x3E7: E7030000\n\n\n# SMBIOS\n\nProduct Name:\n\n * PlatformInfo -> Generic -> SystemProductName\n\nSerial Number:\n\n * PlatformInfo -> Generic -> SystemSerialNumber\n\nBoard Serial Number:\n\n * PlatformInfo -> Generic -> MLB\n\nSmUUID:\n\n * PlatformInfo -> Generic -> SystemUUID\n\nMemory:\n\n * PlatformInfo -> CustomMemory -> True\n * PlatformInfo -> Memory\n   * See Configuration.pdf for more info\n\nSlots AAPL Injection:\n\n * DeviceProperties -> Add -> PciRoot... -> APPL,slot-name | string | Add slot\n\n\n# System Parameters\n\nCustomUUID:\n\n * Heavily deprecated and not recommended even on Clover, no equivalent on OpenCore\n * More info on why: Hardware UUID injection for OpenCore #711\n\nInjectSystemID:\n\n * Also legacy as it's used for replicating Chameleon user's UUIDs\n\nBacklightLevel:\n\n * Property set in NVRAM\n * NVRAM -> Add -> 7C436110-AB2A-4BBB-A880-FE41995C9F82 -> backlight-level | Data | <Insert value>\n   * 0x0101 -> <0101>\n\nInjectKexts:\n\n * No equivalent but you really have no excuse to keep FakeSMC inside macOS\n\nNoCaches:\n\n * This only works up to 10.7 on Clover, and OpenCore requires an OS that supports a prelinked(10.7) so there can't be an equivalent\n\nExposeSysVariables:\n\n * Just add your SMBIOS properties under PlatformInfo\n * Confusing quirk tbh, it's not even mentioned in more recent versions of the Clover docs on AppleLife\n\nNVIDIAWeb:\n\n * What this does is apply sudo nvram nvda_drv=1 on every boot. To get a similar effect you can find it under the following path:\n * NVRAM -> Add -> 7C436110-AB2A-4BBB-A880-FE41995C9F82 -> nvda_drv: <31>\n\n\n# Status\n\nSection finished 100%:\n\n * Boot Graphics\n * Disable Drivers\n * KernelAndKextPatches\n * RTVariables\n * SMBIOS\n * SystemParameters\n\nSection mostly finished:\n\n * Acpi\n * Boot\n * CPU\n * Device\n\nSection missing:\n\n * GUI",normalizedContent:"# converting common properties from clover to opencore\n\nso this little(well not so little as i reread this...) page is for users who are having issues migrating from clover to opencore as some of their legacy quirks are required or the configuration.pdf isn't well suited for laptop users.\n\n\n# kexts and firmware drivers\n\nsee kexts and firmware drivers.\n\n\n# acpi\n\nacpi renames:\n\nso with the transition from clover to opencore we should start removing unneeded patches you may have carried along for some time:\n\n * ehci patches: recommended to power off the controller with ssdt-ehcx_off. skylake and newer users do not have an ehci controller so no need for this.\n   * change ehc1 to eh01\n   * change ehc2 to eh02\n * xhci patches: not needed once an injector kext is made\n   * change xhci to xhc\n   * change xhc1 to xhc\n * sata patches: purely cosmetic in macos now\n   * change sat0 to sata\n   * change sat1 to sata\n * imei patches: handled by whatevergreen\n   * change heci to imei\n   * change hec1 to imei\n   * change mei to imei\n   * change ider to meid\n * gfx patches: handled by whatevergreen\n   * change gfx0 to igpu\n   * change peg0 to gfx0\n   * change pegp to gfx0\n   * change sl01 to pegp\n * ec patches: see here on best solution: getting started with acpi\n   * change ec0 to ec\n   * change h_ec to ec\n   * change ecdv to ec\n   * change pgec to ec\n * audio renames: handled by applealc\n   * change hdas to hdef\n   * change cavs to hdef\n   * change azal to hdef\n   * change alza to hdef\n   * change b0d3 to hdau\n * z390 bios rtc bug fix: see here on best solution: getting started with acpi(ssdt-awac)\n   * change stas to [blank]\n   * fix z390 bios dsdt device(rtc) bug\n   * fix 300-series rtc bug\n * nvme patches: nvmefix fixes power management\n   * change pxsx to ans1\n   * change pxsx to ans2\n * airport/wifi patches: airportbrcmfixup\n   * change pxsx to arpt\n * other purely cosmetic patches:\n   * change lpc0 to lpcb(use ssdt-sbus-mchc for fixing smbus support)\n   * change pc00 to pcio\n   * change fpu to math\n   * change tmr to timr\n   * change pic to ipic\n   * change gbe1 to eth0\n\npatches\n\n * tgtbridge patches:\n   \n   * acpi -> patch -> ... -> base\n\n * disableaspm:\n   \n   * deviceproperties -> add -> pciroot... -> pci-aspm-default | data | <00>\n\n * haltenabler:\n   \n   * acpi -> quirks -> fadtenablereset -> yes\n\nfixes:\n\n * fixairport:\n   \n   * airportbrcmfixup\n\n * fixipic:\n   \n   * corpnewt's ssdttime to make the proper ssdt, fixhpet - patch out irq conflicts\n\n * fixsbus:\n   \n   * ssdt-sbus-mchc\n\n * fixshutdown:\n   \n   * fixshutdown-usb-ssdt\n   * _pts to zpts patch\n   * this will not harm windows or linux installs as this is just adding missing methods that should've been there to start with. blame the firmware writers\n\n * fixdisplay:\n   \n   * manual framebuffer patching, whatevergreen does most of the work already\n\n * fixhda:\n   \n   * handled by applealc\n\n * fixhpet:\n   \n   * corpnewt's ssdttime to make the proper ssdt, fixhpet - patch out irq conflicts\n\n * fixsata:\n   \n   * kernel -> quirks -> externaldiskicons -> yes\n\n * fixadp1:\n   \n   * renames device ac0_ to adp1, see rename-ssdt for an example\n   * also injects name (_prw, package (0x02) {0x1c,0x03}) into the device if not present. source\n\n * fixrtc:\n   \n   * corpnewt's ssdttime to make the proper ssdt, fixhpet - patch out irq conflicts\n\n * fixtmr:\n   \n   * corpnewt's ssdttime to make the proper ssdt, fixhpet - patch out irq conflicts\n\n * addpnlf:\n   \n   * see ssdt-pnlf\n\n * addmchc:\n   \n   * ssdt-sbus-mchc\n\n * addimei:\n   \n   * ssdt-sbus-mchc\n   * whatevergreen will also handle fixing imei naming\n   * for sandy bridge on z77 or ivybridge on z67, the imei will need to be faked: ssdt-imei\n\n * fakelpc:\n   \n   * deviceproperties -> add -> pciroot... -> device-id\n   * you'll want to spoof it to a supported lpc controller already in applelpc\n\n * fixintelgfx:\n   \n   * whatevergreen handles this\n\n * addhdmi:\n   \n   * whatevergreen handles this\n\ndroptables:\n\n * acpi -> delete\n\nssdt:\n\n * plugintype:\n   \n   * ssdt-plug\n   * see getting started with acpi for more details\n\n * generate p states: ssdtprgen.sh(for sandy bridge and ivybridge)\n\n * generate c states: ssdtprgen.sh(for sandy bridge and ivybridge)\n\n\n# boot\n\nboot argument:\n\n * nvram -> add -> 7c436110-ab2a-4bbb-a880-fe41995c9f82 -> boot-args\n\nneverhibernate:\n\n * misc -> boot -> hibernatemode -> none\n\ndefault boot volume:\n\n * misc -> security -> allowsetdefault -> true\n   * press ctrl+enter in the picker to set default device\n * alternative is startup disk in macos's system preferences, just like on real macs\n\n\n# boot graphics\n\ndefaultbackgroundcolor:\n\n * nvram -> add -> 4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14 -> defaultbackgroundcolor\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n   * to calculate your own, convert an rgb value to hex\n\nefiloginhidpi:\n\n * clover only flag, for opencore ui scaling see uiscale and uefi -> output\n\nflagstate:\n\n * nvram -> add -> 4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14 -> flagstate | data | <>\n   * 0 -> <00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000(dumped from a mac)\n   * nvram location needs to be double checked for this one\n\nuiscale:\n\n * uefi -> quirks -> uiscale | integer |\n   * 1 —> 1x scaling, corresponds to normal displays.\n   * 2 —> 2x scaling, corresponds to hidpi displays.\n   * -1 —> leaves the current variable unchanged.\n   * 0 —> automatically chooses scaling based on the current resolution.\n\n\n# cpu\n\ntype:\n\n * platforminfo -> generic -> processortype\n * see applesmbios.h for all supported values\n\nhwpenable: better alternative is to properly manage msr 0x770 with hwpenable\n\nqemu: proper vm/kvm support is implemented in opencore\n\nturbodisable: better alternative is to control your frequencies with cpufriend or ssdtprgen\n\n\n# devices\n\nusb:\n\n * fixownership: uefi -> quirk -> releaseusbownership\n   * you should also enable xhci hand-off in your bios\n * clockid: deviceproperties -> add -> pciroot... -> aapl,clock-id\n * highcurrent: deviceproperties -> add -> pciroot... -> aapl, highcurrent\n   * irrelevant for os x 10.11 and newer\n   * newer variant is either powerproperties defined in iousbhostfamily.kext -> appleusbhostplatformproperties or added with a usbx ssdt for skylake smbios and newer\n\naudio:\n\nfor the following, you will need to know your pciroot for your audio controller and its name(commonly known as hdef but also hdas, hdau and such), this can be found with gfxutil:\n\npath/to/gfxutil -f hdef\n\n\n * inject: deviceproperties -> add -> pciroot... -> layout-id\n * afglowpowerstate: deviceproperties -> add -> pciroot... -> afglowpowerstate -> <01000000>\n * resethda: uefi -> audio -> resettrafficclass\n   * optionally there's also applealc's alctsel=1 boot-arg or jackfix\n\nadd properties:\n\n * no equivalent, need to specify with a pciroot path\n\nproperties:\n\n * deviceproperties -> add\n\nfakeid: for the following, you will need to know your pciroot for your device and apply their properties with deviceproperties -> add, pciroot can be found with gfxutil\n\n * usb\n   \n   * device-id\n   * device_type\n   * device_type\n\n * imei\n   \n   * device-id\n   * vendor-id\n\n * wifi\n   \n   * name\n   * compatible\n\n * lan\n   \n   * device-id\n   * compatible\n   * vendor-id\n\n * xhci\n   \n   * device-id\n   * device_type: uhci\n   * device_type: ohci\n\ndevice_type: ehci\n\n * device-id\n * aapl,current-available\n * aapl,current-extra\n * aapl,current-available\n * aapl,current-extra\n * aapl,current-in-sleep\n * built-in\n\ndevice_type: xhci\n\n * device-id\n * aapl,current-available\n * aapl,current-extra\n * aapl,current-available\n * aapl,current-in-sleep\n * built-in\n\nforcehpet:\n\n * uefi -> quirks -> activatehpetsupport\n\n\n# disable drivers\n\njust don't add your drivers to uefi -> drivers, alternatively add # in-front of the driver in your config.plist for opencore to skip it.\n\n\n# gui\n\n\n# graphics\n\n * note: pciroot... should be replaced with\n\ninjectintel:\n\n * gma patching\n\ninjectati:\n\n * deviceproperties -> add -> pciroot... -> device-id\n   * ie: <b0670000> for the r9 390x\n * deviceproperties -> add -> pciroot... -> @0,connector-type\n   * you may need to add additional connectors (ie. @1,connector-type, @2,connector-type) for the amount of ports you have. see here for the list of connector types:\n\nlvds                    <02 00 00 00>\ndvi (dual link)         <04 00 00 00>\ndvi (single link)       <00 02 00 00>\nvga                     <10 00 00 00>\ns-video                 <80 00 00 00>\ndp                      <00 04 00 00>\nhdmi                    <00 08 00 00>\ndummy                   <01 00 00 00>\n\n\ninjectnvidia:\n\n * nvidia patching\n\nfakeintel:\n\n * deviceproperties -> add -> pciroot(0x0)/pci(0x2,0x0) -> device-id\n   * ie. 66010003 for the hd 4000\n * deviceproperties -> add -> pciroot(0x0)/pci(0x2,0x0) -> vendor-id -> <86800000>\n\nfakeati:\n\n * deviceproperties -> add -> pciroot... -> device-id\n   * ie: <b0670000> for the r9 390x\n * deviceproperties -> add -> pciroot... -> aty,deviceid\n   * ie: <b067> for the r9 390x\n * deviceproperties -> add -> pciroot... -> @0,compatible\n   * ie. aty,elodea for hd 6970m\n * deviceproperties -> add -> pciroot... -> vendor-id-> <02100000>\n * deviceproperties -> add -> pciroot... -> aty,vendorid -> <0210>\n\nnote: see here on making an ssdt for gpu spoofing, deviceproperties injection via opencore seems to fail sometimes when trying to spoof a gpu: renaming gpus for others like injectati, see the sample.dsl in the whatevergreen docs\n\ncustom edid\n\n * whatevergreen's edid docs\n\ndual link:\n\n * deviceproperties -> add -> pciroot... -> aapl00,duallink\n   * 1 -> <01000000>\n   * 0 -> <00000000>\n\nnvcap\n\n * nvidia patching\n\ndisplay-cfg:\n\n * deviceproperties -> add -> pciroot... -> @0,display-cfg\n * see fassl's post on the matter: nvidia injection\n\nloadvbios:\n\n * see sample.dsl for more info on custom vbios injection\n\npatchvbios: see loadvbios\n\nnvidiageneric:\n\n * deviceproperties -> add -> pciroot... -> model | string | add the gpu name\n\nnvidiasingle: see disabling unsupported gpus\n\nnvidianoefi:\n\n * deviceproperties -> add -> pciroot... -> nvda,noefi | boolean | true\n * see fredwst' comment for more info: gt 640 scramble\n\nig-platform-id:\n\n * deviceproperties -> add -> pciroot(0x0)/pci(0x2,0x0) -> appl,ig-platform-id\n\nbootdisplay:\n\n * deviceproperties -> add -> pciroot... -> @0,aapl,boot-display\n\nradeondeinit:\n\nin most cases it is advisable to use whatevergreen, which handles this automatically. this ssdt is not needed if whatevergreen is used.\n\n * radeon-deinit-ssdt\n   * do note that this is meant for gfx0, adjust for your system\n\n\n# kernel and kext patches\n\nkernelpm:\n\n * kernel -> quirks -> applexcpmcfglock -> yes\n * note that clover will auto-apply this patch without setting it if the msr e2 was locked, so you may actually need applexcpmcfglock even if clover didn't\n\nappleintelcpupm:\n\n * kernel -> quirks -> applecpupmcfglock -> yes\n\ndellsmbiospatch:\n\nan odd quirk for dell systems running aptio v\n\n * kernel -> quirks -> customsmbiosguid -> yes\n * platforminfo -> updatesmbiosmode -> custom\n\nkextstopatch:\n\n * kernel -> patch\n * see common kernel and kext patch conversions for common patch conversions\n\nkerneltopatch:\n\n * kernel -> patch\n * see common kernel and kext patch conversions for common patch conversions\n\nforcekextstoload:\n\n * kernel -> force\n\nkernel lapic:\n\n * kernel -> quirks -> lapickernelpanic -> yes\n\nkernelxcpm:\n\n * kernel -> quirks -> applexcpmextramsrs -> yes\n\nfor an extensive list of patches, please compare opencore's commonpatches.c with clover's kernel_patcher.c. some patches are not transferred over so if you're having issues this is the section to check, example is converting the kernelivybridgexcpm() to opencore:\n\nbase: _xcpm_bootstrap\ncomment: _xcpm_bootstrap (ivy bridge) 10.15\ncount: 1\nenabled: yes\nfind: 8d43c43c22\nidentifier: kernel\nlimit: 0\nmask: ffff00ffff\nminkernel: 19.\nmaxkernel: 19.99.99\nreplace: 8d43c63c22\nreplacemask: 0000ff0000\nskip: 0\n\n\nsource\n\nfor low end haswell+ like celerons, please see here for recommended patches: bugtracker issues 365\n\nusb port limit patches:\n\n * kernel -> quirks -> xhciportlimit -> yes\n\nexternal icons patch:\n\n * kernel -> quirks -> externaldiskicons -> yes\n * used for when you internal disk are seen as external on macos\n\napplertc\n\nissue with applertc, quite a simple fix:\n\n * config.plist -> kernel -> quirks -> disablertcchecksum -> true\n\nfor some versions of macos (e.g. catalina), boot.efi may write to the rtc. to prevent this, the below needs to be added as well:\n\n * config.plist -> nvram -> add -> 4d1fda02-38c7-4a6a-9cc6-4bcca8b30102:rtc-blacklist = <58 59>\n\nnote: if you still have issues, you'll need to use rtcmemoryfixup and exclude ranges. see here for more info, and here for a guide.\n\nfakecpuid:\n\n * kernel -> emulate:\n   * cpuid1mask: <clover_fcpuid_extended_to_4_bytes_swapped_bytes> | 00 00 00 00 | 00 00 00 00 | 00 00 00 00\n     * ex(0x0306a9): a9060300 00000000 00000000 00000000\n   * cpuid1data(swap 00 for ff if needing to swap with a longer value)\n     * ex: ffffffff 00000000 00000000 00000000\n\nnote: finding cpuid's for intel can be a bit harder than looking at intel ark, easiest way to find it is via microsoft's intel microcode update notes\n\n\n# rt variables\n\nrom:\n\n * no direct translation for usemacaddr0 as you need to provide your hardware rom, can be found in system preferences -> network -> advanced -> hardware\n * also verify your en0 is still built-in when running opencore, this can break imessage and icloud when there's no built-in property.\n\nmlb:\n\n * platforminfo -> generic -> mlb\n\nbooterconfig:\n\n * uefi -> quirks -> uiscale | integer |\n   * 1 —> 1x scaling, corresponds to normal displays.\n   * 2 —> 2x scaling, corresponds to hidpi displays.\n   * -1 —> leaves the current variable unchanged.\n   * 0 —> automatically chooses scaling based on the current resolution.\n\ncsractiveconfig:\n\n * nvram -> add -> 7c436110-ab2a-4bbb-a880-fe41995c9f82 -> csr-active-config:\n   \n   * 0x0: 00000000\n   * 0x3: 03000000\n   * 0x67: 67000000\n   * 0x3e7: e7030000\n\n\n# smbios\n\nproduct name:\n\n * platforminfo -> generic -> systemproductname\n\nserial number:\n\n * platforminfo -> generic -> systemserialnumber\n\nboard serial number:\n\n * platforminfo -> generic -> mlb\n\nsmuuid:\n\n * platforminfo -> generic -> systemuuid\n\nmemory:\n\n * platforminfo -> custommemory -> true\n * platforminfo -> memory\n   * see configuration.pdf for more info\n\nslots aapl injection:\n\n * deviceproperties -> add -> pciroot... -> appl,slot-name | string | add slot\n\n\n# system parameters\n\ncustomuuid:\n\n * heavily deprecated and not recommended even on clover, no equivalent on opencore\n * more info on why: hardware uuid injection for opencore #711\n\ninjectsystemid:\n\n * also legacy as it's used for replicating chameleon user's uuids\n\nbacklightlevel:\n\n * property set in nvram\n * nvram -> add -> 7c436110-ab2a-4bbb-a880-fe41995c9f82 -> backlight-level | data | <insert value>\n   * 0x0101 -> <0101>\n\ninjectkexts:\n\n * no equivalent but you really have no excuse to keep fakesmc inside macos\n\nnocaches:\n\n * this only works up to 10.7 on clover, and opencore requires an os that supports a prelinked(10.7) so there can't be an equivalent\n\nexposesysvariables:\n\n * just add your smbios properties under platforminfo\n * confusing quirk tbh, it's not even mentioned in more recent versions of the clover docs on applelife\n\nnvidiaweb:\n\n * what this does is apply sudo nvram nvda_drv=1 on every boot. to get a similar effect you can find it under the following path:\n * nvram -> add -> 7c436110-ab2a-4bbb-a880-fe41995c9f82 -> nvda_drv: <31>\n\n\n# status\n\nsection finished 100%:\n\n * boot graphics\n * disable drivers\n * kernelandkextpatches\n * rtvariables\n * smbios\n * systemparameters\n\nsection mostly finished:\n\n * acpi\n * boot\n * cpu\n * device\n\nsection missing:\n\n * gui",charsets:{cjk:!0}},{title:"Converting from Clover to OpenCore",frontmatter:{search:!1},regularPath:"/clover-conversion/",relativePath:"clover-conversion/README.md",key:"v-32830097",path:"/clover-conversion/",headers:[{level:2,title:"Cleaning the Clover Junk in macOS",slug:"cleaning-the-clover-junk-in-macos",normalizedTitle:"cleaning the clover junk in macos",charIndex:509},{level:2,title:"Removing kexts from macOS(S/L/E and L/E)",slug:"removing-kexts-from-macos-s-l-e-and-l-e",normalizedTitle:"removing kexts from macos(s/l/e and l/e)",charIndex:1345},{level:2,title:"Cleaning the Clover Junk in your hardware",slug:"cleaning-the-clover-junk-in-your-hardware",normalizedTitle:"cleaning the clover junk in your hardware",charIndex:2272},{level:2,title:"Optional: Avoiding SMBIOS injection into other OSes",slug:"optional-avoiding-smbios-injection-into-other-oses",normalizedTitle:"optional: avoiding smbios injection into other oses",charIndex:2953}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Cleaning the Clover Junk in macOS Removing kexts from macOS(S/L/E and L/E) Cleaning the Clover Junk in your hardware Optional: Avoiding SMBIOS injection into other OSes",content:"# Converting from Clover to OpenCore\n\nSo you see the new fancy OpenCore bootloader and just dying to try it out, well you've come to the right place! Many things in Clover have feature parity with OpenCore but many do not, here we'll be going over what you can bring over and what you cannot.\n\nTo get started, we have some resources that will aid you:\n\n * Config.plist conversion\n * Kexts and Firmware driver conversion(.kext, .efi)\n * Boot Argument conversion\n * Common Kernel and Kext patch conversions\n\n\n# Cleaning the Clover Junk in macOS\n\nSo to start, Clover would like to give a big F*** You if you're using emulated NVRAM. Why? Well it likely installed some trash that's a pain in the arse to get rid of. You will need to have SIP disabled to clean it up.\n\nThings to check for:\n\n * /Volumes/EFI/EFI/CLOVER/drivers64UEFI/EmuVariableUefi-64.efi\n * /Volumes/EFI/nvram.plist\n * /etc/rc.clover.lib\n * /etc/rc.boot.d/10.save_and_rotate_boot_log.local\n * /etc/rc.boot.d/20.mount_ESP.local\n * /etc/rc.boot.d/70.disable_sleep_proxy_client.local.disabled\n * /etc/rc.shutdown.d/80.save_nvram_plist.local\n\nIf folders are empty then delete them as well:\n\n * /etc/rc.boot.d\n * /etc/rc.shutdown.d\n\nUsers of Clover's Preference Pane will also need to remove these:\n\n * /Library/PreferencePanes/Clover.prefPane\n * /Library/Application\\ Support/clover\n\n\n# Removing kexts from macOS(S/L/E and L/E)\n\nA common tradition with Clover was to install kexts into macOS, specifically System/Library/Extensions and Library/Extensions. Reasoning being that Clover's kext injection system was known to fail either with OS updates or just spontaneously. Thankfully with OpenCore, a much more robust and stable injection mechanism's been made that is far harder to break. So time to do a bit of spring cleaning.\n\nNote: OpenCore will fail to inject kexts already in your kernelcache so cleaning this out will also resolve those issues\n\nNow open up terminal and run the following:\n\nsudo kextcache -i /\n\n\nThis command will yell at you about any kexts that shouldn't be in either S/L/E or L/E.\n\nRemove all hack kexts:\n\nsudo -s\ntouch /Library/Extensions /System/Library/Extensions​\nkextcache -i /​\n\n\n * Note, macOS Catalina will need the mount -uw / command to mount the system drive as Read/Write\n\n\n# Cleaning the Clover Junk in your hardware\n\nThe other thing that Clover may have hidden from you is NVRAM variables, this is bad as OpenCore won't overwrite variables unless explicitly told via the Delete feature found under NVRAM -> Delete. To fix this, we'll need to clear then via OpenCore's ClearNvram feature.\n\nIn you config.plist:\n\n * Misc -> Security -> AllowNvramReset -> True\n\nAnd on your initial boot of OpenCore, select Reset NVRAM boot option. This will wipe everything and reboot the system when finished.\n\n * Note: Thinkpad laptops are known to be semi-bricked after an NVRAM reset in OpenCore, we recommend resetting NVRAM by updating the BIOS on these machines.\n\n\n# Optional: Avoiding SMBIOS injection into other OSes\n\nBy default OpenCore will inject SMBIOS data into all OSes, the reason for this is 2 parts:\n\n * This allows for proper multiboot support like with BootCamp\n * Avoids edge cases where info is injected several times, commonly seen with Clover\n\nHowever, there are quirks in OpenCore that allow for SMBIOS injection to be macOS limited by patching where macOS reads SMBIOS info from. These quirks can break in the future and so we only recommend this option in the event of certain software breaking in other OSes. For best stability, please avoid\n\nTo enable macOS-only SMBIOS injection:\n\n * Kernel -> Quirks -> CustomSMBIOSGuid -> True\n * PlatformInfo -> UpdateSMBIOSMode -> Custom",normalizedContent:"# converting from clover to opencore\n\nso you see the new fancy opencore bootloader and just dying to try it out, well you've come to the right place! many things in clover have feature parity with opencore but many do not, here we'll be going over what you can bring over and what you cannot.\n\nto get started, we have some resources that will aid you:\n\n * config.plist conversion\n * kexts and firmware driver conversion(.kext, .efi)\n * boot argument conversion\n * common kernel and kext patch conversions\n\n\n# cleaning the clover junk in macos\n\nso to start, clover would like to give a big f*** you if you're using emulated nvram. why? well it likely installed some trash that's a pain in the arse to get rid of. you will need to have sip disabled to clean it up.\n\nthings to check for:\n\n * /volumes/efi/efi/clover/drivers64uefi/emuvariableuefi-64.efi\n * /volumes/efi/nvram.plist\n * /etc/rc.clover.lib\n * /etc/rc.boot.d/10.save_and_rotate_boot_log.local\n * /etc/rc.boot.d/20.mount_esp.local\n * /etc/rc.boot.d/70.disable_sleep_proxy_client.local.disabled\n * /etc/rc.shutdown.d/80.save_nvram_plist.local\n\nif folders are empty then delete them as well:\n\n * /etc/rc.boot.d\n * /etc/rc.shutdown.d\n\nusers of clover's preference pane will also need to remove these:\n\n * /library/preferencepanes/clover.prefpane\n * /library/application\\ support/clover\n\n\n# removing kexts from macos(s/l/e and l/e)\n\na common tradition with clover was to install kexts into macos, specifically system/library/extensions and library/extensions. reasoning being that clover's kext injection system was known to fail either with os updates or just spontaneously. thankfully with opencore, a much more robust and stable injection mechanism's been made that is far harder to break. so time to do a bit of spring cleaning.\n\nnote: opencore will fail to inject kexts already in your kernelcache so cleaning this out will also resolve those issues\n\nnow open up terminal and run the following:\n\nsudo kextcache -i /\n\n\nthis command will yell at you about any kexts that shouldn't be in either s/l/e or l/e.\n\nremove all hack kexts:\n\nsudo -s\ntouch /library/extensions /system/library/extensions​\nkextcache -i /​\n\n\n * note, macos catalina will need the mount -uw / command to mount the system drive as read/write\n\n\n# cleaning the clover junk in your hardware\n\nthe other thing that clover may have hidden from you is nvram variables, this is bad as opencore won't overwrite variables unless explicitly told via the delete feature found under nvram -> delete. to fix this, we'll need to clear then via opencore's clearnvram feature.\n\nin you config.plist:\n\n * misc -> security -> allownvramreset -> true\n\nand on your initial boot of opencore, select reset nvram boot option. this will wipe everything and reboot the system when finished.\n\n * note: thinkpad laptops are known to be semi-bricked after an nvram reset in opencore, we recommend resetting nvram by updating the bios on these machines.\n\n\n# optional: avoiding smbios injection into other oses\n\nby default opencore will inject smbios data into all oses, the reason for this is 2 parts:\n\n * this allows for proper multiboot support like with bootcamp\n * avoids edge cases where info is injected several times, commonly seen with clover\n\nhowever, there are quirks in opencore that allow for smbios injection to be macos limited by patching where macos reads smbios info from. these quirks can break in the future and so we only recommend this option in the event of certain software breaking in other oses. for best stability, please avoid\n\nto enable macos-only smbios injection:\n\n * kernel -> quirks -> customsmbiosguid -> true\n * platforminfo -> updatesmbiosmode -> custom",charsets:{}},{title:"Clover Kexts and Firmware driver conversion(.kext, .efi)",frontmatter:{search:!1},regularPath:"/clover-conversion/clover-efi.html",relativePath:"clover-conversion/clover-efi.md",key:"v-6c6748c0",path:"/clover-conversion/clover-efi.html",headers:[{level:2,title:"Kexts",slug:"kexts",normalizedTitle:"kexts",charIndex:9},{level:2,title:"Firmware Drivers",slug:"firmware-drivers",normalizedTitle:"firmware drivers",charIndex:430},{level:3,title:"AptioMemoryFix Note",slug:"aptiomemoryfix-note",normalizedTitle:"aptiomemoryfix note",charIndex:2252}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Kexts Firmware Drivers AptioMemoryFix Note",content:"# Clover Kexts and Firmware driver conversion(.kext, .efi)\n\nMain thing to note is that you must specify your kexts and firmware drivers in your config.plist, or else they will not load. All kexts that are currently supported on Clover will work on OpenCore, however many have been deprecated with better variants being integrated into OpenCore. Firmware drivers are a bit different as they can in-fact break booting.\n\n * Kexts\n * Firmware Drivers\n\n\n# Kexts\n\nFor the most part, all kexts are supported in OpenCore. However there are a few integrated\n\nIntegrated Kexts:\n\n * NullCPUPowerManagement.kext\n   * Integrated into DummyPowerManagement under Kernel -> Emulate\n * BT4LEContinuityFixup.kext\n   * Integrated into ExtendBTFeatureFlags under Kernel -> Quirks\n\n\n# Firmware Drivers\n\nSupported ones:\n\n * AudioDxe.efi (Make sure this is from OpenCorePkg and not Goldfish64's or Clover's repo)\n * CsmVideoDxe.efi (Note that BiosVideo.efi may be preferred)\n * EnhancedFatDxe.efi\n * ExFatDxeLegacy.efi\n * ExFatDxe.efi\n * GrubEXFAT.efi\n * GrubISO9660.efi\n * GrubNTFS.efi\n * GrubUDF.efi\n * HiiDatabase.efi\n * HfsPlus.efi\n * HfsPlusLegacy.efi\n * NTFS.efi\n * NvmExpressDxe.efi\n * OpenRuntime.efi\n * OpenUsbKbDxe.efi\n * OsxFatBinaryDrv.efi\n * Ps2MouseDxe.efi\n * TbtForcePower.efi\n * UsbMouseDxe.efi\n * VBoxExt2.efi\n * VBoxExt4.efi\n * VBoxHfs.efi\n * VBoxIso9600.efi\n * XhciDxe.efi\n\nDrivers provided/merged into OpenCore and so are no longer needed:\n\n * APFS.efi\n * ApfsDriverLoader.efi\n * AppleEvent.efi\n * AppleGenericInput.efi\n * AppleImageCodec.efi\n * AppleKeyMapAggregator.efi\n * AppleUiSupport.efi\n * AppleUITheme.efi\n * AptioInputFix.efi\n * AptioMemoryFix.efi\n * AudioDxe.efi(well kinda, see AudioDxe shipped with OpenCorePkg)\n * BootChimeDxe.efi\n * DataHubDxe.efi\n * EmuVariableUEFI.efi\n * EnglishDxe.efi\n * FirmwareVolume.efi\n * HashServiceFix.efi\n * SMCHelper.efi\n * OcQuirks.efi\n * VirtualSMC.efi\n\nExplicitly unsupported drivers:\n\n * AppleUsbKbDxe.efi(replaced with OpenUsbKbDxe.efi)\n * FSInject.efi\n * FwRuntimeServices.efi(replaced with OpenRuntime.efi)\n * osxaptiofix2drv-free2000.efi\n * osxaptiofix2drv.efi\n * osxaptiofix3drv.efi\n * osxaptiofixdrv.efi\n * OsxFatBinaryDrv.efi\n * OsxLowMemFixDrv.efi\n * UsbKbDxe.efi(replaced with OpenUsbKbDxe.efi)\n\n\n# AptioMemoryFix Note\n\nWell before we actually get started on converting the Clover config, we must first talk about converting from AptioMemoryFix. The main thing to note is that it's inside of OpenCore with OpenRuntime being an extension, this means that AptioMemoryFix and that there's also a lot more settings to choose from. Please see the hardware specific sections of the OpenCore guide to know what Booter settings your system may require(HEDT like X99 and X299 should look to the closest CPU like Skylake-X should refer to Skylake guide and read the comments as they mention specifics for your system).",normalizedContent:"# clover kexts and firmware driver conversion(.kext, .efi)\n\nmain thing to note is that you must specify your kexts and firmware drivers in your config.plist, or else they will not load. all kexts that are currently supported on clover will work on opencore, however many have been deprecated with better variants being integrated into opencore. firmware drivers are a bit different as they can in-fact break booting.\n\n * kexts\n * firmware drivers\n\n\n# kexts\n\nfor the most part, all kexts are supported in opencore. however there are a few integrated\n\nintegrated kexts:\n\n * nullcpupowermanagement.kext\n   * integrated into dummypowermanagement under kernel -> emulate\n * bt4lecontinuityfixup.kext\n   * integrated into extendbtfeatureflags under kernel -> quirks\n\n\n# firmware drivers\n\nsupported ones:\n\n * audiodxe.efi (make sure this is from opencorepkg and not goldfish64's or clover's repo)\n * csmvideodxe.efi (note that biosvideo.efi may be preferred)\n * enhancedfatdxe.efi\n * exfatdxelegacy.efi\n * exfatdxe.efi\n * grubexfat.efi\n * grubiso9660.efi\n * grubntfs.efi\n * grubudf.efi\n * hiidatabase.efi\n * hfsplus.efi\n * hfspluslegacy.efi\n * ntfs.efi\n * nvmexpressdxe.efi\n * openruntime.efi\n * openusbkbdxe.efi\n * osxfatbinarydrv.efi\n * ps2mousedxe.efi\n * tbtforcepower.efi\n * usbmousedxe.efi\n * vboxext2.efi\n * vboxext4.efi\n * vboxhfs.efi\n * vboxiso9600.efi\n * xhcidxe.efi\n\ndrivers provided/merged into opencore and so are no longer needed:\n\n * apfs.efi\n * apfsdriverloader.efi\n * appleevent.efi\n * applegenericinput.efi\n * appleimagecodec.efi\n * applekeymapaggregator.efi\n * appleuisupport.efi\n * appleuitheme.efi\n * aptioinputfix.efi\n * aptiomemoryfix.efi\n * audiodxe.efi(well kinda, see audiodxe shipped with opencorepkg)\n * bootchimedxe.efi\n * datahubdxe.efi\n * emuvariableuefi.efi\n * englishdxe.efi\n * firmwarevolume.efi\n * hashservicefix.efi\n * smchelper.efi\n * ocquirks.efi\n * virtualsmc.efi\n\nexplicitly unsupported drivers:\n\n * appleusbkbdxe.efi(replaced with openusbkbdxe.efi)\n * fsinject.efi\n * fwruntimeservices.efi(replaced with openruntime.efi)\n * osxaptiofix2drv-free2000.efi\n * osxaptiofix2drv.efi\n * osxaptiofix3drv.efi\n * osxaptiofixdrv.efi\n * osxfatbinarydrv.efi\n * osxlowmemfixdrv.efi\n * usbkbdxe.efi(replaced with openusbkbdxe.efi)\n\n\n# aptiomemoryfix note\n\nwell before we actually get started on converting the clover config, we must first talk about converting from aptiomemoryfix. the main thing to note is that it's inside of opencore with openruntime being an extension, this means that aptiomemoryfix and that there's also a lot more settings to choose from. please see the hardware specific sections of the opencore guide to know what booter settings your system may require(hedt like x99 and x299 should look to the closest cpu like skylake-x should refer to skylake guide and read the comments as they mention specifics for your system).",charsets:{}},{title:"Converting common Kernel and Kext patches",frontmatter:{search:!1},regularPath:"/clover-conversion/clover-patch.html",relativePath:"clover-conversion/clover-patch.md",key:"v-39a5e4a0",path:"/clover-conversion/clover-patch.html",headers:[{level:2,title:"Manually converting a patch",slug:"manually-converting-a-patch",normalizedTitle:"manually converting a patch",charIndex:48},{level:2,title:"Common patches in OpenCore and co",slug:"common-patches-in-opencore-and-co",normalizedTitle:"common patches in opencore and co",charIndex:2241},{level:3,title:"Kernel Patches",slug:"kernel-patches",normalizedTitle:"kernel patches",charIndex:2524},{level:3,title:"Kext Patches",slug:"kext-patches",normalizedTitle:"kext patches",charIndex:3223}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Manually converting a patch Common patches in OpenCore and co Kernel Patches Kext Patches",content:"# Converting common Kernel and Kext patches\n\n\n# Manually converting a patch\n\nWhen converting a kernel/kext patch into one for OpenCore, you'll need to remember a few things\n\n * InfoPlistPatch has no feature parity\n * MatchOS is replaced with MinKernel and MaxKernel\n * Both kernel and kext patches go under Kernel -> Patch, and you use Identifier to say whether it's the kernel or a specific kext you want to patch\n\nNow lets look at this example:\n\nKernelToPatch:\n\nKEY          TYPE      VALUE\nComment      String    cpuid_set_cpufamily - force CPUFAMILY_INTEL_PENRYN\nDisabled     Boolean   False\nMatchBuild   String    18G95,18G103\nMatchOS      String    10.14.6\nFind         Data      31db803d4869980006755c\nReplace      Data      bbbc4fea78e95d00000090\n\nSo to convert this patch, see below:\n\n * Comment: Available both on Clover and OpenCore\n * Disabled: OpenCore uses Enabled instead\n * MatchBuild: OpenCore uses MinKernel and MaxKernel, see below for more info\n * MatchOS: OpenCore uses MinKernel and MaxKernel, see below for more info\n * Find: Available both on Clover and OpenCore\n * Replace: Available both on Clover and OpenCore\n * MaskFind: OpenCore uses Mask instead\n * MaskReplace: Available both on Clover and OpenCore\n\nSo the above patch would become:\n\nKernel -> Patch:\n\nKEY           TYPE      VALUE\nComment       String    cpuid_set_cpufamily - force CPUFAMILY_INTEL_PENRYN\nEnabled       Boolean   True\nMinKernel     String    18.7.0\nMaxKernel     String    18.7.0\nFind          Data      31db803d4869980006755c\nReplace       Data      bbbc4fea78e95d00000090\nIdentifier    String    kernel\nLimit         Number    0\nCount         Number    0\nSkip          Number    0\nMask          Data      \nReplaceMask   Data      \n\nFor Min and MaxKernel, we can use the below as for info, so 18G95 has the kernel version 18.7.0 and 18G103 has 18.7.0(both being the same kernel):\n\n * macOS Mojave: Release history\n\nFor Identifier, you'll either define kernel or the kext you want to patch(ie. com.apple.iokit.IOGraphicsFamily )\n\nRegarding Limit, Count and Skip, they are set to 0 so they apply to all instances. Mask and ReplaceMask can be left as blank as Clover doesn't support masking(until very recently but won't be covered here).\n\n\n# Common patches in OpenCore and co\n\nLittle section mentioning common Kernel and Kexts patches that have been absorbed into OpenCore or other kexts. This list is not complete so any that may have been forgotten can be mentioned by opening a new issue. Any help is much appreciated\n\n\n# Kernel Patches\n\nFor a full list of patches OpenCore supports, see /Library/OcAppleKernelLib/CommonPatches.c\n\nGeneral Patches:\n\n * MSR 0xE2 _xcpm_idle instant reboot (c) Pike R. Alpha\n   * Kernel -> Quirks -> AppleXcpmCfgLock\n\nHEDT Specific Patches:\n\nAll of the following patches are inside the Kernel -> Quirk -> AppleXcpmExtraMsrs\n\n * _xcpm_bootstrap © Pike R. Alpha\n * xcpm_pkg_scope_msrs © Pike R. Alpha\n * _xcpm_SMT_scope_msrs 1 © Pike R. Alpha\n * _xcpm_SMT_scope_msrs #2 (c) Pike R. Alpha\n * _xcpm_core_scope_msrs © Pike R. Alpha\n * _xcpm_ performance_patch © Pike R. Alpha\n * xcpm MSR Patch 1 and 2 @Pike R. Alpha\n * /0x82D390/MSR_PP0_POLICY 0x63a xcpm support patch 1 and 2 Pike R. Alpha\n\n\n# Kext Patches\n\n * Disable Panic Kext logging\n   * Kernel -> Quirks -> PanicNoKextDump\n * AppleAHCIPort External Icon Patch1\n   * Kernel -> Quirks -> ExternalDiskIcons\n * SSD Trim Enabler\n   * Kernel -> Quirks -> ThirdPartyDrives\n * USB Port Limit Patches\n   * Kernel -> Quirks -> XhciPortLimit\n * FredWst DP/HDMI patch\n   * AppleALC + WhateverGreen\n * IOPCIFamily Patch\n   * Kernel -> Quirks -> IncreasePciBarSize\n * Disable board-ID check\n   * WhateverGreen\n * AppleHDA Patch\n   * AppleALC\n * IONVMe Patches\n   * Not required anymore on High Sierra and newer\n   * For power management on Mojave and newer: NVMeFix",normalizedContent:"# converting common kernel and kext patches\n\n\n# manually converting a patch\n\nwhen converting a kernel/kext patch into one for opencore, you'll need to remember a few things\n\n * infoplistpatch has no feature parity\n * matchos is replaced with minkernel and maxkernel\n * both kernel and kext patches go under kernel -> patch, and you use identifier to say whether it's the kernel or a specific kext you want to patch\n\nnow lets look at this example:\n\nkerneltopatch:\n\nkey          type      value\ncomment      string    cpuid_set_cpufamily - force cpufamily_intel_penryn\ndisabled     boolean   false\nmatchbuild   string    18g95,18g103\nmatchos      string    10.14.6\nfind         data      31db803d4869980006755c\nreplace      data      bbbc4fea78e95d00000090\n\nso to convert this patch, see below:\n\n * comment: available both on clover and opencore\n * disabled: opencore uses enabled instead\n * matchbuild: opencore uses minkernel and maxkernel, see below for more info\n * matchos: opencore uses minkernel and maxkernel, see below for more info\n * find: available both on clover and opencore\n * replace: available both on clover and opencore\n * maskfind: opencore uses mask instead\n * maskreplace: available both on clover and opencore\n\nso the above patch would become:\n\nkernel -> patch:\n\nkey           type      value\ncomment       string    cpuid_set_cpufamily - force cpufamily_intel_penryn\nenabled       boolean   true\nminkernel     string    18.7.0\nmaxkernel     string    18.7.0\nfind          data      31db803d4869980006755c\nreplace       data      bbbc4fea78e95d00000090\nidentifier    string    kernel\nlimit         number    0\ncount         number    0\nskip          number    0\nmask          data      \nreplacemask   data      \n\nfor min and maxkernel, we can use the below as for info, so 18g95 has the kernel version 18.7.0 and 18g103 has 18.7.0(both being the same kernel):\n\n * macos mojave: release history\n\nfor identifier, you'll either define kernel or the kext you want to patch(ie. com.apple.iokit.iographicsfamily )\n\nregarding limit, count and skip, they are set to 0 so they apply to all instances. mask and replacemask can be left as blank as clover doesn't support masking(until very recently but won't be covered here).\n\n\n# common patches in opencore and co\n\nlittle section mentioning common kernel and kexts patches that have been absorbed into opencore or other kexts. this list is not complete so any that may have been forgotten can be mentioned by opening a new issue. any help is much appreciated\n\n\n# kernel patches\n\nfor a full list of patches opencore supports, see /library/ocapplekernellib/commonpatches.c\n\ngeneral patches:\n\n * msr 0xe2 _xcpm_idle instant reboot (c) pike r. alpha\n   * kernel -> quirks -> applexcpmcfglock\n\nhedt specific patches:\n\nall of the following patches are inside the kernel -> quirk -> applexcpmextramsrs\n\n * _xcpm_bootstrap © pike r. alpha\n * xcpm_pkg_scope_msrs © pike r. alpha\n * _xcpm_smt_scope_msrs 1 © pike r. alpha\n * _xcpm_smt_scope_msrs #2 (c) pike r. alpha\n * _xcpm_core_scope_msrs © pike r. alpha\n * _xcpm_ performance_patch © pike r. alpha\n * xcpm msr patch 1 and 2 @pike r. alpha\n * /0x82d390/msr_pp0_policy 0x63a xcpm support patch 1 and 2 pike r. alpha\n\n\n# kext patches\n\n * disable panic kext logging\n   * kernel -> quirks -> panicnokextdump\n * appleahciport external icon patch1\n   * kernel -> quirks -> externaldiskicons\n * ssd trim enabler\n   * kernel -> quirks -> thirdpartydrives\n * usb port limit patches\n   * kernel -> quirks -> xhciportlimit\n * fredwst dp/hdmi patch\n   * applealc + whatevergreen\n * iopcifamily patch\n   * kernel -> quirks -> increasepcibarsize\n * disable board-id check\n   * whatevergreen\n * applehda patch\n   * applealc\n * ionvme patches\n   * not required anymore on high sierra and newer\n   * for power management on mojave and newer: nvmefix",charsets:{}},{title:"Broadwell-E",frontmatter:{},regularPath:"/config-HEDT/broadwell-e.html",relativePath:"config-HEDT/broadwell-e.md",key:"v-3ccffb54",path:"/config-HEDT/broadwell-e.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:98},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1327},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1338},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2871},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:2956},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:3208},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:3316},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:3453},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:3208},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:4477},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1338},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2871},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:4916},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1338},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:7125},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:8698},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:8899},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:2956},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:3208},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:12836},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:13986},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:3316},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:14437},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:15337},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:17679},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:17748},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:17866},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:3801},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1338},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2871},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:23044},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:23697},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:3762},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:20947},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:12132},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:27196},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:27438},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:27648},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:28033},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:3208},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:25396},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:29603},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:29923},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:7565},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3830}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Intel BIOS settings Disable Enable",content:"# Broadwell-E\n\nSUPPORT                 VERSION\nInitial macOS Support   OS X 10.11, El Capitan\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS    DESCRIPTION\nSSDT-PLUG         Allows for native CPU power management on Haswell and newer,\n                  see Getting Started With ACPI Guide for more details.\nSSDT-EC-USBX      Fixes both the embedded controller and USB power, see\n                  Getting Started With ACPI Guide for more details.\nSSDT-RTC0-RANGE   Required for all Big Sur users to ensure their RTC device is\n                  compatible, see Getting Started With ACPI Guide for more\n                  details.\nSSDT-UNC          Required for all Big Sur users to ensure their UNC devices\n                  are compatible, see Getting Started With ACPI Guide for more\n                  details.\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: YES\n   * Needed to remove write protection from CR0 register.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses, required for Gigabyte boards to resolve early kernel panics\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nBy default, the Sample.plist has this section set for audio which we'll be setting up by setting the layout ID in the boot-args section, so removal of PciRoot(0x0)/Pci(0x1b,0x0) is also recommended from the Add section.\n\nTL;DR, delete all the PciRoot's here as we won't be using this section.\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nInfo\n\nNeeded for spoofing unsupported CPUs and enabling power management on Haswell-E and Broadwell-E\n\n * Broadwell E:\n   \n   * Cpuid1Data: D4060300 00000000 00000000 00000000\n   * Cpuid1Mask: FFFFFFFF 00000000 00000000 00000000\n\nMore in-depth Info\n * Cpuid1Data: D4060300 00000000 00000000 00000000\n   * Fake CPUID entry\n * Cpuid1Mask: FFFFFFFF 00000000 00000000 00000000\n   * Mask for fake CPUID\n * DummyPowerManagement: No\n   * Disables AppleIntelCPUPowerManagement, only required for AMD CPUs\n * MinKernel: Leave this blank\n   * Lowest kernel version the above patches will be injected into, if no value specified it'll be applied to all versions of macOS. See below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel: Leave this blank\n   * Highest kernel version the above patches will be injected into, if no value specified it'll be applied to all versions of macOS. See below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleCpuPmCfgLock         NO        Need if running 10.10 or older and cannot disable CFG-Lock\n                                    in the BIOS\nAppleXcpmCfgLock          YES       Not needed if CFG-Lock is disabled in the BIOS\nAppleXcpmExtraMsrs        YES       \nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * AppleXcpmExtraMsrs: YES\n   * Disables multiple MSR access needed for unsupported CPUs like Pentiums and many Xeons. Required for Broadwell-E and lower\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * IncreasePciBarSize: NO\n   * Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally experience a kernel panic on IOPCIFamily if you need this. Note this shouldn't be needed on Mojave and newer\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\nThe reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nnpci=0x2000   This disables some PCI debugging related to\n              kIOPCIConfiguratorPFM64, alternative is npci=0x3000 which\n              disables debugging related to gIOPCITunnelledKey in\n              addition. Required for when getting stuck on PCI Start\n              Configuration as there are IRQ conflicts relating to your\n              PCI lanes. Source\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS        DESCRIPTION\nagdpmod=pikera   Used for disabling board ID checks on some Navi GPUs (RX\n                 5000 & 6000 series), without this you'll get a black screen.\n                 Don't use if you don't have Navi (ie. Polaris and Vega cards\n                 shouldn't use this)\n-radcodec        Used for allowing officially unsupported AMD GPUs (spoofed)\n                 to use the Hardware Video Encoder\nradpg=15         Used for disabling some power-gating modes, helpful for\n                 properly initializing AMD Cape Verde based GPUs\nunfairgva=1      Used for fixing hardware DRM support on supported AMD GPUs\nnvda_drv_vrl=1   Used for enabling NVIDIA's Web Drivers on Maxwell and Pascal\n                 cards in macOS Sierra and High Sierra\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nInfo\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. Due to NVRAM issues on X99, we'll be changing the following:\n\nQUIRK             ENABLED\nLegacyOverwrite   YES\nWriteFlash        NO\n\nMore in-depth Info\n\n * LegacyOverwrite: YES\n   \n   * Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM like X99\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: NO\n   \n   * Enables writing to flash memory for all added variables, not compatible with emulated NVRAM\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Broadwell-E example, we'll choose the iMacPro1,1 SMBIOS.\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #              iMacPro1,1 SMBIOS Info                 #\n#######################################################\n\nType:         iMacPro1,1\nSerial:       C02YX0TZHX87\nBoard Serial: C029269024NJG36CB\nSmUUID:       DEA17B2D-2F9F-4955-B266-A74C47678AD3\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                    ENABLED   COMMENT\nIgnoreInvalidFlexRatio   YES       \nUnblockFsConnect         NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * IgnoreInvalidFlexRatio: YES\n   \n   * Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-Skylake based systems\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt(For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n   * For 10.10 and older, you'll need to enable AppleCpuPmCfgLock as well\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n   * If experiencing issues, ensure \"MMIOH Base\" is set to 12 TB or lower\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# broadwell-e\n\nsupport                 version\ninitial macos support   os x 10.11, el capitan\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts    description\nssdt-plug         allows for native cpu power management on haswell and newer,\n                  see getting started with acpi guide for more details.\nssdt-ec-usbx      fixes both the embedded controller and usb power, see\n                  getting started with acpi guide for more details.\nssdt-rtc0-range   required for all big sur users to ensure their rtc device is\n                  compatible, see getting started with acpi guide for more\n                  details.\nssdt-unc          required for all big sur users to ensure their unc devices\n                  are compatible, see getting started with acpi guide for more\n                  details.\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, our patches are handled by our ssdts. this is a much cleaner solution as this will allow us to boot windows and other oses with opencore\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be passthrough to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: yes\n   * needed to remove write protection from cr0 register.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses, required for gigabyte boards to resolve early kernel panics\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\nby default, the sample.plist has this section set for audio which we'll be setting up by setting the layout id in the boot-args section, so removal of pciroot(0x0)/pci(0x1b,0x0) is also recommended from the add section.\n\ntl;dr, delete all the pciroot's here as we won't be using this section.\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\ninfo\n\nneeded for spoofing unsupported cpus and enabling power management on haswell-e and broadwell-e\n\n * broadwell e:\n   \n   * cpuid1data: d4060300 00000000 00000000 00000000\n   * cpuid1mask: ffffffff 00000000 00000000 00000000\n\nmore in-depth info\n * cpuid1data: d4060300 00000000 00000000 00000000\n   * fake cpuid entry\n * cpuid1mask: ffffffff 00000000 00000000 00000000\n   * mask for fake cpuid\n * dummypowermanagement: no\n   * disables appleintelcpupowermanagement, only required for amd cpus\n * minkernel: leave this blank\n   * lowest kernel version the above patches will be injected into, if no value specified it'll be applied to all versions of macos. see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel: leave this blank\n   * highest kernel version the above patches will be injected into, if no value specified it'll be applied to all versions of macos. see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplecpupmcfglock         no        need if running 10.10 or older and cannot disable cfg-lock\n                                    in the bios\napplexcpmcfglock          yes       not needed if cfg-lock is disabled in the bios\napplexcpmextramsrs        yes       \ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * applexcpmextramsrs: yes\n   * disables multiple msr access needed for unsupported cpus like pentiums and many xeons. required for broadwell-e and lower\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * increasepcibarsize: no\n   * increases 32-bit pci bar size in iopcifamily from 1 to 4 gb, enabling above4gdecoding in the bios is a much cleaner and safer approach. some x99 boards may require this, you'll generally experience a kernel panic on iopcifamily if you need this. note this shouldn't be needed on mojave and newer\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\nthe reason being is that usbinjectall reimplements builtin macos functionality without proper current tuning. it is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nnpci=0x2000   this disables some pci debugging related to\n              kiopciconfiguratorpfm64, alternative is npci=0x3000 which\n              disables debugging related to giopcitunnelledkey in\n              addition. required for when getting stuck on pci start\n              configuration as there are irq conflicts relating to your\n              pci lanes. source\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args        description\nagdpmod=pikera   used for disabling board id checks on some navi gpus (rx\n                 5000 & 6000 series), without this you'll get a black screen.\n                 don't use if you don't have navi (ie. polaris and vega cards\n                 shouldn't use this)\n-radcodec        used for allowing officially unsupported amd gpus (spoofed)\n                 to use the hardware video encoder\nradpg=15         used for disabling some power-gating modes, helpful for\n                 properly initializing amd cape verde based gpus\nunfairgva=1      used for fixing hardware drm support on supported amd gpus\nnvda_drv_vrl=1   used for enabling nvidia's web drivers on maxwell and pascal\n                 cards in macos sierra and high sierra\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\ninfo\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone. due to nvram issues on x99, we'll be changing the following:\n\nquirk             enabled\nlegacyoverwrite   yes\nwriteflash        no\n\nmore in-depth info\n\n * legacyoverwrite: yes\n   \n   * permits overwriting firmware variables from nvram.plist, only needed for systems without native nvram like x99\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: no\n   \n   * enables writing to flash memory for all added variables, not compatible with emulated nvram\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this broadwell-e example, we'll choose the imacpro1,1 smbios.\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #              imacpro1,1 smbios info                 #\n#######################################################\n\ntype:         imacpro1,1\nserial:       c02yx0tzhx87\nboard serial: c029269024njg36cb\nsmuuid:       dea17b2d-2f9f-4955-b266-a74c47678ad3\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                    enabled   comment\nignoreinvalidflexratio   yes       \nunblockfsconnect         no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * ignoreinvalidflexratio: yes\n   \n   * fix for when msr_flex_ratio (0x194) can't be disabled in the bios, required for all pre-skylake based systems\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt(for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applexcpmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n   * for 10.10 and older, you'll need to enable applecpupmcfglock as well\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n   * if experiencing issues, ensure \"mmioh base\" is set to 12 tb or lower\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Haswell-E",frontmatter:{},regularPath:"/config-HEDT/haswell-e.html",relativePath:"config-HEDT/haswell-e.md",key:"v-6b07bb96",path:"/config-HEDT/haswell-e.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:96},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1325},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1336},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2869},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:2954},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:3206},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:3314},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:3451},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:3206},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:4475},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1336},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2869},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:4914},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1336},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:7123},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:8694},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:8895},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:2954},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:3206},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:12832},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:13982},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:3314},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:14433},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:15333},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:17675},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:17744},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:17862},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:3799},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1336},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2869},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:23040},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:23691},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:3760},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:20943},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:12128},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:27190},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:27432},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:27642},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:28027},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:3206},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:25390},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:29597},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:29917},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:7561},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3828}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Intel BIOS settings Disable Enable",content:"# Haswell-E\n\nSUPPORT                 VERSION\nInitial macOS Support   OS X 10.11, El Capitan\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS    DESCRIPTION\nSSDT-PLUG         Allows for native CPU power management on Haswell and newer,\n                  see Getting Started With ACPI Guide for more details.\nSSDT-EC-USBX      Fixes both the embedded controller and USB power, see\n                  Getting Started With ACPI Guide for more details.\nSSDT-RTC0-RANGE   Required for all Big Sur users to ensure their RTC device is\n                  compatible, see Getting Started With ACPI Guide for more\n                  details.\nSSDT-UNC          Required for all Big Sur users to ensure their UNC devices\n                  are compatible, see Getting Started With ACPI Guide for more\n                  details.\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: YES\n   * Needed to remove write protection from CR0 register.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses, required for Gigabyte boards to resolve early kernel panics\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nBy default, the Sample.plist has this section set for audio which we'll be setting up by setting the layout ID in the boot-args section, so removal of PciRoot(0x0)/Pci(0x1b,0x0) is also recommended from the Add section.\n\nTL;DR, delete all the PciRoot's here as we won't be using this section.\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nInfo\n\nNeeded for spoofing unsupported CPUs and enabling power management on Haswell-E and Broadwell-E\n\n * Haswell E:\n   \n   * Cpuid1Data: C3060300 00000000 00000000 00000000\n   * Cpuid1Mask: FFFFFFFF 00000000 00000000 00000000\n\nMore in-depth Info\n * Cpuid1Data: C3060300 00000000 00000000 00000000\n   * Fake CPUID entry\n * Cpuid1Mask: FFFFFFFF 00000000 00000000 00000000\n   * Mask for fake CPUID\n * DummyPowerManagement: No\n   * Disables AppleIntelCPUPowerManagement, only required for AMD CPUs\n * MinKernel: Leave this blank\n   * Lowest kernel version the above patches will be injected into, if no value specified it'll be applied to all versions of macOS. See below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel: Leave this blank\n   * Highest kernel version the above patches will be injected into, if no value specified it'll be applied to all versions of macOS. See below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleCpuPmCfgLock         NO        Need if running 10.10 or older and cannot disable CFG-Lock\n                                    in the BIOS\nAppleXcpmCfgLock          YES       Not needed if CFG-Lock is disabled in the BIOS\nAppleXcpmExtraMsrs        YES       \nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * AppleXcpmExtraMsrs: YES\n   * Disables multiple MSR access needed for unsupported CPUs like Pentiums and many Xeons. Required for Broadwell-E and lower\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * IncreasePciBarSize: NO\n   * Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally experience a kernel panic on IOPCIFamily if you need this. Note this shouldn't be needed on Mojave and newer\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\nThe reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nnpci=0x2000   This disables some PCI debugging related to\n              kIOPCIConfiguratorPFM64, alternative is npci=0x3000 which\n              disables debugging related to gIOPCITunnelledKey in\n              addition. Required for when getting stuck on PCI Start\n              Configuration as there are IRQ conflicts relating to your\n              PCI lanes. Source\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS        DESCRIPTION\nagdpmod=pikera   Used for disabling board ID checks on some Navi GPUs (RX\n                 5000 & 6000 series), without this you'll get a black screen.\n                 Don't use if you don't have Navi (ie. Polaris and Vega cards\n                 shouldn't use this)\n-radcodec        Used for allowing officially unsupported AMD GPUs (spoofed)\n                 to use the Hardware Video Encoder\nradpg=15         Used for disabling some power-gating modes, helpful for\n                 properly initializing AMD Cape Verde based GPUs\nunfairgva=1      Used for fixing hardware DRM support on supported AMD GPUs\nnvda_drv_vrl=1   Used for enabling NVIDIA's Web Drivers on Maxwell and Pascal\n                 cards in macOS Sierra and High Sierra\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nInfo\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. Due to NVRAM issues on X99, we'll be changing the following:\n\nQUIRK             ENABLED\nLegacyOverwrite   YES\nWriteFlash        NO\n\nMore in-depth Info\n\n * LegacyOverwrite: YES\n   \n   * Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM like X99\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: NO\n   \n   * Enables writing to flash memory for all added variables, not compatible with emulated NVRAM\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Haswell-E example, we'll choose the iMacPro1,1 SMBIOS.\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #              iMacPro1,1 SMBIOS Info                 #\n#######################################################\n\nType:         iMacPro1,1\nSerial:       C02YX0TZHX87\nBoard Serial: C029269024NJG36CB\nSmUUID:       DEA17B2D-2F9F-4955-B266-A74C47678AD3\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                    ENABLED   COMMENT\nIgnoreInvalidFlexRatio   YES       \nUnblockFsConnect         NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * IgnoreInvalidFlexRatio: YES\n   \n   * Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-Skylake based systems\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt(For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n   * For 10.10 and older, you'll need to enable AppleCpuPmCfgLock as well\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n   * If experiencing issues, ensure \"MMIOH Base\" is set to 12 TB or lower\n   * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# haswell-e\n\nsupport                 version\ninitial macos support   os x 10.11, el capitan\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts    description\nssdt-plug         allows for native cpu power management on haswell and newer,\n                  see getting started with acpi guide for more details.\nssdt-ec-usbx      fixes both the embedded controller and usb power, see\n                  getting started with acpi guide for more details.\nssdt-rtc0-range   required for all big sur users to ensure their rtc device is\n                  compatible, see getting started with acpi guide for more\n                  details.\nssdt-unc          required for all big sur users to ensure their unc devices\n                  are compatible, see getting started with acpi guide for more\n                  details.\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, our patches are handled by our ssdts. this is a much cleaner solution as this will allow us to boot windows and other oses with opencore\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be passthrough to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: yes\n   * needed to remove write protection from cr0 register.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses, required for gigabyte boards to resolve early kernel panics\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\nby default, the sample.plist has this section set for audio which we'll be setting up by setting the layout id in the boot-args section, so removal of pciroot(0x0)/pci(0x1b,0x0) is also recommended from the add section.\n\ntl;dr, delete all the pciroot's here as we won't be using this section.\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\ninfo\n\nneeded for spoofing unsupported cpus and enabling power management on haswell-e and broadwell-e\n\n * haswell e:\n   \n   * cpuid1data: c3060300 00000000 00000000 00000000\n   * cpuid1mask: ffffffff 00000000 00000000 00000000\n\nmore in-depth info\n * cpuid1data: c3060300 00000000 00000000 00000000\n   * fake cpuid entry\n * cpuid1mask: ffffffff 00000000 00000000 00000000\n   * mask for fake cpuid\n * dummypowermanagement: no\n   * disables appleintelcpupowermanagement, only required for amd cpus\n * minkernel: leave this blank\n   * lowest kernel version the above patches will be injected into, if no value specified it'll be applied to all versions of macos. see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel: leave this blank\n   * highest kernel version the above patches will be injected into, if no value specified it'll be applied to all versions of macos. see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplecpupmcfglock         no        need if running 10.10 or older and cannot disable cfg-lock\n                                    in the bios\napplexcpmcfglock          yes       not needed if cfg-lock is disabled in the bios\napplexcpmextramsrs        yes       \ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * applexcpmextramsrs: yes\n   * disables multiple msr access needed for unsupported cpus like pentiums and many xeons. required for broadwell-e and lower\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * increasepcibarsize: no\n   * increases 32-bit pci bar size in iopcifamily from 1 to 4 gb, enabling above4gdecoding in the bios is a much cleaner and safer approach. some x99 boards may require this, you'll generally experience a kernel panic on iopcifamily if you need this. note this shouldn't be needed on mojave and newer\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\nthe reason being is that usbinjectall reimplements builtin macos functionality without proper current tuning. it is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nnpci=0x2000   this disables some pci debugging related to\n              kiopciconfiguratorpfm64, alternative is npci=0x3000 which\n              disables debugging related to giopcitunnelledkey in\n              addition. required for when getting stuck on pci start\n              configuration as there are irq conflicts relating to your\n              pci lanes. source\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args        description\nagdpmod=pikera   used for disabling board id checks on some navi gpus (rx\n                 5000 & 6000 series), without this you'll get a black screen.\n                 don't use if you don't have navi (ie. polaris and vega cards\n                 shouldn't use this)\n-radcodec        used for allowing officially unsupported amd gpus (spoofed)\n                 to use the hardware video encoder\nradpg=15         used for disabling some power-gating modes, helpful for\n                 properly initializing amd cape verde based gpus\nunfairgva=1      used for fixing hardware drm support on supported amd gpus\nnvda_drv_vrl=1   used for enabling nvidia's web drivers on maxwell and pascal\n                 cards in macos sierra and high sierra\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\ninfo\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone. due to nvram issues on x99, we'll be changing the following:\n\nquirk             enabled\nlegacyoverwrite   yes\nwriteflash        no\n\nmore in-depth info\n\n * legacyoverwrite: yes\n   \n   * permits overwriting firmware variables from nvram.plist, only needed for systems without native nvram like x99\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: no\n   \n   * enables writing to flash memory for all added variables, not compatible with emulated nvram\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this haswell-e example, we'll choose the imacpro1,1 smbios.\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #              imacpro1,1 smbios info                 #\n#######################################################\n\ntype:         imacpro1,1\nserial:       c02yx0tzhx87\nboard serial: c029269024njg36cb\nsmuuid:       dea17b2d-2f9f-4955-b266-a74c47678ad3\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                    enabled   comment\nignoreinvalidflexratio   yes       \nunblockfsconnect         no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * ignoreinvalidflexratio: yes\n   \n   * fix for when msr_flex_ratio (0x194) can't be disabled in the bios, required for all pre-skylake based systems\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt(for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applexcpmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n   * for 10.10 and older, you'll need to enable applecpupmcfglock as well\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n   * if experiencing issues, ensure \"mmioh base\" is set to 12 tb or lower\n   * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Sandy and Ivy Bridge-E",frontmatter:{},regularPath:"/config-HEDT/ivy-bridge-e.html",relativePath:"config-HEDT/ivy-bridge-e.md",key:"v-6407a8b0",path:"/config-HEDT/ivy-bridge-e.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:219},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1448},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1459},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2635},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:2720},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:2972},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:3080},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:3217},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:2972},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:4241},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1459},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2635},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:5224},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1459},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:7433},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:7569},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:7770},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:2720},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:2972},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:11616},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:12766},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:3080},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:13217},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:14117},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:16459},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:16528},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:16646},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:3565},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1459},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2635},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:21225},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:21877},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:3526},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:19358},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:10912},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:25376},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:25618},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:25828},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:26213},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:2972},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:23576},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:27783},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:28103},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:8098},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3594}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Intel BIOS settings Disable Enable",content:"# Sandy and Ivy Bridge-E\n\nSUPPORT                 VERSION\nInitial macOS Support   OS X 10.9, Mavericks\nLast Supported OS       macOS 12 Monterey\nNote                    For Ventura information, see macOS 13 Ventura\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-EC          Fixes the embedded controller, see Getting Started With ACPI\n                 Guide for more details.\nSSDT-UNC         Required for all Big Sur users to ensure their UNC devices\n                 are compatible, see Getting Started With ACPI Guide for more\n                 details.\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: YES\n   * Needed to remove write protection from CR0 register.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses, required for Gigabyte boards to resolve early kernel panics\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nBy default, the Sample.plist has this section set for audio which we'll be setting up by setting the layout ID in the boot-args section, so removal of PciRoot(0x0)/Pci(0x1b,0x0) is also recommended from the Add section.\n\nPciRoot(0x0)/Pci(0x1,0x1)/Pci(0x0,0x0)\n\nThis entry relates to Intel's I350 controller found on many Intel and Supermicro server boards, and some Intel Server PCIe adapters. What we'll be doing here is tricking Apple's I210 driver into supporting our I350 network controller:\n\nKEY         TYPE   VALUE\ndevice-id   Data   33150000\n\n * Note: If your board doesn't have an onboard I350 NIC, there's no reason to add this entry.\n * Note 2: If you get a kernel panic on the AppleIntelI210Ethernet kext, or not all of the adapters are showing up, you may need to edit or add additional PciRoot properties for each adapter.\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs, thankfully Sandy and Ivy bridge E are officially supported so no patching necessary.\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleCpuPmCfgLock         YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       If your board does not have USB 3.0, you can disable\n                                    Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * AppleXcpmExtraMsrs: YES\n   * Disables multiple MSR access needed for unsupported CPUs like Pentiums and many Xeons. Required for Broadwell-E and lower\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * IncreasePciBarSize: NO\n   * Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally experience a kernel panic on IOPCIFamily if you need this. Note this shouldn't be needed on Mojave and newer\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\nThe reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS        DESCRIPTION\nagdpmod=pikera   Used for disabling board ID checks on some Navi GPUs (RX\n                 5000 & 6000 series), without this you'll get a black screen.\n                 Don't use if you don't have Navi (ie. Polaris and Vega cards\n                 shouldn't use this)\n-radcodec        Used for allowing officially unsupported AMD GPUs (spoofed)\n                 to use the Hardware Video Encoder\nradpg=15         Used for disabling some power-gating modes, helpful for\n                 properly initializing AMD Cape Verde based GPUs\nunfairgva=1      Used for fixing hardware DRM support on supported AMD GPUs\nnvda_drv_vrl=1   Used for enabling NVIDIA's Web Drivers on Maxwell and Pascal\n                 cards in macOS Sierra and High Sierra\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nInfo\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. For us, we'll be changing the following:\n\nQUIRK        ENABLED\nWriteFlash   YES\n\nMore in-depth Info\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Ivy Bridge-E example, we'll choose the MacPro6,1 SMBIOS.\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               MacPro6,1 SMBIOS Info                 #\n#######################################################\n\nType:         MacPro6,1\nSerial:       C02YX0TZHX87\nBoard Serial: C029269024NJG36CB\nSmUUID:       DEA17B2D-2F9F-4955-B266-A74C47678AD3\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                    ENABLED   COMMENT\nIgnoreInvalidFlexRatio   YES       \nUnblockFsConnect         NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * IgnoreInvalidFlexRatio: YES\n   \n   * Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-Skylake based systems\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt(For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n   * For 10.10 and older, you'll need to enable AppleCpuPmCfgLock as well\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# sandy and ivy bridge-e\n\nsupport                 version\ninitial macos support   os x 10.9, mavericks\nlast supported os       macos 12 monterey\nnote                    for ventura information, see macos 13 ventura\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-ec          fixes the embedded controller, see getting started with acpi\n                 guide for more details.\nssdt-unc         required for all big sur users to ensure their unc devices\n                 are compatible, see getting started with acpi guide for more\n                 details.\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, our patches are handled by our ssdts. this is a much cleaner solution as this will allow us to boot windows and other oses with opencore\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be passthrough to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: yes\n   * needed to remove write protection from cr0 register.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses, required for gigabyte boards to resolve early kernel panics\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\nby default, the sample.plist has this section set for audio which we'll be setting up by setting the layout id in the boot-args section, so removal of pciroot(0x0)/pci(0x1b,0x0) is also recommended from the add section.\n\npciroot(0x0)/pci(0x1,0x1)/pci(0x0,0x0)\n\nthis entry relates to intel's i350 controller found on many intel and supermicro server boards, and some intel server pcie adapters. what we'll be doing here is tricking apple's i210 driver into supporting our i350 network controller:\n\nkey         type   value\ndevice-id   data   33150000\n\n * note: if your board doesn't have an onboard i350 nic, there's no reason to add this entry.\n * note 2: if you get a kernel panic on the appleinteli210ethernet kext, or not all of the adapters are showing up, you may need to edit or add additional pciroot properties for each adapter.\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus, thankfully sandy and ivy bridge e are officially supported so no patching necessary.\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplecpupmcfglock         yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       if your board does not have usb 3.0, you can disable\n                                    disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * applexcpmextramsrs: yes\n   * disables multiple msr access needed for unsupported cpus like pentiums and many xeons. required for broadwell-e and lower\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * increasepcibarsize: no\n   * increases 32-bit pci bar size in iopcifamily from 1 to 4 gb, enabling above4gdecoding in the bios is a much cleaner and safer approach. some x99 boards may require this, you'll generally experience a kernel panic on iopcifamily if you need this. note this shouldn't be needed on mojave and newer\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\nthe reason being is that usbinjectall reimplements builtin macos functionality without proper current tuning. it is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args        description\nagdpmod=pikera   used for disabling board id checks on some navi gpus (rx\n                 5000 & 6000 series), without this you'll get a black screen.\n                 don't use if you don't have navi (ie. polaris and vega cards\n                 shouldn't use this)\n-radcodec        used for allowing officially unsupported amd gpus (spoofed)\n                 to use the hardware video encoder\nradpg=15         used for disabling some power-gating modes, helpful for\n                 properly initializing amd cape verde based gpus\nunfairgva=1      used for fixing hardware drm support on supported amd gpus\nnvda_drv_vrl=1   used for enabling nvidia's web drivers on maxwell and pascal\n                 cards in macos sierra and high sierra\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\ninfo\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone. for us, we'll be changing the following:\n\nquirk        enabled\nwriteflash   yes\n\nmore in-depth info\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this ivy bridge-e example, we'll choose the macpro6,1 smbios.\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               macpro6,1 smbios info                 #\n#######################################################\n\ntype:         macpro6,1\nserial:       c02yx0tzhx87\nboard serial: c029269024njg36cb\nsmuuid:       dea17b2d-2f9f-4955-b266-a74c47678ad3\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                    enabled   comment\nignoreinvalidflexratio   yes       \nunblockfsconnect         no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * ignoreinvalidflexratio: yes\n   \n   * fix for when msr_flex_ratio (0x194) can't be disabled in the bios, required for all pre-skylake based systems\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt(for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applexcpmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n   * for 10.10 and older, you'll need to enable applecpupmcfglock as well\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Nehalem and Westmere",frontmatter:{},regularPath:"/config-HEDT/nehalem.html",relativePath:"config-HEDT/nehalem.md",key:"v-4b53c656",path:"/config-HEDT/nehalem.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:217},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1446},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1457},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2453},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:2538},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:2790},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:2898},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:3058},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:2790},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:4868},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1457},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2453},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:5307},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1457},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:7516},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:7636},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:7837},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:2538},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:2790},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:11683},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:12833},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:2898},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:13284},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:14184},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:16526},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:16595},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:16713},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:3978},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1457},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2453},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:21292},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:22023},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:2915},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:19425},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:10979},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:25528},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:25770},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:25980},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:26365},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:2790},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:23722},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:27935},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:28255},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:8165},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3513}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Intel BIOS settings Disable Enable",content:"# Nehalem and Westmere\n\nSUPPORT                 VERSION\nInitial macOS Support   OS X 10.5.6, Leopard\nLast Supported OS       macOS 12 Monterey\nNote                    For Ventura information, see macOS 13 Ventura\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-EC          Fixes the embedded controller, see Getting Started With ACPI\n                 Guide for more details.\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\nLEGACY   UEFI\n         \n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, depending where your board has UEFI, you have 2 options depending what your motherboard supports:\n\n# Legacy Settings\n\nQUIRK                    ENABLED   COMMENT\nAvoidRuntimeDefrag       No        Big Sur may require this quirk enabled\nEnableSafeModeSlide      No        \nEnableWriteUnprotector   No        \nProvideCustomSlide       No        \nRebuildAppleMemoryMap    Yes       This is required to boot OS X 10.4 through 10.6\nSetupVirtualMap          No        \n\n# UEFI Settings\n\nQUIRK                   ENABLED   COMMENT\nRebuildAppleMemoryMap   Yes       This is required to boot OS X 10.4 through 10.6\n\nMore in-depth Info\n * AvoidRuntimeDefrag: NO\n   * Fixes UEFI runtime services like date, time, NVRAM, power control on UEFI Boards\n   * macOS Big Sur however requires the APIC table present, otherwise causing early kernel panics so this quirk is recommended for those users.\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: YES\n   * Needed to remove write protection from CR0 register on UEFI platforms\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * RebuildAppleMemoryMap: YES\n   * Resolves early memory kernel panics on 10.6 and below\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses on UEFI boards\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nBy default, the Sample.plist has this section set for audio which we'll be setting up by setting the layout ID in the boot-args section, so removal of PciRoot(0x0)/Pci(0x1b,0x0) is also recommended from the Add section.\n\nTL;DR, delete all the PciRoot's here as we won't be using this section.\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs, thankfully Nehalem is officially supported so no patching necessary.\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleCpuPmCfgLock         YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       If your board does not have USB 3.0, you can disable\n                                    Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * AppleXcpmExtraMsrs: YES\n   * Disables multiple MSR access needed for unsupported CPUs like Pentiums and many Xeons. Required for Broadwell-E and lower\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * IncreasePciBarSize: NO\n   * Increases 32-bit PCI bar size in IOPCIFamily from 1 to 4 GB, enabling Above4GDecoding in the BIOS is a much cleaner and safer approach. Some X99 boards may require this, you'll generally experience a kernel panic on IOPCIFamily if you need this. Note this shouldn't be needed on Mojave and newer\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\nThe reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS        DESCRIPTION\nagdpmod=pikera   Used for disabling board ID checks on some Navi GPUs (RX\n                 5000 & 6000 series), without this you'll get a black screen.\n                 Don't use if you don't have Navi (ie. Polaris and Vega cards\n                 shouldn't use this)\n-radcodec        Used for allowing officially unsupported AMD GPUs (spoofed)\n                 to use the Hardware Video Encoder\nradpg=15         Used for disabling some power-gating modes, helpful for\n                 properly initializing AMD Cape Verde based GPUs\nunfairgva=1      Used for fixing hardware DRM support on supported AMD GPUs\nnvda_drv_vrl=1   Used for enabling NVIDIA's Web Drivers on Maxwell and Pascal\n                 cards in macOS Sierra and High Sierra\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nInfo\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. For us, we'll be changing the following:\n\nQUIRK        ENABLED\nWriteFlash   YES\n\nMore in-depth Info\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Nehalem example, we have a few SMBIOS to choose from:\n\nSMBIOS      HARDWARE\nMacPro5,1   Mojave and older\nMacPro6,1   Catalina and newer\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               MacPro5,1 SMBIOS Info                 #\n#######################################################\n\nType:         MacPro5,1\nSerial:       C02YX0TZHX87\nBoard Serial: C029269024NJG36CB\nSmUUID:       DEA17B2D-2F9F-4955-B266-A74C47678AD3\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlusLegacy.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                    ENABLED   COMMENT\nIgnoreInvalidFlexRatio   YES       \nUnblockFsConnect         NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * IgnoreInvalidFlexRatio: YES\n   \n   * Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-Skylake based systems\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt(For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleCpuPmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# nehalem and westmere\n\nsupport                 version\ninitial macos support   os x 10.5.6, leopard\nlast supported os       macos 12 monterey\nnote                    for ventura information, see macos 13 ventura\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-ec          fixes the embedded controller, see getting started with acpi\n                 guide for more details.\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, our patches are handled by our ssdts. this is a much cleaner solution as this will allow us to boot windows and other oses with opencore\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\nlegacy   uefi\n         \n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be passthrough to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, depending where your board has uefi, you have 2 options depending what your motherboard supports:\n\n# legacy settings\n\nquirk                    enabled   comment\navoidruntimedefrag       no        big sur may require this quirk enabled\nenablesafemodeslide      no        \nenablewriteunprotector   no        \nprovidecustomslide       no        \nrebuildapplememorymap    yes       this is required to boot os x 10.4 through 10.6\nsetupvirtualmap          no        \n\n# uefi settings\n\nquirk                   enabled   comment\nrebuildapplememorymap   yes       this is required to boot os x 10.4 through 10.6\n\nmore in-depth info\n * avoidruntimedefrag: no\n   * fixes uefi runtime services like date, time, nvram, power control on uefi boards\n   * macos big sur however requires the apic table present, otherwise causing early kernel panics so this quirk is recommended for those users.\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: yes\n   * needed to remove write protection from cr0 register on uefi platforms\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * rebuildapplememorymap: yes\n   * resolves early memory kernel panics on 10.6 and below\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses on uefi boards\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\nby default, the sample.plist has this section set for audio which we'll be setting up by setting the layout id in the boot-args section, so removal of pciroot(0x0)/pci(0x1b,0x0) is also recommended from the add section.\n\ntl;dr, delete all the pciroot's here as we won't be using this section.\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus, thankfully nehalem is officially supported so no patching necessary.\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplecpupmcfglock         yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       if your board does not have usb 3.0, you can disable\n                                    disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * applexcpmextramsrs: yes\n   * disables multiple msr access needed for unsupported cpus like pentiums and many xeons. required for broadwell-e and lower\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * increasepcibarsize: no\n   * increases 32-bit pci bar size in iopcifamily from 1 to 4 gb, enabling above4gdecoding in the bios is a much cleaner and safer approach. some x99 boards may require this, you'll generally experience a kernel panic on iopcifamily if you need this. note this shouldn't be needed on mojave and newer\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\nthe reason being is that usbinjectall reimplements builtin macos functionality without proper current tuning. it is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args        description\nagdpmod=pikera   used for disabling board id checks on some navi gpus (rx\n                 5000 & 6000 series), without this you'll get a black screen.\n                 don't use if you don't have navi (ie. polaris and vega cards\n                 shouldn't use this)\n-radcodec        used for allowing officially unsupported amd gpus (spoofed)\n                 to use the hardware video encoder\nradpg=15         used for disabling some power-gating modes, helpful for\n                 properly initializing amd cape verde based gpus\nunfairgva=1      used for fixing hardware drm support on supported amd gpus\nnvda_drv_vrl=1   used for enabling nvidia's web drivers on maxwell and pascal\n                 cards in macos sierra and high sierra\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\ninfo\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone. for us, we'll be changing the following:\n\nquirk        enabled\nwriteflash   yes\n\nmore in-depth info\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this nehalem example, we have a few smbios to choose from:\n\nsmbios      hardware\nmacpro5,1   mojave and older\nmacpro6,1   catalina and newer\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               macpro5,1 smbios info                 #\n#######################################################\n\ntype:         macpro5,1\nserial:       c02yx0tzhx87\nboard serial: c029269024njg36cb\nsmuuid:       dea17b2d-2f9f-4955-b266-a74c47678ad3\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfspluslegacy.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                    enabled   comment\nignoreinvalidflexratio   yes       \nunblockfsconnect         no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * ignoreinvalidflexratio: yes\n   \n   * fix for when msr_flex_ratio (0x194) can't be disabled in the bios, required for all pre-skylake based systems\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt(for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applecpupmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Skylake-X/W and Cascade Lake-X/W",frontmatter:{},regularPath:"/config-HEDT/skylake-x.html",relativePath:"config-HEDT/skylake-x.md",key:"v-4837bb36",path:"/config-HEDT/skylake-x.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:121},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1350},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1361},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2795},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:2880},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:3132},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:3240},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:3377},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:3132},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:5894},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1361},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2795},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:6333},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1361},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:8542},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:8732},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:8933},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:2880},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:3132},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:12209},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:13359},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:3240},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:13810},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:14710},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:17052},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:17121},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:17239},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:4055},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1361},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2795},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:21818},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:22469},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:4016},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:19951},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:11505},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:25968},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:26210},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:26420},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:26805},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:3132},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:24168},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:28176},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:28496},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:9261},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3713}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Intel BIOS settings Disable Enable",content:"# Skylake-X/W and Cascade Lake-X/W\n\nSUPPORT                 VERSION\nInitial macOS Support   macOS 10.13, High Sierra\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS    DESCRIPTION\nSSDT-PLUG         Allows for native CPU power management on Haswell and newer,\n                  see Getting Started With ACPI Guide for more details.\nSSDT-EC-USBX      Fixes both the embedded controller and USB power, see\n                  Getting Started With ACPI Guide for more details.\nSSDT-RTC0-RANGE   Required for enabling the legacy RTC clock in macOS, this is\n                  also required for all Big Sur users to ensure their RTC\n                  device is compatible. See Getting Started With ACPI Guide\n                  for more details.\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing devices to be passthrough to macOS that are generally ignored, for us we can ignore this section.\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we need to change the following:\n\nQUIRK                    ENABLED   COMMENT\nDevirtualiseMmio         YES       \nEnableWriteUnprotector   NO        \nRebuildAppleMemoryMap    YES       \nSetupVirtualMap          YES       Note newer Asus BIOS(v3006+) will not boot with this quirk\n                                   enabled\nSyncRuntimePermissions   YES       \n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc\n * DevirtualiseMmio: YES\n   * Reduces Stolen Memory Footprint, expands options for slide=N values and very helpful with fixing Memory Allocation issues on Z390. Requires ProtectUefiServices as well on IceLake and Z390 Coffee Lake\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: NO\n   * This quirk and RebuildAppleMemoryMap can commonly conflict, recommended to enable the latter on newer platforms and disable this entry.\n   * However, due to issues with OEMs not using the latest EDKII builds you may find that the above combo will result in early boot failures. This is due to missing the MEMORY_ATTRIBUTE_TABLE and such we recommend disabling RebuildAppleMemoryMap and enabling EnableWriteUnprotector. More info on this is covered in the troubleshooting section\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * RebuildAppleMemoryMap: YES\n   * Generates Memory Map compatible with macOS, can break on some laptop OEM firmwares so if you receive early boot failures disable this\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses, shouldn't be needed on Skylake and newer. Some firmware like Gigabyte may still require it, and will kernel panic without this\n   * Note newer Asus BIOS(v3006+) will not boot with this quirk enabled\n * SyncRuntimePermissions: YES\n   * Fixes alignment with MAT tables and required to boot Windows and Linux with MAT tables, also recommended for macOS. Mainly relevant for RebuildAppleMemoryMap users\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nBy default, the Sample.plist has this section set for audio which we'll be setting up by setting the layout ID in the boot-args section, so removal of PciRoot(0x0)/Pci(0x1b,0x0) is also recommended from the Add section.\n\nTL;DR, delete all the PciRoot's here as we won't be using this section.\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs, thankfully both Skylake-X and Cascade Lake-X have the same CPU ID as Xeon W chips which ship in the iMac Pro. So here we'll leave it blank\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleXcpmCfgLock          YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\nThe reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS        DESCRIPTION\nagdpmod=pikera   Used for disabling board ID checks on some Navi GPUs (RX\n                 5000 & 6000 series), without this you'll get a black screen.\n                 Don't use if you don't have Navi (ie. Polaris and Vega cards\n                 shouldn't use this)\n-radcodec        Used for allowing officially unsupported AMD GPUs (spoofed)\n                 to use the Hardware Video Encoder\nradpg=15         Used for disabling some power-gating modes, helpful for\n                 properly initializing AMD Cape Verde based GPUs\nunfairgva=1      Used for fixing hardware DRM support on supported AMD GPUs\nnvda_drv_vrl=1   Used for enabling NVIDIA's Web Drivers on Maxwell and Pascal\n                 cards in macOS Sierra and High Sierra\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nInfo\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. For us, we'll be changing the following:\n\nQUIRK        ENABLED\nWriteFlash   YES\n\nMore in-depth Info\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Skylake-X example, we'll choose the iMacPro1,1 SMBIOS.\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #              iMacPro1,1 SMBIOS Info                 #\n#######################################################\n\nType:         iMacPro1,1\nSerial:       C02YX0TZHX87\nBoard Serial: C029269024NJG36CB\nSmUUID:       DEA17B2D-2F9F-4955-B266-A74C47678AD3\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK              ENABLED   COMMENT\nUnblockFsConnect   NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt(For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n   * If experiencing issues, ensure \"MMIOH Base\" is set to 12 TB or lower\n   * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# skylake-x/w and cascade lake-x/w\n\nsupport                 version\ninitial macos support   macos 10.13, high sierra\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts    description\nssdt-plug         allows for native cpu power management on haswell and newer,\n                  see getting started with acpi guide for more details.\nssdt-ec-usbx      fixes both the embedded controller and usb power, see\n                  getting started with acpi guide for more details.\nssdt-rtc0-range   required for enabling the legacy rtc clock in macos, this is\n                  also required for all big sur users to ensure their rtc\n                  device is compatible. see getting started with acpi guide\n                  for more details.\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, our patches are handled by our ssdts. this is a much cleaner solution as this will allow us to boot windows and other oses with opencore\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing devices to be passthrough to macos that are generally ignored, for us we can ignore this section.\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we need to change the following:\n\nquirk                    enabled   comment\ndevirtualisemmio         yes       \nenablewriteunprotector   no        \nrebuildapplememorymap    yes       \nsetupvirtualmap          yes       note newer asus bios(v3006+) will not boot with this quirk\n                                   enabled\nsyncruntimepermissions   yes       \n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc\n * devirtualisemmio: yes\n   * reduces stolen memory footprint, expands options for slide=n values and very helpful with fixing memory allocation issues on z390. requires protectuefiservices as well on icelake and z390 coffee lake\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: no\n   * this quirk and rebuildapplememorymap can commonly conflict, recommended to enable the latter on newer platforms and disable this entry.\n   * however, due to issues with oems not using the latest edkii builds you may find that the above combo will result in early boot failures. this is due to missing the memory_attribute_table and such we recommend disabling rebuildapplememorymap and enabling enablewriteunprotector. more info on this is covered in the troubleshooting section\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * rebuildapplememorymap: yes\n   * generates memory map compatible with macos, can break on some laptop oem firmwares so if you receive early boot failures disable this\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses, shouldn't be needed on skylake and newer. some firmware like gigabyte may still require it, and will kernel panic without this\n   * note newer asus bios(v3006+) will not boot with this quirk enabled\n * syncruntimepermissions: yes\n   * fixes alignment with mat tables and required to boot windows and linux with mat tables, also recommended for macos. mainly relevant for rebuildapplememorymap users\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\nby default, the sample.plist has this section set for audio which we'll be setting up by setting the layout id in the boot-args section, so removal of pciroot(0x0)/pci(0x1b,0x0) is also recommended from the add section.\n\ntl;dr, delete all the pciroot's here as we won't be using this section.\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus, thankfully both skylake-x and cascade lake-x have the same cpu id as xeon w chips which ship in the imac pro. so here we'll leave it blank\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplexcpmcfglock          yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\nthe reason being is that usbinjectall reimplements builtin macos functionality without proper current tuning. it is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args        description\nagdpmod=pikera   used for disabling board id checks on some navi gpus (rx\n                 5000 & 6000 series), without this you'll get a black screen.\n                 don't use if you don't have navi (ie. polaris and vega cards\n                 shouldn't use this)\n-radcodec        used for allowing officially unsupported amd gpus (spoofed)\n                 to use the hardware video encoder\nradpg=15         used for disabling some power-gating modes, helpful for\n                 properly initializing amd cape verde based gpus\nunfairgva=1      used for fixing hardware drm support on supported amd gpus\nnvda_drv_vrl=1   used for enabling nvidia's web drivers on maxwell and pascal\n                 cards in macos sierra and high sierra\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\ninfo\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone. for us, we'll be changing the following:\n\nquirk        enabled\nwriteflash   yes\n\nmore in-depth info\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this skylake-x example, we'll choose the imacpro1,1 smbios.\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #              imacpro1,1 smbios info                 #\n#######################################################\n\ntype:         imacpro1,1\nserial:       c02yx0tzhx87\nboard serial: c029269024njg36cb\nsmuuid:       dea17b2d-2f9f-4955-b266-a74c47678ad3\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk              enabled   comment\nunblockfsconnect   no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt(for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applexcpmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n   * if experiencing issues, ensure \"mmioh base\" is set to 12 tb or lower\n   * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Laptop Clarksfield and Arrandale",frontmatter:{},regularPath:"/config-laptop.plist/arrandale.html",relativePath:"config-laptop.plist/arrandale.md",key:"v-5b055c76",path:"/config-laptop.plist/arrandale.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:253},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1482},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1493},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2845},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:2930},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:3344},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:3452},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:3612},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:3344},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:5377},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1493},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2845},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:6540},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1493},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:8749},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:8891},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:9092},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:2930},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:3344},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:12457},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:13607},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:3452},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:14058},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:14958},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:17300},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:17369},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:17487},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:4532},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1493},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2845},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:21408},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:22303},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:244},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:24312},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:11753},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:25868},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:26110},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:26334},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:26719},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:3344},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:24002},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:28537},{level:3,title:"Config reminders",slug:"config-reminders",normalizedTitle:"config reminders",charIndex:28857},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:29036},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:9420},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3214}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Config reminders Intel BIOS settings Disable Enable",content:"# Laptop Clarksfield and Arrandale\n\nSUPPORT                 VERSION\nInitial macOS Support   OS X 10.6.3, Snow Leopard\nLast Supported OS       macOS 10.13, High Sierra\nNote                    Most Clarksfield and Arrandale boards do not support UEFI\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-EC          Fixes the embedded controller, see Getting Started With ACPI\n                 Guide for more details.\nSSDT-XOSI        Makes all _OSI calls specific to Windows work for macOS\n                 (Darwin) Identifier. This may help enabling some features\n                 like XHCI and others.\nSSDT-PNLF        Fixes brightness control, see Getting Started With ACPI\n                 Guide for more details. Note that Intel NUCs do not need\n                 this\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nInfo\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need the following:\n\n * OSI rename\n   * This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT\n\nCOMMENT   STRING    CHANGE _OSI TO XOSI\nEnabled   Boolean   YES\nCount     Number    0\nLimit     Number    0\nFind      Data      5f4f5349\nReplace   Data      584f5349\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\nLEGACY   UEFI\n         \n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, depending where your board has UEFI, you have 2 options depending what your motherboard supports:\n\n# Legacy Settings\n\nQUIRK                    ENABLED   COMMENT\nAvoidRuntimeDefrag       No        Big Sur may require this quirk enabled\nEnableSafeModeSlide      No        \nEnableWriteUnprotector   No        \nProvideCustomSlide       No        \nRebuildAppleMemoryMap    Yes       This is required to boot OS X 10.4 through 10.6\nSetupVirtualMap          No        \n\n# UEFI Settings\n\nQUIRK                   ENABLED   COMMENT\nRebuildAppleMemoryMap   Yes       This is required to boot OS X 10.4 through 10.6\n\nMore in-depth Info\n * AvoidRuntimeDefrag: NO\n   * Fixes UEFI runtime services like date, time, NVRAM, power control;\n   * macOS Big Sur however requires the APIC table present, otherwise causing early kernel panics so this quirk is recommended for those users.\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: NO\n   * Needed to remove write protection from CR0 register.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * RebuildAppleMemoryMap: YES\n   * Resolves early memory kernel panics on 10.6 and below.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses.\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\nThis section is set up via WhateverGreen's Framebuffer Patching Guide and is used for setting important iGPU properties.\n\nThe config.plist doesn't already have a section for this so you will have to create it manually.\n\nWhen setting up your iGPU, simply add the values below to the PciRoot(0x0)/Pci(0x2,0x0) entry:\n\nPROPERTY                   TYPE   VALUE\nframebuffer-patch-enable   Data   01000000\nframebuffer-singlelink     Data   01000000\n\n * Note: Apple's Iron Lake drivers only support LVDS displays and not eDP\n\nPciRoot(0x0)/Pci(0x1b,0x0)\n\nlayout-id\n\n * Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs.\n * You can delete this property outright as it's unused for us at this time\n\nFor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present. More info on this is covered in the Post-Install Page\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons\n\n * Cpuid1Mask: Leave this blank\n * Cpuid1Data: Leave this blank\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleCpuPmCfgLock         YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       If your board does not have USB 3.0, you can disable\n                                    Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\nThe reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS    DESCRIPTION\n-wegnoegpu   Used for disabling all other GPUs than the integrated Intel\n             iGPU, useful for those wanting to run newer versions of\n             macOS where their dGPU isn't supported\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone.\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Arrandale example, we'll chose the MacBookPro6,1 SMBIOS - this is done intentionally for compatibility's sake. The typical breakdown is as follows:\n\nSMBIOS          CPU TYPE                  DISPLAY SIZE\nMacBookPro6,1   Quad Core 45W(High End)   17\"\nMacBookPro6,2   Quad Core 45W(Low End)    15\"\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #             MacBookPro6,1 SMBIOS Info               #\n#######################################################\n\nType:         MacBookPro6,1\nSerial:       C02G3ZYFDC79\nBoard Serial: C021291014NDCMVCB\nSmUUID:       C8A54C45-8E99-440A-9A52-1B62A0074FA5\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlusLegacy.efi\n * OpenRuntime.efi\n * OpenUsbKbDxe.efi(If your firmware does not support UEFI)\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nInfo\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default besides:\n\nQUIRK        VALUE   COMMENT\nKeySupport   NO      Enable if your BIOS supports UEFI\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                    ENABLED   COMMENT\nIgnoreInvalidFlexRatio   YES       \nReleaseUsbOwnership      YES       \nUnblockFsConnect         NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * IgnoreInvalidFlexRatio: YES\n   \n   * Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-Skylake based systems\n\n * ReleaseUsbOwnership: YES\n   \n   * Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Most laptops have garbage firmwares so we'll need this as well\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Config reminders\n\nHP Users:\n\n * Kernel -> Quirks -> LapicKernelPanic -> True\n   * You will get a kernel panic on LAPIC otherwise\n * UEFI -> Quirks -> UnblockFsConnect -> True\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\nThese are the main options to check for, if you can't find it or an equivalent for it, just skip it.\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled) (or Legacy Support, or Hybrid Boot)\n * Thunderbolt (For initial install, as Thunderbolt can cause issues if not setup correctly, if available)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleCpuPmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n\n\n# Enable\n\n * VT-x (Virtualization Support)\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * DVMT Pre-Allocated(iGPU Memory): 32MB or higher\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# laptop clarksfield and arrandale\n\nsupport                 version\ninitial macos support   os x 10.6.3, snow leopard\nlast supported os       macos 10.13, high sierra\nnote                    most clarksfield and arrandale boards do not support uefi\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-ec          fixes the embedded controller, see getting started with acpi\n                 guide for more details.\nssdt-xosi        makes all _osi calls specific to windows work for macos\n                 (darwin) identifier. this may help enabling some features\n                 like xhci and others.\nssdt-pnlf        fixes brightness control, see getting started with acpi\n                 guide for more details. note that intel nucs do not need\n                 this\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\ninfo\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, we'll need the following:\n\n * osi rename\n   * this is required when using ssdt-xosi as we redirect all osi calls to this ssdt\n\ncomment   string    change _osi to xosi\nenabled   boolean   yes\ncount     number    0\nlimit     number    0\nfind      data      5f4f5349\nreplace   data      584f5349\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\nlegacy   uefi\n         \n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be passthrough to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, depending where your board has uefi, you have 2 options depending what your motherboard supports:\n\n# legacy settings\n\nquirk                    enabled   comment\navoidruntimedefrag       no        big sur may require this quirk enabled\nenablesafemodeslide      no        \nenablewriteunprotector   no        \nprovidecustomslide       no        \nrebuildapplememorymap    yes       this is required to boot os x 10.4 through 10.6\nsetupvirtualmap          no        \n\n# uefi settings\n\nquirk                   enabled   comment\nrebuildapplememorymap   yes       this is required to boot os x 10.4 through 10.6\n\nmore in-depth info\n * avoidruntimedefrag: no\n   * fixes uefi runtime services like date, time, nvram, power control;\n   * macos big sur however requires the apic table present, otherwise causing early kernel panics so this quirk is recommended for those users.\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: no\n   * needed to remove write protection from cr0 register.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * rebuildapplememorymap: yes\n   * resolves early memory kernel panics on 10.6 and below.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses.\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\npciroot(0x0)/pci(0x2,0x0)\n\nthis section is set up via whatevergreen's framebuffer patching guide and is used for setting important igpu properties.\n\nthe config.plist doesn't already have a section for this so you will have to create it manually.\n\nwhen setting up your igpu, simply add the values below to the pciroot(0x0)/pci(0x2,0x0) entry:\n\nproperty                   type   value\nframebuffer-patch-enable   data   01000000\nframebuffer-singlelink     data   01000000\n\n * note: apple's iron lake drivers only support lvds displays and not edp\n\npciroot(0x0)/pci(0x1b,0x0)\n\nlayout-id\n\n * applies applealc audio injection, you'll need to do your own research on which codec your motherboard has and match it with applealc's layout. applealc supported codecs.\n * you can delete this property outright as it's unused for us at this time\n\nfor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-ids present. more info on this is covered in the post-install page\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus like pentiums and celerons\n\n * cpuid1mask: leave this blank\n * cpuid1data: leave this blank\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplecpupmcfglock         yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       if your board does not have usb 3.0, you can disable\n                                    disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\nthe reason being is that usbinjectall reimplements builtin macos functionality without proper current tuning. it is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args    description\n-wegnoegpu   used for disabling all other gpus than the integrated intel\n             igpu, useful for those wanting to run newer versions of\n             macos where their dgpu isn't supported\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone.\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this arrandale example, we'll chose the macbookpro6,1 smbios - this is done intentionally for compatibility's sake. the typical breakdown is as follows:\n\nsmbios          cpu type                  display size\nmacbookpro6,1   quad core 45w(high end)   17\"\nmacbookpro6,2   quad core 45w(low end)    15\"\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #             macbookpro6,1 smbios info               #\n#######################################################\n\ntype:         macbookpro6,1\nserial:       c02g3zyfdc79\nboard serial: c021291014ndcmvcb\nsmuuid:       c8a54c45-8e99-440a-9a52-1b62a0074fa5\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfspluslegacy.efi\n * openruntime.efi\n * openusbkbdxe.efi(if your firmware does not support uefi)\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\ninfo\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default besides:\n\nquirk        value   comment\nkeysupport   no      enable if your bios supports uefi\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                    enabled   comment\nignoreinvalidflexratio   yes       \nreleaseusbownership      yes       \nunblockfsconnect         no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * ignoreinvalidflexratio: yes\n   \n   * fix for when msr_flex_ratio (0x194) can't be disabled in the bios, required for all pre-skylake based systems\n\n * releaseusbownership: yes\n   \n   * releases usb controller from firmware driver, needed for when your firmware doesn't support ehci/xhci handoff. most laptops have garbage firmwares so we'll need this as well\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# config reminders\n\nhp users:\n\n * kernel -> quirks -> lapickernelpanic -> true\n   * you will get a kernel panic on lapic otherwise\n * uefi -> quirks -> unblockfsconnect -> true\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\nthese are the main options to check for, if you can't find it or an equivalent for it, just skip it.\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled) (or legacy support, or hybrid boot)\n * thunderbolt (for initial install, as thunderbolt can cause issues if not setup correctly, if available)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applecpupmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n\n\n# enable\n\n * vt-x (virtualization support)\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * dvmt pre-allocated(igpu memory): 32mb or higher\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Laptop Broadwell",frontmatter:{},regularPath:"/config-laptop.plist/broadwell.html",relativePath:"config-laptop.plist/broadwell.md",key:"v-368e92f6",path:"/config-laptop.plist/broadwell.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:213},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1442},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1453},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2976},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:3061},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:3521},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:3629},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:3766},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:3521},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:4791},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1453},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2976},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:7192},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1453},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:9401},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:9543},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:9744},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:3061},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:3521},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:13163},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:14313},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:3629},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:14764},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:15664},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:18006},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:18075},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:18193},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:4115},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1453},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2976},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:22114},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:23774},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:4076},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:25783},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:12459},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:27273},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:27515},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:27725},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:28110},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:3521},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:25473},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:29928},{level:3,title:"Config reminders",slug:"config-reminders",normalizedTitle:"config reminders",charIndex:30248},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:30427},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:10215},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3391}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Config reminders Intel BIOS settings Disable Enable",content:"# Laptop Broadwell\n\nSUPPORT                 VERSION\nInitial macOS Support   OS X 10.10, Yosemite\nLast Supported OS       macOS 12 Monterey\nNote                    For Ventura information, see macOS 13 Ventura\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-PLUG        Allows for native CPU power management on Haswell and newer,\n                 see Getting Started With ACPI Guide for more details.\nSSDT-EC          Fixes the embedded controller, see Getting Started With ACPI\n                 Guide for more details.\nSSDT-GPIO        Creates a stub so VoodooI2C can connect, for those having\n                 troubles getting VoodooI2C working can try SSDT-XOSI\n                 instead. Note that Intel NUCs do not need this\nSSDT-PNLF        Fixes brightness control, see Getting Started With ACPI\n                 Guide for more details. Note that Intel NUCs do not need\n                 this\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nInfo\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need the following:\n\n * OSI rename\n   * This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT, this is not needed if you're using SSDT-GPIO\n\nCOMMENT   STRING    CHANGE _OSI TO XOSI\nEnabled   Boolean   YES\nCount     Number    0\nLimit     Number    0\nFind      Data      5f4f5349\nReplace   Data      584f5349\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be pass-through to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: YES\n   * Needed to remove write protection from CR0 register.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses, required for Gigabyte boards to resolve early kernel panics\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\nThis section is set up via WhateverGreen's Framebuffer Patching Guide and is used for setting important iGPU properties.\n\nThe config.plist doesn't already have a section for this so you will have to create it manually.\n\nWhen setting up your iGPU, the table below should help with finding the right values to set. Here is an explanation of some values:\n\n * AAPL,ig-platform-id\n   * This is used internally for setting up the iGPU\n * Type\n   * Whether the entry is recommended for laptops(ie. with built-in displays) or for Intel NUCs(ie. stand alone boxes)\n\nGenerally follow these steps when setting up your iGPU properties. Follow the configuration notes below the table if they say anything different:\n\n 1. When initially setting up your config.plist, only set AAPL,ig-platform-id - this is normally enough\n 2. If you boot and you get no graphics acceleration (7MB VRAM and solid background for dock), then you likely need to try different AAPL,ig-platform-id values, add stolenmem patches, or even add a device-id property.\n\nAAPL,IG-PLATFORM-ID   TYPE     COMMENT\n06002616              Laptop   Recommended value for Broadwell laptops\n02001616              NUC      Recommended value for Broadwell NUCs\n\n# Configuration Notes\n\n * For HD 5600 you need device-id faked to 26160000:\n\nKEY         TYPE   VALUE\ndevice-id   data   26160000\n\n * In some cases where you cannot set the DVMT-prealloc of these cards to 96MB higher in your UEFI Setup, you may get a kernel panic. Usually they're configured for 32MB of DVMT-prealloc, in that case these values are added to your iGPU Properties\n\nKEY                        TYPE   VALUE\nframebuffer-patch-enable   Data   01000000\nframebuffer-stolenmem      Data   00003001\nframebuffer-fbmem          Data   00009000\n\nPciRoot(0x0)/Pci(0x1b,0x0)\n\nlayout-id\n\n * Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs.\n * You can delete this property outright as it's unused for us at this time\n\nFor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present. More info on this is covered in the Post-Install Page\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons\n\n * Cpuid1Mask: Leave this blank\n * Cpuid1Data: Leave this blank\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleCpuPmCfgLock         NO        Need if running 10.10 or older and cannot disable CFG-Lock\n                                    in the BIOS\nAppleXcpmCfgLock          YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\nThe reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS    DESCRIPTION\n-wegnoegpu   Used for disabling all other GPUs than the integrated Intel\n             iGPU, useful for those wanting to run newer versions of\n             macOS where their dGPU isn't supported\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone.\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Broadwell example, we chose the MacBookPro12,1 SMBIOS. The typical breakdown is as follows:\n\nSMBIOS           CPU TYPE                  GPU TYPE                               DISPLAY SIZE\nMacBook8,1       Dual Core 7W(Low End)     iGPU: HD 5300                          12\"\nMacBookAir7,1    Dual Core 15W             iGPU: HD 6000                          11\"\nMacBookAir7,2    Dual Core 15W             iGPU: HD 6000                          13\"\nMacBookPro12,1   Dual Core 28W(High End)   iGPU: Iris 6100                        13\"\nMacBookPro11,2   Quad Core 45W             iGPU: Iris Pro 5200                    15\"\nMacBookPro11,3   Quad Core 45W             iGPU: Iris Pro 5200 + dGPU: GT 750M    15\"\nMacBookPro11,4   Quad Core 45W             iGPU: Iris Pro 5200                    15\"\nMacBookPro11,5   Quad Core 45W             iGPU: Iris Pro 5200 + dGPU: R9 M370X   15\"\niMac16,1         NUC Systems               HD 6000/Iris Pro 6200                  N/A\n\nNote: MacBook8,1 was dropped in macOS Monterey. If running macOS Monterey, select another model.\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               MacBookPro12,1 SMBIOS Info            #\n#######################################################\n\nType:         MacBookPro12,1\nSerial:       C02M9SYJFY10\nBoard Serial: C02408101J9G2Y7A8\nSmUUID:       7B227BEC-660D-405F-8E60-411B3E4EF055\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                    ENABLED   COMMENT\nIgnoreInvalidFlexRatio   YES       \nReleaseUsbOwnership      YES       \nUnblockFsConnect         NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * IgnoreInvalidFlexRatio: YES\n   \n   * Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-Skylake based systems\n\n * ReleaseUsbOwnership: YES\n   \n   * Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Most laptops have garbage firmwares so we'll need this as well\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Config reminders\n\nHP Users:\n\n * Kernel -> Quirks -> LapicKernelPanic -> True\n   * You will get a kernel panic on LAPIC otherwise\n * UEFI -> Quirks -> UnblockFsConnect -> True\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt(For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n   * For 10.10 and older, you'll need to enable AppleCpuPmCfgLock as well\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * DVMT Pre-Allocated(iGPU Memory): 64MB or higher\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# laptop broadwell\n\nsupport                 version\ninitial macos support   os x 10.10, yosemite\nlast supported os       macos 12 monterey\nnote                    for ventura information, see macos 13 ventura\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-plug        allows for native cpu power management on haswell and newer,\n                 see getting started with acpi guide for more details.\nssdt-ec          fixes the embedded controller, see getting started with acpi\n                 guide for more details.\nssdt-gpio        creates a stub so voodooi2c can connect, for those having\n                 troubles getting voodooi2c working can try ssdt-xosi\n                 instead. note that intel nucs do not need this\nssdt-pnlf        fixes brightness control, see getting started with acpi\n                 guide for more details. note that intel nucs do not need\n                 this\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\ninfo\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, we'll need the following:\n\n * osi rename\n   * this is required when using ssdt-xosi as we redirect all osi calls to this ssdt, this is not needed if you're using ssdt-gpio\n\ncomment   string    change _osi to xosi\nenabled   boolean   yes\ncount     number    0\nlimit     number    0\nfind      data      5f4f5349\nreplace   data      584f5349\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be pass-through to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: yes\n   * needed to remove write protection from cr0 register.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses, required for gigabyte boards to resolve early kernel panics\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\npciroot(0x0)/pci(0x2,0x0)\n\nthis section is set up via whatevergreen's framebuffer patching guide and is used for setting important igpu properties.\n\nthe config.plist doesn't already have a section for this so you will have to create it manually.\n\nwhen setting up your igpu, the table below should help with finding the right values to set. here is an explanation of some values:\n\n * aapl,ig-platform-id\n   * this is used internally for setting up the igpu\n * type\n   * whether the entry is recommended for laptops(ie. with built-in displays) or for intel nucs(ie. stand alone boxes)\n\ngenerally follow these steps when setting up your igpu properties. follow the configuration notes below the table if they say anything different:\n\n 1. when initially setting up your config.plist, only set aapl,ig-platform-id - this is normally enough\n 2. if you boot and you get no graphics acceleration (7mb vram and solid background for dock), then you likely need to try different aapl,ig-platform-id values, add stolenmem patches, or even add a device-id property.\n\naapl,ig-platform-id   type     comment\n06002616              laptop   recommended value for broadwell laptops\n02001616              nuc      recommended value for broadwell nucs\n\n# configuration notes\n\n * for hd 5600 you need device-id faked to 26160000:\n\nkey         type   value\ndevice-id   data   26160000\n\n * in some cases where you cannot set the dvmt-prealloc of these cards to 96mb higher in your uefi setup, you may get a kernel panic. usually they're configured for 32mb of dvmt-prealloc, in that case these values are added to your igpu properties\n\nkey                        type   value\nframebuffer-patch-enable   data   01000000\nframebuffer-stolenmem      data   00003001\nframebuffer-fbmem          data   00009000\n\npciroot(0x0)/pci(0x1b,0x0)\n\nlayout-id\n\n * applies applealc audio injection, you'll need to do your own research on which codec your motherboard has and match it with applealc's layout. applealc supported codecs.\n * you can delete this property outright as it's unused for us at this time\n\nfor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-ids present. more info on this is covered in the post-install page\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus like pentiums and celerons\n\n * cpuid1mask: leave this blank\n * cpuid1data: leave this blank\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplecpupmcfglock         no        need if running 10.10 or older and cannot disable cfg-lock\n                                    in the bios\napplexcpmcfglock          yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\nthe reason being is that usbinjectall reimplements builtin macos functionality without proper current tuning. it is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args    description\n-wegnoegpu   used for disabling all other gpus than the integrated intel\n             igpu, useful for those wanting to run newer versions of\n             macos where their dgpu isn't supported\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone.\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this broadwell example, we chose the macbookpro12,1 smbios. the typical breakdown is as follows:\n\nsmbios           cpu type                  gpu type                               display size\nmacbook8,1       dual core 7w(low end)     igpu: hd 5300                          12\"\nmacbookair7,1    dual core 15w             igpu: hd 6000                          11\"\nmacbookair7,2    dual core 15w             igpu: hd 6000                          13\"\nmacbookpro12,1   dual core 28w(high end)   igpu: iris 6100                        13\"\nmacbookpro11,2   quad core 45w             igpu: iris pro 5200                    15\"\nmacbookpro11,3   quad core 45w             igpu: iris pro 5200 + dgpu: gt 750m    15\"\nmacbookpro11,4   quad core 45w             igpu: iris pro 5200                    15\"\nmacbookpro11,5   quad core 45w             igpu: iris pro 5200 + dgpu: r9 m370x   15\"\nimac16,1         nuc systems               hd 6000/iris pro 6200                  n/a\n\nnote: macbook8,1 was dropped in macos monterey. if running macos monterey, select another model.\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               macbookpro12,1 smbios info            #\n#######################################################\n\ntype:         macbookpro12,1\nserial:       c02m9syjfy10\nboard serial: c02408101j9g2y7a8\nsmuuid:       7b227bec-660d-405f-8e60-411b3e4ef055\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                    enabled   comment\nignoreinvalidflexratio   yes       \nreleaseusbownership      yes       \nunblockfsconnect         no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * ignoreinvalidflexratio: yes\n   \n   * fix for when msr_flex_ratio (0x194) can't be disabled in the bios, required for all pre-skylake based systems\n\n * releaseusbownership: yes\n   \n   * releases usb controller from firmware driver, needed for when your firmware doesn't support ehci/xhci handoff. most laptops have garbage firmwares so we'll need this as well\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# config reminders\n\nhp users:\n\n * kernel -> quirks -> lapickernelpanic -> true\n   * you will get a kernel panic on lapic otherwise\n * uefi -> quirks -> unblockfsconnect -> true\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt(for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applexcpmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n   * for 10.10 and older, you'll need to enable applecpupmcfglock as well\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * dvmt pre-allocated(igpu memory): 64mb or higher\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Laptop Coffee Lake Plus and Comet Lake",frontmatter:{},regularPath:"/config-laptop.plist/coffee-lake-plus.html",relativePath:"config-laptop.plist/coffee-lake-plus.md",key:"v-3914d740",path:"/config-laptop.plist/coffee-lake-plus.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:188},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1417},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1428},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:3776},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:3861},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:4321},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:4429},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:4566},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:4321},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:7255},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1428},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:3776},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:10108},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1428},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:12317},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:13371},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:13572},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:3861},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:4321},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:16848},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:17998},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:4429},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:18449},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:19349},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:21691},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:21760},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:21878},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:3151},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1428},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:3776},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:26115},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:27523},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:3112},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:29532},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:16144},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:31022},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:31264},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:31474},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:31859},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:4321},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:29222},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:33481},{level:3,title:"Config reminders",slug:"config-reminders",normalizedTitle:"config reminders",charIndex:33801},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:34111},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:13900},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:4191}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Config reminders Intel BIOS settings Disable Enable",content:"# Laptop Coffee Lake Plus and Comet Lake\n\nSUPPORT                      VERSION\nInitial macOS Support(CFL)   macOS 10.13, High Sierra\nInitial macOS Support(CML)   macOS 10.15, Catalina\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-PLUG        Allows for native CPU power management on Haswell and newer,\n                 see Getting Started With ACPI Guide for more details.\nSSDT-EC-USBX     Fixes both the embedded controller and USB power, see\n                 Getting Started With ACPI Guide for more details.\nSSDT-GPIO        Creates a stub so VoodooI2C can connect, for those having\n                 troubles getting VoodooI2C working can try SSDT-XOSI\n                 instead. Note that Intel NUCs do not need this\nSSDT-PNLF        Fixes brightness control, see Getting Started With ACPI\n                 Guide for more details. Note that Intel NUCs do not need\n                 this\nSSDT-AWAC        This is the 300 series RTC patch, required for most B360,\n                 B365, H310, H370, Z390 and some Z370 boards which prevent\n                 systems from booting macOS. The alternative is SSDT-RTC0 for\n                 when AWAC SSDT is incompatible due to missing the Legacy RTC\n                 clock, to check whether you need it and which to use please\n                 see Getting started with ACPI page.\nSSDT-PMC         So true 300 series motherboards(non-Z370) don't declare the\n                 FW chip as MMIO in ACPI and so XNU ignores the MMIO region\n                 declared by the UEFI memory map. This SSDT brings back NVRAM\n                 support. Note that 10th gen CPUs do not need this. See\n                 Getting Started With ACPI Guide for more details.\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nInfo\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need the following:\n\n * OSI rename\n   * This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT, this is not needed if you're using SSDT-GPIO\n\nCOMMENT   STRING    CHANGE _OSI TO XOSI\nEnabled   Boolean   YES\nCount     Number    0\nLimit     Number    0\nFind      Data      5f4f5349\nReplace   Data      584f5349\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing devices to be pass-through to macOS that are generally ignored, for us we can ignore this section.\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we need to change the following:\n\nQUIRK                    ENABLED   COMMENT\nDevirtualiseMmio         YES\nEnableWriteUnprotector   NO\nProtectMemoryRegions     YES\nProtectUefiServices      YES\nRebuildAppleMemoryMap    YES\nSyncRuntimePermissions   YES\n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc\n * DevirtualiseMmio: YES\n   * Reduces Stolen Memory Footprint, expands options for slide=N values and very helpful with fixing Memory Allocation issues on Z390. Requires ProtectUefiServices as well on IceLake and Z390 Coffee Lake\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: NO\n   * This quirk and RebuildAppleMemoryMap can commonly conflict, recommended to enable the latter on newer platforms and disable this entry.\n   * However, due to issues with OEMs not using the latest EDKII builds you may find that the above combo will result in early boot failures. This is due to missing the MEMORY_ATTRIBUTE_TABLE and such we recommend disabling RebuildAppleMemoryMap and enabling EnableWriteUnprotector. More info on this is covered in the troubleshooting section\n * ProtectMemoryRegions: YES\n   * Patches memory region types for incorrectly mapped CSM/MMIO regions. Necessary for all Chromebooks that utilize coreboot UEFI firmware.\n * ProtectUefiServices: YES\n   * Protects UEFI services from being overridden by the firmware, mainly relevant for VMs, Icelake and Z390 systems'\n   * If on Z390, enable this quirk\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * RebuildAppleMemoryMap: YES\n   * Generates Memory Map compatible with macOS, can break on some laptop OEM firmwares so if you receive early boot failures disable this\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses, shouldn't be needed on Skylake and newer. Some firmware like Gigabyte may still require it, and will kernel panic without this\n * SyncRuntimePermissions: YES\n   * Fixes alignment with MAT tables and required to boot Windows and Linux with MAT tables, also recommended for macOS. Mainly relevant for RebuildAppleMemoryMap users\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\nThis section is set up via WhateverGreen's Framebuffer Patching Guide and is used for setting important iGPU properties.\n\nThe config.plist doesn't already have a section for this so you will have to create it manually.\n\nWhen setting up your iGPU, the table below should help with finding the right values to set. Here is an explanation of some values:\n\n * AAPL,ig-platform-id\n   * This is used internally for setting up the iGPU\n * Type\n   * Whether the entry is recommended for laptops(ie. with built-in displays) or for Intel NUCs(ie. stand alone boxes)\n\nGenerally follow these steps when setting up your iGPU properties. Follow the configuration notes below the table if they say anything different:\n\n 1. When initially setting up your config.plist, only set AAPL,ig-platform-id - this is normally enough\n 2. If you boot and you get no graphics acceleration (7MB VRAM and solid background for dock), then you likely need to try different AAPL,ig-platform-id values, add stolenmem patches, or even add a device-id property.\n\nAAPL,IG-PLATFORM-ID   TYPE     COMMENT\n0900A53E              Laptop   Recommended value for UHD 630\n00009B3E              Laptop   Recommended value for UHD 620\n07009B3E              NUC      Recommended value for UHD 620/630\n0000A53E              NUC      Recommended value for UHD 655\n\n# Configuration Notes\n\n * For UHD 630 you likely do not need to fake the device-id as it is already 0x3E9B. If it's anything else, you may use device-id=9B3E0000:\n   * You can check under Device Manager in Windows by bring up the iGPU, opening properties, selecting details, and clicking Hardware IDs.\n\nKEY         TYPE   VALUE\ndevice-id   Data   9B3E0000\n\n * A UHD 620 in a Comet Lake CPU requires device-id=9B3E0000:\n\nKEY         TYPE   VALUE\ndevice-id   Data   9B3E0000\n\n * In some cases where you cannot set the DVMT-prealloc of these cards to 64MB higher in your UEFI Setup, you may get a kernel panic. Usually they're configured for 32MB of DVMT-prealloc, in that case these values are added to your iGPU Properties\n\nKEY                        TYPE   VALUE\nframebuffer-patch-enable   Data   01000000\nframebuffer-stolenmem      Data   00003001\nframebuffer-fbmem          Data   00009000\n\nPciRoot(0x0)/Pci(0x1b,0x0)\n\nlayout-id\n\n * Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs.\n * You can delete this property outright as it's unused for us at this time\n\nFor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present. More info on this is covered in the Post-Install Page\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons. For those with Coffee Lake Plus you can skip this section, but for those with Comet Lake CPUs see below\n\nComet Lake info\n\nComet Lake U62 CPUs require a spoof to Comet Lake U42 as macOS does not support these CPUs. You can check Device Manager in Windows to see if you have a Comet Lake U62 CPU:\n\n 1. Go to the \"Processors\" section\n 2. Double click on one of the CPUs\n 3. Click on the \"Details\" tab\n 4. Click on the \"Hardware ID\" field\n 5. If it says ACPI\\GenuineIntel_-_Intel64_Family_6_Model_166, you need to spoof:\n\n * Cpuid1Data: EC060800000000000000000000000000\n * Cpuid1Mask: FFFFFFFF000000000000000000000000\n\nOn Linux, you can use lscpu | grep \"Model:\". If the model is 166, you need to spoof.\n\nAnother way to check is with the OpenCore debug log:\n\n> 00:023 00:005 OCCPU: Found Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz\n> \n> 00:028 00:005 OCCPU: Signature A0660 Stepping 0 Model A6 Family 6 Type 0 ExtModel A ExtFamily 0 uCode C6\n\nIf the model is A6, you need to spoof.\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleXcpmCfgLock          YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\nThe reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS              DESCRIPTION\n-wegnoegpu             Used for disabling all other GPUs than the integrated Intel\n                       iGPU, useful for those wanting to run newer versions of\n                       macOS where their dGPU isn't supported\n-igfxnotelemetryload   Prevents iGPU telemetry from loading. iGPU telemetry may\n                       cause a freeze during startup on certain laptops such as\n                       Chromebooks on macOS 10.15 and higher, see here for more\n                       information.\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone.\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Coffee Lake Plus example, we'll chose the MacBookPro16,1 SMBIOS - this is done intentionally for compatibility's sake. The breakdown is as follows(note that the below SMBIOS require macOS 10.15, Catalina):\n\nSMBIOS           CPU TYPE             GPU TYPE                           DISPLAY SIZE   TOUCH ID\nMacBookPro16,1   Hexa/Octa Core 45W   iGPU: UHD 630 + dGPU: 5300/5500M   15\"            Yes\nMacBookPro16,3   Quad Core 15W        iGPU: Iris 645                     13\"            Yes\nMacBookPro16,4   Hexa/Octa Core 45W   iGPU: UHD 630 + dGPU: 5600M        15\"            Yes\nMacmini8,1       NUC Systems          HD 6000/Iris Pro 6200              N/A            No\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               MacBookPro16,1 SMBIOS Info            #\n#######################################################\n\nType:         MacBookPro16,1\nSerial:       C02XG0FDH7JY\nBoard Serial: C02839303QXH69FJA\nSmUUID:       DBB364D6-44B2-4A02-B922-AB4396F16DA8\n\n\n * Note: MacSerial currently does not support Linux, so you must grab a Windows or macOS machine to generate the MacBookPro16,2+ values\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                 ENABLED   COMMENT\nReleaseUsbOwnership   YES       \nUnblockFsConnect      NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * ReleaseUsbOwnership: YES\n   \n   * Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Most laptops have garbage firmwares so we'll need this as well\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Config reminders\n\nHP Users:\n\n * Kernel -> Quirks -> LapicKernelPanic -> True\n   * You will get a kernel panic on LAPIC otherwise\n * UEFI -> Quirks -> UnblockFsConnect -> True\n\nDell Users:\n\nFor Skylake and newer:\n\n * Kernel -> Quirk -> CustomSMBIOSGuid -> True\n * PlatformInfo -> UpdateSMBIOSMode -> Custom\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt(For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * DVMT Pre-Allocated(iGPU Memory): 64MB or higher\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# laptop coffee lake plus and comet lake\n\nsupport                      version\ninitial macos support(cfl)   macos 10.13, high sierra\ninitial macos support(cml)   macos 10.15, catalina\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-plug        allows for native cpu power management on haswell and newer,\n                 see getting started with acpi guide for more details.\nssdt-ec-usbx     fixes both the embedded controller and usb power, see\n                 getting started with acpi guide for more details.\nssdt-gpio        creates a stub so voodooi2c can connect, for those having\n                 troubles getting voodooi2c working can try ssdt-xosi\n                 instead. note that intel nucs do not need this\nssdt-pnlf        fixes brightness control, see getting started with acpi\n                 guide for more details. note that intel nucs do not need\n                 this\nssdt-awac        this is the 300 series rtc patch, required for most b360,\n                 b365, h310, h370, z390 and some z370 boards which prevent\n                 systems from booting macos. the alternative is ssdt-rtc0 for\n                 when awac ssdt is incompatible due to missing the legacy rtc\n                 clock, to check whether you need it and which to use please\n                 see getting started with acpi page.\nssdt-pmc         so true 300 series motherboards(non-z370) don't declare the\n                 fw chip as mmio in acpi and so xnu ignores the mmio region\n                 declared by the uefi memory map. this ssdt brings back nvram\n                 support. note that 10th gen cpus do not need this. see\n                 getting started with acpi guide for more details.\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\ninfo\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, we'll need the following:\n\n * osi rename\n   * this is required when using ssdt-xosi as we redirect all osi calls to this ssdt, this is not needed if you're using ssdt-gpio\n\ncomment   string    change _osi to xosi\nenabled   boolean   yes\ncount     number    0\nlimit     number    0\nfind      data      5f4f5349\nreplace   data      584f5349\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing devices to be pass-through to macos that are generally ignored, for us we can ignore this section.\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we need to change the following:\n\nquirk                    enabled   comment\ndevirtualisemmio         yes\nenablewriteunprotector   no\nprotectmemoryregions     yes\nprotectuefiservices      yes\nrebuildapplememorymap    yes\nsyncruntimepermissions   yes\n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc\n * devirtualisemmio: yes\n   * reduces stolen memory footprint, expands options for slide=n values and very helpful with fixing memory allocation issues on z390. requires protectuefiservices as well on icelake and z390 coffee lake\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: no\n   * this quirk and rebuildapplememorymap can commonly conflict, recommended to enable the latter on newer platforms and disable this entry.\n   * however, due to issues with oems not using the latest edkii builds you may find that the above combo will result in early boot failures. this is due to missing the memory_attribute_table and such we recommend disabling rebuildapplememorymap and enabling enablewriteunprotector. more info on this is covered in the troubleshooting section\n * protectmemoryregions: yes\n   * patches memory region types for incorrectly mapped csm/mmio regions. necessary for all chromebooks that utilize coreboot uefi firmware.\n * protectuefiservices: yes\n   * protects uefi services from being overridden by the firmware, mainly relevant for vms, icelake and z390 systems'\n   * if on z390, enable this quirk\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * rebuildapplememorymap: yes\n   * generates memory map compatible with macos, can break on some laptop oem firmwares so if you receive early boot failures disable this\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses, shouldn't be needed on skylake and newer. some firmware like gigabyte may still require it, and will kernel panic without this\n * syncruntimepermissions: yes\n   * fixes alignment with mat tables and required to boot windows and linux with mat tables, also recommended for macos. mainly relevant for rebuildapplememorymap users\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\npciroot(0x0)/pci(0x2,0x0)\n\nthis section is set up via whatevergreen's framebuffer patching guide and is used for setting important igpu properties.\n\nthe config.plist doesn't already have a section for this so you will have to create it manually.\n\nwhen setting up your igpu, the table below should help with finding the right values to set. here is an explanation of some values:\n\n * aapl,ig-platform-id\n   * this is used internally for setting up the igpu\n * type\n   * whether the entry is recommended for laptops(ie. with built-in displays) or for intel nucs(ie. stand alone boxes)\n\ngenerally follow these steps when setting up your igpu properties. follow the configuration notes below the table if they say anything different:\n\n 1. when initially setting up your config.plist, only set aapl,ig-platform-id - this is normally enough\n 2. if you boot and you get no graphics acceleration (7mb vram and solid background for dock), then you likely need to try different aapl,ig-platform-id values, add stolenmem patches, or even add a device-id property.\n\naapl,ig-platform-id   type     comment\n0900a53e              laptop   recommended value for uhd 630\n00009b3e              laptop   recommended value for uhd 620\n07009b3e              nuc      recommended value for uhd 620/630\n0000a53e              nuc      recommended value for uhd 655\n\n# configuration notes\n\n * for uhd 630 you likely do not need to fake the device-id as it is already 0x3e9b. if it's anything else, you may use device-id=9b3e0000:\n   * you can check under device manager in windows by bring up the igpu, opening properties, selecting details, and clicking hardware ids.\n\nkey         type   value\ndevice-id   data   9b3e0000\n\n * a uhd 620 in a comet lake cpu requires device-id=9b3e0000:\n\nkey         type   value\ndevice-id   data   9b3e0000\n\n * in some cases where you cannot set the dvmt-prealloc of these cards to 64mb higher in your uefi setup, you may get a kernel panic. usually they're configured for 32mb of dvmt-prealloc, in that case these values are added to your igpu properties\n\nkey                        type   value\nframebuffer-patch-enable   data   01000000\nframebuffer-stolenmem      data   00003001\nframebuffer-fbmem          data   00009000\n\npciroot(0x0)/pci(0x1b,0x0)\n\nlayout-id\n\n * applies applealc audio injection, you'll need to do your own research on which codec your motherboard has and match it with applealc's layout. applealc supported codecs.\n * you can delete this property outright as it's unused for us at this time\n\nfor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-ids present. more info on this is covered in the post-install page\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus like pentiums and celerons. for those with coffee lake plus you can skip this section, but for those with comet lake cpus see below\n\ncomet lake info\n\ncomet lake u62 cpus require a spoof to comet lake u42 as macos does not support these cpus. you can check device manager in windows to see if you have a comet lake u62 cpu:\n\n 1. go to the \"processors\" section\n 2. double click on one of the cpus\n 3. click on the \"details\" tab\n 4. click on the \"hardware id\" field\n 5. if it says acpi\\genuineintel_-_intel64_family_6_model_166, you need to spoof:\n\n * cpuid1data: ec060800000000000000000000000000\n * cpuid1mask: ffffffff000000000000000000000000\n\non linux, you can use lscpu | grep \"model:\". if the model is 166, you need to spoof.\n\nanother way to check is with the opencore debug log:\n\n> 00:023 00:005 occpu: found intel(r) core(tm) i5-10210u cpu @ 1.60ghz\n> \n> 00:028 00:005 occpu: signature a0660 stepping 0 model a6 family 6 type 0 extmodel a extfamily 0 ucode c6\n\nif the model is a6, you need to spoof.\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplexcpmcfglock          yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\nthe reason being is that usbinjectall reimplements builtin macos functionality without proper current tuning. it is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args              description\n-wegnoegpu             used for disabling all other gpus than the integrated intel\n                       igpu, useful for those wanting to run newer versions of\n                       macos where their dgpu isn't supported\n-igfxnotelemetryload   prevents igpu telemetry from loading. igpu telemetry may\n                       cause a freeze during startup on certain laptops such as\n                       chromebooks on macos 10.15 and higher, see here for more\n                       information.\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone.\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this coffee lake plus example, we'll chose the macbookpro16,1 smbios - this is done intentionally for compatibility's sake. the breakdown is as follows(note that the below smbios require macos 10.15, catalina):\n\nsmbios           cpu type             gpu type                           display size   touch id\nmacbookpro16,1   hexa/octa core 45w   igpu: uhd 630 + dgpu: 5300/5500m   15\"            yes\nmacbookpro16,3   quad core 15w        igpu: iris 645                     13\"            yes\nmacbookpro16,4   hexa/octa core 45w   igpu: uhd 630 + dgpu: 5600m        15\"            yes\nmacmini8,1       nuc systems          hd 6000/iris pro 6200              n/a            no\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               macbookpro16,1 smbios info            #\n#######################################################\n\ntype:         macbookpro16,1\nserial:       c02xg0fdh7jy\nboard serial: c02839303qxh69fja\nsmuuid:       dbb364d6-44b2-4a02-b922-ab4396f16da8\n\n\n * note: macserial currently does not support linux, so you must grab a windows or macos machine to generate the macbookpro16,2+ values\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                 enabled   comment\nreleaseusbownership   yes       \nunblockfsconnect      no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * releaseusbownership: yes\n   \n   * releases usb controller from firmware driver, needed for when your firmware doesn't support ehci/xhci handoff. most laptops have garbage firmwares so we'll need this as well\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# config reminders\n\nhp users:\n\n * kernel -> quirks -> lapickernelpanic -> true\n   * you will get a kernel panic on lapic otherwise\n * uefi -> quirks -> unblockfsconnect -> true\n\ndell users:\n\nfor skylake and newer:\n\n * kernel -> quirk -> customsmbiosguid -> true\n * platforminfo -> updatesmbiosmode -> custom\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt(for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applexcpmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * dvmt pre-allocated(igpu memory): 64mb or higher\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{cjk:!0}},{title:"Laptop Coffee Lake and Whiskey Lake",frontmatter:{},regularPath:"/config-laptop.plist/coffee-lake.html",relativePath:"config-laptop.plist/coffee-lake.md",key:"v-79bd6d14",path:"/config-laptop.plist/coffee-lake.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:215},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1444},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1455},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:3433},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:3518},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:3978},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:4086},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:4223},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:3978},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:6320},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1455},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:3433},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:9174},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1455},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:11383},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:11525},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:11726},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:3518},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:3978},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:15002},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:16152},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:4086},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:16603},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:17503},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:19845},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:19914},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:20032},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:4741},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1455},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:3433},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:24269},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:25599},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:4702},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:27608},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:14298},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:29098},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:29340},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:29550},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:29935},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:3978},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:27298},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:31557},{level:3,title:"Config reminders",slug:"config-reminders",normalizedTitle:"config reminders",charIndex:31877},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:32187},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:12054},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3848}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Config reminders Intel BIOS settings Disable Enable",content:"# Laptop Coffee Lake and Whiskey Lake\n\nSUPPORT                                VERSION\nInitial macOS Support (Coffee Lake)    macOS 10.13, High Sierra\nInitial macOS Support (Whiskey Lake)   macOS 10.14.1, Mojave\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-PLUG        Allows for native CPU power management on Haswell and newer,\n                 see Getting Started With ACPI Guide for more details.\nSSDT-EC-USBX     Fixes both the embedded controller and USB power, see\n                 Getting Started With ACPI Guide for more details.\nSSDT-GPIO        Creates a stub so VoodooI2C can connect, for those having\n                 troubles getting VoodooI2C working can try SSDT-XOSI\n                 instead. Note that Intel NUCs do not need this\nSSDT-PNLF        Fixes brightness control, see Getting Started With ACPI\n                 Guide for more details. Note that Intel NUCs do not need\n                 this\nSSDT-AWAC        This is the 300 series RTC patch, required for most B360,\n                 B365, H310, H370, Z390 and some Z370 boards which prevent\n                 systems from booting macOS. The alternative is SSDT-RTC0 for\n                 when AWAC SSDT is incompatible due to missing the Legacy RTC\n                 clock, to check whether you need it and which to use please\n                 see Getting started with ACPI page.\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nInfo\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need the following:\n\n * OSI rename\n   * This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT, this is not needed if you're using SSDT-GPIO\n\nCOMMENT   STRING    CHANGE _OSI TO XOSI\nEnabled   Boolean   YES\nCount     Number    0\nLimit     Number    0\nFind      Data      5f4f5349\nReplace   Data      584f5349\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be pass-through to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we need to change the following:\n\nQUIRK                    ENABLED   COMMENT\nEnableWriteUnprotector   NO\nProtectMemoryRegions     YES\nRebuildAppleMemoryMap    YES\nSyncRuntimePermissions   YES\n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: NO\n   * This quirk and RebuildAppleMemoryMap can commonly conflict, recommended to enable the latter on newer platforms and disable this entry.\n   * However, due to issues with OEMs not using the latest EDKII builds you may find that the above combo will result in early boot failures. This is due to missing the MEMORY_ATTRIBUTE_TABLE and such we recommend disabling RebuildAppleMemoryMap and enabling EnableWriteUnprotector. More info on this is covered in the troubleshooting section\n * ProtectMemoryRegions: YES\n   * Patches memory region types for incorrectly mapped CSM/MMIO regions. Necessary for all Chromebooks that utilize coreboot UEFI firmware.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * RebuildAppleMemoryMap: YES\n   * Generates Memory Map compatible with macOS, can break on some laptop OEM firmwares so if you receive early boot failures disable this\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses\n * SyncRuntimePermissions: YES\n   * Fixes alignment with MAT tables and required to boot Windows and Linux with MAT tables, also recommended for macOS. Mainly relevant for RebuildAppleMemoryMap users\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\nThis section is set up via WhateverGreen's Framebuffer Patching Guide and is used for setting important iGPU properties.\n\nThe config.plist doesn't already have a section for this so you will have to create it manually.\n\nWhen setting up your iGPU, the table below should help with finding the right values to set. Here is an explanation of some values:\n\n * AAPL,ig-platform-id\n   * This is used internally for setting up the iGPU\n * Type\n   * Whether the entry is recommended for laptops(ie. with built-in displays) or for Intel NUCs(ie. stand alone boxes)\n\nGenerally follow these steps when setting up your iGPU properties. Follow the configuration notes below the table if they say anything different:\n\n 1. When initially setting up your config.plist, only set AAPL,ig-platform-id - this is normally enough\n 2. If you boot and you get no graphics acceleration (7MB VRAM and solid background for dock), then you likely need to try different AAPL,ig-platform-id values, add stolenmem patches, or even add a device-id property.\n\nAAPL,IG-PLATFORM-ID   TYPE     COMMENT\n0900A53E              Laptop   Recommended value for UHD 630\n00009B3E              Laptop   Recommended value for UHD 620\n07009B3E              NUC      Recommended value for UHD 620/630\n0000A53E              NUC      Recommended value for UHD 655\n\n# Configuration Notes\n\n * For UHD 630 you likely do not need to fake the device-id as it is already 0x3E9B. If it's anything else, you may use device-id=9B3E0000:\n   * You can check under Device Manager in Windows by bring up the iGPU, opening properties, selecting details, and clicking Hardware IDs.\n\nKEY         TYPE   VALUE\ndevice-id   Data   9B3E0000\n\n * A UHD 620 in a Coffee Lake CPU requires device-id=9B3E0000:\n\nKEY         TYPE   VALUE\ndevice-id   Data   9B3E0000\n\n * In some cases where you cannot set the DVMT-prealloc of these cards to 64MB higher in your UEFI Setup, you may get a kernel panic. Usually they're configured for 32MB of DVMT-prealloc, in that case these values are added to your iGPU Properties\n\nKEY                        TYPE   VALUE\nframebuffer-patch-enable   Data   01000000\nframebuffer-stolenmem      Data   00003001\nframebuffer-fbmem          Data   00009000\n\nPciRoot(0x0)/Pci(0x1b,0x0)\n\nlayout-id\n\n * Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs.\n * You can delete this property outright as it's unused for us at this time\n\nFor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present. More info on this is covered in the Post-Install Page\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons\n\n * Cpuid1Mask: Leave this blank\n * Cpuid1Data: Leave this blank\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleXcpmCfgLock          YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\nThe reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS              DESCRIPTION\n-wegnoegpu             Used for disabling all other GPUs than the integrated Intel\n                       iGPU, useful for those wanting to run newer versions of\n                       macOS where their dGPU isn't supported\n-igfxnotelemetryload   Prevents iGPU telemetry from loading. iGPU telemetry may\n                       cause a freeze during startup on certain laptops such as\n                       Chromebooks on macOS 10.15 and higher, see here for more\n                       information.\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone.\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Coffee Lake example, we'll chose the MacBookPro15,1 SMBIOS - this is done intentionally for compatibility's sake. The breakdown is as follows:\n\nSMBIOS           CPU TYPE        GPU TYPE                                     DISPLAY SIZE   TOUCH ID\nMacBookPro15,1   Hexa Core 45W   iGPU: UHD 630 + dGPU: Radeon Pro 555X/560X   15\"            Yes\nMacBookPro15,2   Quad Core 15W   iGPU: Iris 655                               13\"            Yes\nMacBookPro15,3   Hexa Core 45W   iGPU: UHD 630 + dGPU: Vega 16/20             15\"            Yes\nMacBookPro15,4   Quad Core 15W   iGPU: Iris 645                               13\"            Yes\nMacmini8,1       NUC Systems     HD 6000/Iris Pro 6200                        N/A            No\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               MacBookPro15,1 SMBIOS Info            #\n#######################################################\n\nType:         MacBookPro15,1\nSerial:       C02XG0FDH7JY\nBoard Serial: C02839303QXH69FJA\nSmUUID:       DBB364D6-44B2-4A02-B922-AB4396F16DA8\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                 ENABLED   COMMENT\nReleaseUsbOwnership   YES       \nUnblockFsConnect      NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * ReleaseUsbOwnership: YES\n   \n   * Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Most laptops have garbage firmwares so we'll need this as well\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Config reminders\n\nHP Users:\n\n * Kernel -> Quirks -> LapicKernelPanic -> True\n   * You will get a kernel panic on LAPIC otherwise\n * UEFI -> Quirks -> UnblockFsConnect -> True\n\nDell Users:\n\nFor Skylake and newer:\n\n * Kernel -> Quirk -> CustomSMBIOSGuid -> True\n * PlatformInfo -> UpdateSMBIOSMode -> Custom\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt(For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * DVMT Pre-Allocated(iGPU Memory): 64MB or higher\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# laptop coffee lake and whiskey lake\n\nsupport                                version\ninitial macos support (coffee lake)    macos 10.13, high sierra\ninitial macos support (whiskey lake)   macos 10.14.1, mojave\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-plug        allows for native cpu power management on haswell and newer,\n                 see getting started with acpi guide for more details.\nssdt-ec-usbx     fixes both the embedded controller and usb power, see\n                 getting started with acpi guide for more details.\nssdt-gpio        creates a stub so voodooi2c can connect, for those having\n                 troubles getting voodooi2c working can try ssdt-xosi\n                 instead. note that intel nucs do not need this\nssdt-pnlf        fixes brightness control, see getting started with acpi\n                 guide for more details. note that intel nucs do not need\n                 this\nssdt-awac        this is the 300 series rtc patch, required for most b360,\n                 b365, h310, h370, z390 and some z370 boards which prevent\n                 systems from booting macos. the alternative is ssdt-rtc0 for\n                 when awac ssdt is incompatible due to missing the legacy rtc\n                 clock, to check whether you need it and which to use please\n                 see getting started with acpi page.\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\ninfo\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, we'll need the following:\n\n * osi rename\n   * this is required when using ssdt-xosi as we redirect all osi calls to this ssdt, this is not needed if you're using ssdt-gpio\n\ncomment   string    change _osi to xosi\nenabled   boolean   yes\ncount     number    0\nlimit     number    0\nfind      data      5f4f5349\nreplace   data      584f5349\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be pass-through to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we need to change the following:\n\nquirk                    enabled   comment\nenablewriteunprotector   no\nprotectmemoryregions     yes\nrebuildapplememorymap    yes\nsyncruntimepermissions   yes\n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: no\n   * this quirk and rebuildapplememorymap can commonly conflict, recommended to enable the latter on newer platforms and disable this entry.\n   * however, due to issues with oems not using the latest edkii builds you may find that the above combo will result in early boot failures. this is due to missing the memory_attribute_table and such we recommend disabling rebuildapplememorymap and enabling enablewriteunprotector. more info on this is covered in the troubleshooting section\n * protectmemoryregions: yes\n   * patches memory region types for incorrectly mapped csm/mmio regions. necessary for all chromebooks that utilize coreboot uefi firmware.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * rebuildapplememorymap: yes\n   * generates memory map compatible with macos, can break on some laptop oem firmwares so if you receive early boot failures disable this\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses\n * syncruntimepermissions: yes\n   * fixes alignment with mat tables and required to boot windows and linux with mat tables, also recommended for macos. mainly relevant for rebuildapplememorymap users\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\npciroot(0x0)/pci(0x2,0x0)\n\nthis section is set up via whatevergreen's framebuffer patching guide and is used for setting important igpu properties.\n\nthe config.plist doesn't already have a section for this so you will have to create it manually.\n\nwhen setting up your igpu, the table below should help with finding the right values to set. here is an explanation of some values:\n\n * aapl,ig-platform-id\n   * this is used internally for setting up the igpu\n * type\n   * whether the entry is recommended for laptops(ie. with built-in displays) or for intel nucs(ie. stand alone boxes)\n\ngenerally follow these steps when setting up your igpu properties. follow the configuration notes below the table if they say anything different:\n\n 1. when initially setting up your config.plist, only set aapl,ig-platform-id - this is normally enough\n 2. if you boot and you get no graphics acceleration (7mb vram and solid background for dock), then you likely need to try different aapl,ig-platform-id values, add stolenmem patches, or even add a device-id property.\n\naapl,ig-platform-id   type     comment\n0900a53e              laptop   recommended value for uhd 630\n00009b3e              laptop   recommended value for uhd 620\n07009b3e              nuc      recommended value for uhd 620/630\n0000a53e              nuc      recommended value for uhd 655\n\n# configuration notes\n\n * for uhd 630 you likely do not need to fake the device-id as it is already 0x3e9b. if it's anything else, you may use device-id=9b3e0000:\n   * you can check under device manager in windows by bring up the igpu, opening properties, selecting details, and clicking hardware ids.\n\nkey         type   value\ndevice-id   data   9b3e0000\n\n * a uhd 620 in a coffee lake cpu requires device-id=9b3e0000:\n\nkey         type   value\ndevice-id   data   9b3e0000\n\n * in some cases where you cannot set the dvmt-prealloc of these cards to 64mb higher in your uefi setup, you may get a kernel panic. usually they're configured for 32mb of dvmt-prealloc, in that case these values are added to your igpu properties\n\nkey                        type   value\nframebuffer-patch-enable   data   01000000\nframebuffer-stolenmem      data   00003001\nframebuffer-fbmem          data   00009000\n\npciroot(0x0)/pci(0x1b,0x0)\n\nlayout-id\n\n * applies applealc audio injection, you'll need to do your own research on which codec your motherboard has and match it with applealc's layout. applealc supported codecs.\n * you can delete this property outright as it's unused for us at this time\n\nfor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-ids present. more info on this is covered in the post-install page\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus like pentiums and celerons\n\n * cpuid1mask: leave this blank\n * cpuid1data: leave this blank\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplexcpmcfglock          yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\nthe reason being is that usbinjectall reimplements builtin macos functionality without proper current tuning. it is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args              description\n-wegnoegpu             used for disabling all other gpus than the integrated intel\n                       igpu, useful for those wanting to run newer versions of\n                       macos where their dgpu isn't supported\n-igfxnotelemetryload   prevents igpu telemetry from loading. igpu telemetry may\n                       cause a freeze during startup on certain laptops such as\n                       chromebooks on macos 10.15 and higher, see here for more\n                       information.\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone.\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this coffee lake example, we'll chose the macbookpro15,1 smbios - this is done intentionally for compatibility's sake. the breakdown is as follows:\n\nsmbios           cpu type        gpu type                                     display size   touch id\nmacbookpro15,1   hexa core 45w   igpu: uhd 630 + dgpu: radeon pro 555x/560x   15\"            yes\nmacbookpro15,2   quad core 15w   igpu: iris 655                               13\"            yes\nmacbookpro15,3   hexa core 45w   igpu: uhd 630 + dgpu: vega 16/20             15\"            yes\nmacbookpro15,4   quad core 15w   igpu: iris 645                               13\"            yes\nmacmini8,1       nuc systems     hd 6000/iris pro 6200                        n/a            no\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               macbookpro15,1 smbios info            #\n#######################################################\n\ntype:         macbookpro15,1\nserial:       c02xg0fdh7jy\nboard serial: c02839303qxh69fja\nsmuuid:       dbb364d6-44b2-4a02-b922-ab4396f16da8\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                 enabled   comment\nreleaseusbownership   yes       \nunblockfsconnect      no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * releaseusbownership: yes\n   \n   * releases usb controller from firmware driver, needed for when your firmware doesn't support ehci/xhci handoff. most laptops have garbage firmwares so we'll need this as well\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# config reminders\n\nhp users:\n\n * kernel -> quirks -> lapickernelpanic -> true\n   * you will get a kernel panic on lapic otherwise\n * uefi -> quirks -> unblockfsconnect -> true\n\ndell users:\n\nfor skylake and newer:\n\n * kernel -> quirk -> customsmbiosguid -> true\n * platforminfo -> updatesmbiosmode -> custom\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt(for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applexcpmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * dvmt pre-allocated(igpu memory): 64mb or higher\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Laptop Haswell",frontmatter:{},regularPath:"/config-laptop.plist/haswell.html",relativePath:"config-laptop.plist/haswell.md",key:"v-050f7914",path:"/config-laptop.plist/haswell.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:215},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1444},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1455},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2978},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:3063},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:3523},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:3631},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:3768},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:3523},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:4793},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1455},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2978},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:7345},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1455},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:9554},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:9696},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:9897},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:3063},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:3523},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:13316},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:14466},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:3631},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:14917},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:15817},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:18159},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:18228},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:18346},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:4117},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1455},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2978},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:22267},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:23859},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:4078},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:25873},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:12612},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:27363},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:27605},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:27815},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:28200},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:3523},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:25563},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:30018},{level:3,title:"Config reminders",slug:"config-reminders",normalizedTitle:"config reminders",charIndex:30338},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:30517},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:10368},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3393}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Config reminders Intel BIOS settings Disable Enable",content:"# Laptop Haswell\n\nSUPPORT                 VERSION\nInitial macOS Support   OS X 10.8, Mountain Lion\nLast Supported OS       macOS 12 Monterey\nNote                    For Ventura information, see macOS 13 Ventura\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-PLUG        Allows for native CPU power management on Haswell and newer,\n                 see Getting Started With ACPI Guide for more details.\nSSDT-EC          Fixes the embedded controller, see Getting Started With ACPI\n                 Guide for more details.\nSSDT-GPIO        Creates a stub so VoodooI2C can connect, for those having\n                 troubles getting VoodooI2C working can try SSDT-XOSI\n                 instead. Note that Intel NUCs do not need this\nSSDT-PNLF        Fixes brightness control, see Getting Started With ACPI\n                 Guide for more details. Note that Intel NUCs do not need\n                 this\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nInfo\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need the following:\n\n * OSI rename\n   * This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT, this is not needed if you're using SSDT-GPIO\n\nCOMMENT   STRING    CHANGE _OSI TO XOSI\nEnabled   Boolean   YES\nCount     Number    0\nLimit     Number    0\nFind      Data      5f4f5349\nReplace   Data      584f5349\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be pass-through to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: YES\n   * Needed to remove write protection from CR0 register.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses, required for Gigabyte boards to resolve early kernel panics\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\nThis section is set up via WhateverGreen's Framebuffer Patching Guide and is used for setting important iGPU properties.\n\nThe config.plist doesn't already have a section for this so you will have to create it manually.\n\nWhen setting up your iGPU, the table below should help with finding the right values to set. Here is an explanation of some values:\n\n * AAPL,ig-platform-id\n   * This is used internally for setting up the iGPU\n * Type\n   * Whether the entry is recommended for laptops(ie. with built-in displays) or for Intel NUCs(ie. stand alone boxes)\n\nGenerally follow these steps when setting up your iGPU properties. Follow the configuration notes below the table if they say anything different:\n\n 1. When initially setting up your config.plist, only set AAPL,ig-platform-id - this is normally enough\n 2. If you boot and you get no graphics acceleration (7MB VRAM and solid background for dock), then you likely need to try different AAPL,ig-platform-id values, add stolenmem patches, or even add a device-id property.\n\nAAPL,IG-PLATFORM-ID   TYPE     COMMENT\n0500260A              Laptop   To be used usually with HD 5000, HD 5100 and HD 5200\n0600260A              Laptop   To be used usually with HD 4200, HD 4400 and HD 4600, you\n                               must use a device-id(see below)\n0300220D              NUC      To be used usually with all Haswell NUCs, HD 4200/4400/4600\n                               must use a device-id(see below)\n\n# Configuration Notes\n\nIn addition to the AAPL,ig-platform-id, you'll want to add the cursor byte size patch from 6MB (00006000) to 9MB because of some glitches:\n\nKEY                        TYPE   VALUE\nframebuffer-patch-enable   Data   01000000\nframebuffer-cursormem      Data   00009000\n\nSpecial note for HD 4200, HD 4400 and HD 4600:\n\nYou will also require a device-id spoof to be supported:\n\nKEY         TYPE   VALUE\ndevice-id   Data   12040000\n\nPciRoot(0x0)/Pci(0x1b,0x0)\n\nlayout-id\n\n * Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs.\n * You can delete this property outright as it's unused for us at this time\n\nFor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present. More info on this is covered in the Post-Install Page\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons\n\n * Cpuid1Mask: Leave this blank\n * Cpuid1Data: Leave this blank\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleCpuPmCfgLock         NO        Need if running 10.10 or older and cannot disable CFG-Lock\n                                    in the BIOS\nAppleXcpmCfgLock          YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\nThe reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS    DESCRIPTION\n-wegnoegpu   Used for disabling all other GPUs than the integrated Intel\n             iGPU, useful for those wanting to run newer versions of\n             macOS where their dGPU isn't supported\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone.\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Haswell example, we chose the MacBookPro11,1 SMBIOS. The typical breakdown is as follows:\n\nSMBIOS           CPU TYPE        GPU TYPE                               DISPLAY SIZE\nMacBookAir6,1    Dual Core 15W   iGPU: HD 5000                          11\"\nMacBookAir6,2    Dual Core 15W   iGPU: HD 5000                          13\"\nMacBookPro11,1   Dual Core 28W   iGPU: Iris 5100                        13\"\nMacBookPro11,2   Quad Core 45W   iGPU: Iris Pro 5200                    15\"\nMacBookPro11,3   Quad Core 45W   iGPU: Iris Pro 5200 + dGPU: GT 750M    15\"\nMacBookPro11,4   Quad Core 45W   iGPU: Iris Pro 5200                    15\"\nMacBookPro11,5   Quad Core 45W   iGPU: Iris Pro 5200 + dGPU: R9 M370X   15\"\nMacmini7,1       NUC Systems     HD 5000/Iris 5100                      N/A\n\nNote: For macOS Monterey, only the following SMBIOS are supported\n\nMonterey SMBIOS table\n\nSMBIOS           HARDWARE\nMacBookPro11,4   Quad Core 45W\nMacBookPro11,5   Quad Core 45W\nMacmini7,1       NUC Systems\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               MacBookPro11,1 SMBIOS Info            #\n#######################################################\n\nType:         MacBookPro11,1\nSerial:       C02M9SYJFY10\nBoard Serial: C02408101J9G2Y7A8\nSmUUID:       7B227BEC-660D-405F-8E60-411B3E4EF055\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n:::\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                    ENABLED   COMMENT\nIgnoreInvalidFlexRatio   YES       \nReleaseUsbOwnership      YES       \nUnblockFsConnect         NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * IgnoreInvalidFlexRatio: YES\n   \n   * Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-Skylake based systems\n\n * ReleaseUsbOwnership: YES\n   \n   * Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Most laptops have garbage firmwares so we'll need this as well\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Config reminders\n\nHP Users:\n\n * Kernel -> Quirks -> LapicKernelPanic -> True\n   * You will get a kernel panic on LAPIC otherwise\n * UEFI -> Quirks -> UnblockFsConnect -> True\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt(For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n   * For 10.10 and older, you'll need to enable AppleCpuPmCfgLock as well\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * DVMT Pre-Allocated(iGPU Memory): 64MB or higher\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# laptop haswell\n\nsupport                 version\ninitial macos support   os x 10.8, mountain lion\nlast supported os       macos 12 monterey\nnote                    for ventura information, see macos 13 ventura\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-plug        allows for native cpu power management on haswell and newer,\n                 see getting started with acpi guide for more details.\nssdt-ec          fixes the embedded controller, see getting started with acpi\n                 guide for more details.\nssdt-gpio        creates a stub so voodooi2c can connect, for those having\n                 troubles getting voodooi2c working can try ssdt-xosi\n                 instead. note that intel nucs do not need this\nssdt-pnlf        fixes brightness control, see getting started with acpi\n                 guide for more details. note that intel nucs do not need\n                 this\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\ninfo\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, we'll need the following:\n\n * osi rename\n   * this is required when using ssdt-xosi as we redirect all osi calls to this ssdt, this is not needed if you're using ssdt-gpio\n\ncomment   string    change _osi to xosi\nenabled   boolean   yes\ncount     number    0\nlimit     number    0\nfind      data      5f4f5349\nreplace   data      584f5349\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be pass-through to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: yes\n   * needed to remove write protection from cr0 register.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses, required for gigabyte boards to resolve early kernel panics\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\npciroot(0x0)/pci(0x2,0x0)\n\nthis section is set up via whatevergreen's framebuffer patching guide and is used for setting important igpu properties.\n\nthe config.plist doesn't already have a section for this so you will have to create it manually.\n\nwhen setting up your igpu, the table below should help with finding the right values to set. here is an explanation of some values:\n\n * aapl,ig-platform-id\n   * this is used internally for setting up the igpu\n * type\n   * whether the entry is recommended for laptops(ie. with built-in displays) or for intel nucs(ie. stand alone boxes)\n\ngenerally follow these steps when setting up your igpu properties. follow the configuration notes below the table if they say anything different:\n\n 1. when initially setting up your config.plist, only set aapl,ig-platform-id - this is normally enough\n 2. if you boot and you get no graphics acceleration (7mb vram and solid background for dock), then you likely need to try different aapl,ig-platform-id values, add stolenmem patches, or even add a device-id property.\n\naapl,ig-platform-id   type     comment\n0500260a              laptop   to be used usually with hd 5000, hd 5100 and hd 5200\n0600260a              laptop   to be used usually with hd 4200, hd 4400 and hd 4600, you\n                               must use a device-id(see below)\n0300220d              nuc      to be used usually with all haswell nucs, hd 4200/4400/4600\n                               must use a device-id(see below)\n\n# configuration notes\n\nin addition to the aapl,ig-platform-id, you'll want to add the cursor byte size patch from 6mb (00006000) to 9mb because of some glitches:\n\nkey                        type   value\nframebuffer-patch-enable   data   01000000\nframebuffer-cursormem      data   00009000\n\nspecial note for hd 4200, hd 4400 and hd 4600:\n\nyou will also require a device-id spoof to be supported:\n\nkey         type   value\ndevice-id   data   12040000\n\npciroot(0x0)/pci(0x1b,0x0)\n\nlayout-id\n\n * applies applealc audio injection, you'll need to do your own research on which codec your motherboard has and match it with applealc's layout. applealc supported codecs.\n * you can delete this property outright as it's unused for us at this time\n\nfor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-ids present. more info on this is covered in the post-install page\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus like pentiums and celerons\n\n * cpuid1mask: leave this blank\n * cpuid1data: leave this blank\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplecpupmcfglock         no        need if running 10.10 or older and cannot disable cfg-lock\n                                    in the bios\napplexcpmcfglock          yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\nthe reason being is that usbinjectall reimplements builtin macos functionality without proper current tuning. it is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args    description\n-wegnoegpu   used for disabling all other gpus than the integrated intel\n             igpu, useful for those wanting to run newer versions of\n             macos where their dgpu isn't supported\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone.\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this haswell example, we chose the macbookpro11,1 smbios. the typical breakdown is as follows:\n\nsmbios           cpu type        gpu type                               display size\nmacbookair6,1    dual core 15w   igpu: hd 5000                          11\"\nmacbookair6,2    dual core 15w   igpu: hd 5000                          13\"\nmacbookpro11,1   dual core 28w   igpu: iris 5100                        13\"\nmacbookpro11,2   quad core 45w   igpu: iris pro 5200                    15\"\nmacbookpro11,3   quad core 45w   igpu: iris pro 5200 + dgpu: gt 750m    15\"\nmacbookpro11,4   quad core 45w   igpu: iris pro 5200                    15\"\nmacbookpro11,5   quad core 45w   igpu: iris pro 5200 + dgpu: r9 m370x   15\"\nmacmini7,1       nuc systems     hd 5000/iris 5100                      n/a\n\nnote: for macos monterey, only the following smbios are supported\n\nmonterey smbios table\n\nsmbios           hardware\nmacbookpro11,4   quad core 45w\nmacbookpro11,5   quad core 45w\nmacmini7,1       nuc systems\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               macbookpro11,1 smbios info            #\n#######################################################\n\ntype:         macbookpro11,1\nserial:       c02m9syjfy10\nboard serial: c02408101j9g2y7a8\nsmuuid:       7b227bec-660d-405f-8e60-411b3e4ef055\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n:::\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                    enabled   comment\nignoreinvalidflexratio   yes       \nreleaseusbownership      yes       \nunblockfsconnect         no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * ignoreinvalidflexratio: yes\n   \n   * fix for when msr_flex_ratio (0x194) can't be disabled in the bios, required for all pre-skylake based systems\n\n * releaseusbownership: yes\n   \n   * releases usb controller from firmware driver, needed for when your firmware doesn't support ehci/xhci handoff. most laptops have garbage firmwares so we'll need this as well\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# config reminders\n\nhp users:\n\n * kernel -> quirks -> lapickernelpanic -> true\n   * you will get a kernel panic on lapic otherwise\n * uefi -> quirks -> unblockfsconnect -> true\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt(for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applexcpmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n   * for 10.10 and older, you'll need to enable applecpupmcfglock as well\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * dvmt pre-allocated(igpu memory): 64mb or higher\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Laptop Icelake",frontmatter:{},regularPath:"/config-laptop.plist/icelake.html",relativePath:"config-laptop.plist/icelake.md",key:"v-09b461b6",path:"/config-laptop.plist/icelake.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:100},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1329},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1340},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:3392},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:3477},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:3937},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:4045},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:4182},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:3937},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:6823},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1340},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:3392},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:8967},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1340},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:11176},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:11318},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:11519},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:3477},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:3937},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:14795},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:15945},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:4045},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:16396},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:17296},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:19638},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:19707},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:19825},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:4782},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1340},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:3392},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:24337},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:25426},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:4743},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:27435},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:14091},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:28925},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:29167},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:29377},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:29762},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:3937},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:27125},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:31384},{level:3,title:"Config reminders",slug:"config-reminders",normalizedTitle:"config reminders",charIndex:31704},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:31990},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:11847},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3807}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Config reminders Intel BIOS settings Disable Enable",content:"# Laptop Icelake\n\nSUPPORT                 VERSION\nInitial macOS Support   macOS 10.15, Catalina\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-PLUG        Allows for native CPU power management on Haswell and newer,\n                 see Getting Started With ACPI Guide for more details.\nSSDT-EC-USBX     Fixes both the embedded controller and USB power, see\n                 Getting Started With ACPI Guide for more details.\nSSDT-GPIO        Creates a stub so VoodooI2C can connect, for those having\n                 troubles getting VoodooI2C working can try SSDT-XOSI\n                 instead. Note that Intel NUCs do not need this\nSSDT-PNLF        Fixes brightness control, see Getting Started With ACPI\n                 Guide for more details. Note that Intel NUCs do not need\n                 this\nSSDT-AWAC        This is the 300 series RTC patch, required for most B360,\n                 B365, H310, H370, Z390 and some Z370 boards which prevent\n                 systems from booting macOS. The alternative is SSDT-RTC0 for\n                 when AWAC SSDT is incompatible due to missing the Legacy RTC\n                 clock, to check whether you need it and which to use please\n                 see Getting started with ACPI page.\nSSDT-RHUB        Needed to fix Root-device errors on many Icelake laptops\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nInfo\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need the following:\n\n * OSI rename\n   * This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT, this is not needed if you're using SSDT-GPIO\n\nCOMMENT   STRING    CHANGE _OSI TO XOSI\nEnabled   Boolean   YES\nCount     Number    0\nLimit     Number    0\nFind      Data      5f4f5349\nReplace   Data      584f5349\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing devices to be pass-through to macOS that are generally ignored, for us we can ignore this section.\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we need to change the following:\n\nQUIRK                    ENABLED   COMMENT\nDevirtualiseMmio         YES\nEnableWriteUnprotector   NO\nProtectMemoryRegions     YES\n\nProtectUefiServices      YES\nRebuildAppleMemoryMap    YES\nSetupVirtualMap          NO\nSyncRuntimePermissions   YES\n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc\n * DevirtualiseMmio: YES\n   * Reduces Stolen Memory Footprint, expands options for slide=N values and very helpful with fixing Memory Allocation issues on Z390. Requires ProtectUefiServices as well on IceLake and Z390 Coffee Lake\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: NO\n   * This quirk and RebuildAppleMemoryMap can commonly conflict, recommended to enable the latter on newer platforms and disable this entry.\n   * However, due to issues with OEMs not using the latest EDKII builds you may find that the above combo will result in early boot failures. This is due to missing the MEMORY_ATTRIBUTE_TABLE and such we recommend disabling RebuildAppleMemoryMap and enabling EnableWriteUnprotector. More info on this is covered in the troubleshooting section\n * ProtectMemoryRegions: YES\n   * Patches memory region types for incorrectly mapped CSM/MMIO regions. Necessary for all Chromebooks that utilize coreboot UEFI firmware.\n * ProtectUefiServices: YES\n   * Protects UEFI services from being overridden by the firmware, mainly relevant for VMs, Icelake and Z390 systems'\n   * If on Z390, enable this quirk\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * RebuildAppleMemoryMap: YES\n   * Generates Memory Map compatible with macOS, can break on some laptop OEM firmwares so if you receive early boot failures disable this\n * SetupVirtualMap: NO\n   * Fixes SetVirtualAddresses calls to virtual addresses, can cause early kernel panics on Ice Lake machines\n * SyncRuntimePermissions: YES\n   * Fixes alignment with MAT tables and required to boot Windows and Linux with MAT tables, also recommended for macOS. Mainly relevant for RebuildAppleMemoryMap users\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\nThis section is set up via WhateverGreen's Framebuffer Patching Guide and is used for setting important iGPU properties.\n\nThe config.plist doesn't already have a section for this so you will have to create it manually.\n\nWhen setting up your iGPU, the table below should help with finding the right values to set. Here is an explanation of some values:\n\n * AAPL,ig-platform-id\n   * This is used internally for setting up the iGPU\n * Port Count\n   * The number of displays supported\n\nGenerally follow these steps when setting up your iGPU properties. Follow the configuration notes below the table if they say anything different:\n\n 1. When initially setting up your config.plist, only set AAPL,ig-platform-id - this is normally enough\n 2. If you boot and you get no graphics acceleration (7MB VRAM and solid background for dock), then you likely need to try different AAPL,ig-platform-id values, add stolenmem patches, or even add a device-id property.\n\nAAPL,IG-PLATFORM-ID   PORT COUNT   COMMENT\n0000528A              6            Recommended G4/G7 value\n\n# Configuration Notes\n\n * In some cases where you cannot set the DVMT-prealloc of these cards to 256MB higher in your UEFI Setup, you may get a kernel panic. Usually they're configured for 32MB of DVMT-prealloc, in that case these values are added to your iGPU Properties\n\nKEY                        TYPE     VALUE\nframebuffer-patch-enable   Number   1\nframebuffer-stolenmem      Data     00003001\nframebuffer-fbmem          Data     00009000\n\nPciRoot(0x0)/Pci(0x1b,0x0)\n\nlayout-id\n\n * Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs.\n * You can delete this property outright as it's unused for us at this time\n\nFor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present. More info on this is covered in the Post-Install Page\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons\n\n * Cpuid1Mask: Leave this blank\n * Cpuid1Data: Leave this blank\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleXcpmCfgLock          YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\nThe reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n-igfxcdc      Resolves Clock ID based kernel panics on Icelake CPUs,\n              recommended for all users\n-igfxdvmt     Similar to the above, resolves issue with some firmwares\n              having 60MB reserved for iGPU memory which can cause kernel\n              panics\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS              DESCRIPTION\n-wegnoegpu             Used for disabling all other GPUs than the integrated Intel\n                       iGPU, useful for those wanting to run newer versions of\n                       macOS where their dGPU isn't supported\n-igfxnotelemetryload   Prevents iGPU telemetry from loading. iGPU telemetry may\n                       cause a freeze during startup on certain laptops such as\n                       Chromebooks on macOS 10.15 and higher, see here for more\n                       information.\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone.\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this IceLake example, we chose the MacBookAir9,1 SMBIOS - this is done intentionally for compatibility's sake. The breakdown is as follows:\n\nSMBIOS           CPU TYPE             GPU TYPE      DISPLAY SIZE   TOUCH ID\nMacBookAir9,1    Dual/Quad Core 12W   iGPU: G4/G7   13\"            Yes\nMacBookPro16,2   Quad Core 28W        iGPU: G4/G7   13\"            Yes\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               MacBookAir9,1 SMBIOS Info             #\n#######################################################\n\nType:         MacBookAir9,1\nSerial:       C02XG0FDH7JY\nBoard Serial: C02839303QXH69FJA\nSmUUID:       DBB364D6-44B2-4A02-B922-AB4396F16DA8\n\n\n * Note: MacSerial currently does not support Linux, so you must grab a Windows or macOS machine to generate the MacBookPro16,2 values\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                 ENABLED   COMMENT\nReleaseUsbOwnership   YES       \nUnblockFsConnect      NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * ReleaseUsbOwnership: YES\n   \n   * Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Most laptops have garbage firmwares so we'll need this as well\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Config reminders\n\nHP Users:\n\n * Kernel -> Quirks -> LapicKernelPanic -> True\n   * You will get a kernel panic on LAPIC otherwise\n * UEFI -> Quirks -> UnblockFsConnect -> True\n\nDell Users:\n\n * Kernel -> Quirk -> CustomSMBIOSGuid -> True\n * PlatformInfo -> UpdateSMBIOSMode -> Custom\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt(For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * DVMT Pre-Allocated(iGPU Memory): 256MB\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# laptop icelake\n\nsupport                 version\ninitial macos support   macos 10.15, catalina\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-plug        allows for native cpu power management on haswell and newer,\n                 see getting started with acpi guide for more details.\nssdt-ec-usbx     fixes both the embedded controller and usb power, see\n                 getting started with acpi guide for more details.\nssdt-gpio        creates a stub so voodooi2c can connect, for those having\n                 troubles getting voodooi2c working can try ssdt-xosi\n                 instead. note that intel nucs do not need this\nssdt-pnlf        fixes brightness control, see getting started with acpi\n                 guide for more details. note that intel nucs do not need\n                 this\nssdt-awac        this is the 300 series rtc patch, required for most b360,\n                 b365, h310, h370, z390 and some z370 boards which prevent\n                 systems from booting macos. the alternative is ssdt-rtc0 for\n                 when awac ssdt is incompatible due to missing the legacy rtc\n                 clock, to check whether you need it and which to use please\n                 see getting started with acpi page.\nssdt-rhub        needed to fix root-device errors on many icelake laptops\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\ninfo\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, we'll need the following:\n\n * osi rename\n   * this is required when using ssdt-xosi as we redirect all osi calls to this ssdt, this is not needed if you're using ssdt-gpio\n\ncomment   string    change _osi to xosi\nenabled   boolean   yes\ncount     number    0\nlimit     number    0\nfind      data      5f4f5349\nreplace   data      584f5349\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing devices to be pass-through to macos that are generally ignored, for us we can ignore this section.\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we need to change the following:\n\nquirk                    enabled   comment\ndevirtualisemmio         yes\nenablewriteunprotector   no\nprotectmemoryregions     yes\n\nprotectuefiservices      yes\nrebuildapplememorymap    yes\nsetupvirtualmap          no\nsyncruntimepermissions   yes\n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc\n * devirtualisemmio: yes\n   * reduces stolen memory footprint, expands options for slide=n values and very helpful with fixing memory allocation issues on z390. requires protectuefiservices as well on icelake and z390 coffee lake\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: no\n   * this quirk and rebuildapplememorymap can commonly conflict, recommended to enable the latter on newer platforms and disable this entry.\n   * however, due to issues with oems not using the latest edkii builds you may find that the above combo will result in early boot failures. this is due to missing the memory_attribute_table and such we recommend disabling rebuildapplememorymap and enabling enablewriteunprotector. more info on this is covered in the troubleshooting section\n * protectmemoryregions: yes\n   * patches memory region types for incorrectly mapped csm/mmio regions. necessary for all chromebooks that utilize coreboot uefi firmware.\n * protectuefiservices: yes\n   * protects uefi services from being overridden by the firmware, mainly relevant for vms, icelake and z390 systems'\n   * if on z390, enable this quirk\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * rebuildapplememorymap: yes\n   * generates memory map compatible with macos, can break on some laptop oem firmwares so if you receive early boot failures disable this\n * setupvirtualmap: no\n   * fixes setvirtualaddresses calls to virtual addresses, can cause early kernel panics on ice lake machines\n * syncruntimepermissions: yes\n   * fixes alignment with mat tables and required to boot windows and linux with mat tables, also recommended for macos. mainly relevant for rebuildapplememorymap users\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\npciroot(0x0)/pci(0x2,0x0)\n\nthis section is set up via whatevergreen's framebuffer patching guide and is used for setting important igpu properties.\n\nthe config.plist doesn't already have a section for this so you will have to create it manually.\n\nwhen setting up your igpu, the table below should help with finding the right values to set. here is an explanation of some values:\n\n * aapl,ig-platform-id\n   * this is used internally for setting up the igpu\n * port count\n   * the number of displays supported\n\ngenerally follow these steps when setting up your igpu properties. follow the configuration notes below the table if they say anything different:\n\n 1. when initially setting up your config.plist, only set aapl,ig-platform-id - this is normally enough\n 2. if you boot and you get no graphics acceleration (7mb vram and solid background for dock), then you likely need to try different aapl,ig-platform-id values, add stolenmem patches, or even add a device-id property.\n\naapl,ig-platform-id   port count   comment\n0000528a              6            recommended g4/g7 value\n\n# configuration notes\n\n * in some cases where you cannot set the dvmt-prealloc of these cards to 256mb higher in your uefi setup, you may get a kernel panic. usually they're configured for 32mb of dvmt-prealloc, in that case these values are added to your igpu properties\n\nkey                        type     value\nframebuffer-patch-enable   number   1\nframebuffer-stolenmem      data     00003001\nframebuffer-fbmem          data     00009000\n\npciroot(0x0)/pci(0x1b,0x0)\n\nlayout-id\n\n * applies applealc audio injection, you'll need to do your own research on which codec your motherboard has and match it with applealc's layout. applealc supported codecs.\n * you can delete this property outright as it's unused for us at this time\n\nfor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-ids present. more info on this is covered in the post-install page\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus like pentiums and celerons\n\n * cpuid1mask: leave this blank\n * cpuid1data: leave this blank\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplexcpmcfglock          yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\nthe reason being is that usbinjectall reimplements builtin macos functionality without proper current tuning. it is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n-igfxcdc      resolves clock id based kernel panics on icelake cpus,\n              recommended for all users\n-igfxdvmt     similar to the above, resolves issue with some firmwares\n              having 60mb reserved for igpu memory which can cause kernel\n              panics\n\n * gpu-specific boot-args:\n\nboot-args              description\n-wegnoegpu             used for disabling all other gpus than the integrated intel\n                       igpu, useful for those wanting to run newer versions of\n                       macos where their dgpu isn't supported\n-igfxnotelemetryload   prevents igpu telemetry from loading. igpu telemetry may\n                       cause a freeze during startup on certain laptops such as\n                       chromebooks on macos 10.15 and higher, see here for more\n                       information.\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone.\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this icelake example, we chose the macbookair9,1 smbios - this is done intentionally for compatibility's sake. the breakdown is as follows:\n\nsmbios           cpu type             gpu type      display size   touch id\nmacbookair9,1    dual/quad core 12w   igpu: g4/g7   13\"            yes\nmacbookpro16,2   quad core 28w        igpu: g4/g7   13\"            yes\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               macbookair9,1 smbios info             #\n#######################################################\n\ntype:         macbookair9,1\nserial:       c02xg0fdh7jy\nboard serial: c02839303qxh69fja\nsmuuid:       dbb364d6-44b2-4a02-b922-ab4396f16da8\n\n\n * note: macserial currently does not support linux, so you must grab a windows or macos machine to generate the macbookpro16,2 values\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                 enabled   comment\nreleaseusbownership   yes       \nunblockfsconnect      no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * releaseusbownership: yes\n   \n   * releases usb controller from firmware driver, needed for when your firmware doesn't support ehci/xhci handoff. most laptops have garbage firmwares so we'll need this as well\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# config reminders\n\nhp users:\n\n * kernel -> quirks -> lapickernelpanic -> true\n   * you will get a kernel panic on lapic otherwise\n * uefi -> quirks -> unblockfsconnect -> true\n\ndell users:\n\n * kernel -> quirk -> customsmbiosguid -> true\n * platforminfo -> updatesmbiosmode -> custom\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt(for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applexcpmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * dvmt pre-allocated(igpu memory): 256mb\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Laptop Ivy Bridge",frontmatter:{},regularPath:"/config-laptop.plist/ivy-bridge.html",relativePath:"config-laptop.plist/ivy-bridge.md",key:"v-5ab0a08c",path:"/config-laptop.plist/ivy-bridge.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:139},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1368},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1379},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:3080},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:4016},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:4430},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:4538},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:4675},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:4430},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:5700},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1379},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:3080},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:12888},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1379},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:15097},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:15239},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:15440},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:4016},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:4430},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:18716},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:19866},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:4538},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:20317},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:21217},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:23559},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:23628},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:23746},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:5024},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1379},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:3080},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:27667},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:29635},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:4985},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:31649},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:18012},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:33139},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:33381},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:33591},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:33976},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:4430},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:31339},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:35794},{level:3,title:"Config reminders",slug:"config-reminders",normalizedTitle:"config reminders",charIndex:36114},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:36293},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:15768},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3606}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Config reminders Intel BIOS settings Disable Enable",content:"# Laptop Ivy Bridge\n\nSUPPORT                 VERSION\nInitial macOS Support   OS X 10.7, Lion\nLast Supported OS       macOS 11, Big Sur\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-PM          Needed for proper CPU power management, you will need to run\n                 Pike's ssdtPRGen.sh script to generate this file. This will\n                 be run in post install.\nSSDT-EC          Fixes the embedded controller, see Getting Started With ACPI\n                 Guide for more details.\nSSDT-XOSI        Makes all _OSI calls specific to Windows work for macOS\n                 (Darwin) Identifier. This may help enabling some features\n                 like XHCI and others.\nSSDT-PNLF        Fixes brightness control, see Getting Started With ACPI\n                 Guide for more details. Note that Intel NUCs do not need\n                 this\nSSDT-IMEI        Needed to add a missing IMEI device on Ivy Bridge CPU with 6\n                 series motherboards, not needed for 7 series motherboards\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nInfo\n\nThis blocks certain ACPI tables from loading, for us we really care about this. Main reason is that Apple's XCPM does not support IvyBridge all too well and can cause AppleIntelCPUPowerManagement panics on boot. To avoid this we make our own PM SSDT in Post-Install and drop the old tables(Note that this is only temporary until we've made our SSDT-PM, we'll re-enable these tables later):\n\nRemoving CpuPm:\n\nKEY              TYPE      VALUE\nAll              Boolean   YES\nComment          String    Delete CpuPm\nEnabled          Boolean   YES\nOemTableId       Data      437075506d000000\nTableLength      Number    0\nTableSignature   Data      53534454\n\nRemoving Cpu0Ist:\n\nKEY              TYPE      VALUE\nAll              Boolean   YES\nComment          String    Delete Cpu0Ist\nEnabled          Boolean   YES\nOemTableId       Data      4370753049737400\nTableLength      Number    0\nTableSignature   Data      53534454\n\n\n# Patch\n\nInfo\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need the following:\n\n * OSI rename\n   * This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT\n\nCOMMENT   STRING    CHANGE _OSI TO XOSI\nEnabled   Boolean   YES\nCount     Number    0\nLimit     Number    0\nFind      Data      5f4f5349\nReplace   Data      584f5349\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be pass-through to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: YES\n   * Needed to remove write protection from CR0 register.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses, required for Gigabyte boards to resolve early kernel panics\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\nThis section is set up via WhateverGreen's Framebuffer Patching Guide and is used for setting important iGPU properties.\n\nThe config.plist doesn't already have a section for this so you will have to create it manually.\n\nWhen setting up your iGPU, the table below should help with finding the right values to set. Here is an explanation of some values:\n\n * AAPL,ig-platform-id\n   * This is used internally for setting up the iGPU\n * Type\n   * Whether the entry is recommended for laptops(ie. with built-in displays) or for Intel NUCs(ie. stand alone boxes)\n\nGenerally follow these steps when setting up your iGPU properties. Follow the configuration notes below the table if they say anything different:\n\n 1. When initially setting up your config.plist, only set AAPL,ig-platform-id - this is normally enough\n 2. If you boot and you get no graphics acceleration (7MB VRAM and solid background for dock), then you likely need to try different AAPL,ig-platform-id values, add stolenmem patches, or even add a device-id property.\n\nAAPL,IG-PLATFORM-ID   TYPE     COMMENT\n03006601              Laptop   To be used with 1366 by 768 displays or lower\n04006601              Laptop   To be used with 1600 by 900 displays or higher, see below\n                               for addition patches\n09006601              Laptop   To be used with some devices that have eDP connected monitor\n                               (contrary to classical LVDS), must be tested with 03006601\n                               and 04006601 first before trying this.\n0B006601              NUC      To be used with Intel NUCs\n\n# Configuration Notes\n\n * VGA is not supported (unless it's running through a DP to VGA internal adapter, which apparently only rare devices will see it as DP and not VGA, it's all about luck.)\n\n * If you're using 04006601 as your ig-platform-id, you may need to add the following parameters to fix external outputs as otherwise you will only have one output. (Credit to Rehabman)\n\nKEY                        TYPE     VALUE                                                   EXPLANATION\nframebuffer-patch-enable   Number   1                                                       enabling the semantic patches in principle (from the\n                                                                                            WhateverGreen manual)\nframebuffer-memorycount    Number   2                                                       Matching FBMemoryCount to the one on 03006601 (1 on 04 vs 2\n                                                                                            on 03)\nframebuffer-pipecount      Number   2                                                       Matching PipeCount to the one on 03006601 (3 on 04 vs 2 on\n                                                                                            03)\nframebuffer-portcount      Number   4                                                       Matching PortCount to the one on 03006601 (1 on 04 vs 4 on\n                                                                                            03)\nframebuffer-stolenmem      Data     00000004                                                Matching STOLEN memory to 64MB (0x04000000 from hex to base\n                                                                                            10 in Bytes) to the one on 03006601\n                                                                                            Check here for more information.\nframebuffer-con1-enable    Number   1                                                       This will enable patching on connector 1 of the driver.\n                                                                                            (Which is the second connector after con0, which is the\n                                                                                            eDP/LVDS one)\nframebuffer-con1-alldata   Data     02050000 00040000 07040000 03040000 00040000 81000000   When using all data with a connector, either you give all\n                                    04060000 00040000 81000000                              information of that connector (port-bused-type-flag) or that\n                                                                                            port and the ones following it, like in this case.\n                                                                                            In this case, the ports in 04 are limited to 1:\n                                                                                            05030000 02000000 30020000 (which corresponds to port 5,\n                                                                                            which is LVDS)\n                                                                                            However on 03 there are 3 extra ports:\n                                                                                            05030000 02000000 30000000 (LVDS, con0, like 04)\n                                                                                            02050000 00040000 07040000 (DP, con1)\n                                                                                            03040000 00040000 81000000 (DP, con2)\n                                                                                            04060000 00040000 81000000 (DP, con3)\n                                                                                            Since we changed the number of PortCount to 4 in a platform\n                                                                                            that has only 1, that means we need to define the 3 others\n                                                                                            (and we that starting with con1 to the end).\n\nPciRoot(0x0)/Pci(0x16,0x0)\n\nSandy/IvyBridge Hybrids:\n\nSome laptops from this era came with a mixed chipset setup, using Ivy Bridge CPUs with Sandy Bridge chipsets which creates issues with macOS since it expects a certain IMEI ID that it doesn't find and would get stuck at boot(As Apple's iGPU drivers require an IMEI device), to fix this we need to fake the IMEI's IDs in these models\n\n * To know if you're affected check if your CPU is an Intel Core ix-3xxx and your chipset is Hx6x (for example a laptop with HM65 or HM67 with a Core i3-3110M) through tools like AIDA64.\n * In your config add a new PciRoot device named PciRoot(0x0)/Pci(0x16,0x0)\n\nKEY         TYPE   VALUE\ndevice-id   Data   3A1E0000\n\nPciRoot(0x0)/Pci(0x1b,0x0)\n\nlayout-id\n\n * Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs.\n * You can delete this property outright as it's unused for us at this time\n\nFor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present. More info on this is covered in the Post-Install Page\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons\n\n * Cpuid1Mask: Leave this blank\n * Cpuid1Data: Leave this blank\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleCpuPmCfgLock         YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\nThe reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS    DESCRIPTION\n-wegnoegpu   Used for disabling all other GPUs than the integrated Intel\n             iGPU, useful for those wanting to run newer versions of\n             macOS where their dGPU isn't supported\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone.\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Ivy Bridge example, we'll chose the iMac13,2 SMBIOS - this is done intentionally for compatibility's sake. The typical breakdown is as follows:\n\nSMBIOS           CPU TYPE                  GPU TYPE                        DISPLAY SIZE\nMacBookAir5,1    Dual Core 17W             iGPU: HD 4000                   11\"\nMacBookAir5,2    Dual Core 17W             iGPU: HD 4000                   13\"\nMacBookPro10,1   Quad Core 45W             iGPU: HD 4000 + dGPU: GT 650M   15\"\nMacBookPro10,2   Dual Core 35W(High End)   iGPU: HD 4000                   13\"\nMacmini6,1       Dual Core NUC             iGPU: HD 4000                   N/A\nMacmini6,2       Quad Core NUC             iGPU: HD 4000                   N/A\n\nNote: The following SMBIOS are only supported up-to and including macOS 10.15, Catalina. For cases where you must boot Big Sur, see below:\n\nBig Sur SMBIOS table\n\nNote choosing a SMBIOS from the list below for Catalina or older is not recommended, as Power Management and such can break when using unoptimized SMBIOS.\n\nSMBIOS           CPU TYPE        DISPLAY SIZE\nMacBookAir6,1    Dual Core 15W   11\"\nMacBookAir6,2    Dual Core 15W   13\"\nMacBookPro11,1   Dual Core 28W   13\"\nMacBookPro11,2   Quad Core 45W   15\"\nMacBookPro11,3   Quad Core 45W   15\"\nMacBookPro11,4   Quad Core 45W   15\"\nMacBookPro11,5   Quad Core 45W   15\"\nMacmini7,1       NUC Systems     N/A\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               MacBookPro10,2 SMBIOS Info            #\n#######################################################\n\nType:         MacBookPro10,2\nSerial:       C02KCYZLDNCW\nBoard Serial: C02309301QXF2FRJC\nSmUUID:       A154B586-874B-4E57-A1FF-9D6E503E4580\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n:::\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                    ENABLED   COMMENT\nIgnoreInvalidFlexRatio   YES       \nReleaseUsbOwnership      YES       \nUnblockFsConnect         NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * IgnoreInvalidFlexRatio: YES\n   \n   * Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-Skylake based systems\n\n * ReleaseUsbOwnership: YES\n   \n   * Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Most laptops have garbage firmwares so we'll need this as well\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Config reminders\n\nHP Users:\n\n * Kernel -> Quirks -> LapicKernelPanic -> True\n   * You will get a kernel panic on LAPIC otherwise\n * UEFI -> Quirks -> UnblockFsConnect -> True\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\nThese are the main options to check for, if you can't find it or an equivalent for it, just skip it.\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled) (or Legacy Support, or Hybrid Boot)\n * Thunderbolt (For initial install, as Thunderbolt can cause issues if not setup correctly, if available)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleCpuPmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n\n\n# Enable\n\n * VT-x (Virtualization Support)\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * DVMT Pre-Allocated(iGPU Memory): 32MB or higher\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# laptop ivy bridge\n\nsupport                 version\ninitial macos support   os x 10.7, lion\nlast supported os       macos 11, big sur\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-pm          needed for proper cpu power management, you will need to run\n                 pike's ssdtprgen.sh script to generate this file. this will\n                 be run in post install.\nssdt-ec          fixes the embedded controller, see getting started with acpi\n                 guide for more details.\nssdt-xosi        makes all _osi calls specific to windows work for macos\n                 (darwin) identifier. this may help enabling some features\n                 like xhci and others.\nssdt-pnlf        fixes brightness control, see getting started with acpi\n                 guide for more details. note that intel nucs do not need\n                 this\nssdt-imei        needed to add a missing imei device on ivy bridge cpu with 6\n                 series motherboards, not needed for 7 series motherboards\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\ninfo\n\nthis blocks certain acpi tables from loading, for us we really care about this. main reason is that apple's xcpm does not support ivybridge all too well and can cause appleintelcpupowermanagement panics on boot. to avoid this we make our own pm ssdt in post-install and drop the old tables(note that this is only temporary until we've made our ssdt-pm, we'll re-enable these tables later):\n\nremoving cpupm:\n\nkey              type      value\nall              boolean   yes\ncomment          string    delete cpupm\nenabled          boolean   yes\noemtableid       data      437075506d000000\ntablelength      number    0\ntablesignature   data      53534454\n\nremoving cpu0ist:\n\nkey              type      value\nall              boolean   yes\ncomment          string    delete cpu0ist\nenabled          boolean   yes\noemtableid       data      4370753049737400\ntablelength      number    0\ntablesignature   data      53534454\n\n\n# patch\n\ninfo\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, we'll need the following:\n\n * osi rename\n   * this is required when using ssdt-xosi as we redirect all osi calls to this ssdt\n\ncomment   string    change _osi to xosi\nenabled   boolean   yes\ncount     number    0\nlimit     number    0\nfind      data      5f4f5349\nreplace   data      584f5349\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be pass-through to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: yes\n   * needed to remove write protection from cr0 register.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses, required for gigabyte boards to resolve early kernel panics\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\npciroot(0x0)/pci(0x2,0x0)\n\nthis section is set up via whatevergreen's framebuffer patching guide and is used for setting important igpu properties.\n\nthe config.plist doesn't already have a section for this so you will have to create it manually.\n\nwhen setting up your igpu, the table below should help with finding the right values to set. here is an explanation of some values:\n\n * aapl,ig-platform-id\n   * this is used internally for setting up the igpu\n * type\n   * whether the entry is recommended for laptops(ie. with built-in displays) or for intel nucs(ie. stand alone boxes)\n\ngenerally follow these steps when setting up your igpu properties. follow the configuration notes below the table if they say anything different:\n\n 1. when initially setting up your config.plist, only set aapl,ig-platform-id - this is normally enough\n 2. if you boot and you get no graphics acceleration (7mb vram and solid background for dock), then you likely need to try different aapl,ig-platform-id values, add stolenmem patches, or even add a device-id property.\n\naapl,ig-platform-id   type     comment\n03006601              laptop   to be used with 1366 by 768 displays or lower\n04006601              laptop   to be used with 1600 by 900 displays or higher, see below\n                               for addition patches\n09006601              laptop   to be used with some devices that have edp connected monitor\n                               (contrary to classical lvds), must be tested with 03006601\n                               and 04006601 first before trying this.\n0b006601              nuc      to be used with intel nucs\n\n# configuration notes\n\n * vga is not supported (unless it's running through a dp to vga internal adapter, which apparently only rare devices will see it as dp and not vga, it's all about luck.)\n\n * if you're using 04006601 as your ig-platform-id, you may need to add the following parameters to fix external outputs as otherwise you will only have one output. (credit to rehabman)\n\nkey                        type     value                                                   explanation\nframebuffer-patch-enable   number   1                                                       enabling the semantic patches in principle (from the\n                                                                                            whatevergreen manual)\nframebuffer-memorycount    number   2                                                       matching fbmemorycount to the one on 03006601 (1 on 04 vs 2\n                                                                                            on 03)\nframebuffer-pipecount      number   2                                                       matching pipecount to the one on 03006601 (3 on 04 vs 2 on\n                                                                                            03)\nframebuffer-portcount      number   4                                                       matching portcount to the one on 03006601 (1 on 04 vs 4 on\n                                                                                            03)\nframebuffer-stolenmem      data     00000004                                                matching stolen memory to 64mb (0x04000000 from hex to base\n                                                                                            10 in bytes) to the one on 03006601\n                                                                                            check here for more information.\nframebuffer-con1-enable    number   1                                                       this will enable patching on connector 1 of the driver.\n                                                                                            (which is the second connector after con0, which is the\n                                                                                            edp/lvds one)\nframebuffer-con1-alldata   data     02050000 00040000 07040000 03040000 00040000 81000000   when using all data with a connector, either you give all\n                                    04060000 00040000 81000000                              information of that connector (port-bused-type-flag) or that\n                                                                                            port and the ones following it, like in this case.\n                                                                                            in this case, the ports in 04 are limited to 1:\n                                                                                            05030000 02000000 30020000 (which corresponds to port 5,\n                                                                                            which is lvds)\n                                                                                            however on 03 there are 3 extra ports:\n                                                                                            05030000 02000000 30000000 (lvds, con0, like 04)\n                                                                                            02050000 00040000 07040000 (dp, con1)\n                                                                                            03040000 00040000 81000000 (dp, con2)\n                                                                                            04060000 00040000 81000000 (dp, con3)\n                                                                                            since we changed the number of portcount to 4 in a platform\n                                                                                            that has only 1, that means we need to define the 3 others\n                                                                                            (and we that starting with con1 to the end).\n\npciroot(0x0)/pci(0x16,0x0)\n\nsandy/ivybridge hybrids:\n\nsome laptops from this era came with a mixed chipset setup, using ivy bridge cpus with sandy bridge chipsets which creates issues with macos since it expects a certain imei id that it doesn't find and would get stuck at boot(as apple's igpu drivers require an imei device), to fix this we need to fake the imei's ids in these models\n\n * to know if you're affected check if your cpu is an intel core ix-3xxx and your chipset is hx6x (for example a laptop with hm65 or hm67 with a core i3-3110m) through tools like aida64.\n * in your config add a new pciroot device named pciroot(0x0)/pci(0x16,0x0)\n\nkey         type   value\ndevice-id   data   3a1e0000\n\npciroot(0x0)/pci(0x1b,0x0)\n\nlayout-id\n\n * applies applealc audio injection, you'll need to do your own research on which codec your motherboard has and match it with applealc's layout. applealc supported codecs.\n * you can delete this property outright as it's unused for us at this time\n\nfor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-ids present. more info on this is covered in the post-install page\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus like pentiums and celerons\n\n * cpuid1mask: leave this blank\n * cpuid1data: leave this blank\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplecpupmcfglock         yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\nthe reason being is that usbinjectall reimplements builtin macos functionality without proper current tuning. it is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args    description\n-wegnoegpu   used for disabling all other gpus than the integrated intel\n             igpu, useful for those wanting to run newer versions of\n             macos where their dgpu isn't supported\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone.\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this ivy bridge example, we'll chose the imac13,2 smbios - this is done intentionally for compatibility's sake. the typical breakdown is as follows:\n\nsmbios           cpu type                  gpu type                        display size\nmacbookair5,1    dual core 17w             igpu: hd 4000                   11\"\nmacbookair5,2    dual core 17w             igpu: hd 4000                   13\"\nmacbookpro10,1   quad core 45w             igpu: hd 4000 + dgpu: gt 650m   15\"\nmacbookpro10,2   dual core 35w(high end)   igpu: hd 4000                   13\"\nmacmini6,1       dual core nuc             igpu: hd 4000                   n/a\nmacmini6,2       quad core nuc             igpu: hd 4000                   n/a\n\nnote: the following smbios are only supported up-to and including macos 10.15, catalina. for cases where you must boot big sur, see below:\n\nbig sur smbios table\n\nnote choosing a smbios from the list below for catalina or older is not recommended, as power management and such can break when using unoptimized smbios.\n\nsmbios           cpu type        display size\nmacbookair6,1    dual core 15w   11\"\nmacbookair6,2    dual core 15w   13\"\nmacbookpro11,1   dual core 28w   13\"\nmacbookpro11,2   quad core 45w   15\"\nmacbookpro11,3   quad core 45w   15\"\nmacbookpro11,4   quad core 45w   15\"\nmacbookpro11,5   quad core 45w   15\"\nmacmini7,1       nuc systems     n/a\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               macbookpro10,2 smbios info            #\n#######################################################\n\ntype:         macbookpro10,2\nserial:       c02kcyzldncw\nboard serial: c02309301qxf2frjc\nsmuuid:       a154b586-874b-4e57-a1ff-9d6e503e4580\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n:::\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                    enabled   comment\nignoreinvalidflexratio   yes       \nreleaseusbownership      yes       \nunblockfsconnect         no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * ignoreinvalidflexratio: yes\n   \n   * fix for when msr_flex_ratio (0x194) can't be disabled in the bios, required for all pre-skylake based systems\n\n * releaseusbownership: yes\n   \n   * releases usb controller from firmware driver, needed for when your firmware doesn't support ehci/xhci handoff. most laptops have garbage firmwares so we'll need this as well\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# config reminders\n\nhp users:\n\n * kernel -> quirks -> lapickernelpanic -> true\n   * you will get a kernel panic on lapic otherwise\n * uefi -> quirks -> unblockfsconnect -> true\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\nthese are the main options to check for, if you can't find it or an equivalent for it, just skip it.\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled) (or legacy support, or hybrid boot)\n * thunderbolt (for initial install, as thunderbolt can cause issues if not setup correctly, if available)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applecpupmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n\n\n# enable\n\n * vt-x (virtualization support)\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * dvmt pre-allocated(igpu memory): 32mb or higher\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Laptop Kaby Lake & Amber Lake Y",frontmatter:{},regularPath:"/config-laptop.plist/kaby-lake.html",relativePath:"config-laptop.plist/kaby-lake.md",key:"v-6f69b1d4",path:"/config-laptop.plist/kaby-lake.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:115},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1344},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1355},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2897},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:2982},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:3442},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:3550},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:3687},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:3442},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:5027},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1355},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2897},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:11661},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1355},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:13870},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:14012},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:14213},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:2982},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:3442},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:17489},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:18639},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:3550},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:19090},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:19990},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:22332},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:22401},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:22519},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:4064},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1355},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2897},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:26756},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:28039},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:4142},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:30048},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:16785},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:31538},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:31780},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:31990},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:32375},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:3442},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:29738},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:33997},{level:3,title:"Config reminders",slug:"config-reminders",normalizedTitle:"config reminders",charIndex:34317},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:34627},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:14541},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3312}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Config reminders Intel BIOS settings Disable Enable",content:"# Laptop Kaby Lake & Amber Lake Y\n\nSUPPORT                 VERSION\nInitial macOS Support   macOS 10.12, Sierra\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-PLUG        Allows for native CPU power management on Haswell and newer,\n                 see Getting Started With ACPI Guide for more details.\nSSDT-EC-USBX     Fixes both the embedded controller and USB power, see\n                 Getting Started With ACPI Guide for more details.\nSSDT-GPIO        Creates a stub so VoodooI2C can connect, for those having\n                 troubles getting VoodooI2C working can try SSDT-XOSI\n                 instead. Note that Intel NUCs do not need this\nSSDT-PNLF        Fixes brightness control, see Getting Started With ACPI\n                 Guide for more details. Note that Intel NUCs do not need\n                 this\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nInfo\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need the following:\n\n * OSI rename\n   * This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT, this is not needed if you're using SSDT-GPIO\n\nCOMMENT   STRING    CHANGE _OSI TO XOSI\nEnabled   Boolean   YES\nCount     Number    0\nLimit     Number    0\nFind      Data      5f4f5349\nReplace   Data      584f5349\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be pass-through to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes. For most users, leave it as default.\n\n * ProtectMemoryRegions: YES\n   * Fixes shutdown/restart on some Chromebooks that would otherwise result in a AppleEFINVRAM kernel panic.\n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: YES\n   * Needed to remove write protection from CR0 register.\n * ProtectMemoryRegions: YES\n   * Patches memory region types for incorrectly mapped CSM/MMIO regions. Necessary for all Chromebooks that utilize coreboot UEFI firmware.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses, required for Gigabyte boards to resolve early kernel panics\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\nThis section is set up via WhateverGreen's Framebuffer Patching Guide and is used for setting important iGPU properties.\n\nThe config.plist doesn't already have a section for this so you will have to create it manually.\n\nWhen setting up your iGPU, the table below should help with finding the right values to set. Here is an explanation of some values:\n\n * AAPL,ig-platform-id\n   * This is used internally for setting up the iGPU\n * Type\n   * Whether the entry is recommended for laptops (ie. with built-in displays) or for Intel NUCs (ie. standalone boxes)\n\nGenerally follow these steps when setting up your iGPU properties. Follow the configuration notes below the table if they say anything different:\n\n 1. When initially setting up your config.plist, only set AAPL,ig-platform-id - this is normally enough\n 2. If you boot and you get no graphics acceleration (7MB VRAM and solid background for dock), then you likely need to try different AAPL,ig-platform-id values, add stolenmem patches, or even add a device-id property.\n\nAAPL,IG-PLATFORM-ID   TYPE     COMMENT\n00001B59              Laptop   Recommended for HD 615, HD 620, HD 630, HD 640 and HD 650\n00001659              Laptop   Alternative value to 00001B59 if you have acceleration\n                               issues, and recommended for all HD and UHD 620 NUCs\n0000C087              Laptop   Recommended for Amber Lake's UHD 617 and Kaby Lake-R's UHD\n                               620\n00001E59              NUC      Recommended for HD 615\n00001B59              NUC      Recommended for HD 630\n02002659              NUC      Recommended for HD 640/650\n\n# Configuration Notes\n\n * In some cases where you cannot set the DVMT-prealloc of these cards to 64MB or higher in your UEFI Setup, you may get a kernel panic. Usually they're configured for 32MB of DVMT-prealloc, in that case add these values to the iGPU properties:\n\nKEY                        TYPE   VALUE\nframebuffer-patch-enable   Data   01000000\nframebuffer-stolenmem      Data   00003001\nframebuffer-fbmem          Data   00009000\n\n * For all UHD 620 users (Kaby Lake-R), you'll need a device-id spoof:\n\nKEY         TYPE   VALUE\ndevice-id   Data   16590000\n\n * HD 6xx users (UHD 6xx users are not concerned) may have some issues with output where plugging in a display out would cause a lock up (kernel panic); here are some patches to mitigate that (credit RehabMan). If you're having these lock ups, try the following sets of patches (try both, but only one set at a time):\n   \n   * con1 as 105, con2 as 204, both HDMI\n     \n     KEY                        TYPE   VALUE\n     framebuffer-con1-enable    Data   01000000\n     framebuffer-con1-alldata   Data   01050A00 00080000 87010000\n     framebuffer-con2-enable    Data   01000000\n     framebuffer-con2-alldata   Data   02040A00 00080000 87010000\n   \n   * con1 as 105, con2 as 306, HDMI and DP\n     \n     KEY                        TYPE   VALUE\n     framebuffer-con1-enable    Data   01000000\n     framebuffer-con1-alldata   Data   01050A00 00080000 87010000\n     framebuffer-con2-enable    Data   01000000\n     framebuffer-con2-alldata   Data   03060A00 00040000 87010000\n\nExplanation\n\nLet's take in consideration these 2 usual framebuffers:\n\n * 00001B59 which has the following BusID information:\n   \n   [0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - ConnectorLVDS\n   [2] busId: 0x04, pipe: 10, type: 0x00000800, flags: 0x00000187 - ConnectorHDMI\n   [3] busId: 0x06, pipe: 10, type: 0x00000400, flags: 0x00000187 - ConnectorDP\n   00000800 02000000 98000000\n   02040A00 00080000 87010000\n   03060A00 00040000 87010000\n   \n\n * and 00001659 which has the following BusID information:\n   \n   [0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - ConnectorLVDS\n   [1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000187 - ConnectorDP\n   [2] busId: 0x04, pipe: 10, type: 0x00000800, flags: 0x00000187 - ConnectorHDMI\n   00000800 02000000 98000000\n   01050900 00040000 87010000\n   02040A00 00080000 87010000\n   \n\nWhich look similar at first glance, until you see the small details like the Port ID (the first 2 digits of each hex line). Both of the framebuffers are valid, but not all OEMs ship the same port configuration on all laptops (some have eDP for internal display, some have HDMI instead of DP ports, some have VGA and so on...).\n\nFor either framebuffer, the first port (port 00) is ConnectorLVDS (meaning the internal display), which is the same on both configurations, that's how you get a display out for macOS. The differences come to the 2 other ports:\n\n * 00001B59\n\n02040A00 00080000 87010000 --\x3e\n[2] busId: 0x04, pipe: 10, type: 0x00000800, flags: 0x00000187 - ConnectorHDMI\n\n03060A00 00040000 87010000 --\x3e\n[3] busId: 0x06, pipe: 10, type: 0x00000400, flags: 0x00000187 - ConnectorDP\n\n\n * 00001659\n\n01050900 00040000 87010000 --\x3e\n[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000187 - ConnectorDP\n\n02040A00 00080000 87010000 --\x3e\n[2] busId: 0x04, pipe: 10, type: 0x00000800, flags: 0x00000187 - ConnectorHDMI\n\n\nThe patches above have these effects:\n\n * Patchset 1:\n   * Convert second connector of the ports to 0105 with HDMI connector type\n   * Convert third connector of the ports to 0204 with HDMI connector type\n * Patchset 2:\n   * Convert second connector of the ports to 0105 with HDMI connector type\n   * Convert third connector of the ports to 0306 with DP connector type\n\nDepending on your real hardware setup, you might want to switch things up, but usually for most laptops, one of the two patches might be required, in case your outputs work out-of-the-box with no issues or crashes, you do not need these patches then.\n\nHow to read the BusID\n\nThe bits in the hex string are read as following:\n\n(taking 01050900 00040000 87010000 as example)\n\nBIT        NAME             VALUE\nBit 1      Port             01\nBit 2      Bus ID           05\nBit 3-4    Pipe Number      0900\nBit 5-8    Connector Type   00040000\nBit 9-12   Flags            87010000\n\nPciRoot(0x0)/Pci(0x1b,0x0)\n\nlayout-id\n\n * Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs.\n * You can delete this property outright as it's unused for us at this time\n\nFor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present. More info on this is covered in the Post-Install Page\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons\n\n * Cpuid1Mask: Leave this blank\n * Cpuid1Data: Leave this blank\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleXcpmCfgLock          YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\nThe reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS              DESCRIPTION\n-wegnoegpu             Used for disabling all other GPUs than the integrated Intel\n                       iGPU, useful for those wanting to run newer versions of\n                       macOS where their dGPU isn't supported\n-igfxnotelemetryload   Prevents iGPU telemetry from loading. iGPU telemetry may\n                       cause a freeze during startup on certain laptops such as\n                       Chromebooks on macOS 10.15 and higher, see here for more\n                       information.\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone.\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Kaby Lake example, we'll chose the MacBookPro14,1 SMBIOS - this is done intentionally for compatibility's sake. The typical breakdown is as follows:\n\nSMBIOS           CPU TYPE                  GPU TYPE                                    DISPLAY SIZE   TOUCH ID\nMacBookPro14,1   Dual Core 15W(Low End)    iGPU: Iris Plus 640                         13\"            No\nMacBookPro14,2   Dual Core 15W(High End)   iGPU: Iris Plus 650                         13\"            Yes\nMacBookPro14,3   Quad Core 45W             iGPU: HD 630 + dGPU: Radeon Pro 555X/560X   15\"            Yes\niMac18,1         NUC Systems               iGPU: Iris Plus 640                         N/A            No\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               MacBookPro14,1 SMBIOS Info            #\n#######################################################\n\nType:         MacBookPro14,1\nSerial:       C02Z2CZ5H7JY\nBoard Serial: C02928701GUH69FFB\nSmUUID:       AA043F8D-33B6-4A1A-94F7-46972AAD0607\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                 ENABLED   COMMENT\nReleaseUsbOwnership   YES       \nUnblockFsConnect      NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * ReleaseUsbOwnership: YES\n   \n   * Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Most laptops have garbage firmwares so we'll need this as well\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Config reminders\n\nHP Users:\n\n * Kernel -> Quirks -> LapicKernelPanic -> True\n   * You will get a kernel panic on LAPIC otherwise\n * UEFI -> Quirks -> UnblockFsConnect -> True\n\nDell Users:\n\nFor Skylake and newer:\n\n * Kernel -> Quirk -> CustomSMBIOSGuid -> True\n * PlatformInfo -> UpdateSMBIOSMode -> Custom\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt(For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * DVMT Pre-Allocated(iGPU Memory): 64MB or higher\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# laptop kaby lake & amber lake y\n\nsupport                 version\ninitial macos support   macos 10.12, sierra\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-plug        allows for native cpu power management on haswell and newer,\n                 see getting started with acpi guide for more details.\nssdt-ec-usbx     fixes both the embedded controller and usb power, see\n                 getting started with acpi guide for more details.\nssdt-gpio        creates a stub so voodooi2c can connect, for those having\n                 troubles getting voodooi2c working can try ssdt-xosi\n                 instead. note that intel nucs do not need this\nssdt-pnlf        fixes brightness control, see getting started with acpi\n                 guide for more details. note that intel nucs do not need\n                 this\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\ninfo\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, we'll need the following:\n\n * osi rename\n   * this is required when using ssdt-xosi as we redirect all osi calls to this ssdt, this is not needed if you're using ssdt-gpio\n\ncomment   string    change _osi to xosi\nenabled   boolean   yes\ncount     number    0\nlimit     number    0\nfind      data      5f4f5349\nreplace   data      584f5349\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be pass-through to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes. for most users, leave it as default.\n\n * protectmemoryregions: yes\n   * fixes shutdown/restart on some chromebooks that would otherwise result in a appleefinvram kernel panic.\n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: yes\n   * needed to remove write protection from cr0 register.\n * protectmemoryregions: yes\n   * patches memory region types for incorrectly mapped csm/mmio regions. necessary for all chromebooks that utilize coreboot uefi firmware.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses, required for gigabyte boards to resolve early kernel panics\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\npciroot(0x0)/pci(0x2,0x0)\n\nthis section is set up via whatevergreen's framebuffer patching guide and is used for setting important igpu properties.\n\nthe config.plist doesn't already have a section for this so you will have to create it manually.\n\nwhen setting up your igpu, the table below should help with finding the right values to set. here is an explanation of some values:\n\n * aapl,ig-platform-id\n   * this is used internally for setting up the igpu\n * type\n   * whether the entry is recommended for laptops (ie. with built-in displays) or for intel nucs (ie. standalone boxes)\n\ngenerally follow these steps when setting up your igpu properties. follow the configuration notes below the table if they say anything different:\n\n 1. when initially setting up your config.plist, only set aapl,ig-platform-id - this is normally enough\n 2. if you boot and you get no graphics acceleration (7mb vram and solid background for dock), then you likely need to try different aapl,ig-platform-id values, add stolenmem patches, or even add a device-id property.\n\naapl,ig-platform-id   type     comment\n00001b59              laptop   recommended for hd 615, hd 620, hd 630, hd 640 and hd 650\n00001659              laptop   alternative value to 00001b59 if you have acceleration\n                               issues, and recommended for all hd and uhd 620 nucs\n0000c087              laptop   recommended for amber lake's uhd 617 and kaby lake-r's uhd\n                               620\n00001e59              nuc      recommended for hd 615\n00001b59              nuc      recommended for hd 630\n02002659              nuc      recommended for hd 640/650\n\n# configuration notes\n\n * in some cases where you cannot set the dvmt-prealloc of these cards to 64mb or higher in your uefi setup, you may get a kernel panic. usually they're configured for 32mb of dvmt-prealloc, in that case add these values to the igpu properties:\n\nkey                        type   value\nframebuffer-patch-enable   data   01000000\nframebuffer-stolenmem      data   00003001\nframebuffer-fbmem          data   00009000\n\n * for all uhd 620 users (kaby lake-r), you'll need a device-id spoof:\n\nkey         type   value\ndevice-id   data   16590000\n\n * hd 6xx users (uhd 6xx users are not concerned) may have some issues with output where plugging in a display out would cause a lock up (kernel panic); here are some patches to mitigate that (credit rehabman). if you're having these lock ups, try the following sets of patches (try both, but only one set at a time):\n   \n   * con1 as 105, con2 as 204, both hdmi\n     \n     key                        type   value\n     framebuffer-con1-enable    data   01000000\n     framebuffer-con1-alldata   data   01050a00 00080000 87010000\n     framebuffer-con2-enable    data   01000000\n     framebuffer-con2-alldata   data   02040a00 00080000 87010000\n   \n   * con1 as 105, con2 as 306, hdmi and dp\n     \n     key                        type   value\n     framebuffer-con1-enable    data   01000000\n     framebuffer-con1-alldata   data   01050a00 00080000 87010000\n     framebuffer-con2-enable    data   01000000\n     framebuffer-con2-alldata   data   03060a00 00040000 87010000\n\nexplanation\n\nlet's take in consideration these 2 usual framebuffers:\n\n * 00001b59 which has the following busid information:\n   \n   [0] busid: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - connectorlvds\n   [2] busid: 0x04, pipe: 10, type: 0x00000800, flags: 0x00000187 - connectorhdmi\n   [3] busid: 0x06, pipe: 10, type: 0x00000400, flags: 0x00000187 - connectordp\n   00000800 02000000 98000000\n   02040a00 00080000 87010000\n   03060a00 00040000 87010000\n   \n\n * and 00001659 which has the following busid information:\n   \n   [0] busid: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - connectorlvds\n   [1] busid: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000187 - connectordp\n   [2] busid: 0x04, pipe: 10, type: 0x00000800, flags: 0x00000187 - connectorhdmi\n   00000800 02000000 98000000\n   01050900 00040000 87010000\n   02040a00 00080000 87010000\n   \n\nwhich look similar at first glance, until you see the small details like the port id (the first 2 digits of each hex line). both of the framebuffers are valid, but not all oems ship the same port configuration on all laptops (some have edp for internal display, some have hdmi instead of dp ports, some have vga and so on...).\n\nfor either framebuffer, the first port (port 00) is connectorlvds (meaning the internal display), which is the same on both configurations, that's how you get a display out for macos. the differences come to the 2 other ports:\n\n * 00001b59\n\n02040a00 00080000 87010000 --\x3e\n[2] busid: 0x04, pipe: 10, type: 0x00000800, flags: 0x00000187 - connectorhdmi\n\n03060a00 00040000 87010000 --\x3e\n[3] busid: 0x06, pipe: 10, type: 0x00000400, flags: 0x00000187 - connectordp\n\n\n * 00001659\n\n01050900 00040000 87010000 --\x3e\n[1] busid: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000187 - connectordp\n\n02040a00 00080000 87010000 --\x3e\n[2] busid: 0x04, pipe: 10, type: 0x00000800, flags: 0x00000187 - connectorhdmi\n\n\nthe patches above have these effects:\n\n * patchset 1:\n   * convert second connector of the ports to 0105 with hdmi connector type\n   * convert third connector of the ports to 0204 with hdmi connector type\n * patchset 2:\n   * convert second connector of the ports to 0105 with hdmi connector type\n   * convert third connector of the ports to 0306 with dp connector type\n\ndepending on your real hardware setup, you might want to switch things up, but usually for most laptops, one of the two patches might be required, in case your outputs work out-of-the-box with no issues or crashes, you do not need these patches then.\n\nhow to read the busid\n\nthe bits in the hex string are read as following:\n\n(taking 01050900 00040000 87010000 as example)\n\nbit        name             value\nbit 1      port             01\nbit 2      bus id           05\nbit 3-4    pipe number      0900\nbit 5-8    connector type   00040000\nbit 9-12   flags            87010000\n\npciroot(0x0)/pci(0x1b,0x0)\n\nlayout-id\n\n * applies applealc audio injection, you'll need to do your own research on which codec your motherboard has and match it with applealc's layout. applealc supported codecs.\n * you can delete this property outright as it's unused for us at this time\n\nfor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-ids present. more info on this is covered in the post-install page\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus like pentiums and celerons\n\n * cpuid1mask: leave this blank\n * cpuid1data: leave this blank\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplexcpmcfglock          yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\nthe reason being is that usbinjectall reimplements builtin macos functionality without proper current tuning. it is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args              description\n-wegnoegpu             used for disabling all other gpus than the integrated intel\n                       igpu, useful for those wanting to run newer versions of\n                       macos where their dgpu isn't supported\n-igfxnotelemetryload   prevents igpu telemetry from loading. igpu telemetry may\n                       cause a freeze during startup on certain laptops such as\n                       chromebooks on macos 10.15 and higher, see here for more\n                       information.\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone.\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this kaby lake example, we'll chose the macbookpro14,1 smbios - this is done intentionally for compatibility's sake. the typical breakdown is as follows:\n\nsmbios           cpu type                  gpu type                                    display size   touch id\nmacbookpro14,1   dual core 15w(low end)    igpu: iris plus 640                         13\"            no\nmacbookpro14,2   dual core 15w(high end)   igpu: iris plus 650                         13\"            yes\nmacbookpro14,3   quad core 45w             igpu: hd 630 + dgpu: radeon pro 555x/560x   15\"            yes\nimac18,1         nuc systems               igpu: iris plus 640                         n/a            no\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               macbookpro14,1 smbios info            #\n#######################################################\n\ntype:         macbookpro14,1\nserial:       c02z2cz5h7jy\nboard serial: c02928701guh69ffb\nsmuuid:       aa043f8d-33b6-4a1a-94f7-46972aad0607\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                 enabled   comment\nreleaseusbownership   yes       \nunblockfsconnect      no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * releaseusbownership: yes\n   \n   * releases usb controller from firmware driver, needed for when your firmware doesn't support ehci/xhci handoff. most laptops have garbage firmwares so we'll need this as well\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# config reminders\n\nhp users:\n\n * kernel -> quirks -> lapickernelpanic -> true\n   * you will get a kernel panic on lapic otherwise\n * uefi -> quirks -> unblockfsconnect -> true\n\ndell users:\n\nfor skylake and newer:\n\n * kernel -> quirk -> customsmbiosguid -> true\n * platforminfo -> updatesmbiosmode -> custom\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt(for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applexcpmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * dvmt pre-allocated(igpu memory): 64mb or higher\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Laptop Sandy Bridge",frontmatter:{},regularPath:"/config-laptop.plist/sandy-bridge.html",relativePath:"config-laptop.plist/sandy-bridge.md",key:"v-4d26e368",path:"/config-laptop.plist/sandy-bridge.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:227},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1456},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1467},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:3195},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:4134},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:4548},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:4656},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:4793},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:4548},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:5818},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1467},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:3195},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:8645},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1467},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:10854},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:10996},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:11197},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:4134},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:4548},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:14562},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:15712},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:4656},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:16163},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:17063},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:19405},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:19474},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:19592},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:5142},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1467},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:3195},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:23513},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:24833},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:218},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:26842},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:13858},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:28398},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:28640},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:28864},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:29249},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:4548},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:26532},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:31067},{level:3,title:"Config reminders",slug:"config-reminders",normalizedTitle:"config reminders",charIndex:31387},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:31566},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:11525},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3724}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Config reminders Intel BIOS settings Disable Enable",content:"# Laptop Sandy Bridge\n\nSUPPORT                 VERSION\nInitial macOS Support   OS X 10.6.7, Snow Leopard\nLast Supported OS       macOS 10.13, High Sierra\nNote                    Most Sandy bridge boards do not support UEFI\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-PM          Needed for proper CPU power management, you will need to run\n                 Pike's ssdtPRGen.sh script to generate this file. This will\n                 be run in post install.\nSSDT-EC          Fixes the embedded controller, see Getting Started With ACPI\n                 Guide for more details.\nSSDT-XOSI        Makes all _OSI calls specific to Windows work for macOS\n                 (Darwin) Identifier. This may help enabling some features\n                 like XHCI and others.\nSSDT-PNLF        Fixes brightness control, see Getting Started With ACPI\n                 Guide for more details. Note that Intel NUCs do not need\n                 this\nSSDT-IMEI        Needed to add a missing IMEI device on Sandy Bridge CPU with\n                 7 series motherboards. This is not needed for 6-series\n                 motherboards\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nInfo\n\nThis blocks certain ACPI tables from loading, for us we really care about this. Main reason is that Apple's XCPM does not support Sandy Bridge all too well and can cause AppleIntelCPUPowerManagement panics on boot. To avoid this we make our own PM SSDT in Post-Install and drop the old tables(Note that this is only temporary until we've made our SSDT-PM, we'll re-enable these tables later):\n\nRemoving CpuPm:\n\nKEY              TYPE      VALUE\nAll              Boolean   YES\nComment          String    Delete CpuPm\nEnabled          Boolean   YES\nOemTableId       Data      437075506d000000\nTableLength      Number    0\nTableSignature   Data      53534454\n\nRemoving Cpu0Ist:\n\nKEY              TYPE      VALUE\nAll              Boolean   YES\nComment          String    Delete Cpu0Ist\nEnabled          Boolean   YES\nOemTableId       Data      4370753049737400\nTableLength      Number    0\nTableSignature   Data      53534454\n\n\n# Patch\n\nInfo\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need the following:\n\n * OSI rename\n   * This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT\n\nCOMMENT   STRING    CHANGE _OSI TO XOSI\nEnabled   Boolean   YES\nCount     Number    0\nLimit     Number    0\nFind      Data      5f4f5349\nReplace   Data      584f5349\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be pass-through to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: YES\n   * Needed to remove write protection from CR0 register.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses, required for Gigabyte boards to resolve early kernel panics\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\nThis section is set up via WhateverGreen's Framebuffer Patching Guide and is used for setting important iGPU properties.\n\nThe config.plist doesn't already have a section for this so you will have to create it manually.\n\nWhen setting up your iGPU, the table below should help with finding the right values to set. Here is an explanation of some values:\n\n * AAPL,snb-platform-id\n   * This is used internally for setting up the iGPU\n * Type\n   * Whether the entry is recommended for laptops(ie. with built-in displays) or for Intel NUCs(ie. stand alone boxes)\n\nGenerally follow these steps when setting up your iGPU properties. Follow the configuration notes below the table if they say anything different:\n\n 1. When initially setting up your config.plist, only set AAPL,snb-platform-id - this is normally enough\n\nAAPL,SNB-PLATFORM-ID   TYPE     COMMENT\n00000100               Laptop   To be used with laptops\n10000300               NUC      To be used with Intel NUCs\n\n# Laptops with High-End HD Screens\n\nFor laptop displays that have a resolution of 1600x900 or greater, it is necessary to add an extra entry which will let macOS know that we are using a DualLink display.\n\nKEY               TYPE   VALUE\nAAPL00,DualLink   Data   01000000\n\n# Configuration Notes\n\n * VGA is not supported (unless it's running through a DP to VGA internal adapter, which apparently only rare devices will see it as DP and not VGA, it's all about luck.)\n * HD 2000 series are unsupported as well\n\nPciRoot(0x0)/Pci(0x16,0x0)\n\nSandy/IvyBridge Hybrids:\n\nSome laptops from this era came with a mixed chipset setup, using Sandy Bridge CPUs with Ivy Bridge chipsets which creates issues with macOS since it expects a certain IMEI ID that it doesn't find and would get stuck at boot(As Apple's iGPU drivers require an IMEI device), to fix this we need to fake the IMEI's IDs in these models\n\n * To know if you're affected check if your CPU is an Intel Core ix-3xxx and your chipset is Hx6x (for example a laptop with HM65 or HM67 with a Core i3-3110M) through tools like AIDA64.\n * In your config add a new PciRoot device named PciRoot(0x0)/Pci(0x16,0x0)\n\nKEY         TYPE   VALUE\ndevice-id   Data   3A1C0000\n\nPciRoot(0x0)/Pci(0x1b,0x0)\n\nlayout-id\n\n * Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs.\n * You can delete this property outright as it's unused for us at this time\n\nFor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present. More info on this is covered in the Post-Install Page\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons\n\n * Cpuid1Mask: Leave this blank\n * Cpuid1Data: Leave this blank\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleCpuPmCfgLock         YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       If your board does not have USB 3.0, you can disable\n                                    Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\nThe reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS    DESCRIPTION\n-wegnoegpu   Used for disabling all other GPUs than the integrated Intel\n             iGPU, useful for those wanting to run newer versions of\n             macOS where their dGPU isn't supported\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone.\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Sandy Bridge example, we'll chose the MacBookPro8,1 SMBIOS - this is done intentionally for compatibility's sake. The typical breakdown is as follows:\n\nSMBIOS          CPU TYPE                  GPU TYPE                DISPLAY SIZE\nMacBookAir4,1   Dual Core 17W             iGPU: HD 3000           11\"\nMacBookAir4,2   Dual Core 17W             iGPU: HD 3000           13\"\nMacBookPro8,1   Dual Core 35W             iGPU: HD 3000           13\"\nMacBookPro8,2   Quad Core 45W(High End)   iGPU: HD 3000 + 6490M   15\"\nMacBookPro8,3   Quad Core 45W(High End)   iGPU: HD 3000 + 6750M   17\"\nMacmini5,1      Dual Core NUC             iGPU: HD 3000           N/A\nMacmini5,3      Quad Core NUC             iGPU: HD 3000           N/A\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #                MacBookPro8,2 SMBIOS Info            #\n#######################################################\n\nType:         MacBookPro8,2\nSerial:       C02KCYZLDNCW\nBoard Serial: C02309301QXF2FRJC\nSmUUID:       A154B586-874B-4E57-A1FF-9D6E503E4580\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlusLegacy.efi\n * OpenRuntime.efi\n * OpenUsbKbDxe.efi(If your firmware does not support UEFI)\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nInfo\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default besides:\n\nQUIRK        VALUE   COMMENT\nKeySupport   NO      Enable if your BIOS supports UEFI\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                    ENABLED   COMMENT\nIgnoreInvalidFlexRatio   YES       \nReleaseUsbOwnership      YES       \nUnblockFsConnect         NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * IgnoreInvalidFlexRatio: YES\n   \n   * Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-Skylake based systems\n\n * ReleaseUsbOwnership: YES\n   \n   * Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Most laptops have garbage firmwares so we'll need this as well\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Config reminders\n\nHP Users:\n\n * Kernel -> Quirks -> LapicKernelPanic -> True\n   * You will get a kernel panic on LAPIC otherwise\n * UEFI -> Quirks -> UnblockFsConnect -> True\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\nThese are the main options to check for, if you can't find it or an equivalent for it, just skip it.\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled) (or Legacy Support, or Hybrid Boot)\n * Thunderbolt (For initial install, as Thunderbolt can cause issues if not setup correctly, if available)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleCpuPmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n\n\n# Enable\n\n * VT-x (Virtualization Support)\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * DVMT Pre-Allocated(iGPU Memory): 32MB or higher\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# laptop sandy bridge\n\nsupport                 version\ninitial macos support   os x 10.6.7, snow leopard\nlast supported os       macos 10.13, high sierra\nnote                    most sandy bridge boards do not support uefi\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-pm          needed for proper cpu power management, you will need to run\n                 pike's ssdtprgen.sh script to generate this file. this will\n                 be run in post install.\nssdt-ec          fixes the embedded controller, see getting started with acpi\n                 guide for more details.\nssdt-xosi        makes all _osi calls specific to windows work for macos\n                 (darwin) identifier. this may help enabling some features\n                 like xhci and others.\nssdt-pnlf        fixes brightness control, see getting started with acpi\n                 guide for more details. note that intel nucs do not need\n                 this\nssdt-imei        needed to add a missing imei device on sandy bridge cpu with\n                 7 series motherboards. this is not needed for 6-series\n                 motherboards\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\ninfo\n\nthis blocks certain acpi tables from loading, for us we really care about this. main reason is that apple's xcpm does not support sandy bridge all too well and can cause appleintelcpupowermanagement panics on boot. to avoid this we make our own pm ssdt in post-install and drop the old tables(note that this is only temporary until we've made our ssdt-pm, we'll re-enable these tables later):\n\nremoving cpupm:\n\nkey              type      value\nall              boolean   yes\ncomment          string    delete cpupm\nenabled          boolean   yes\noemtableid       data      437075506d000000\ntablelength      number    0\ntablesignature   data      53534454\n\nremoving cpu0ist:\n\nkey              type      value\nall              boolean   yes\ncomment          string    delete cpu0ist\nenabled          boolean   yes\noemtableid       data      4370753049737400\ntablelength      number    0\ntablesignature   data      53534454\n\n\n# patch\n\ninfo\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, we'll need the following:\n\n * osi rename\n   * this is required when using ssdt-xosi as we redirect all osi calls to this ssdt\n\ncomment   string    change _osi to xosi\nenabled   boolean   yes\ncount     number    0\nlimit     number    0\nfind      data      5f4f5349\nreplace   data      584f5349\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be pass-through to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: yes\n   * needed to remove write protection from cr0 register.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses, required for gigabyte boards to resolve early kernel panics\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\npciroot(0x0)/pci(0x2,0x0)\n\nthis section is set up via whatevergreen's framebuffer patching guide and is used for setting important igpu properties.\n\nthe config.plist doesn't already have a section for this so you will have to create it manually.\n\nwhen setting up your igpu, the table below should help with finding the right values to set. here is an explanation of some values:\n\n * aapl,snb-platform-id\n   * this is used internally for setting up the igpu\n * type\n   * whether the entry is recommended for laptops(ie. with built-in displays) or for intel nucs(ie. stand alone boxes)\n\ngenerally follow these steps when setting up your igpu properties. follow the configuration notes below the table if they say anything different:\n\n 1. when initially setting up your config.plist, only set aapl,snb-platform-id - this is normally enough\n\naapl,snb-platform-id   type     comment\n00000100               laptop   to be used with laptops\n10000300               nuc      to be used with intel nucs\n\n# laptops with high-end hd screens\n\nfor laptop displays that have a resolution of 1600x900 or greater, it is necessary to add an extra entry which will let macos know that we are using a duallink display.\n\nkey               type   value\naapl00,duallink   data   01000000\n\n# configuration notes\n\n * vga is not supported (unless it's running through a dp to vga internal adapter, which apparently only rare devices will see it as dp and not vga, it's all about luck.)\n * hd 2000 series are unsupported as well\n\npciroot(0x0)/pci(0x16,0x0)\n\nsandy/ivybridge hybrids:\n\nsome laptops from this era came with a mixed chipset setup, using sandy bridge cpus with ivy bridge chipsets which creates issues with macos since it expects a certain imei id that it doesn't find and would get stuck at boot(as apple's igpu drivers require an imei device), to fix this we need to fake the imei's ids in these models\n\n * to know if you're affected check if your cpu is an intel core ix-3xxx and your chipset is hx6x (for example a laptop with hm65 or hm67 with a core i3-3110m) through tools like aida64.\n * in your config add a new pciroot device named pciroot(0x0)/pci(0x16,0x0)\n\nkey         type   value\ndevice-id   data   3a1c0000\n\npciroot(0x0)/pci(0x1b,0x0)\n\nlayout-id\n\n * applies applealc audio injection, you'll need to do your own research on which codec your motherboard has and match it with applealc's layout. applealc supported codecs.\n * you can delete this property outright as it's unused for us at this time\n\nfor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-ids present. more info on this is covered in the post-install page\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus like pentiums and celerons\n\n * cpuid1mask: leave this blank\n * cpuid1data: leave this blank\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplecpupmcfglock         yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       if your board does not have usb 3.0, you can disable\n                                    disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\nthe reason being is that usbinjectall reimplements builtin macos functionality without proper current tuning. it is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args    description\n-wegnoegpu   used for disabling all other gpus than the integrated intel\n             igpu, useful for those wanting to run newer versions of\n             macos where their dgpu isn't supported\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone.\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this sandy bridge example, we'll chose the macbookpro8,1 smbios - this is done intentionally for compatibility's sake. the typical breakdown is as follows:\n\nsmbios          cpu type                  gpu type                display size\nmacbookair4,1   dual core 17w             igpu: hd 3000           11\"\nmacbookair4,2   dual core 17w             igpu: hd 3000           13\"\nmacbookpro8,1   dual core 35w             igpu: hd 3000           13\"\nmacbookpro8,2   quad core 45w(high end)   igpu: hd 3000 + 6490m   15\"\nmacbookpro8,3   quad core 45w(high end)   igpu: hd 3000 + 6750m   17\"\nmacmini5,1      dual core nuc             igpu: hd 3000           n/a\nmacmini5,3      quad core nuc             igpu: hd 3000           n/a\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #                macbookpro8,2 smbios info            #\n#######################################################\n\ntype:         macbookpro8,2\nserial:       c02kcyzldncw\nboard serial: c02309301qxf2frjc\nsmuuid:       a154b586-874b-4e57-a1ff-9d6e503e4580\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfspluslegacy.efi\n * openruntime.efi\n * openusbkbdxe.efi(if your firmware does not support uefi)\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\ninfo\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default besides:\n\nquirk        value   comment\nkeysupport   no      enable if your bios supports uefi\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                    enabled   comment\nignoreinvalidflexratio   yes       \nreleaseusbownership      yes       \nunblockfsconnect         no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * ignoreinvalidflexratio: yes\n   \n   * fix for when msr_flex_ratio (0x194) can't be disabled in the bios, required for all pre-skylake based systems\n\n * releaseusbownership: yes\n   \n   * releases usb controller from firmware driver, needed for when your firmware doesn't support ehci/xhci handoff. most laptops have garbage firmwares so we'll need this as well\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# config reminders\n\nhp users:\n\n * kernel -> quirks -> lapickernelpanic -> true\n   * you will get a kernel panic on lapic otherwise\n * uefi -> quirks -> unblockfsconnect -> true\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\nthese are the main options to check for, if you can't find it or an equivalent for it, just skip it.\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled) (or legacy support, or hybrid boot)\n * thunderbolt (for initial install, as thunderbolt can cause issues if not setup correctly, if available)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applecpupmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n\n\n# enable\n\n * vt-x (virtualization support)\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * dvmt pre-allocated(igpu memory): 32mb or higher\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Laptop Skylake",frontmatter:{},regularPath:"/config-laptop.plist/skylake.html",relativePath:"config-laptop.plist/skylake.md",key:"v-3fc29c76",path:"/config-laptop.plist/skylake.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:184},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1413},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1424},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2966},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:3051},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:3511},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:3619},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:3756},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:3511},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:5096},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1424},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2966},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:8152},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1424},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:10361},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:10503},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:10704},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:3051},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:3511},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:13980},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:15130},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:3619},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:15581},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:16481},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:18823},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:18892},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:19010},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:4133},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1424},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2966},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:23248},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:24681},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:4211},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:26690},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:13276},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:28180},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:28422},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:28632},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:29017},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:3511},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:26380},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:30639},{level:3,title:"Config reminders",slug:"config-reminders",normalizedTitle:"config reminders",charIndex:30959},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:31269},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:11032},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3381}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Config reminders Intel BIOS settings Disable Enable",content:"# Laptop Skylake\n\nSUPPORT                 VERSION\nInitial macOS Support   OS X 10.11, El Capitan\nNote                    Skylake's iGPU is only officially supported up to macOS 12\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-PLUG        Allows for native CPU power management on Haswell and newer,\n                 see Getting Started With ACPI Guide for more details.\nSSDT-EC-USBX     Fixes both the embedded controller and USB power, see\n                 Getting Started With ACPI Guide for more details.\nSSDT-GPIO        Creates a stub so VoodooI2C can connect, for those having\n                 troubles getting VoodooI2C working can try SSDT-XOSI\n                 instead. Note that Intel NUCs do not need this\nSSDT-PNLF        Fixes brightness control, see Getting Started With ACPI\n                 Guide for more details. Note that Intel NUCs do not need\n                 this\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nInfo\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, we'll need the following:\n\n * OSI rename\n   * This is required when using SSDT-XOSI as we redirect all OSI calls to this SSDT, this is not needed if you're using SSDT-GPIO\n\nCOMMENT   STRING    CHANGE _OSI TO XOSI\nEnabled   Boolean   YES\nCount     Number    0\nLimit     Number    0\nFind      Data      5f4f5349\nReplace   Data      584f5349\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be pass-through to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes. For most users, leave it as default.\n\n * ProtectMemoryRegions: YES\n   * Fixes shutdown/restart on some Chromebooks that would otherwise result in a AppleEFINVRAM kernel panic.\n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: YES\n   * Needed to remove write protection from CR0 register.\n * ProtectMemoryRegions: YES\n   * Patches memory region types for incorrectly mapped CSM/MMIO regions. Necessary for all Chromebooks that utilize coreboot UEFI firmware.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses, required for Gigabyte boards to resolve early kernel panics\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\nThis section is set up via WhateverGreen's Framebuffer Patching Guide and is used for setting important iGPU properties.\n\nThe config.plist doesn't already have a section for this so you will have to create it manually.\n\nWhen setting up your iGPU, the table below should help with finding the right values to set. Here is an explanation of some values:\n\n * AAPL,ig-platform-id\n   * This is used internally for setting up the iGPU\n * Type\n   * Whether the entry is recommended for laptops(ie. with built-in displays) or for Intel NUCs(ie. stand alone boxes)\n\nGenerally follow these steps when setting up your iGPU properties. Follow the configuration notes below the table if they say anything different:\n\n 1. When initially setting up your config.plist, only set AAPL,ig-platform-id - this is normally enough\n 2. If you boot and you get no graphics acceleration (7MB VRAM and solid background for dock), then you likely need to try different AAPL,ig-platform-id values, add stolenmem patches, or even add a device-id property.\n\nAAPL,IG-PLATFORM-ID   TYPE     COMMENT\n00001619              Laptop   Recommended value for HD 515, HD 520, HD 530, HD 540, HD 550\n                               and P530\n00001E19              Laptop   Alternative for HD 515 if you have issues with the above\n                               entry\n00001B19              Laptop   Recommended value for HD 510\n00001E19              NUC      Recommended for HD 515\n02001619              NUC      Recommended for HD 520/530\n02002619              NUC      Recommended for HD 540/550\n05003B19              NUC      Recommended for HD 580\n\nNote: If booting macOS Ventura, you need to spoof your iGPU as the closest Kaby Lake model.\n\n# Configuration Notes\n\n * For HD 510 you will need to use a device-id spoof:\n\nKEY         TYPE   VALUE\ndevice-id   Data   02190000\n\n * For HD 550 and P530 (and potentially all HD P-series iGPUs), you may need to use device-id=16190000:\n\nKEY         TYPE   VALUE\ndevice-id   Data   16190000\n\n * In some cases where you cannot set the DVMT-prealloc of these cards to 64MB higher in your UEFI Setup, you may get a kernel panic. Usually they're configured for 32MB of DVMT-prealloc, in that case these values are added to your iGPU Properties\n\nKEY                        TYPE   VALUE\nframebuffer-patch-enable   Data   01000000\nframebuffer-stolenmem      Data   00003001\nframebuffer-fbmem          Data   00009000\n\nPciRoot(0x0)/Pci(0x1b,0x0)\n\nlayout-id\n\n * Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs.\n * You can delete this property outright as it's unused for us at this time\n\nFor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present. More info on this is covered in the Post-Install Page\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons\n\n * Cpuid1Mask: Leave this blank\n * Cpuid1Data: Leave this blank\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleXcpmCfgLock          YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\nThe reason being is that UsbInjectAll reimplements builtin macOS functionality without proper current tuning. It is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modifications\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS              DESCRIPTION\n-wegnoegpu             Used for disabling all other GPUs than the integrated Intel\n                       iGPU, useful for those wanting to run newer versions of\n                       macOS where their dGPU isn't supported\n-igfxnotelemetryload   Prevents iGPU telemetry from loading. iGPU telemetry may\n                       cause a freeze during startup on certain laptops such as\n                       Chromebooks on macOS 10.15 and higher, see here for more\n                       information.\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone.\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Skylake example, we'll choose the MacBookPro13,1 SMBIOS. The typical breakdown is as follows:\n\nSMBIOS           CPU TYPE                  GPU TYPE                                  DISPLAY SIZE   TOUCH ID\nMacBook9,1       Dual Core 7W(Low End)     iGPU: HD 515                              12\"            No\nMacBookPro13,1   Dual Core 15W(Low End)    iGPU: Iris 540                            13\"            No\nMacBookPro13,2   Dual Core 15W(High End)   iGPU: Iris 550                            13\"            Yes\nMacBookPro13,3   Quad Core 45W             iGPU: HD 530 + dGPU: Radeon Pro 450/455   15\"            Yes\niMac17,1         NUC Systems               iGPU: HD 530 + R9 290                     N/A            No\n\nNote 2: All of these SMBIOSes were dropped in macOS Ventura. If running macOS Ventura, use a Kaby Lake SMBIOS.\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               MacBookPro13,1 SMBIOS Info            #\n#######################################################\n\nType:         MacBookPro13,1\nSerial:       C02S3HYWGG7L\nBoard Serial: C02629102GUGPF7AD\nSmUUID:       3508AD44-B67D-4AD7-A109-7955130A1033\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                 ENABLED   COMMENT\nReleaseUsbOwnership   YES       \nUnblockFsConnect      NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * ReleaseUsbOwnership: YES\n   \n   * Releases USB controller from firmware driver, needed for when your firmware doesn't support EHCI/XHCI Handoff. Most laptops have garbage firmwares so we'll need this as well\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Config reminders\n\nHP Users:\n\n * Kernel -> Quirks -> LapicKernelPanic -> True\n   * You will get a kernel panic on LAPIC otherwise\n * UEFI -> Quirks -> UnblockFsConnect -> True\n\nDell Users:\n\nFor Skylake and newer:\n\n * Kernel -> Quirk -> CustomSMBIOSGuid -> True\n * PlatformInfo -> UpdateSMBIOSMode -> Custom\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt(For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * DVMT Pre-Allocated(iGPU Memory): 64MB or higher\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# laptop skylake\n\nsupport                 version\ninitial macos support   os x 10.11, el capitan\nnote                    skylake's igpu is only officially supported up to macos 12\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-plug        allows for native cpu power management on haswell and newer,\n                 see getting started with acpi guide for more details.\nssdt-ec-usbx     fixes both the embedded controller and usb power, see\n                 getting started with acpi guide for more details.\nssdt-gpio        creates a stub so voodooi2c can connect, for those having\n                 troubles getting voodooi2c working can try ssdt-xosi\n                 instead. note that intel nucs do not need this\nssdt-pnlf        fixes brightness control, see getting started with acpi\n                 guide for more details. note that intel nucs do not need\n                 this\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\ninfo\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, we'll need the following:\n\n * osi rename\n   * this is required when using ssdt-xosi as we redirect all osi calls to this ssdt, this is not needed if you're using ssdt-gpio\n\ncomment   string    change _osi to xosi\nenabled   boolean   yes\ncount     number    0\nlimit     number    0\nfind      data      5f4f5349\nreplace   data      584f5349\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be pass-through to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes. for most users, leave it as default.\n\n * protectmemoryregions: yes\n   * fixes shutdown/restart on some chromebooks that would otherwise result in a appleefinvram kernel panic.\n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: yes\n   * needed to remove write protection from cr0 register.\n * protectmemoryregions: yes\n   * patches memory region types for incorrectly mapped csm/mmio regions. necessary for all chromebooks that utilize coreboot uefi firmware.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses, required for gigabyte boards to resolve early kernel panics\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\npciroot(0x0)/pci(0x2,0x0)\n\nthis section is set up via whatevergreen's framebuffer patching guide and is used for setting important igpu properties.\n\nthe config.plist doesn't already have a section for this so you will have to create it manually.\n\nwhen setting up your igpu, the table below should help with finding the right values to set. here is an explanation of some values:\n\n * aapl,ig-platform-id\n   * this is used internally for setting up the igpu\n * type\n   * whether the entry is recommended for laptops(ie. with built-in displays) or for intel nucs(ie. stand alone boxes)\n\ngenerally follow these steps when setting up your igpu properties. follow the configuration notes below the table if they say anything different:\n\n 1. when initially setting up your config.plist, only set aapl,ig-platform-id - this is normally enough\n 2. if you boot and you get no graphics acceleration (7mb vram and solid background for dock), then you likely need to try different aapl,ig-platform-id values, add stolenmem patches, or even add a device-id property.\n\naapl,ig-platform-id   type     comment\n00001619              laptop   recommended value for hd 515, hd 520, hd 530, hd 540, hd 550\n                               and p530\n00001e19              laptop   alternative for hd 515 if you have issues with the above\n                               entry\n00001b19              laptop   recommended value for hd 510\n00001e19              nuc      recommended for hd 515\n02001619              nuc      recommended for hd 520/530\n02002619              nuc      recommended for hd 540/550\n05003b19              nuc      recommended for hd 580\n\nnote: if booting macos ventura, you need to spoof your igpu as the closest kaby lake model.\n\n# configuration notes\n\n * for hd 510 you will need to use a device-id spoof:\n\nkey         type   value\ndevice-id   data   02190000\n\n * for hd 550 and p530 (and potentially all hd p-series igpus), you may need to use device-id=16190000:\n\nkey         type   value\ndevice-id   data   16190000\n\n * in some cases where you cannot set the dvmt-prealloc of these cards to 64mb higher in your uefi setup, you may get a kernel panic. usually they're configured for 32mb of dvmt-prealloc, in that case these values are added to your igpu properties\n\nkey                        type   value\nframebuffer-patch-enable   data   01000000\nframebuffer-stolenmem      data   00003001\nframebuffer-fbmem          data   00009000\n\npciroot(0x0)/pci(0x1b,0x0)\n\nlayout-id\n\n * applies applealc audio injection, you'll need to do your own research on which codec your motherboard has and match it with applealc's layout. applealc supported codecs.\n * you can delete this property outright as it's unused for us at this time\n\nfor us, we'll be using the boot argument alcid=xxx instead to accomplish this. alcid will override all other layout-ids present. more info on this is covered in the post-install page\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus like pentiums and celerons\n\n * cpuid1mask: leave this blank\n * cpuid1data: leave this blank\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplexcpmcfglock          yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\nthe reason being is that usbinjectall reimplements builtin macos functionality without proper current tuning. it is much cleaner to just describe your ports in a single plist-only kext, which will not waste runtime memory and such\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modifications\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args              description\n-wegnoegpu             used for disabling all other gpus than the integrated intel\n                       igpu, useful for those wanting to run newer versions of\n                       macos where their dgpu isn't supported\n-igfxnotelemetryload   prevents igpu telemetry from loading. igpu telemetry may\n                       cause a freeze during startup on certain laptops such as\n                       chromebooks on macos 10.15 and higher, see here for more\n                       information.\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone.\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this skylake example, we'll choose the macbookpro13,1 smbios. the typical breakdown is as follows:\n\nsmbios           cpu type                  gpu type                                  display size   touch id\nmacbook9,1       dual core 7w(low end)     igpu: hd 515                              12\"            no\nmacbookpro13,1   dual core 15w(low end)    igpu: iris 540                            13\"            no\nmacbookpro13,2   dual core 15w(high end)   igpu: iris 550                            13\"            yes\nmacbookpro13,3   quad core 45w             igpu: hd 530 + dgpu: radeon pro 450/455   15\"            yes\nimac17,1         nuc systems               igpu: hd 530 + r9 290                     n/a            no\n\nnote 2: all of these smbioses were dropped in macos ventura. if running macos ventura, use a kaby lake smbios.\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               macbookpro13,1 smbios info            #\n#######################################################\n\ntype:         macbookpro13,1\nserial:       c02s3hywgg7l\nboard serial: c02629102gugpf7ad\nsmuuid:       3508ad44-b67d-4ad7-a109-7955130a1033\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                 enabled   comment\nreleaseusbownership   yes       \nunblockfsconnect      no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * releaseusbownership: yes\n   \n   * releases usb controller from firmware driver, needed for when your firmware doesn't support ehci/xhci handoff. most laptops have garbage firmwares so we'll need this as well\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# config reminders\n\nhp users:\n\n * kernel -> quirks -> lapickernelpanic -> true\n   * you will get a kernel panic on lapic otherwise\n * uefi -> quirks -> unblockfsconnect -> true\n\ndell users:\n\nfor skylake and newer:\n\n * kernel -> quirk -> customsmbiosguid -> true\n * platforminfo -> updatesmbiosmode -> custom\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt(for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applexcpmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * dvmt pre-allocated(igpu memory): 64mb or higher\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"config.plist Setup",frontmatter:{},regularPath:"/config.plist/",relativePath:"config.plist/README.md",key:"v-67fca2b5",path:"/config.plist/",headers:[{level:2,title:"Creating your config.plist",slug:"creating-your-config-plist",normalizedTitle:"creating your config.plist",charIndex:252},{level:2,title:"Adding your SSDTs, Kexts and Firmware Drivers",slug:"adding-your-ssdts-kexts-and-firmware-drivers",normalizedTitle:"adding your ssdts, kexts and firmware drivers",charIndex:522},{level:2,title:"Selecting your platform",slug:"selecting-your-platform",normalizedTitle:"selecting your platform",charIndex:2520},{level:3,title:"Intel Desktop",slug:"intel-desktop",normalizedTitle:"intel desktop",charIndex:2759},{level:3,title:"Intel Laptop",slug:"intel-laptop",normalizedTitle:"intel laptop",charIndex:2882},{level:3,title:"Intel HEDT",slug:"intel-hedt",normalizedTitle:"intel hedt",charIndex:4240},{level:3,title:"AMD",slug:"amd",normalizedTitle:"amd",charIndex:4732}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Creating your config.plist Adding your SSDTs, Kexts and Firmware Drivers Selecting your platform Intel Desktop Intel Laptop Intel HEDT AMD",content:"# config.plist Setup\n\nNow that we've got all our Kexts(.kext), SSDTs(.aml) and firmware drivers(.efi), your USB should start to look something like this:\n\n\n\n * Note: Your USB will look different, everyone's system will have different requirements.\n\n\n# Creating your config.plist\n\nFirst we'll want to grab the Sample.plist from the OpenCorePkg, this will be located under the Docs folder:\n\n\n\nNext lets move it onto our USB's EFI partition(will be called BOOT on Windows) under EFI/OC/, and rename it to config.plist:\n\n\n\n\n# Adding your SSDTs, Kexts and Firmware Drivers\n\nFor the rest of this guide, you're gonna need some form of plist editing. And for our guide, we'll be using ProperTree and GenSMBIOS to help automate some of the tedious work:\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n\nNext, let's open ProperTree and edit our config.plist:\n\n * ProperTree.command\n   * For macOS\n   * Pro tip: there's a buildapp.command utility in the Scripts folder that lets you turn ProperTree into a dedicated app in macOS\n * ProperTree.bat\n   * For Windows\n\nOnce ProperTree is running, open your config.plist by pressing Cmd/Ctrl + O and selecting the config.plist file on your USB.\n\nAfter the config is opened, press Cmd/Ctrl + Shift + R and point it at your EFI/OC folder to perform a \"Clean Snapshot\":\n\n * This will remove all the entries from the config.plist and then adds all your SSDTs, Kexts and Firmware drivers to the config\n * Cmd/Ctrl + R is another option that will add all your files as well but will leave entries disabled if they were set like that before, useful for when you're troubleshooting but for us not needed right now\n\n\n\nOnce done, you'll see your SSDTs, Kexts and firmware drivers populated in the config.plist:\n\n\n\n * Note: If you get a pop up \"Disable the following kexts with Duplicate CFBundleIdentifiers?\", press \"Yes\". This is to ensure you don't have duplicate kexts being injected, as some kexts may have some of the same plugins(ie. VoodooInput is in both VoodooPS2 and VoodooI2C's plugin folder)\n\n\n\nIf you wish to clean up the file a bit, you can remove the #WARNING entries. Though they cause no issues staying there, so up to personal preference.\n\nDANGER\n\nThe config.plist must match the contents of the EFI folder. If you delete a file but leave it listed in the Config.plist, OpenCore will error and stop booting.\n\nIf you make any modifications, you can use the OC snapshot tool (Cmd/Ctrl + R) in ProperTree to update the config.plist.\n\n\n# Selecting your platform\n\nNow comes the important part, selecting the configuration path. Each platform has their own unique quirks that you need to account for so knowing your hardware is super important. See below for what to follow:\n\n\n# Intel Desktop\n\n * Note: Intel's NUC series are considered mobile hardware, for these situations we recommend following the Intel Laptop Section\n\nCODE NAME                  SERIES                       RELEASE\nYonah, Conroe and Penryn   E8XXX, Q9XXX, etc 1, etc 2   2006-2009 era\nLynnfield and Clarkdale    5XX-8XX                      2010 era\nSandy Bridge               2XXX                         2011 era\nIvy Bridge                 3XXX                         2012 era\nHaswell                    4XXX                         2013-2014 era\nSkylake                    6XXX                         2015-2016 era\nKaby Lake                  7XXX                         2017 era\nCoffee Lake                8XXX-9XXX                    2017-2019 era\nComet Lake                 10XXX                        2020 era\n\n\n# Intel Laptop\n\nCODE NAME                         SERIES       RELEASE\nClarksfield and Arrandale         3XX-9XX      2010 era\nSandy Bridge                      2XXX         2011 era\nIvy Bridge                        3XXX         2012 era\nHaswell                           4XXX         2013-2014 era\nBroadwell                         5XXX         2014-2015 era\nSkylake                           6XXX         2015-2016 era\nKaby Lake and Amber Lake          7XXX         2017 era\nCoffee Lake and Whiskey Lake      8XXX         2017-2018 era\nCoffee Lake Plus and Comet Lake   9XXX-10XXX   2019-2020 era\nIce Lake                          10XXX        2019-2020 era\n\n\n# Intel HEDT\n\nThis section includes both enthusiast and server based hardware.\n\nCODE NAME                  SERIES                        RELEASE\nNehalem and Westmere       9XX, X3XXX, X5XXX, etc 1, 2   2008-2010 era\nSandy/Ivy Bridge-E         3XXX, 4XXX                    2011-2013 era\nHaswell-E                  5XXX                          2014 era\nBroadwell-E                6XXX                          2016 era\nSkylake/Cascade Lake-X/W   7XXX, 9XXX, 10XXX             2017-2019 era\n\n\n# AMD\n\nCODE NAME          SERIES                   RELEASE\nBulldozer/Jaguar   It's weird               AMD was really bad with naming back then\nZen                1XXX, 2XXX, 3XXX, 5XXX   2017-2020 era\n\n * Note: Threadripper 3rd gen(39XX) are not supported, 1st and 2nd gen however are supported\n   * Latest BIOS and OpenCore version has resolved this issue, all Threadripper platforms are now supported",normalizedContent:"# config.plist setup\n\nnow that we've got all our kexts(.kext), ssdts(.aml) and firmware drivers(.efi), your usb should start to look something like this:\n\n\n\n * note: your usb will look different, everyone's system will have different requirements.\n\n\n# creating your config.plist\n\nfirst we'll want to grab the sample.plist from the opencorepkg, this will be located under the docs folder:\n\n\n\nnext lets move it onto our usb's efi partition(will be called boot on windows) under efi/oc/, and rename it to config.plist:\n\n\n\n\n# adding your ssdts, kexts and firmware drivers\n\nfor the rest of this guide, you're gonna need some form of plist editing. and for our guide, we'll be using propertree and gensmbios to help automate some of the tedious work:\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n\nnext, let's open propertree and edit our config.plist:\n\n * propertree.command\n   * for macos\n   * pro tip: there's a buildapp.command utility in the scripts folder that lets you turn propertree into a dedicated app in macos\n * propertree.bat\n   * for windows\n\nonce propertree is running, open your config.plist by pressing cmd/ctrl + o and selecting the config.plist file on your usb.\n\nafter the config is opened, press cmd/ctrl + shift + r and point it at your efi/oc folder to perform a \"clean snapshot\":\n\n * this will remove all the entries from the config.plist and then adds all your ssdts, kexts and firmware drivers to the config\n * cmd/ctrl + r is another option that will add all your files as well but will leave entries disabled if they were set like that before, useful for when you're troubleshooting but for us not needed right now\n\n\n\nonce done, you'll see your ssdts, kexts and firmware drivers populated in the config.plist:\n\n\n\n * note: if you get a pop up \"disable the following kexts with duplicate cfbundleidentifiers?\", press \"yes\". this is to ensure you don't have duplicate kexts being injected, as some kexts may have some of the same plugins(ie. voodooinput is in both voodoops2 and voodooi2c's plugin folder)\n\n\n\nif you wish to clean up the file a bit, you can remove the #warning entries. though they cause no issues staying there, so up to personal preference.\n\ndanger\n\nthe config.plist must match the contents of the efi folder. if you delete a file but leave it listed in the config.plist, opencore will error and stop booting.\n\nif you make any modifications, you can use the oc snapshot tool (cmd/ctrl + r) in propertree to update the config.plist.\n\n\n# selecting your platform\n\nnow comes the important part, selecting the configuration path. each platform has their own unique quirks that you need to account for so knowing your hardware is super important. see below for what to follow:\n\n\n# intel desktop\n\n * note: intel's nuc series are considered mobile hardware, for these situations we recommend following the intel laptop section\n\ncode name                  series                       release\nyonah, conroe and penryn   e8xxx, q9xxx, etc 1, etc 2   2006-2009 era\nlynnfield and clarkdale    5xx-8xx                      2010 era\nsandy bridge               2xxx                         2011 era\nivy bridge                 3xxx                         2012 era\nhaswell                    4xxx                         2013-2014 era\nskylake                    6xxx                         2015-2016 era\nkaby lake                  7xxx                         2017 era\ncoffee lake                8xxx-9xxx                    2017-2019 era\ncomet lake                 10xxx                        2020 era\n\n\n# intel laptop\n\ncode name                         series       release\nclarksfield and arrandale         3xx-9xx      2010 era\nsandy bridge                      2xxx         2011 era\nivy bridge                        3xxx         2012 era\nhaswell                           4xxx         2013-2014 era\nbroadwell                         5xxx         2014-2015 era\nskylake                           6xxx         2015-2016 era\nkaby lake and amber lake          7xxx         2017 era\ncoffee lake and whiskey lake      8xxx         2017-2018 era\ncoffee lake plus and comet lake   9xxx-10xxx   2019-2020 era\nice lake                          10xxx        2019-2020 era\n\n\n# intel hedt\n\nthis section includes both enthusiast and server based hardware.\n\ncode name                  series                        release\nnehalem and westmere       9xx, x3xxx, x5xxx, etc 1, 2   2008-2010 era\nsandy/ivy bridge-e         3xxx, 4xxx                    2011-2013 era\nhaswell-e                  5xxx                          2014 era\nbroadwell-e                6xxx                          2016 era\nskylake/cascade lake-x/w   7xxx, 9xxx, 10xxx             2017-2019 era\n\n\n# amd\n\ncode name          series                   release\nbulldozer/jaguar   it's weird               amd was really bad with naming back then\nzen                1xxx, 2xxx, 3xxx, 5xxx   2017-2020 era\n\n * note: threadripper 3rd gen(39xx) are not supported, 1st and 2nd gen however are supported\n   * latest bios and opencore version has resolved this issue, all threadripper platforms are now supported",charsets:{}},{title:"Desktop Lynnfield and Clarkdale",frontmatter:{},regularPath:"/config.plist/clarkdale.html",relativePath:"config.plist/clarkdale.md",key:"v-1fe9e6ee",path:"/config.plist/clarkdale.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:384},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1613},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1624},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2620},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:2705},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:2957},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:3065},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:3225},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:2957},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:4990},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1624},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2620},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:5356},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1624},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:7565},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:7707},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:7908},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:2705},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:2957},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:10952},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:12102},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:3065},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:12553},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:13453},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:15795},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:15864},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:15982},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:4145},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1624},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2620},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:20561},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:21596},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:375},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:18694},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:10480},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:25161},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:25403},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:25627},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:26012},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:2957},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:23295},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:27582},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:27902},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:8236},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3680}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Intel BIOS settings Disable Enable",content:"# Desktop Lynnfield and Clarkdale\n\nSUPPORT                 VERSION\nInitial macOS Support   OS X 10.6.3, Snow Leopard\nLast Supported OS       macOS 12 Monterey\nNote 1                  For Ventura information, see macOS 13 Ventura\nNote 2                  Apple does not support desktop Iron Lake iGPUs\nNote 3                  Most Lynnfield and Clarkdale boards do not support UEFI\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-EC          Fixes the embedded controller, see Getting Started With ACPI\n                 Guide for more details.\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\nLEGACY   UEFI\n         \n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, depending where your board has UEFI, you have 2 options depending what your motherboard supports:\n\n# Legacy Settings\n\nQUIRK                    ENABLED   COMMENT\nAvoidRuntimeDefrag       No        Big Sur may require this quirk enabled\nEnableSafeModeSlide      No        \nEnableWriteUnprotector   No        \nProvideCustomSlide       No        \nRebuildAppleMemoryMap    Yes       This is required to boot OS X 10.4 through 10.6\nSetupVirtualMap          No        \n\n# UEFI Settings\n\nQUIRK                   ENABLED   COMMENT\nRebuildAppleMemoryMap   Yes       This is required to boot OS X 10.4 through 10.6\n\nMore in-depth Info\n * AvoidRuntimeDefrag: NO\n   * Fixes UEFI runtime services like date, time, NVRAM, power control;\n   * macOS Big Sur however requires the APIC table present, otherwise causing early kernel panics so this quirk is recommended for those users.\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: NO\n   * Needed to remove write protection from CR0 register.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * RebuildAppleMemoryMap: YES\n   * Resolves early memory kernel panics on 10.6 and below.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses.\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nBy default, the Sample.plist has this section set for audio which we'll be setting up by setting the layout ID in the boot-args section, so removal of PciRoot(0x0)/Pci(0x1b,0x0) is also recommended from the Add section.\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons\n\n * Cpuid1Mask: Leave this blank\n * Cpuid1Data: Leave this blank\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleCpuPmCfgLock         YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS        DESCRIPTION\nagdpmod=pikera   Used for disabling board ID checks on some Navi GPUs (RX\n                 5000 & 6000 series), without this you'll get a black screen.\n                 Don't use if you don't have Navi (ie. Polaris and Vega cards\n                 shouldn't use this)\n-radcodec        Used for allowing officially unsupported AMD GPUs (spoofed)\n                 to use the Hardware Video Encoder\nradpg=15         Used for disabling some power-gating modes, helpful for\n                 properly initializing AMD Cape Verde based GPUs\nunfairgva=1      Used for fixing hardware DRM support on supported AMD GPUs\nnvda_drv_vrl=1   Used for enabling NVIDIA's Web Drivers on Maxwell and Pascal\n                 cards in macOS Sierra and High Sierra\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nInfo\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. For us, we'll be changing the following:\n\nQUIRK        ENABLED\nWriteFlash   YES\n\nMore in-depth Info\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Clarkdale example, we'll chose the iMac11,2 SMBIOS - this is done intentionally for compatibility's sake. There are 3 main SMBIOS used for Clarkdale:\n\nSMBIOS      HARDWARE\niMac11,1    Lynnfield SMBIOS\niMac11,2    Clarkdale SMBIOS\nMacPro6,1   Mojave and newer SMBIOS\n\n * If you plan to later run macOS 10.14, Mojave or newer, MacPro6,1 will be the recommended SMBIOS and the iGPU must be disabled in the BIOS due to no longer being supported\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               iMac11,2 SMBIOS Info                  #\n#######################################################\n\nType:         iMac11,2\nSerial:       C02KCYZLDNCW\nBoard Serial: C02309301QXF2FRJC\nSmUUID:       A154B586-874B-4E57-A1FF-9D6E503E4580\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlusLegacy.efi\n * OpenRuntime.efi\n * OpenUsbKbDxe.efi(If your firmware does not support UEFI)\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nInfo\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default besides:\n\nQUIRK        VALUE   COMMENT\nKeySupport   NO      Enable if your BIOS supports UEFI\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                    ENABLED   COMMENT\nIgnoreInvalidFlexRatio   YES       \nUnblockFsConnect         NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * IgnoreInvalidFlexRatio: YES\n   \n   * Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-Skylake based systems\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt (For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleCpuPmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * DVMT Pre-Allocated(iGPU Memory): 32MB or higher\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# desktop lynnfield and clarkdale\n\nsupport                 version\ninitial macos support   os x 10.6.3, snow leopard\nlast supported os       macos 12 monterey\nnote 1                  for ventura information, see macos 13 ventura\nnote 2                  apple does not support desktop iron lake igpus\nnote 3                  most lynnfield and clarkdale boards do not support uefi\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-ec          fixes the embedded controller, see getting started with acpi\n                 guide for more details.\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, our patches are handled by our ssdts. this is a much cleaner solution as this will allow us to boot windows and other oses with opencore\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\nlegacy   uefi\n         \n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be passthrough to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, depending where your board has uefi, you have 2 options depending what your motherboard supports:\n\n# legacy settings\n\nquirk                    enabled   comment\navoidruntimedefrag       no        big sur may require this quirk enabled\nenablesafemodeslide      no        \nenablewriteunprotector   no        \nprovidecustomslide       no        \nrebuildapplememorymap    yes       this is required to boot os x 10.4 through 10.6\nsetupvirtualmap          no        \n\n# uefi settings\n\nquirk                   enabled   comment\nrebuildapplememorymap   yes       this is required to boot os x 10.4 through 10.6\n\nmore in-depth info\n * avoidruntimedefrag: no\n   * fixes uefi runtime services like date, time, nvram, power control;\n   * macos big sur however requires the apic table present, otherwise causing early kernel panics so this quirk is recommended for those users.\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: no\n   * needed to remove write protection from cr0 register.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * rebuildapplememorymap: yes\n   * resolves early memory kernel panics on 10.6 and below.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses.\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\nby default, the sample.plist has this section set for audio which we'll be setting up by setting the layout id in the boot-args section, so removal of pciroot(0x0)/pci(0x1b,0x0) is also recommended from the add section.\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus like pentiums and celerons\n\n * cpuid1mask: leave this blank\n * cpuid1data: leave this blank\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplecpupmcfglock         yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args        description\nagdpmod=pikera   used for disabling board id checks on some navi gpus (rx\n                 5000 & 6000 series), without this you'll get a black screen.\n                 don't use if you don't have navi (ie. polaris and vega cards\n                 shouldn't use this)\n-radcodec        used for allowing officially unsupported amd gpus (spoofed)\n                 to use the hardware video encoder\nradpg=15         used for disabling some power-gating modes, helpful for\n                 properly initializing amd cape verde based gpus\nunfairgva=1      used for fixing hardware drm support on supported amd gpus\nnvda_drv_vrl=1   used for enabling nvidia's web drivers on maxwell and pascal\n                 cards in macos sierra and high sierra\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\ninfo\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone. for us, we'll be changing the following:\n\nquirk        enabled\nwriteflash   yes\n\nmore in-depth info\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this clarkdale example, we'll chose the imac11,2 smbios - this is done intentionally for compatibility's sake. there are 3 main smbios used for clarkdale:\n\nsmbios      hardware\nimac11,1    lynnfield smbios\nimac11,2    clarkdale smbios\nmacpro6,1   mojave and newer smbios\n\n * if you plan to later run macos 10.14, mojave or newer, macpro6,1 will be the recommended smbios and the igpu must be disabled in the bios due to no longer being supported\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               imac11,2 smbios info                  #\n#######################################################\n\ntype:         imac11,2\nserial:       c02kcyzldncw\nboard serial: c02309301qxf2frjc\nsmuuid:       a154b586-874b-4e57-a1ff-9d6e503e4580\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfspluslegacy.efi\n * openruntime.efi\n * openusbkbdxe.efi(if your firmware does not support uefi)\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\ninfo\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default besides:\n\nquirk        value   comment\nkeysupport   no      enable if your bios supports uefi\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                    enabled   comment\nignoreinvalidflexratio   yes       \nunblockfsconnect         no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * ignoreinvalidflexratio: yes\n   \n   * fix for when msr_flex_ratio (0x194) can't be disabled in the bios, required for all pre-skylake based systems\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt (for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applecpupmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * dvmt pre-allocated(igpu memory): 32mb or higher\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Desktop Coffee Lake",frontmatter:{},regularPath:"/config.plist/coffee-lake.html",relativePath:"config.plist/coffee-lake.md",key:"v-44d7f3dc",path:"/config.plist/coffee-lake.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:108},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1337},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1348},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:3276},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:3361},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:3613},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:3721},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:3858},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:3613},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:6895},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1348},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:3276},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:9271},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1348},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:11480},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:11622},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:11823},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:3361},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:3613},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:14867},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:16017},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:3721},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:16468},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:17368},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:19710},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:19779},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:19897},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:2693},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1348},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:3276},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:24682},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:25635},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:2654},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:22609},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:14395},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:29134},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:29376},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:29586},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:29971},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:3613},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:27334},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:31342},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:31662},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:12151},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:4194}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Intel BIOS settings Disable Enable",content:"# Desktop Coffee Lake\n\nSUPPORT                 VERSION\nInitial macOS Support   macOS 10.13, High Sierra\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-PLUG        Allows for native CPU power management on Haswell and newer,\n                 see Getting Started With ACPI Guide for more details.\nSSDT-EC-USBX     Fixes both the embedded controller and USB power, see\n                 Getting Started With ACPI Guide for more details.\nSSDT-AWAC        This is the 300 series RTC patch, required for most B360,\n                 B365, H310, H370, Z390 and some Z370 boards which prevent\n                 systems from booting macOS. The alternative is SSDT-RTC0 for\n                 when AWAC SSDT is incompatible due to missing the Legacy RTC\n                 clock, to check whether you need it and which to use please\n                 see Getting started with ACPI page.\nSSDT-PMC         So true 300 series motherboards(non-Z370) don't declare the\n                 FW chip as MMIO in ACPI and so XNU ignores the MMIO region\n                 declared by the UEFI memory map. This SSDT brings back NVRAM\n                 support. See Getting Started With ACPI Guide for more\n                 details.\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing devices to be passthrough to macOS that are generally ignored, for us we can ignore this section.\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we need to change the following:\n\nQUIRK                    ENABLED   COMMENT\nDevirtualiseMmio         YES       \nEnableWriteUnprotector   NO        \nProtectUefiServices      YES       Needed on Z390 system\nRebuildAppleMemoryMap    YES       \nResizeAppleGpuBars       -1        If your firmware supports increasing GPU Bar sizes (ie\n                                   Resizable BAR Support), set this to 0\nSyncRuntimePermissions   YES       \n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc.\n * DevirtualiseMmio: YES\n   * Reduces Stolen Memory Footprint, expands options for slide=N values and very helpful with fixing Memory Allocation issues on Z390. Requires ProtectUefiServices as well on IceLake and Z390 Coffee Lake.\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: NO\n   * This quirk and RebuildAppleMemoryMap can commonly conflict, recommended to enable the latter on newer platforms and disable this entry.\n   * However, due to issues with OEMs not using the latest EDKII builds you may find that the above combo will result in early boot failures. This is due to missing the MEMORY_ATTRIBUTE_TABLE and such we recommend disabling RebuildAppleMemoryMap and enabling EnableWriteUnprotector. More info on this is covered in the troubleshooting section.\n * ProtectUefiServices: NO\n   * Protects UEFI services from being overridden by the firmware, mainly relevant for VMs, Icelake and Z390 systems'.\n   * If on Z390, enable this quirk.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * RebuildAppleMemoryMap: YES\n   * Generates Memory Map compatible with macOS, can break on some laptop OEM firmwares so if you receive early boot failures disable this.\n * ResizeAppleGpuBars: -1\n   * Will reduce the size of GPU PCI Bars if set to 0 when booting macOS, set to -1 to disable\n   * Setting other PCI Bar values is possible with this quirk, though can cause instabilities\n   * This quirk being set to zero is only necessary if Resizable BAR Support is enabled in your firmware.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses, shouldn't be needed on Skylake and newer. Some firmware like Gigabyte may still require it, and will kernel panic without this.\n * SyncRuntimePermissions: YES\n   * Fixes alignment with MAT tables and required to boot Windows and Linux with MAT tables, also recommended for macOS. Mainly relevant for RebuildAppleMemoryMap users.\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\nThis section is set up via WhateverGreen's Framebuffer Patching Guide and is used for setting important iGPU properties. If you have a -F series CPU, you can ignore this section as you do not have an iGPU.\n\nThe config.plist doesn't already have a section for this so you will have to create it manually.\n\nAAPL,ig-platform-id is what macOS uses to determine how the iGPU drivers interact with our system, and the two values choose between are as follows:\n\nAAPL,IG-PLATFORM-ID   COMMENT\n07009B3E              Used when the Desktop iGPU is used to drive a display\n00009B3E              Alternative to 07009B3E if it doesn't work\n0300913E              Used when the Desktop iGPU is only used for computing tasks\n                      and doesn't drive a display\n\n * Note: With macOS 10.15.5 and newer, there seems to be a lot of issues with black screen using 07009B3E, if you get similar issues try swapping to 00009B3E\n\nWe also add 2 more properties, framebuffer-patch-enable and framebuffer-stolenmem. The first enables patching via WhateverGreen.kext, and the second sets the min stolen memory to 19MB. This is usually unnecessary, as this can be configured in BIOS(64MB recommended) but required when not available.\n\n * Note: Headless framebuffers(where the dGPU is the display out) do not need framebuffer-patch-enable and framebuffer-stolenmem\n\nFor users with black screen issues after verbose on B360, B365, H310, H370, Z390, please see the BusID iGPU patching page\n\nKEY                        TYPE   VALUE\nAAPL,ig-platform-id        Data   07009B3E\nframebuffer-patch-enable   Data   01000000\nframebuffer-stolenmem      Data   00003001\n\n(This is an example for a desktop UHD 630 without a dGPU and no BIOS options for iGPU memory)\n\nPciRoot(0x0)/Pci(0x1b,0x0)\n\nlayout-id\n\n * Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs.\n * You can delete this property outright as it's unused for us at this time\n\nFor us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present. More info on this is covered in the Post-Install Page\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons\n\n * Cpuid1Mask: Leave this blank\n * Cpuid1Data: Leave this blank\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleXcpmCfgLock          YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS        DESCRIPTION\nagdpmod=pikera   Used for disabling board ID checks on some Navi GPUs (RX\n                 5000 & 6000 series), without this you'll get a black screen.\n                 Don't use if you don't have Navi (ie. Polaris and Vega cards\n                 shouldn't use this)\n-radcodec        Used for allowing officially unsupported AMD GPUs (spoofed)\n                 to use the Hardware Video Encoder\nradpg=15         Used for disabling some power-gating modes, helpful for\n                 properly initializing AMD Cape Verde based GPUs\nunfairgva=1      Used for fixing hardware DRM support on supported AMD GPUs\nnvda_drv_vrl=1   Used for enabling NVIDIA's Web Drivers on Maxwell and Pascal\n                 cards in macOS Sierra and High Sierra\n-wegnoegpu       Used for disabling all other GPUs than the integrated Intel\n                 iGPU, useful for those wanting to run newer versions of\n                 macOS where their dGPU isn't supported\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nInfo\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. For us, we'll be changing the following:\n\nQUIRK        ENABLED\nWriteFlash   YES\n\nMore in-depth Info\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Coffee Lake example, we'll chose the iMac19,1 SMBIOS - this is done intentionally for compatibility's sake. There are two main SMBIOS used for Coffee Lake:\n\nSMBIOS     HARDWARE\niMac19,1   For Mojave and newer\niMac18,3   For High Sierra and older\n\n * You'll use 18,3 when you have a Pascal or Maxwell dGPU and are limited to versions of macOS with Web Drivers\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               iMac19,1 SMBIOS Info                  #\n#######################################################\n\nType:         iMac19,1\nSerial:       C02XG0FDH7JY\nBoard Serial: C02839303QXH69FJA\nSmUUID:       DBB364D6-44B2-4A02-B922-AB4396F16DA8\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK              ENABLED   COMMENT\nUnblockFsConnect   NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt (For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * DVMT Pre-Allocated(iGPU Memory): 64MB or higher\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# desktop coffee lake\n\nsupport                 version\ninitial macos support   macos 10.13, high sierra\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-plug        allows for native cpu power management on haswell and newer,\n                 see getting started with acpi guide for more details.\nssdt-ec-usbx     fixes both the embedded controller and usb power, see\n                 getting started with acpi guide for more details.\nssdt-awac        this is the 300 series rtc patch, required for most b360,\n                 b365, h310, h370, z390 and some z370 boards which prevent\n                 systems from booting macos. the alternative is ssdt-rtc0 for\n                 when awac ssdt is incompatible due to missing the legacy rtc\n                 clock, to check whether you need it and which to use please\n                 see getting started with acpi page.\nssdt-pmc         so true 300 series motherboards(non-z370) don't declare the\n                 fw chip as mmio in acpi and so xnu ignores the mmio region\n                 declared by the uefi memory map. this ssdt brings back nvram\n                 support. see getting started with acpi guide for more\n                 details.\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, our patches are handled by our ssdts. this is a much cleaner solution as this will allow us to boot windows and other oses with opencore\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing devices to be passthrough to macos that are generally ignored, for us we can ignore this section.\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we need to change the following:\n\nquirk                    enabled   comment\ndevirtualisemmio         yes       \nenablewriteunprotector   no        \nprotectuefiservices      yes       needed on z390 system\nrebuildapplememorymap    yes       \nresizeapplegpubars       -1        if your firmware supports increasing gpu bar sizes (ie\n                                   resizable bar support), set this to 0\nsyncruntimepermissions   yes       \n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc.\n * devirtualisemmio: yes\n   * reduces stolen memory footprint, expands options for slide=n values and very helpful with fixing memory allocation issues on z390. requires protectuefiservices as well on icelake and z390 coffee lake.\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: no\n   * this quirk and rebuildapplememorymap can commonly conflict, recommended to enable the latter on newer platforms and disable this entry.\n   * however, due to issues with oems not using the latest edkii builds you may find that the above combo will result in early boot failures. this is due to missing the memory_attribute_table and such we recommend disabling rebuildapplememorymap and enabling enablewriteunprotector. more info on this is covered in the troubleshooting section.\n * protectuefiservices: no\n   * protects uefi services from being overridden by the firmware, mainly relevant for vms, icelake and z390 systems'.\n   * if on z390, enable this quirk.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * rebuildapplememorymap: yes\n   * generates memory map compatible with macos, can break on some laptop oem firmwares so if you receive early boot failures disable this.\n * resizeapplegpubars: -1\n   * will reduce the size of gpu pci bars if set to 0 when booting macos, set to -1 to disable\n   * setting other pci bar values is possible with this quirk, though can cause instabilities\n   * this quirk being set to zero is only necessary if resizable bar support is enabled in your firmware.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses, shouldn't be needed on skylake and newer. some firmware like gigabyte may still require it, and will kernel panic without this.\n * syncruntimepermissions: yes\n   * fixes alignment with mat tables and required to boot windows and linux with mat tables, also recommended for macos. mainly relevant for rebuildapplememorymap users.\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\npciroot(0x0)/pci(0x2,0x0)\n\nthis section is set up via whatevergreen's framebuffer patching guide and is used for setting important igpu properties. if you have a -f series cpu, you can ignore this section as you do not have an igpu.\n\nthe config.plist doesn't already have a section for this so you will have to create it manually.\n\naapl,ig-platform-id is what macos uses to determine how the igpu drivers interact with our system, and the two values choose between are as follows:\n\naapl,ig-platform-id   comment\n07009b3e              used when the desktop igpu is used to drive a display\n00009b3e              alternative to 07009b3e if it doesn't work\n0300913e              used when the desktop igpu is only used for computing tasks\n                      and doesn't drive a display\n\n * note: with macos 10.15.5 and newer, there seems to be a lot of issues with black screen using 07009b3e, if you get similar issues try swapping to 00009b3e\n\nwe also add 2 more properties, framebuffer-patch-enable and framebuffer-stolenmem. the first enables patching via whatevergreen.kext, and the second sets the min stolen memory to 19mb. this is usually unnecessary, as this can be configured in bios(64mb recommended) but required when not available.\n\n * note: headless framebuffers(where the dgpu is the display out) do not need framebuffer-patch-enable and framebuffer-stolenmem\n\nfor users with black screen issues after verbose on b360, b365, h310, h370, z390, please see the busid igpu patching page\n\nkey                        type   value\naapl,ig-platform-id        data   07009b3e\nframebuffer-patch-enable   data   01000000\nframebuffer-stolenmem      data   00003001\n\n(this is an example for a desktop uhd 630 without a dgpu and no bios options for igpu memory)\n\npciroot(0x0)/pci(0x1b,0x0)\n\nlayout-id\n\n * applies applealc audio injection, you'll need to do your own research on which codec your motherboard has and match it with applealc's layout. applealc supported codecs.\n * you can delete this property outright as it's unused for us at this time\n\nfor us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-ids present. more info on this is covered in the post-install page\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus like pentiums and celerons\n\n * cpuid1mask: leave this blank\n * cpuid1data: leave this blank\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplexcpmcfglock          yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args        description\nagdpmod=pikera   used for disabling board id checks on some navi gpus (rx\n                 5000 & 6000 series), without this you'll get a black screen.\n                 don't use if you don't have navi (ie. polaris and vega cards\n                 shouldn't use this)\n-radcodec        used for allowing officially unsupported amd gpus (spoofed)\n                 to use the hardware video encoder\nradpg=15         used for disabling some power-gating modes, helpful for\n                 properly initializing amd cape verde based gpus\nunfairgva=1      used for fixing hardware drm support on supported amd gpus\nnvda_drv_vrl=1   used for enabling nvidia's web drivers on maxwell and pascal\n                 cards in macos sierra and high sierra\n-wegnoegpu       used for disabling all other gpus than the integrated intel\n                 igpu, useful for those wanting to run newer versions of\n                 macos where their dgpu isn't supported\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\ninfo\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone. for us, we'll be changing the following:\n\nquirk        enabled\nwriteflash   yes\n\nmore in-depth info\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this coffee lake example, we'll chose the imac19,1 smbios - this is done intentionally for compatibility's sake. there are two main smbios used for coffee lake:\n\nsmbios     hardware\nimac19,1   for mojave and newer\nimac18,3   for high sierra and older\n\n * you'll use 18,3 when you have a pascal or maxwell dgpu and are limited to versions of macos with web drivers\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               imac19,1 smbios info                  #\n#######################################################\n\ntype:         imac19,1\nserial:       c02xg0fdh7jy\nboard serial: c02839303qxh69fja\nsmuuid:       dbb364d6-44b2-4a02-b922-ab4396f16da8\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk              enabled   comment\nunblockfsconnect   no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt (for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applexcpmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * dvmt pre-allocated(igpu memory): 64mb or higher\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Desktop Comet Lake",frontmatter:{},regularPath:"/config.plist/comet-lake.html",relativePath:"config.plist/comet-lake.md",key:"v-6328d154",path:"/config.plist/comet-lake.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:104},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1333},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1344},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:3089},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:3174},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:3426},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:3534},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:3671},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:3426},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:6612},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1344},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:3089},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:9399},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1344},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:11608},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:11910},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:12111},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:3174},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:3426},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:15969},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:17119},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:3534},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:17570},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:18470},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:20812},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:20881},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:20999},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:4447},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1344},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:3089},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:26541},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:27529},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:4408},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:24468},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:15497},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:31028},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:31270},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:31480},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:31865},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:3426},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:29228},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:33236},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:33556},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:13252},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:4007}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Intel BIOS settings Disable Enable",content:"# Desktop Comet Lake\n\nSUPPORT                 VERSION\nInitial macOS Support   macOS 10.15, Catalina\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-PLUG        Allows for native CPU power management on Haswell and newer,\n                 see Getting Started With ACPI Guide for more details.\nSSDT-EC-USBX     Fixes both the embedded controller and USB power, see\n                 Getting Started With ACPI Guide for more details.\nSSDT-AWAC        This is the 300 series RTC patch, required for all B460 and\n                 Z490 boards which prevent systems from booting macOS. The\n                 alternative is SSDT-RTC0 for when AWAC SSDT is incompatible\n                 due to missing the Legacy RTC clock, to check whether you\n                 need it and which to use please see Getting started with\n                 ACPI page.\nSSDT-RHUB        Needed to fix Root-device errors on Asus and potentially MSI\n                 boards. Gigabyte and AsRock motherboards do not need this\n                 SSDT\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing devices to be passthrough to macOS that are generally ignored, for us we can ignore this section.\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we need to change the following:\n\nQUIRK                    ENABLED   COMMENT\nDevirtualiseMmio         YES       \nEnableWriteUnprotector   NO        \nProtectUefiServices      YES       \nRebuildAppleMemoryMap    YES       \nResizeAppleGpuBars       -1        If your firmware supports increasing GPU Bar sizes (ie\n                                   Resizable BAR Support), set this to 0\nSetupVirtualMap          NO        \nSyncRuntimePermissions   YES       \n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc.\n * DevirtualiseMmio: YES\n   * Reduces Stolen Memory Footprint, expands options for slide=N values and very helpful with fixing Memory Allocation issues , requires ProtectUefiServices as well for Z490.\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: NO\n   * This quirk and RebuildAppleMemoryMap can commonly conflict, recommended to enable the latter on newer platforms and disable this entry.\n   * However, due to issues with OEMs not using the latest EDKII builds you may find that the above combo will result in early boot failures. This is due to missing the MEMORY_ATTRIBUTE_TABLE and such we recommend disabling RebuildAppleMemoryMap and enabling EnableWriteUnprotector. More info on this is covered in the troubleshooting section.\n * ProtectUefiServices: YES\n   * Protects UEFI services from being overridden by the firmware, required for Z490.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * RebuildAppleMemoryMap: YES\n   * Generates Memory Map compatible with macOS, can break on some laptop OEM firmwares so if you receive early boot failures disable this.\n * ResizeAppleGpuBars: -1\n   * Will reduce the size of GPU PCI Bars if set to 0 when booting macOS, set to -1 to disable\n   * Setting other PCI Bar values is possible with this quirk, though can cause instabilities\n   * This quirk being set to zero is only necessary if Resizable BAR Support is enabled in your firmware.\n * SetupVirtualMap: NO\n   * Fixes SetVirtualAddresses calls to virtual addresses, however broken due to Comet Lake's memory protections. ASUS, Gigabyte and AsRock boards will not boot with this on.\n * SyncRuntimePermissions: YES\n   * Fixes alignment with MAT tables and required to boot Windows and Linux with MAT tables, also recommended for macOS. Mainly relevant for RebuildAppleMemoryMap users.\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\nThis section is set up via WhateverGreen's Framebuffer Patching Guide and is used for setting important iGPU properties. If you have a -F series CPU, you can ignore this section as you do not have an iGPU.\n\nThe config.plist doesn't already have a section for this so you will have to create it manually.\n\nAAPL,ig-platform-id is what macOS uses to determine how the iGPU drivers interact with our system, and two values choose between are as follows:\n\nAAPL,IG-PLATFORM-ID   COMMENT\n07009B3E              Used when the Desktop iGPU is used to drive a display\n00009B3E              Alternative to 07009B3E if it doesn't work\n0300C89B              Used when the Desktop iGPU is only used for computing tasks\n                      and doesn't drive a display\n\n * Note: With macOS 10.15.5 and newer, there seems to be a lot of issues with black screen using 07009B3E, if you get similar issues try swapping to 00009B3E\n\nWe also add 2 more properties, framebuffer-patch-enable and framebuffer-stolenmem. The first enables patching via WhateverGreen.kext, and the second sets the min stolen memory to 19MB. This is usually unnecessary, as this can be configured in BIOS(64MB recommended) but required when not available.\n\n * Note: Headless framebuffers(where the dGPU is the display out) do not need framebuffer-patch-enable and framebuffer-stolenmem\n\nKEY                        TYPE   VALUE\nAAPL,ig-platform-id        Data   07009B3E\nframebuffer-patch-enable   Data   01000000\nframebuffer-stolenmem      Data   00003001\n\n(This is an example for a desktop UHD 630 without a dGPU and no BIOS options for iGPU memory)\n\nPciRoot(0x0)/Pci(0x1C,0x1)/Pci(0x0,0x0)\n\nThis entry relates to Intel's I225-V 2.5GBe controller found on higher end Comet Lake boards, what we'll be doing here is tricking Apple's I225LM driver into supporting our I225-V network controller:\n\nKEY         TYPE   VALUE\ndevice-id   Data   F2150000\n\n * Note: If your board didn't ship with the Intel I225 NIC, there's no reason to add this entry.\n * Note 2: If you get a kernel panic on the AppleIntelI210Ethernet kext, your Ethernet's path is likely PciRoot(0x0)/Pci(0x1C,0x4)/Pci(0x0,0x0)\n\nPciRoot(0x0)/Pci(0x1b,0x0)\n\nlayout-id\n\n * Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs.\n * You can delete this property outright as it's unused for us at this time\n\nFor us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present. More info on this is covered in the Post-Install Page\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs, thankfully in 10.15.5+ Comet Lake S support was added so no need to spoof here. For those running High Sierra or Mojave, you will need the below to spoof to a supported CPU model(due to stability issues, this guide will not go over such CPUID spoofs)\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\nFixing I225-V controllers\n\nThis entry relates to Intel's I225-V 2.5GBe controller found on higher end Comet Lake boards, what we'll be doing here is tricking Apple's I225LM driver into supporting our I225-V network controller. However, this is only needed on Catalina and Big Sur, up to 11.3.\n\nKEY          TYPE      VALUE\nBase         String    __Z18e1000_set_mac_typeP8e1000_hw\nComment      String    I225-V patch\nCount        Number    1\nEnabled      Boolean   True\nFind         Data      F2150000\nIdentifier   String    com.apple.driver.AppleIntelI210Ethernet\nMinKernel    String    19.0.0\nMaxKernel    String    20.4.0\nReplace      Data      F3150000\n\n * Note 1: If your board didn't ship with the Intel I225 NIC, there's no reason to add this entry.\n * Note 2: Leave all other keys at their default values\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleXcpmCfgLock          YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags: NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * Networking-Specific boot-args:\n\nBOOT-ARGS   DESCRIPTION\ne1000=0     Disables com.apple.DriverKit-AppleEthernetE1000 (Apple's\n            DEXT driver) from matching to the Intel I225-V Ethernet\n            controller found on higher end Comet Lake boards, causing\n            Apple's I225 kext driver to load instead.\n            This boot argument is optional on most boards as they are\n            compatible with the DEXT driver. However, it is required on\n            Gigabyte and several other boards, which can only use the\n            kext driver, as the DEXT driver causes hangs.\n            You don't need this if your board didn't ship with the\n            I225-V NIC.\n            \n            On macOS 12.2.1 and below, use dk.e1000=0 instead\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS        DESCRIPTION\nagdpmod=pikera   Used for disabling board ID checks on some Navi GPUs (RX\n                 5000 & 6000 series), without this you'll get a black screen.\n                 Don't use if you don't have Navi (ie. Polaris and Vega cards\n                 shouldn't use this)\n-radcodec        Used for allowing officially unsupported AMD GPUs (spoofed)\n                 to use the Hardware Video Encoder\nradpg=15         Used for disabling some power-gating modes, helpful for\n                 properly initializing AMD Cape Verde based GPUs\nunfairgva=1      Used for fixing hardware DRM support on supported AMD GPUs\nnvda_drv_vrl=1   Used for enabling NVIDIA's Web Drivers on Maxwell and Pascal\n                 cards in macOS Sierra and High Sierra\n-wegnoegpu       Used for disabling all other GPUs than the integrated Intel\n                 iGPU, useful for those wanting to run newer versions of\n                 macOS where their dGPU isn't supported\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nInfo\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. For us, we'll be changing the following:\n\nQUIRK        ENABLED\nWriteFlash   YES\n\nMore in-depth Info\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Comet Lake example, we'll chose the iMac20,1 SMBIOS - this is done intentionally for compatibility's sake. There are two main SMBIOS used for Comet Lake:\n\nSMBIOS     HARDWARE\niMac20,1   i7-10700K and lower(ie. 8 core and lower)\niMac20,2   i9-10850K and higher(ie. 10 core)\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               iMac20,1 SMBIOS Info                  #\n#######################################################\n\nType:         iMac20,1\nSerial:       C02XG0FDH7JY\nBoard Serial: C02839303QXH69FJA\nSmUUID:       DBB364D6-44B2-4A02-B922-AB4396F16DA8\n\n\n * Note: MacSerial currently does not support Linux, so you must grab a Windows or macOS machine to generate the values\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK              ENABLED   COMMENT\nUnblockFsConnect   NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt (For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n   * 2020+ BIOS Notes: When enabling Above4G, Resizable BAR Support may become an available on some Z490 and newer motherboards. Please ensure that Booter -> Quirks -> ResizeAppleGpuBars is set to 0 if this is enabled.\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * DVMT Pre-Allocated(iGPU Memory): 64MB or higher\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# desktop comet lake\n\nsupport                 version\ninitial macos support   macos 10.15, catalina\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-plug        allows for native cpu power management on haswell and newer,\n                 see getting started with acpi guide for more details.\nssdt-ec-usbx     fixes both the embedded controller and usb power, see\n                 getting started with acpi guide for more details.\nssdt-awac        this is the 300 series rtc patch, required for all b460 and\n                 z490 boards which prevent systems from booting macos. the\n                 alternative is ssdt-rtc0 for when awac ssdt is incompatible\n                 due to missing the legacy rtc clock, to check whether you\n                 need it and which to use please see getting started with\n                 acpi page.\nssdt-rhub        needed to fix root-device errors on asus and potentially msi\n                 boards. gigabyte and asrock motherboards do not need this\n                 ssdt\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, our patches are handled by our ssdts. this is a much cleaner solution as this will allow us to boot windows and other oses with opencore\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing devices to be passthrough to macos that are generally ignored, for us we can ignore this section.\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we need to change the following:\n\nquirk                    enabled   comment\ndevirtualisemmio         yes       \nenablewriteunprotector   no        \nprotectuefiservices      yes       \nrebuildapplememorymap    yes       \nresizeapplegpubars       -1        if your firmware supports increasing gpu bar sizes (ie\n                                   resizable bar support), set this to 0\nsetupvirtualmap          no        \nsyncruntimepermissions   yes       \n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc.\n * devirtualisemmio: yes\n   * reduces stolen memory footprint, expands options for slide=n values and very helpful with fixing memory allocation issues , requires protectuefiservices as well for z490.\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: no\n   * this quirk and rebuildapplememorymap can commonly conflict, recommended to enable the latter on newer platforms and disable this entry.\n   * however, due to issues with oems not using the latest edkii builds you may find that the above combo will result in early boot failures. this is due to missing the memory_attribute_table and such we recommend disabling rebuildapplememorymap and enabling enablewriteunprotector. more info on this is covered in the troubleshooting section.\n * protectuefiservices: yes\n   * protects uefi services from being overridden by the firmware, required for z490.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * rebuildapplememorymap: yes\n   * generates memory map compatible with macos, can break on some laptop oem firmwares so if you receive early boot failures disable this.\n * resizeapplegpubars: -1\n   * will reduce the size of gpu pci bars if set to 0 when booting macos, set to -1 to disable\n   * setting other pci bar values is possible with this quirk, though can cause instabilities\n   * this quirk being set to zero is only necessary if resizable bar support is enabled in your firmware.\n * setupvirtualmap: no\n   * fixes setvirtualaddresses calls to virtual addresses, however broken due to comet lake's memory protections. asus, gigabyte and asrock boards will not boot with this on.\n * syncruntimepermissions: yes\n   * fixes alignment with mat tables and required to boot windows and linux with mat tables, also recommended for macos. mainly relevant for rebuildapplememorymap users.\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\npciroot(0x0)/pci(0x2,0x0)\n\nthis section is set up via whatevergreen's framebuffer patching guide and is used for setting important igpu properties. if you have a -f series cpu, you can ignore this section as you do not have an igpu.\n\nthe config.plist doesn't already have a section for this so you will have to create it manually.\n\naapl,ig-platform-id is what macos uses to determine how the igpu drivers interact with our system, and two values choose between are as follows:\n\naapl,ig-platform-id   comment\n07009b3e              used when the desktop igpu is used to drive a display\n00009b3e              alternative to 07009b3e if it doesn't work\n0300c89b              used when the desktop igpu is only used for computing tasks\n                      and doesn't drive a display\n\n * note: with macos 10.15.5 and newer, there seems to be a lot of issues with black screen using 07009b3e, if you get similar issues try swapping to 00009b3e\n\nwe also add 2 more properties, framebuffer-patch-enable and framebuffer-stolenmem. the first enables patching via whatevergreen.kext, and the second sets the min stolen memory to 19mb. this is usually unnecessary, as this can be configured in bios(64mb recommended) but required when not available.\n\n * note: headless framebuffers(where the dgpu is the display out) do not need framebuffer-patch-enable and framebuffer-stolenmem\n\nkey                        type   value\naapl,ig-platform-id        data   07009b3e\nframebuffer-patch-enable   data   01000000\nframebuffer-stolenmem      data   00003001\n\n(this is an example for a desktop uhd 630 without a dgpu and no bios options for igpu memory)\n\npciroot(0x0)/pci(0x1c,0x1)/pci(0x0,0x0)\n\nthis entry relates to intel's i225-v 2.5gbe controller found on higher end comet lake boards, what we'll be doing here is tricking apple's i225lm driver into supporting our i225-v network controller:\n\nkey         type   value\ndevice-id   data   f2150000\n\n * note: if your board didn't ship with the intel i225 nic, there's no reason to add this entry.\n * note 2: if you get a kernel panic on the appleinteli210ethernet kext, your ethernet's path is likely pciroot(0x0)/pci(0x1c,0x4)/pci(0x0,0x0)\n\npciroot(0x0)/pci(0x1b,0x0)\n\nlayout-id\n\n * applies applealc audio injection, you'll need to do your own research on which codec your motherboard has and match it with applealc's layout. applealc supported codecs.\n * you can delete this property outright as it's unused for us at this time\n\nfor us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-ids present. more info on this is covered in the post-install page\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus, thankfully in 10.15.5+ comet lake s support was added so no need to spoof here. for those running high sierra or mojave, you will need the below to spoof to a supported cpu model(due to stability issues, this guide will not go over such cpuid spoofs)\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\nfixing i225-v controllers\n\nthis entry relates to intel's i225-v 2.5gbe controller found on higher end comet lake boards, what we'll be doing here is tricking apple's i225lm driver into supporting our i225-v network controller. however, this is only needed on catalina and big sur, up to 11.3.\n\nkey          type      value\nbase         string    __z18e1000_set_mac_typep8e1000_hw\ncomment      string    i225-v patch\ncount        number    1\nenabled      boolean   true\nfind         data      f2150000\nidentifier   string    com.apple.driver.appleinteli210ethernet\nminkernel    string    19.0.0\nmaxkernel    string    20.4.0\nreplace      data      f3150000\n\n * note 1: if your board didn't ship with the intel i225 nic, there's no reason to add this entry.\n * note 2: leave all other keys at their default values\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplexcpmcfglock          yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags: no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * networking-specific boot-args:\n\nboot-args   description\ne1000=0     disables com.apple.driverkit-appleethernete1000 (apple's\n            dext driver) from matching to the intel i225-v ethernet\n            controller found on higher end comet lake boards, causing\n            apple's i225 kext driver to load instead.\n            this boot argument is optional on most boards as they are\n            compatible with the dext driver. however, it is required on\n            gigabyte and several other boards, which can only use the\n            kext driver, as the dext driver causes hangs.\n            you don't need this if your board didn't ship with the\n            i225-v nic.\n            \n            on macos 12.2.1 and below, use dk.e1000=0 instead\n\n * gpu-specific boot-args:\n\nboot-args        description\nagdpmod=pikera   used for disabling board id checks on some navi gpus (rx\n                 5000 & 6000 series), without this you'll get a black screen.\n                 don't use if you don't have navi (ie. polaris and vega cards\n                 shouldn't use this)\n-radcodec        used for allowing officially unsupported amd gpus (spoofed)\n                 to use the hardware video encoder\nradpg=15         used for disabling some power-gating modes, helpful for\n                 properly initializing amd cape verde based gpus\nunfairgva=1      used for fixing hardware drm support on supported amd gpus\nnvda_drv_vrl=1   used for enabling nvidia's web drivers on maxwell and pascal\n                 cards in macos sierra and high sierra\n-wegnoegpu       used for disabling all other gpus than the integrated intel\n                 igpu, useful for those wanting to run newer versions of\n                 macos where their dgpu isn't supported\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\ninfo\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone. for us, we'll be changing the following:\n\nquirk        enabled\nwriteflash   yes\n\nmore in-depth info\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this comet lake example, we'll chose the imac20,1 smbios - this is done intentionally for compatibility's sake. there are two main smbios used for comet lake:\n\nsmbios     hardware\nimac20,1   i7-10700k and lower(ie. 8 core and lower)\nimac20,2   i9-10850k and higher(ie. 10 core)\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               imac20,1 smbios info                  #\n#######################################################\n\ntype:         imac20,1\nserial:       c02xg0fdh7jy\nboard serial: c02839303qxh69fja\nsmuuid:       dbb364d6-44b2-4a02-b922-ab4396f16da8\n\n\n * note: macserial currently does not support linux, so you must grab a windows or macos machine to generate the values\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk              enabled   comment\nunblockfsconnect   no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt (for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applexcpmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n   * 2020+ bios notes: when enabling above4g, resizable bar support may become an available on some z490 and newer motherboards. please ensure that booter -> quirks -> resizeapplegpubars is set to 0 if this is enabled.\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * dvmt pre-allocated(igpu memory): 64mb or higher\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Desktop Haswell and Broadwell",frontmatter:{},regularPath:"/config.plist/haswell.html",relativePath:"config.plist/haswell.md",key:"v-d8e2a728",path:"/config.plist/haswell.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:190},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1419},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1430},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2575},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:2660},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:2912},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:3020},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:3157},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:2912},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:4240},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1430},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2575},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:7035},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1430},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:9244},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:9386},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:9587},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:2660},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:2912},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:12774},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:13924},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:3020},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:14375},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:15275},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:17617},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:17686},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:17804},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:3505},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1430},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2575},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:22589},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:23890},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:3466},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:20516},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:12302},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:27394},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:27636},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:27846},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:28231},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:2912},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:25594},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:29801},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:30121},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:10058},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3535}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Intel BIOS settings Disable Enable",content:"# Desktop Haswell and Broadwell\n\nSUPPORT                 VERSION\nInitial macOS Support   OS X 10.8, Mountain Lion\nNote 1                  Haswell iGPUs are only supported up-to macOS 12\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-PLUG        Allows for native CPU power management on Haswell and newer,\n                 see Getting Started With ACPI Guide for more details.\nSSDT-EC          Fixes the embedded controller, see Getting Started With ACPI\n                 Guide for more details.\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc.\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode, however this quirk is only applicable to UEFI platforms.\n * EnableWriteUnprotector: YES\n   * Needed to remove write protection from CR0 register.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses, required for Gigabyte boards to resolve early kernel panics.\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\nThis section is set up via WhateverGreen's Framebuffer Patching Guide and is used for setting important iGPU properties.\n\nThe config.plist doesn't already have a section for this so you will have to create it manually.\n\nAAPL,ig-platform-id is what macOS uses to determine how the iGPU drivers interact with our system, and the two values choose between are as follows:\n\nAAPL,IG-PLATFORM-ID   COMMENT\n0300220D              Used when the Desktop Haswell iGPU is used to drive a\n                      display\n04001204              Used when the Desktop Haswell iGPU is only used for\n                      computing tasks and doesn't drive a display\n07002216              Used when the Desktop Broadwell iGPU is used to drive a\n                      display\n\nI added another portion as well that shows a device-id fake in case you have an HD 4400 which is unsupported in macOS.\n\nThe device-id fake is set up like so:\n\n * 12040000 - this is the device id for HD 4600 which does have support in macOS\n\nWe also add 3 more properties, framebuffer-patch-enable, framebuffer-stolenmem and framebuffer-fbmem. The first enables patching via WhateverGreen.kext, the second sets the min stolen memory to 19MB and third sets the framebuffer memory to 9MB. This is usually unnecessary, as this can be configured in BIOS(64MB recommended) but required when not available.\n\n * Note: Headless framebuffers(where the dGPU is the display out) do not need framebuffer-patch-enable, framebuffer-stolenmem and framebuffer-fbmem\n\nKEY                        TYPE   VALUE\nAAPL,ig-platform-id        Data   0300220D\nframebuffer-patch-enable   Data   01000000\nframebuffer-stolenmem      Data   00003001\nframebuffer-fbmem          Data   00009000\ndevice-id                  Data   12040000\n\n(This is an example for a desktop HD 4400 without a dGPU and no BIOS options for iGPU memory)\n\nKEY                        TYPE   VALUE\nAAPL,ig-platform-id        Data   07002216\nframebuffer-patch-enable   Data   01000000\nframebuffer-stolenmem      Data   00003001\nframebuffer-fbmem          Data   00009000\n\n(This is an example for a desktop Iris Pro 6200 and no BIOS options for iGPU memory)\n\nPciRoot(0x0)/Pci(0x1b,0x0)\n\nlayout-id\n\n * Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs.\n * You can delete this property outright as it's unused for us at this time\n\nFor us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present. More info on this is covered in the Post-Install Page\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons\n\n * Cpuid1Mask: Leave this blank\n * Cpuid1Data: Leave this blank\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleCpuPmCfgLock         NO        Need if running 10.10 or older and cannot disable CFG-Lock\n                                    in the BIOS\nAppleXcpmCfgLock          YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS        DESCRIPTION\nagdpmod=pikera   Used for disabling board ID checks on some Navi GPUs (RX\n                 5000 & 6000 series), without this you'll get a black screen.\n                 Don't use if you don't have Navi (ie. Polaris and Vega cards\n                 shouldn't use this)\n-radcodec        Used for allowing officially unsupported AMD GPUs (spoofed)\n                 to use the Hardware Video Encoder\nradpg=15         Used for disabling some power-gating modes, helpful for\n                 properly initializing AMD Cape Verde based GPUs\nunfairgva=1      Used for fixing hardware DRM support on supported AMD GPUs\nnvda_drv_vrl=1   Used for enabling NVIDIA's Web Drivers on Maxwell and Pascal\n                 cards in macOS Sierra and High Sierra\n-wegnoegpu       Used for disabling all other GPUs than the integrated Intel\n                 iGPU, useful for those wanting to run newer versions of\n                 macOS where their dGPU isn't supported\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nInfo\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. For us, we'll be changing the following:\n\nQUIRK        ENABLED\nWriteFlash   YES\n\nMore in-depth Info\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Haswell example, we chose the iMac15,1 SMBIOS. The typical breakdown is as follows:\n\nSMBIOS     HARDWARE\niMac14,4   Haswell with only iGPU\niMac15,1   Haswell with dGPU\niMac16,2   Broadwell\n\nNote: The following SMBIOS are only supported up-to macOS 11, Big Sur. For cases where you must boot Monterey, see below:\n\nMonterey SMBIOS table\n\nNote choosing a SMBIOS from the list below for Big Sur or older is not recommended, as Power Management and such can break when using unoptimized SMBIOS.\n\nMonterey table:\n\nSMBIOS     HARDWARE\niMac16,2   Broadwell with only iGPU\niMac17,1   Broadwell with dGPU\n\nNote 2: All of these SMBIOSes were dropped in macOS Ventura. If running macOS Ventura, use a Kaby Lake SMBIOS.\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               iMac15,1 SMBIOS Info                  #\n#######################################################\n\nType:         iMac15,1\nSerial:       C02M9SYJFY10\nBoard Serial: C02408101J9G2Y7A8\nSmUUID:       7B227BEC-660D-405F-8E60-411B3E4EF055\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n:::\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                    ENABLED   COMMENT\nIgnoreInvalidFlexRatio   YES       \nUnblockFsConnect         NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * IgnoreInvalidFlexRatio: YES\n   \n   * Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-Skylake based systems\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt (For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n   * For 10.10 and older, you'll need to enable AppleCpuPmCfgLock as well\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * DVMT Pre-Allocated(iGPU Memory): 64MB or higher\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# desktop haswell and broadwell\n\nsupport                 version\ninitial macos support   os x 10.8, mountain lion\nnote 1                  haswell igpus are only supported up-to macos 12\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-plug        allows for native cpu power management on haswell and newer,\n                 see getting started with acpi guide for more details.\nssdt-ec          fixes the embedded controller, see getting started with acpi\n                 guide for more details.\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, our patches are handled by our ssdts. this is a much cleaner solution as this will allow us to boot windows and other oses with opencore\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be passthrough to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc.\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode, however this quirk is only applicable to uefi platforms.\n * enablewriteunprotector: yes\n   * needed to remove write protection from cr0 register.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses, required for gigabyte boards to resolve early kernel panics.\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\npciroot(0x0)/pci(0x2,0x0)\n\nthis section is set up via whatevergreen's framebuffer patching guide and is used for setting important igpu properties.\n\nthe config.plist doesn't already have a section for this so you will have to create it manually.\n\naapl,ig-platform-id is what macos uses to determine how the igpu drivers interact with our system, and the two values choose between are as follows:\n\naapl,ig-platform-id   comment\n0300220d              used when the desktop haswell igpu is used to drive a\n                      display\n04001204              used when the desktop haswell igpu is only used for\n                      computing tasks and doesn't drive a display\n07002216              used when the desktop broadwell igpu is used to drive a\n                      display\n\ni added another portion as well that shows a device-id fake in case you have an hd 4400 which is unsupported in macos.\n\nthe device-id fake is set up like so:\n\n * 12040000 - this is the device id for hd 4600 which does have support in macos\n\nwe also add 3 more properties, framebuffer-patch-enable, framebuffer-stolenmem and framebuffer-fbmem. the first enables patching via whatevergreen.kext, the second sets the min stolen memory to 19mb and third sets the framebuffer memory to 9mb. this is usually unnecessary, as this can be configured in bios(64mb recommended) but required when not available.\n\n * note: headless framebuffers(where the dgpu is the display out) do not need framebuffer-patch-enable, framebuffer-stolenmem and framebuffer-fbmem\n\nkey                        type   value\naapl,ig-platform-id        data   0300220d\nframebuffer-patch-enable   data   01000000\nframebuffer-stolenmem      data   00003001\nframebuffer-fbmem          data   00009000\ndevice-id                  data   12040000\n\n(this is an example for a desktop hd 4400 without a dgpu and no bios options for igpu memory)\n\nkey                        type   value\naapl,ig-platform-id        data   07002216\nframebuffer-patch-enable   data   01000000\nframebuffer-stolenmem      data   00003001\nframebuffer-fbmem          data   00009000\n\n(this is an example for a desktop iris pro 6200 and no bios options for igpu memory)\n\npciroot(0x0)/pci(0x1b,0x0)\n\nlayout-id\n\n * applies applealc audio injection, you'll need to do your own research on which codec your motherboard has and match it with applealc's layout. applealc supported codecs.\n * you can delete this property outright as it's unused for us at this time\n\nfor us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-ids present. more info on this is covered in the post-install page\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus like pentiums and celerons\n\n * cpuid1mask: leave this blank\n * cpuid1data: leave this blank\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplecpupmcfglock         no        need if running 10.10 or older and cannot disable cfg-lock\n                                    in the bios\napplexcpmcfglock          yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args        description\nagdpmod=pikera   used for disabling board id checks on some navi gpus (rx\n                 5000 & 6000 series), without this you'll get a black screen.\n                 don't use if you don't have navi (ie. polaris and vega cards\n                 shouldn't use this)\n-radcodec        used for allowing officially unsupported amd gpus (spoofed)\n                 to use the hardware video encoder\nradpg=15         used for disabling some power-gating modes, helpful for\n                 properly initializing amd cape verde based gpus\nunfairgva=1      used for fixing hardware drm support on supported amd gpus\nnvda_drv_vrl=1   used for enabling nvidia's web drivers on maxwell and pascal\n                 cards in macos sierra and high sierra\n-wegnoegpu       used for disabling all other gpus than the integrated intel\n                 igpu, useful for those wanting to run newer versions of\n                 macos where their dgpu isn't supported\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\ninfo\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone. for us, we'll be changing the following:\n\nquirk        enabled\nwriteflash   yes\n\nmore in-depth info\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this haswell example, we chose the imac15,1 smbios. the typical breakdown is as follows:\n\nsmbios     hardware\nimac14,4   haswell with only igpu\nimac15,1   haswell with dgpu\nimac16,2   broadwell\n\nnote: the following smbios are only supported up-to macos 11, big sur. for cases where you must boot monterey, see below:\n\nmonterey smbios table\n\nnote choosing a smbios from the list below for big sur or older is not recommended, as power management and such can break when using unoptimized smbios.\n\nmonterey table:\n\nsmbios     hardware\nimac16,2   broadwell with only igpu\nimac17,1   broadwell with dgpu\n\nnote 2: all of these smbioses were dropped in macos ventura. if running macos ventura, use a kaby lake smbios.\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               imac15,1 smbios info                  #\n#######################################################\n\ntype:         imac15,1\nserial:       c02m9syjfy10\nboard serial: c02408101j9g2y7a8\nsmuuid:       7b227bec-660d-405f-8e60-411b3e4ef055\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n:::\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                    enabled   comment\nignoreinvalidflexratio   yes       \nunblockfsconnect         no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * ignoreinvalidflexratio: yes\n   \n   * fix for when msr_flex_ratio (0x194) can't be disabled in the bios, required for all pre-skylake based systems\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt (for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applexcpmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n   * for 10.10 and older, you'll need to enable applecpupmcfglock as well\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * dvmt pre-allocated(igpu memory): 64mb or higher\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Desktop Ivy Bridge",frontmatter:{},regularPath:"/config.plist/ivy-bridge.html",relativePath:"config.plist/ivy-bridge.md",key:"v-16891616",path:"/config.plist/ivy-bridge.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:285},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1514},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1525},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2832},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:3768},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:4020},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:4128},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:4265},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:4020},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:5348},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1525},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2832},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:7056},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1525},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:9265},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:9407},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:9608},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:3768},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:4020},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:12652},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:13802},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:4128},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:14253},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:15153},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:17495},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:17564},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:17682},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:4613},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1525},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2832},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:22467},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:24110},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:4574},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:20394},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:12180},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:27614},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:27856},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:28066},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:28451},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:4020},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:25814},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:30021},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:30341},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:9936},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3358}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Intel BIOS settings Disable Enable",content:"# Desktop Ivy Bridge\n\nSUPPORT                 VERSION\nInitial macOS Support   OS X 10.7, Lion\nLast Supported OS       macOS 12 Monterey\nNote 1                  For Ventura information, see macOS 13 Ventura\nNote 2                  Ivy Bridge iGPUs are only supported up-to macOS 11\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-PM          Needed for proper CPU power management, you will need to run\n                 Pike's ssdtPRGen.sh script to generate this file. This will\n                 be run in post install.\nSSDT-EC          Fixes the embedded controller, see Getting Started With ACPI\n                 Guide for more details.\nSSDT-IMEI        Needed to add a missing IMEI device on Ivy Bridge CPU with 6\n                 series motherboards\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nInfo\n\nThis blocks certain ACPI tables from loading, for us we really care about this. Main reason is that Apple's XCPM does not support IvyBridge all too well and can cause AppleIntelCPUPowerManagement panics on boot. To avoid this we make our own PM SSDT in Post-Install and drop the old tables(Note that this is only temporary until we've made our SSDT-PM, we'll re-enable these tables later):\n\nRemoving CpuPm:\n\nKEY              TYPE      VALUE\nAll              Boolean   YES\nComment          String    Delete CpuPm\nEnabled          Boolean   YES\nOemTableId       Data      437075506d000000\nTableLength      Number    0\nTableSignature   Data      53534454\n\nRemoving Cpu0Ist:\n\nKEY              TYPE      VALUE\nAll              Boolean   YES\nComment          String    Delete Cpu0Ist\nEnabled          Boolean   YES\nOemTableId       Data      4370753049737400\nTableLength      Number    0\nTableSignature   Data      53534454\n\n\n# Patch\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc.\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode, however this quirk is only applicable to UEFI platforms.\n * EnableWriteUnprotector: YES\n   * Needed to remove write protection from CR0 register.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses, required for Gigabyte boards to resolve early kernel panics.\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\nThis section is set up via WhateverGreen's Framebuffer Patching Guide and is used for setting important iGPU properties.\n\nThe config.plist doesn't already have a section for this so you will have to create it manually.\n\nThe AAPL,ig-platform-id we use is as follows:\n\nAAPL,IG-PLATFORM-ID   COMMENT\n0A006601              Used when the iGPU is used to drive a display\n07006201              Used when the iGPU is only used for computing tasks and\n                      doesn't drive a display\n\nExample setup:\n\nKEY                   TYPE   VALUE\nAAPL,ig-platform-id   Data   0A006601\n\n(This is an example for a desktop HD 4000 without a dGPU)\n\nPciRoot(0x0)/Pci(0x16,0x0)\n\nThis is needed if you're pairing an Ivy Bridge CPU with a 6 series motherboard(ie. H61, B65, Q65, P67, H67, Q67, Z68), specifically needed to spoof your IMEI device into being supported. Note this property is still required with or without SSDT-IMEI.\n\nKEY         TYPE   VALUE\ndevice-id   Data   3A1E0000\n\nNote: This is not needed if you have a 7 series motherboard(ie. B75, Q75, Z75, H77, Q77, Z77)\n\nPciRoot(0x0)/Pci(0x1b,0x0)\n\nlayout-id\n\n * Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs.\n * You can delete this property outright as it's unused for us at this time\n\nFor us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present. More info on this is covered in the Post-Install Page\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons\n\n * Cpuid1Mask: Leave this blank\n * Cpuid1Data: Leave this blank\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleCpuPmCfgLock         YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS        DESCRIPTION\nagdpmod=pikera   Used for disabling board ID checks on some Navi GPUs (RX\n                 5000 & 6000 series), without this you'll get a black screen.\n                 Don't use if you don't have Navi (ie. Polaris and Vega cards\n                 shouldn't use this)\n-radcodec        Used for allowing officially unsupported AMD GPUs (spoofed)\n                 to use the Hardware Video Encoder\nradpg=15         Used for disabling some power-gating modes, helpful for\n                 properly initializing AMD Cape Verde based GPUs\nunfairgva=1      Used for fixing hardware DRM support on supported AMD GPUs\nnvda_drv_vrl=1   Used for enabling NVIDIA's Web Drivers on Maxwell and Pascal\n                 cards in macOS Sierra and High Sierra\n-wegnoegpu       Used for disabling all other GPUs than the integrated Intel\n                 iGPU, useful for those wanting to run newer versions of\n                 macOS where their dGPU isn't supported\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nInfo\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. For us, we'll be changing the following:\n\nQUIRK        ENABLED\nWriteFlash   YES\n\nMore in-depth Info\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Ivy Bridge example, we'll chose the iMac13,2 SMBIOS - this is done intentionally for compatibility's sake. There are 3 main SMBIOS used for Ivy Bridge:\n\nSMBIOS     HARDWARE\niMac13,1   Used for computers utilizing the iGPU for displaying\niMac13,2   Used for computers using a dGPU for displaying, and an iGPU\n           for computing tasks only\n\nNote: The following SMBIOS are only supported up-to and including macOS 10.15, Catalina. For cases where you must boot Big Sur or Monterey, see below:\n\nBig Sur/Monterey SMBIOS table\n\nNote choosing a SMBIOS from the list below for Catalina or older is not recommended, as Power Management and such can break when using unoptimized SMBIOS.\n\nBig Sur table:\n\nSMBIOS     HARDWARE\niMac14,4   Used for computers utilizing the iGPU for displaying\niMac15,1   Used for computers using a dGPU for displaying, and an iGPU\n           for computing tasks only\n\nMonterey table:\n\nSMBIOS      HARDWARE\nMacPro6,1   As Monterey does not include iGPU drivers, you will want to\n            use MacPro6,1 and a supported dGPU\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               iMac13,2 SMBIOS Info                  #\n#######################################################\n\nType:         iMac13,2\nSerial:       C02KCYZLDNCW\nBoard Serial: C02309301QXF2FRJC\nSmUUID:       A154B586-874B-4E57-A1FF-9D6E503E4580\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n:::\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                    ENABLED   COMMENT\nIgnoreInvalidFlexRatio   YES       \nUnblockFsConnect         NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * IgnoreInvalidFlexRatio: YES\n   \n   * Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-Skylake based systems\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt (For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleCpuPmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * DVMT Pre-Allocated(iGPU Memory): 32MB or higher\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# desktop ivy bridge\n\nsupport                 version\ninitial macos support   os x 10.7, lion\nlast supported os       macos 12 monterey\nnote 1                  for ventura information, see macos 13 ventura\nnote 2                  ivy bridge igpus are only supported up-to macos 11\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-pm          needed for proper cpu power management, you will need to run\n                 pike's ssdtprgen.sh script to generate this file. this will\n                 be run in post install.\nssdt-ec          fixes the embedded controller, see getting started with acpi\n                 guide for more details.\nssdt-imei        needed to add a missing imei device on ivy bridge cpu with 6\n                 series motherboards\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\ninfo\n\nthis blocks certain acpi tables from loading, for us we really care about this. main reason is that apple's xcpm does not support ivybridge all too well and can cause appleintelcpupowermanagement panics on boot. to avoid this we make our own pm ssdt in post-install and drop the old tables(note that this is only temporary until we've made our ssdt-pm, we'll re-enable these tables later):\n\nremoving cpupm:\n\nkey              type      value\nall              boolean   yes\ncomment          string    delete cpupm\nenabled          boolean   yes\noemtableid       data      437075506d000000\ntablelength      number    0\ntablesignature   data      53534454\n\nremoving cpu0ist:\n\nkey              type      value\nall              boolean   yes\ncomment          string    delete cpu0ist\nenabled          boolean   yes\noemtableid       data      4370753049737400\ntablelength      number    0\ntablesignature   data      53534454\n\n\n# patch\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, our patches are handled by our ssdts. this is a much cleaner solution as this will allow us to boot windows and other oses with opencore\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be passthrough to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc.\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode, however this quirk is only applicable to uefi platforms.\n * enablewriteunprotector: yes\n   * needed to remove write protection from cr0 register.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses, required for gigabyte boards to resolve early kernel panics.\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\npciroot(0x0)/pci(0x2,0x0)\n\nthis section is set up via whatevergreen's framebuffer patching guide and is used for setting important igpu properties.\n\nthe config.plist doesn't already have a section for this so you will have to create it manually.\n\nthe aapl,ig-platform-id we use is as follows:\n\naapl,ig-platform-id   comment\n0a006601              used when the igpu is used to drive a display\n07006201              used when the igpu is only used for computing tasks and\n                      doesn't drive a display\n\nexample setup:\n\nkey                   type   value\naapl,ig-platform-id   data   0a006601\n\n(this is an example for a desktop hd 4000 without a dgpu)\n\npciroot(0x0)/pci(0x16,0x0)\n\nthis is needed if you're pairing an ivy bridge cpu with a 6 series motherboard(ie. h61, b65, q65, p67, h67, q67, z68), specifically needed to spoof your imei device into being supported. note this property is still required with or without ssdt-imei.\n\nkey         type   value\ndevice-id   data   3a1e0000\n\nnote: this is not needed if you have a 7 series motherboard(ie. b75, q75, z75, h77, q77, z77)\n\npciroot(0x0)/pci(0x1b,0x0)\n\nlayout-id\n\n * applies applealc audio injection, you'll need to do your own research on which codec your motherboard has and match it with applealc's layout. applealc supported codecs.\n * you can delete this property outright as it's unused for us at this time\n\nfor us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-ids present. more info on this is covered in the post-install page\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus like pentiums and celerons\n\n * cpuid1mask: leave this blank\n * cpuid1data: leave this blank\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplecpupmcfglock         yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args        description\nagdpmod=pikera   used for disabling board id checks on some navi gpus (rx\n                 5000 & 6000 series), without this you'll get a black screen.\n                 don't use if you don't have navi (ie. polaris and vega cards\n                 shouldn't use this)\n-radcodec        used for allowing officially unsupported amd gpus (spoofed)\n                 to use the hardware video encoder\nradpg=15         used for disabling some power-gating modes, helpful for\n                 properly initializing amd cape verde based gpus\nunfairgva=1      used for fixing hardware drm support on supported amd gpus\nnvda_drv_vrl=1   used for enabling nvidia's web drivers on maxwell and pascal\n                 cards in macos sierra and high sierra\n-wegnoegpu       used for disabling all other gpus than the integrated intel\n                 igpu, useful for those wanting to run newer versions of\n                 macos where their dgpu isn't supported\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\ninfo\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone. for us, we'll be changing the following:\n\nquirk        enabled\nwriteflash   yes\n\nmore in-depth info\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this ivy bridge example, we'll chose the imac13,2 smbios - this is done intentionally for compatibility's sake. there are 3 main smbios used for ivy bridge:\n\nsmbios     hardware\nimac13,1   used for computers utilizing the igpu for displaying\nimac13,2   used for computers using a dgpu for displaying, and an igpu\n           for computing tasks only\n\nnote: the following smbios are only supported up-to and including macos 10.15, catalina. for cases where you must boot big sur or monterey, see below:\n\nbig sur/monterey smbios table\n\nnote choosing a smbios from the list below for catalina or older is not recommended, as power management and such can break when using unoptimized smbios.\n\nbig sur table:\n\nsmbios     hardware\nimac14,4   used for computers utilizing the igpu for displaying\nimac15,1   used for computers using a dgpu for displaying, and an igpu\n           for computing tasks only\n\nmonterey table:\n\nsmbios      hardware\nmacpro6,1   as monterey does not include igpu drivers, you will want to\n            use macpro6,1 and a supported dgpu\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               imac13,2 smbios info                  #\n#######################################################\n\ntype:         imac13,2\nserial:       c02kcyzldncw\nboard serial: c02309301qxf2frjc\nsmuuid:       a154b586-874b-4e57-a1ff-9d6e503e4580\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n:::\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                    enabled   comment\nignoreinvalidflexratio   yes       \nunblockfsconnect         no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * ignoreinvalidflexratio: yes\n   \n   * fix for when msr_flex_ratio (0x194) can't be disabled in the bios, required for all pre-skylake based systems\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt (for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applecpupmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * dvmt pre-allocated(igpu memory): 32mb or higher\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Desktop Kaby Lake",frontmatter:{},regularPath:"/config.plist/kaby-lake.html",relativePath:"config.plist/kaby-lake.md",key:"v-41eb98c4",path:"/config.plist/kaby-lake.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:101},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1330},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1341},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2505},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:2590},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:2842},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:2950},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:3087},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:2842},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:4113},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1341},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2505},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:6156},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1341},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:8365},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:8507},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:8708},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:2590},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:2842},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:11752},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:12902},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:2950},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:13353},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:14253},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:16595},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:16664},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:16782},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:3435},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1341},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2505},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:21567},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:22505},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:3396},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:19494},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:11280},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:26004},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:26246},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:26456},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:26841},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:2842},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:24204},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:28212},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:28532},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:9036},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3465}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Intel BIOS settings Disable Enable",content:"# Desktop Kaby Lake\n\nSUPPORT                 VERSION\nInitial macOS Support   macOS 10.12, Sierra\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-PLUG        Allows for native CPU power management on Haswell and newer,\n                 see Getting Started With ACPI Guide for more details.\nSSDT-EC-USBX     Fixes both the embedded controller and USB power, see\n                 Getting Started With ACPI Guide for more details.\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc.\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: YES\n   * Needed to remove write protection from CR0 register.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses, required for Gigabyte boards to resolve early kernel panics.\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\nThis section is set up via WhateverGreen's Framebuffer Patching Guide and is used for setting important iGPU properties.\n\nThe config.plist doesn't already have a section for this so you will have to create it manually.\n\nAAPL,ig-platform-id is what macOS uses to determine how the iGPU drivers interact with our system, and the two values choose between are as follows:\n\nAAPL,IG-PLATFORM-ID   COMMENT\n00001259              Used when the Desktop iGPU is used to drive a display\n03001259              Used when the Desktop iGPU is only used for computing tasks\n                      and doesn't drive a display\n\nWe also add 2 more properties, framebuffer-patch-enable and framebuffer-stolenmem. The first enables patching via WhateverGreen.kext, and the second sets the min stolen memory to 19MB. This is usually unnecessary, as this can be configured in BIOS(64MB recommended) but required when not available.\n\n * Note: Headless framebuffers(where the dGPU is the display out) do not need framebuffer-patch-enable and framebuffer-stolenmem\n\nKEY                        TYPE   VALUE\nAAPL,ig-platform-id        Data   00001259\nframebuffer-patch-enable   Data   01000000\nframebuffer-stolenmem      Data   00003001\n\n(This is an example for a desktop HD 630 without a dGPU and no BIOS options for iGPU memory)\n\nPciRoot(0x0)/Pci(0x1b,0x0)\n\nlayout-id\n\n * Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs.\n * You can delete this property outright as it's unused for us at this time\n\nFor us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present. More info on this is covered in the Post-Install Page\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\nFun Fact: The reason the byte order is swapped is because most modern processors are Little Endian\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons\n\n * Cpuid1Mask: Leave this blank\n * Cpuid1Data: Leave this blank\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleXcpmCfgLock          YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS        DESCRIPTION\nagdpmod=pikera   Used for disabling board ID checks on some Navi GPUs (RX\n                 5000 & 6000 series), without this you'll get a black screen.\n                 Don't use if you don't have Navi (ie. Polaris and Vega cards\n                 shouldn't use this)\n-radcodec        Used for allowing officially unsupported AMD GPUs (spoofed)\n                 to use the Hardware Video Encoder\nradpg=15         Used for disabling some power-gating modes, helpful for\n                 properly initializing AMD Cape Verde based GPUs\nunfairgva=1      Used for fixing hardware DRM support on supported AMD GPUs\nnvda_drv_vrl=1   Used for enabling NVIDIA's Web Drivers on Maxwell and Pascal\n                 cards in macOS Sierra and High Sierra\n-wegnoegpu       Used for disabling all other GPUs than the integrated Intel\n                 iGPU, useful for those wanting to run newer versions of\n                 macOS where their dGPU isn't supported\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nInfo\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. For us, we'll be changing the following:\n\nQUIRK        ENABLED\nWriteFlash   YES\n\nMore in-depth Info\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Kaby Lake example, we'll chose the iMac18,1 SMBIOS - this is done intentionally for compatibility's sake. There are two main SMBIOS used for Kaby Lake:\n\nSMBIOS     HARDWARE\niMac18,1   Used for computers utilizing the iGPU for displaying\niMac18,3   Used for computers using a dGPU for displaying, and an iGPU\n           for computing tasks only\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               iMac18,1 SMBIOS Info                  #\n#######################################################\n\nType:         iMac18,1\nSerial:       C02Z2CZ5H7JY\nBoard Serial: C02928701GUH69FFB\nSmUUID:       AA043F8D-33B6-4A1A-94F7-46972AAD0607\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK              ENABLED   COMMENT\nUnblockFsConnect   NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt (For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * DVMT Pre-Allocated(iGPU Memory): 64MB or higher\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# desktop kaby lake\n\nsupport                 version\ninitial macos support   macos 10.12, sierra\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-plug        allows for native cpu power management on haswell and newer,\n                 see getting started with acpi guide for more details.\nssdt-ec-usbx     fixes both the embedded controller and usb power, see\n                 getting started with acpi guide for more details.\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, our patches are handled by our ssdts. this is a much cleaner solution as this will allow us to boot windows and other oses with opencore\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be passthrough to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc.\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: yes\n   * needed to remove write protection from cr0 register.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses, required for gigabyte boards to resolve early kernel panics.\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\npciroot(0x0)/pci(0x2,0x0)\n\nthis section is set up via whatevergreen's framebuffer patching guide and is used for setting important igpu properties.\n\nthe config.plist doesn't already have a section for this so you will have to create it manually.\n\naapl,ig-platform-id is what macos uses to determine how the igpu drivers interact with our system, and the two values choose between are as follows:\n\naapl,ig-platform-id   comment\n00001259              used when the desktop igpu is used to drive a display\n03001259              used when the desktop igpu is only used for computing tasks\n                      and doesn't drive a display\n\nwe also add 2 more properties, framebuffer-patch-enable and framebuffer-stolenmem. the first enables patching via whatevergreen.kext, and the second sets the min stolen memory to 19mb. this is usually unnecessary, as this can be configured in bios(64mb recommended) but required when not available.\n\n * note: headless framebuffers(where the dgpu is the display out) do not need framebuffer-patch-enable and framebuffer-stolenmem\n\nkey                        type   value\naapl,ig-platform-id        data   00001259\nframebuffer-patch-enable   data   01000000\nframebuffer-stolenmem      data   00003001\n\n(this is an example for a desktop hd 630 without a dgpu and no bios options for igpu memory)\n\npciroot(0x0)/pci(0x1b,0x0)\n\nlayout-id\n\n * applies applealc audio injection, you'll need to do your own research on which codec your motherboard has and match it with applealc's layout. applealc supported codecs.\n * you can delete this property outright as it's unused for us at this time\n\nfor us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-ids present. more info on this is covered in the post-install page\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\nfun fact: the reason the byte order is swapped is because most modern processors are little endian\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus like pentiums and celerons\n\n * cpuid1mask: leave this blank\n * cpuid1data: leave this blank\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplexcpmcfglock          yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args        description\nagdpmod=pikera   used for disabling board id checks on some navi gpus (rx\n                 5000 & 6000 series), without this you'll get a black screen.\n                 don't use if you don't have navi (ie. polaris and vega cards\n                 shouldn't use this)\n-radcodec        used for allowing officially unsupported amd gpus (spoofed)\n                 to use the hardware video encoder\nradpg=15         used for disabling some power-gating modes, helpful for\n                 properly initializing amd cape verde based gpus\nunfairgva=1      used for fixing hardware drm support on supported amd gpus\nnvda_drv_vrl=1   used for enabling nvidia's web drivers on maxwell and pascal\n                 cards in macos sierra and high sierra\n-wegnoegpu       used for disabling all other gpus than the integrated intel\n                 igpu, useful for those wanting to run newer versions of\n                 macos where their dgpu isn't supported\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\ninfo\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone. for us, we'll be changing the following:\n\nquirk        enabled\nwriteflash   yes\n\nmore in-depth info\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this kaby lake example, we'll chose the imac18,1 smbios - this is done intentionally for compatibility's sake. there are two main smbios used for kaby lake:\n\nsmbios     hardware\nimac18,1   used for computers utilizing the igpu for displaying\nimac18,3   used for computers using a dgpu for displaying, and an igpu\n           for computing tasks only\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               imac18,1 smbios info                  #\n#######################################################\n\ntype:         imac18,1\nserial:       c02z2cz5h7jy\nboard serial: c02928701guh69ffb\nsmuuid:       aa043f8d-33b6-4a1a-94f7-46972aad0607\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk              enabled   comment\nunblockfsconnect   no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt (for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applexcpmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * dvmt pre-allocated(igpu memory): 64mb or higher\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Desktop Yonah, Conroe and Penryn",frontmatter:{},regularPath:"/config.plist/penryn.html",relativePath:"config.plist/penryn.md",key:"v-6c32ae16",path:"/config.plist/penryn.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:481},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1710},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1721},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2717},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:312},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:3054},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:3162},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:3322},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:3054},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:5120},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1721},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2717},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:5597},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1721},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:7806},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:7948},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:8149},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:312},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:3054},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:10962},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:12112},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:3162},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:12563},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:13463},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:15805},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:15874},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:15992},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:4242},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1721},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2717},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:20571},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:21780},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:3179},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:18704},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:10490},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:25345},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:25587},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:25811},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:26196},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:3054},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:23479},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:27832},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:28152},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:8394},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3777}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Intel BIOS settings Disable Enable",content:"# Desktop Yonah, Conroe and Penryn\n\nSUPPORT                         VERSION\nInitial macOS Support: Penryn   OS X 10.4.10, Tiger\nLast Supported OS: Penryn       macOS 10.13.6 High Sierra\nNote                            iGPU support will not be covered in this guide, see here:\n                                GMA Patching\nNote 2                          SSE4 is required to boot macOS 10.12, Sierra and newer, so\n                                Conroe and older are unsupported\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-EC          Fixes the embedded controller, see Getting Started With ACPI\n                 Guide for more details.\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\nLEGACY   UEFI\n         \n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, depending where your board has UEFI, you have 2 options depending what your motherboard supports:\n\n# Legacy Settings\n\nQUIRK                    ENABLED   COMMENT\nAvoidRuntimeDefrag       No        Big Sur may require this quirk enabled\nEnableSafeModeSlide      No        \nEnableWriteUnprotector   No        \nProvideCustomSlide       No        \nRebuildAppleMemoryMap    Yes       This is required to boot OS X 10.4 through 10.6\nSetupVirtualMap          No        \n\n# UEFI Settings\n\nQUIRK                   ENABLED   COMMENT\nRebuildAppleMemoryMap   Yes       This is required to boot OS X 10.4 through 10.6\n\nMore in-depth Info\n * AvoidRuntimeDefrag: NO\n   * Fixes UEFI runtime services like date, time, NVRAM, power control;\n   * macOS Big Sur however requires the APIC table present, otherwise causing early kernel panics so this quirk is recommended for those users.\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: NO\n   * Needed to remove write protection from CR0 register on UEFI platforms.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * RebuildAppleMemoryMap: YES\n   * Resolves early memory kernel panics on 10.6 and below.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses on UEFI boards.\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nBy default, the Sample.plist has this section set for audio which we'll be setting up by setting the layout ID in the boot-args section, so removal of PciRoot(0x0)/Pci(0x1b,0x0) is also recommended from the Add section. On other platforms this section is also used for iGPU setup, on Penryn however it is covered in another guide.\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons\n\n * Cpuid1Mask: Leave this blank\n * Cpuid1Data: Leave this blank\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       Not required for 10.12 and older\nPowerTimeoutKernelPanic   YES       Not required for 10.14 and older\nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: NO\n   * CFG-Lock is not present on Penryn so no need for this quirk\n * AppleXcpmCfgLock: NO\n   * CFG-Lock is not present on Penryn so no need for this quirk\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS        DESCRIPTION\nagdpmod=pikera   Used for disabling board ID checks on some Navi GPUs (RX\n                 5000 & 6000 series), without this you'll get a black screen.\n                 Don't use if you don't have Navi (ie. Polaris and Vega cards\n                 shouldn't use this)\n-radcodec        Used for allowing officially unsupported AMD GPUs (spoofed)\n                 to use the Hardware Video Encoder\nradpg=15         Used for disabling some power-gating modes, helpful for\n                 properly initializing AMD Cape Verde based GPUs\nunfairgva=1      Used for fixing hardware DRM support on supported AMD GPUs\nnvda_drv_vrl=1   Used for enabling NVIDIA's Web Drivers on Maxwell and Pascal\n                 cards in macOS Sierra and High Sierra\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nInfo\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. For us, we'll be changing the following:\n\nQUIRK        ENABLED\nWriteFlash   YES\n\nMore in-depth Info\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Penryn example, we'll chose the iMac10,1 SMBIOS - this is done intentionally for compatibility's sake. There are 4 main SMBIOS used for legacy hardware:\n\nSMBIOS      HARDWARE                      OS SUPPORT\niMac4,1     Yonah SMBIOS(32-bit)          10.4 to 10.6.8\niMac7,1     Conroe SMBIOS(64-Bit, SSE3)   10.4 to 10.11.6\niMac10,1    Penryn SMBIOS(64-Bit, SSE4)   10.6 to 10.13.6\nMacPro6,1   Mojave and newer SMBIOS       10.9 to current\n\n * If you plan to later run macOS 10.14, Mojave or newer, MacPro6,1 will be the recommended SMBIOS. However please note you will need telemetrap.kext to resolve install issues\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               iMac10,1 SMBIOS Info                  #\n#######################################################\n\nType:         iMac10,1\nSerial:       C02KCYZLDNCW\nBoard Serial: C02309301QXF2FRJC\nSmUUID:       A154B586-874B-4E57-A1FF-9D6E503E4580\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlusLegacy.efi\n * OpenRuntime.efi\n * OpenUsbKbDxe.efi(If your firmware does not support UEFI)\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nInfo\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default besides:\n\nQUIRK        VALUE   COMMENT\nKeySupport   NO      Enable if your BIOS supports UEFI\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                    ENABLED   COMMENT\nIgnoreInvalidFlexRatio   NO        Enable this if you have a UEFI BIOS\nUnblockFsConnect         NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * IgnoreInvalidFlexRatio: NO\n   \n   * Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-Skylake based systems\n   * Only relevant on UEFI BIOS\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Intel SGX\n * Intel Platform Trust\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * DVMT Pre-Allocated(iGPU Memory): 32MB or higher\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# desktop yonah, conroe and penryn\n\nsupport                         version\ninitial macos support: penryn   os x 10.4.10, tiger\nlast supported os: penryn       macos 10.13.6 high sierra\nnote                            igpu support will not be covered in this guide, see here:\n                                gma patching\nnote 2                          sse4 is required to boot macos 10.12, sierra and newer, so\n                                conroe and older are unsupported\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-ec          fixes the embedded controller, see getting started with acpi\n                 guide for more details.\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, our patches are handled by our ssdts. this is a much cleaner solution as this will allow us to boot windows and other oses with opencore\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\nlegacy   uefi\n         \n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be passthrough to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, depending where your board has uefi, you have 2 options depending what your motherboard supports:\n\n# legacy settings\n\nquirk                    enabled   comment\navoidruntimedefrag       no        big sur may require this quirk enabled\nenablesafemodeslide      no        \nenablewriteunprotector   no        \nprovidecustomslide       no        \nrebuildapplememorymap    yes       this is required to boot os x 10.4 through 10.6\nsetupvirtualmap          no        \n\n# uefi settings\n\nquirk                   enabled   comment\nrebuildapplememorymap   yes       this is required to boot os x 10.4 through 10.6\n\nmore in-depth info\n * avoidruntimedefrag: no\n   * fixes uefi runtime services like date, time, nvram, power control;\n   * macos big sur however requires the apic table present, otherwise causing early kernel panics so this quirk is recommended for those users.\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: no\n   * needed to remove write protection from cr0 register on uefi platforms.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * rebuildapplememorymap: yes\n   * resolves early memory kernel panics on 10.6 and below.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses on uefi boards.\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\nby default, the sample.plist has this section set for audio which we'll be setting up by setting the layout id in the boot-args section, so removal of pciroot(0x0)/pci(0x1b,0x0) is also recommended from the add section. on other platforms this section is also used for igpu setup, on penryn however it is covered in another guide.\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus like pentiums and celerons\n\n * cpuid1mask: leave this blank\n * cpuid1data: leave this blank\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       not required for 10.12 and older\npowertimeoutkernelpanic   yes       not required for 10.14 and older\nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: no\n   * cfg-lock is not present on penryn so no need for this quirk\n * applexcpmcfglock: no\n   * cfg-lock is not present on penryn so no need for this quirk\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args        description\nagdpmod=pikera   used for disabling board id checks on some navi gpus (rx\n                 5000 & 6000 series), without this you'll get a black screen.\n                 don't use if you don't have navi (ie. polaris and vega cards\n                 shouldn't use this)\n-radcodec        used for allowing officially unsupported amd gpus (spoofed)\n                 to use the hardware video encoder\nradpg=15         used for disabling some power-gating modes, helpful for\n                 properly initializing amd cape verde based gpus\nunfairgva=1      used for fixing hardware drm support on supported amd gpus\nnvda_drv_vrl=1   used for enabling nvidia's web drivers on maxwell and pascal\n                 cards in macos sierra and high sierra\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\ninfo\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone. for us, we'll be changing the following:\n\nquirk        enabled\nwriteflash   yes\n\nmore in-depth info\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this penryn example, we'll chose the imac10,1 smbios - this is done intentionally for compatibility's sake. there are 4 main smbios used for legacy hardware:\n\nsmbios      hardware                      os support\nimac4,1     yonah smbios(32-bit)          10.4 to 10.6.8\nimac7,1     conroe smbios(64-bit, sse3)   10.4 to 10.11.6\nimac10,1    penryn smbios(64-bit, sse4)   10.6 to 10.13.6\nmacpro6,1   mojave and newer smbios       10.9 to current\n\n * if you plan to later run macos 10.14, mojave or newer, macpro6,1 will be the recommended smbios. however please note you will need telemetrap.kext to resolve install issues\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               imac10,1 smbios info                  #\n#######################################################\n\ntype:         imac10,1\nserial:       c02kcyzldncw\nboard serial: c02309301qxf2frjc\nsmuuid:       a154b586-874b-4e57-a1ff-9d6e503e4580\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfspluslegacy.efi\n * openruntime.efi\n * openusbkbdxe.efi(if your firmware does not support uefi)\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\ninfo\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default besides:\n\nquirk        value   comment\nkeysupport   no      enable if your bios supports uefi\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                    enabled   comment\nignoreinvalidflexratio   no        enable this if you have a uefi bios\nunblockfsconnect         no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * ignoreinvalidflexratio: no\n   \n   * fix for when msr_flex_ratio (0x194) can't be disabled in the bios, required for all pre-skylake based systems\n   * only relevant on uefi bios\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * intel sgx\n * intel platform trust\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * dvmt pre-allocated(igpu memory): 32mb or higher\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Desktop Sandy Bridge",frontmatter:{},regularPath:"/config.plist/sandy-bridge.html",relativePath:"config.plist/sandy-bridge.md",key:"v-dae15e14",path:"/config.plist/sandy-bridge.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:406},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1635},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1646},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2955},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:3893},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:4145},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:4253},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:4390},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:4145},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:5472},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1646},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2955},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:7748},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1646},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:9957},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:10099},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:10300},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:3893},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:4145},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:13433},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:14583},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:4253},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:15034},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:15934},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:18276},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:18345},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:18463},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:4738},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1646},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2955},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:23248},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:24273},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:397},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:21175},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:12961},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:27838},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:28080},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:28304},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:28689},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:4145},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:25972},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:30259},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:30579},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:10628},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3483}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Intel BIOS settings Disable Enable",content:"# Desktop Sandy Bridge\n\nSUPPORT                 VERSION\nInitial macOS Support   OS X 10.6.7, Snow Leopard\nLast Supported OS       macOS 12 Monterey\nNote 1                  For Ventura information, see macOS 13 Ventura\nNote 2                  Sandy Bridge's iGPU is only officially supported up-to macOS\n                        10.13\nNote 3                  Most Sandy bridge boards do not support UEFI\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-PM          Needed for proper CPU power management, you will need to run\n                 Pike's ssdtPRGen.sh script to generate this file. This will\n                 be run in post install.\nSSDT-EC          Fixes the embedded controller, see Getting Started With ACPI\n                 Guide for more details.\nSSDT-IMEI        Needed to add a missing IMEI device on Sandy Bridge CPU with\n                 7 series motherboards\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nInfo\n\nThis blocks certain ACPI tables from loading, for us we really care about this. Main reason is that Apple's XCPM does not support SandyBridge all too well and can cause AppleIntelCPUPowerManagement panics on boot. To avoid this we make our own PM SSDT in Post-Install and drop the old tables(Note that this is only temporary until we've made our SSDT-PM, we'll re-enable these tables later):\n\nRemoving CpuPm:\n\nKEY              TYPE      VALUE\nAll              Boolean   YES\nComment          String    Delete CpuPm\nEnabled          Boolean   YES\nOemTableId       Data      437075506d000000\nTableLength      Number    0\nTableSignature   Data      53534454\n\nRemoving Cpu0Ist:\n\nKEY              TYPE      VALUE\nAll              Boolean   YES\nComment          String    Delete Cpu0Ist\nEnabled          Boolean   YES\nOemTableId       Data      4370753049737400\nTableLength      Number    0\nTableSignature   Data      53534454\n\n\n# Patch\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc.\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode, however this quirk is only applicable to UEFI platforms.\n * EnableWriteUnprotector: YES\n   * Needed to remove write protection from CR0 register.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses, required for Gigabyte boards to resolve early kernel panics\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\nThis section is set up via WhateverGreen's Framebuffer Patching Guide and is used for setting important iGPU properties.\n\nThe config.plist doesn't already have a section for this so you will have to create it manually.\n\nThe AAPL,snb-platform-id is what macOS uses to determine how the iGPU drivers interact with our system, and the two values choose between are as follows:\n\nAAPL,SNB-PLATFORM-ID   COMMENT\n10000300               Used when the Desktop iGPU is used to drive a display\n00000500               Used when the Desktop iGPU is only used for computing tasks\n                       and doesn't drive a display\n\nWe also have the issue of requiring a supported device-id, just like with the above table you'll want to match up to your hardware configuration:\n\nDEVICE-ID   COMMENT\n26010000    Used when the Desktop iGPU is used to drive a display\n02010000    Used when the Desktop iGPU is only used for computing tasks\n            and doesn't drive a display\n\nAnd finally, you should have something like this:\n\nKEY                    TYPE   VALUE\nAAPL,snb-platform-id   Data   00000500\ndevice-id              Data   26010000\n\n(This is an example for a desktop HD 3000 with a dGPU used as the output)\n\nPciRoot(0x0)/Pci(0x16,0x0)\n\nThis is needed if you're pairing an Sandy Bridge CPU with a 7 series motherboard(ie. B75, Q75, Z75, H77, Q77, Z77), specifically needed to spoof your IMEI device into being supported. Note this property is still required with or without SSDT-IMEI.\n\nKEY         TYPE   VALUE\ndevice-id   Data   3A1C0000\n\nNote: This is not needed if you have a 6 series motherboard(ie. H61, B65, Q65, P67, H67, Q67, Z68)\n\nPciRoot(0x0)/Pci(0x1b,0x0)\n\nlayout-id\n\n * Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs.\n * You can delete this property outright as it's unused for us at this time\n\nFor us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present. More info on this is covered in the Post-Install Page\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons\n\n * Cpuid1Mask: Leave this blank\n * Cpuid1Data: Leave this blank\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleCpuPmCfgLock         YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       If your board does not have USB 3.0, you can disable\n                                    Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS        DESCRIPTION\nagdpmod=pikera   Used for disabling board ID checks on some Navi GPUs (RX\n                 5000 & 6000 series), without this you'll get a black screen.\n                 Don't use if you don't have Navi (ie. Polaris and Vega cards\n                 shouldn't use this)\n-radcodec        Used for allowing officially unsupported AMD GPUs (spoofed)\n                 to use the Hardware Video Encoder\nradpg=15         Used for disabling some power-gating modes, helpful for\n                 properly initializing AMD Cape Verde based GPUs\nunfairgva=1      Used for fixing hardware DRM support on supported AMD GPUs\nnvda_drv_vrl=1   Used for enabling NVIDIA's Web Drivers on Maxwell and Pascal\n                 cards in macOS Sierra and High Sierra\n-wegnoegpu       Used for disabling all other GPUs than the integrated Intel\n                 iGPU, useful for those wanting to run newer versions of\n                 macOS where their dGPU isn't supported\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nInfo\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. For us, we'll be changing the following:\n\nQUIRK        ENABLED\nWriteFlash   YES\n\nMore in-depth Info\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Sandy Bridge example, we'll chose the iMac12,2 SMBIOS - this is done intentionally for compatibility's sake. There are two main SMBIOS used for Sandy Bridge:\n\nSMBIOS      HARDWARE\niMac12,2    Default Sandy Bridge SMBIOS\nMacPro6,1   Mojave and newer SMBIOS\n\n * If you plan to later run macOS 10.14, Mojave or newer, MacPro6,1 will be the recommended SMBIOS and the iGPU must be disabled in the BIOS due to no longer being supported\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               iMac12,2 SMBIOS Info                  #\n#######################################################\n\nType:         iMac12,2\nSerial:       C02KCYZLDNCW\nBoard Serial: C02309301QXF2FRJC\nSmUUID:       A154B586-874B-4E57-A1FF-9D6E503E4580\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlusLegacy.efi\n * OpenRuntime.efi\n * OpenUsbKbDxe.efi(If your firmware does not support UEFI)\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nInfo\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default besides:\n\nQUIRK        VALUE   COMMENT\nKeySupport   NO      Enable if your BIOS supports UEFI\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK                    ENABLED   COMMENT\nIgnoreInvalidFlexRatio   YES       \nUnblockFsConnect         NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * IgnoreInvalidFlexRatio: YES\n   \n   * Fix for when MSR_FLEX_RATIO (0x194) can't be disabled in the BIOS, required for all pre-Skylake based systems\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt (For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleCpuPmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * DVMT Pre-Allocated(iGPU Memory): 32MB or higher\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# desktop sandy bridge\n\nsupport                 version\ninitial macos support   os x 10.6.7, snow leopard\nlast supported os       macos 12 monterey\nnote 1                  for ventura information, see macos 13 ventura\nnote 2                  sandy bridge's igpu is only officially supported up-to macos\n                        10.13\nnote 3                  most sandy bridge boards do not support uefi\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-pm          needed for proper cpu power management, you will need to run\n                 pike's ssdtprgen.sh script to generate this file. this will\n                 be run in post install.\nssdt-ec          fixes the embedded controller, see getting started with acpi\n                 guide for more details.\nssdt-imei        needed to add a missing imei device on sandy bridge cpu with\n                 7 series motherboards\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\ninfo\n\nthis blocks certain acpi tables from loading, for us we really care about this. main reason is that apple's xcpm does not support sandybridge all too well and can cause appleintelcpupowermanagement panics on boot. to avoid this we make our own pm ssdt in post-install and drop the old tables(note that this is only temporary until we've made our ssdt-pm, we'll re-enable these tables later):\n\nremoving cpupm:\n\nkey              type      value\nall              boolean   yes\ncomment          string    delete cpupm\nenabled          boolean   yes\noemtableid       data      437075506d000000\ntablelength      number    0\ntablesignature   data      53534454\n\nremoving cpu0ist:\n\nkey              type      value\nall              boolean   yes\ncomment          string    delete cpu0ist\nenabled          boolean   yes\noemtableid       data      4370753049737400\ntablelength      number    0\ntablesignature   data      53534454\n\n\n# patch\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, our patches are handled by our ssdts. this is a much cleaner solution as this will allow us to boot windows and other oses with opencore\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be passthrough to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc.\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode, however this quirk is only applicable to uefi platforms.\n * enablewriteunprotector: yes\n   * needed to remove write protection from cr0 register.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses, required for gigabyte boards to resolve early kernel panics\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\npciroot(0x0)/pci(0x2,0x0)\n\nthis section is set up via whatevergreen's framebuffer patching guide and is used for setting important igpu properties.\n\nthe config.plist doesn't already have a section for this so you will have to create it manually.\n\nthe aapl,snb-platform-id is what macos uses to determine how the igpu drivers interact with our system, and the two values choose between are as follows:\n\naapl,snb-platform-id   comment\n10000300               used when the desktop igpu is used to drive a display\n00000500               used when the desktop igpu is only used for computing tasks\n                       and doesn't drive a display\n\nwe also have the issue of requiring a supported device-id, just like with the above table you'll want to match up to your hardware configuration:\n\ndevice-id   comment\n26010000    used when the desktop igpu is used to drive a display\n02010000    used when the desktop igpu is only used for computing tasks\n            and doesn't drive a display\n\nand finally, you should have something like this:\n\nkey                    type   value\naapl,snb-platform-id   data   00000500\ndevice-id              data   26010000\n\n(this is an example for a desktop hd 3000 with a dgpu used as the output)\n\npciroot(0x0)/pci(0x16,0x0)\n\nthis is needed if you're pairing an sandy bridge cpu with a 7 series motherboard(ie. b75, q75, z75, h77, q77, z77), specifically needed to spoof your imei device into being supported. note this property is still required with or without ssdt-imei.\n\nkey         type   value\ndevice-id   data   3a1c0000\n\nnote: this is not needed if you have a 6 series motherboard(ie. h61, b65, q65, p67, h67, q67, z68)\n\npciroot(0x0)/pci(0x1b,0x0)\n\nlayout-id\n\n * applies applealc audio injection, you'll need to do your own research on which codec your motherboard has and match it with applealc's layout. applealc supported codecs.\n * you can delete this property outright as it's unused for us at this time\n\nfor us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-ids present. more info on this is covered in the post-install page\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus like pentiums and celerons\n\n * cpuid1mask: leave this blank\n * cpuid1data: leave this blank\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplecpupmcfglock         yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       if your board does not have usb 3.0, you can disable\n                                    disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args        description\nagdpmod=pikera   used for disabling board id checks on some navi gpus (rx\n                 5000 & 6000 series), without this you'll get a black screen.\n                 don't use if you don't have navi (ie. polaris and vega cards\n                 shouldn't use this)\n-radcodec        used for allowing officially unsupported amd gpus (spoofed)\n                 to use the hardware video encoder\nradpg=15         used for disabling some power-gating modes, helpful for\n                 properly initializing amd cape verde based gpus\nunfairgva=1      used for fixing hardware drm support on supported amd gpus\nnvda_drv_vrl=1   used for enabling nvidia's web drivers on maxwell and pascal\n                 cards in macos sierra and high sierra\n-wegnoegpu       used for disabling all other gpus than the integrated intel\n                 igpu, useful for those wanting to run newer versions of\n                 macos where their dgpu isn't supported\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\ninfo\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone. for us, we'll be changing the following:\n\nquirk        enabled\nwriteflash   yes\n\nmore in-depth info\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this sandy bridge example, we'll chose the imac12,2 smbios - this is done intentionally for compatibility's sake. there are two main smbios used for sandy bridge:\n\nsmbios      hardware\nimac12,2    default sandy bridge smbios\nmacpro6,1   mojave and newer smbios\n\n * if you plan to later run macos 10.14, mojave or newer, macpro6,1 will be the recommended smbios and the igpu must be disabled in the bios due to no longer being supported\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               imac12,2 smbios info                  #\n#######################################################\n\ntype:         imac12,2\nserial:       c02kcyzldncw\nboard serial: c02309301qxf2frjc\nsmuuid:       a154b586-874b-4e57-a1ff-9d6e503e4580\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfspluslegacy.efi\n * openruntime.efi\n * openusbkbdxe.efi(if your firmware does not support uefi)\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\ninfo\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default besides:\n\nquirk        value   comment\nkeysupport   no      enable if your bios supports uefi\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk                    enabled   comment\nignoreinvalidflexratio   yes       \nunblockfsconnect         no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * ignoreinvalidflexratio: yes\n   \n   * fix for when msr_flex_ratio (0x194) can't be disabled in the bios, required for all pre-skylake based systems\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt (for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applecpupmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * dvmt pre-allocated(igpu memory): 32mb or higher\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"Apple Secure Boot",frontmatter:{},regularPath:"/config.plist/security.html",relativePath:"config.plist/security.md",key:"v-b7d4d9d4",path:"/config.plist/security.html",headers:[{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:182},{level:3,title:"Security -> SecureBootModel",slug:"security-securebootmodel",normalizedTitle:"security -&gt; securebootmodel",charIndex:null}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Misc Security -> SecureBootModel",content:"# Apple Secure Boot\n\nThese settings in your config.plist can restrict which macOS versions OpenCore will boot. You will want to check these really quick before booting your USB.\n\n\n# Misc\n\n\n# Security -> SecureBootModel\n\nOpenCore by default has Apple Secure Boot enabled. This enables security features such as the verification of macOS' boot.efi, with the side effect of restricting which macOS versions OpenCore will boot.\n\n * Big Sur and Above (11.0+): The recommended value is Default.\n * High Sierra-Catalina (10.13-10.15):\n   * If your model is not listed below, set to Disabled.\n   * If running NVIDIA Web Drivers, set to Disabled.\n   * If your model is listed, compare the minimum version with the version your installing. Disable if your installer is below the minimum version listed for your SMBIOS.\n * Sierra and Below (10.4-10.12): This setting has no effect.\n * If booting multiple versions, you may need to set the value to Disabled.\n   * For example, a non-T2 SMBIOS booting High Sierra and Big Sur would need this disabled.\n   * A T2 SMBIOS would be limited by the minimum version listed below.\n\nT2 Mac Models\n\nSMBIOS                           MINIMUM MACOS VERSION\niMacPro1,1 (December 2017)       10.13.2 (17C2111)\nMacBookPro15,1 (July 2018)       10.13.6 (17G2112)\nMacBookPro15,2 (July 2018)       10.13.6 (17G2112)\nMacmini8,1 (October 2018)        10.14 (18A2063)\nMacBookAir8,1 (October 2018)     10.14.1 (18B2084)\nMacBookPro15,3 (May 2019)        10.14.5 (18F132)\nMacBookPro15,4 (July 2019)       10.14.5 (18F2058)\nMacBookAir8,2 (July 2019)        10.14.5 (18F2058)\nMacBookPro16,1 (November 2019)   10.15.1 (19B2093)\nMacPro7,1 (December 2019)        10.15.1 (19B88)\nMacBookAir9,1 (March 2020)       10.15.3 (19D2064)\nMacBookPro16,2 (May 2020)        10.15.4 (19E2269)\nMacBookPro16,3 (May 2020)        10.15.4 (19E2265)\nMacBookPro16,4 (June 2020)       10.15.5 (19F96)\niMac20,1 (August 2020)           10.15.6 (19G2005)\niMac20,2 (August 2020)           10.15.6 (19G2005)\n\n\n# Now with all this done, head to the Installation Page",normalizedContent:"# apple secure boot\n\nthese settings in your config.plist can restrict which macos versions opencore will boot. you will want to check these really quick before booting your usb.\n\n\n# misc\n\n\n# security -> securebootmodel\n\nopencore by default has apple secure boot enabled. this enables security features such as the verification of macos' boot.efi, with the side effect of restricting which macos versions opencore will boot.\n\n * big sur and above (11.0+): the recommended value is default.\n * high sierra-catalina (10.13-10.15):\n   * if your model is not listed below, set to disabled.\n   * if running nvidia web drivers, set to disabled.\n   * if your model is listed, compare the minimum version with the version your installing. disable if your installer is below the minimum version listed for your smbios.\n * sierra and below (10.4-10.12): this setting has no effect.\n * if booting multiple versions, you may need to set the value to disabled.\n   * for example, a non-t2 smbios booting high sierra and big sur would need this disabled.\n   * a t2 smbios would be limited by the minimum version listed below.\n\nt2 mac models\n\nsmbios                           minimum macos version\nimacpro1,1 (december 2017)       10.13.2 (17c2111)\nmacbookpro15,1 (july 2018)       10.13.6 (17g2112)\nmacbookpro15,2 (july 2018)       10.13.6 (17g2112)\nmacmini8,1 (october 2018)        10.14 (18a2063)\nmacbookair8,1 (october 2018)     10.14.1 (18b2084)\nmacbookpro15,3 (may 2019)        10.14.5 (18f132)\nmacbookpro15,4 (july 2019)       10.14.5 (18f2058)\nmacbookair8,2 (july 2019)        10.14.5 (18f2058)\nmacbookpro16,1 (november 2019)   10.15.1 (19b2093)\nmacpro7,1 (december 2019)        10.15.1 (19b88)\nmacbookair9,1 (march 2020)       10.15.3 (19d2064)\nmacbookpro16,2 (may 2020)        10.15.4 (19e2269)\nmacbookpro16,3 (may 2020)        10.15.4 (19e2265)\nmacbookpro16,4 (june 2020)       10.15.5 (19f96)\nimac20,1 (august 2020)           10.15.6 (19g2005)\nimac20,2 (august 2020)           10.15.6 (19g2005)\n\n\n# now with all this done, head to the installation page",charsets:{}},{title:"Desktop Skylake",frontmatter:{},regularPath:"/config.plist/skylake.html",relativePath:"config.plist/skylake.md",key:"v-02d0bedc",path:"/config.plist/skylake.html",headers:[{level:2,title:"Starting Point",slug:"starting-point",normalizedTitle:"starting point",charIndex:102},{level:2,title:"ACPI",slug:"acpi",normalizedTitle:"acpi",charIndex:1331},{level:3,title:"Add",slug:"add",normalizedTitle:"add",charIndex:1342},{level:3,title:"Delete",slug:"delete",normalizedTitle:"delete",charIndex:2506},{level:3,title:"Patch",slug:"patch",normalizedTitle:"patch",charIndex:2591},{level:3,title:"Quirks",slug:"quirks",normalizedTitle:"quirks",charIndex:2843},{level:2,title:"Booter",slug:"booter",normalizedTitle:"booter",charIndex:2951},{level:3,title:"MmioWhitelist",slug:"mmiowhitelist",normalizedTitle:"mmiowhitelist",charIndex:3088},{level:3,title:"Quirks",slug:"quirks-2",normalizedTitle:"quirks",charIndex:2843},{level:2,title:"DeviceProperties",slug:"deviceproperties",normalizedTitle:"deviceproperties",charIndex:4114},{level:3,title:"Add",slug:"add-2",normalizedTitle:"add",charIndex:1342},{level:3,title:"Delete",slug:"delete-2",normalizedTitle:"delete",charIndex:2506},{level:2,title:"Kernel",slug:"kernel",normalizedTitle:"kernel",charIndex:6541},{level:3,title:"Add",slug:"add-3",normalizedTitle:"add",charIndex:1342},{level:3,title:"Emulate",slug:"emulate",normalizedTitle:"emulate",charIndex:8750},{level:3,title:"Force",slug:"force",normalizedTitle:"force",charIndex:8892},{level:3,title:"Block",slug:"block",normalizedTitle:"block",charIndex:9093},{level:3,title:"Patch",slug:"patch-2",normalizedTitle:"patch",charIndex:2591},{level:3,title:"Quirks",slug:"quirks-3",normalizedTitle:"quirks",charIndex:2843},{level:3,title:"Scheme",slug:"scheme",normalizedTitle:"scheme",charIndex:12137},{level:2,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:13287},{level:3,title:"Boot",slug:"boot",normalizedTitle:"boot",charIndex:2951},{level:3,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:13738},{level:3,title:"Security",slug:"security",normalizedTitle:"security",charIndex:14638},{level:3,title:"Serial",slug:"serial",normalizedTitle:"serial",charIndex:16980},{level:3,title:"Tools",slug:"tools",normalizedTitle:"tools",charIndex:17049},{level:3,title:"Entries",slug:"entries",normalizedTitle:"entries",charIndex:17167},{level:2,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:3436},{level:3,title:"Add",slug:"add-4",normalizedTitle:"add",charIndex:1342},{level:3,title:"Delete",slug:"delete-3",normalizedTitle:"delete",charIndex:2506},{level:2,title:"PlatformInfo",slug:"platforminfo",normalizedTitle:"platforminfo",charIndex:21952},{level:3,title:"Generic",slug:"generic",normalizedTitle:"generic",charIndex:22695},{level:2,title:"UEFI",slug:"uefi",normalizedTitle:"uefi",charIndex:3397},{level:3,title:"Drivers",slug:"drivers",normalizedTitle:"drivers",charIndex:19879},{level:3,title:"APFS",slug:"apfs",normalizedTitle:"apfs",charIndex:11665},{level:3,title:"Audio",slug:"audio",normalizedTitle:"audio",charIndex:26194},{level:3,title:"Input",slug:"input",normalizedTitle:"input",charIndex:26436},{level:3,title:"Output",slug:"output",normalizedTitle:"output",charIndex:26646},{level:3,title:"ProtocolOverrides",slug:"protocoloverrides",normalizedTitle:"protocoloverrides",charIndex:27031},{level:3,title:"Quirks",slug:"quirks-4",normalizedTitle:"quirks",charIndex:2843},{level:3,title:"ReservedMemory",slug:"reservedmemory",normalizedTitle:"reservedmemory",charIndex:24394},{level:2,title:"Cleaning up",slug:"cleaning-up",normalizedTitle:"cleaning up",charIndex:28402},{level:2,title:"Intel BIOS settings",slug:"intel-bios-settings",normalizedTitle:"intel bios settings",charIndex:28722},{level:3,title:"Disable",slug:"disable",normalizedTitle:"disable",charIndex:9421},{level:3,title:"Enable",slug:"enable",normalizedTitle:"enable",charIndex:3466}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Starting Point ACPI Add Delete Patch Quirks Booter MmioWhitelist Quirks DeviceProperties Add Delete Kernel Add Emulate Force Block Patch Quirks Scheme Misc Boot Debug Security Serial Tools Entries NVRAM Add Delete PlatformInfo Generic UEFI Drivers APFS Audio Input Output ProtocolOverrides Quirks ReservedMemory Cleaning up Intel BIOS settings Disable Enable",content:"# Desktop Skylake\n\nSUPPORT                 VERSION\nInitial macOS Support   OS X 10.11, El Capitan\n\n\n# Starting Point\n\nSo making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:\n\n * All properties must be defined, there are no default OpenCore will fall back on so do not delete sections unless told explicitly so. If the guide doesn't mention the option, leave it at default.\n * The Sample.plist cannot be used As-Is, you must configure it to your system\n * DO NOT USE CONFIGURATORS, these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!\n\nNow with all that, a quick reminder of the tools we need\n\n * ProperTree\n   * Universal plist editor\n * GenSMBIOS\n   * For generating our SMBIOS data\n * Sample/config.plist\n   * See previous section on how to obtain: config.plist Setup\n\nWARNING\n\nRead this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# ACPI\n\n\n\n\n# Add\n\nInfo\n\nThis is where you'll add SSDTs for your system, these are very important to booting macOS and have many uses like USB maps, disabling unsupported GPUs and such. And with our system, it's even required to boot. Guide on making them found here: Getting started with ACPI\n\nFor us we'll need a couple of SSDTs to bring back functionality that Clover provided:\n\nREQUIRED SSDTS   DESCRIPTION\nSSDT-PLUG        Allows for native CPU power management on Haswell and newer,\n                 see Getting Started With ACPI Guide for more details.\nSSDT-EC-USBX     Fixes both the embedded controller and USB power, see\n                 Getting Started With ACPI Guide for more details.\n\nNote that you should not add your generated DSDT.aml here, it is already in your firmware. So if present, remove the entry for it in your config.plist and under EFI/OC/ACPI.\n\nFor those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the Getting started with ACPI page. Compiled SSDTs have a .aml extension(Assembled) and will go into the EFI/OC/ACPI folder and must be specified in your config under ACPI -> Add as well.\n\n\n# Delete\n\nThis blocks certain ACPI tables from loading, for us we can ignore this.\n\n\n# Patch\n\nThis section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore\n\n\n# Quirks\n\nSettings relating to ACPI, leave everything here as default as we have no use for these quirks.\n\n\n# Booter\n\n\n\nThis section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi\n\n\n# MmioWhitelist\n\nThis section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with DevirtualiseMmio\n\n\n# Quirks\n\nInfo\n\nSettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nMore in-depth Info\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc.\n * EnableSafeModeSlide: YES\n   * Enables slide variables to be used in safe mode.\n * EnableWriteUnprotector: YES\n   * Needed to remove write protection from CR0 register.\n * ProvideCustomSlide: YES\n   * Used for Slide variable calculation. However the necessity of this quirk is determined by OCABC: Only N/256 slide values are usable! message in the debug log. If the message OCABC: All slides are usable! You can disable ProvideCustomSlide! is present in your log, you can disable ProvideCustomSlide.\n * SetupVirtualMap: YES\n   * Fixes SetVirtualAddresses calls to virtual addresses, required for Gigabyte boards to resolve early kernel panics.\n\n\n# DeviceProperties\n\n\n\n\n# Add\n\nSets device properties from a map.\n\nPciRoot(0x0)/Pci(0x2,0x0)\n\nThis section is set up via WhateverGreen's Framebuffer Patching Guide and is used for setting important iGPU properties.\n\nThe config.plist doesn't already have a section for this so you will have to create it manually.\n\nAAPL,ig-platform-id is what macOS uses to determine how the iGPU drivers interact with our system, and the two values choose between are as follows:\n\nAAPL,IG-PLATFORM-ID   COMMENT\n00001219              Used when the Desktop iGPU is used to drive a display\n01001219              Used when the Desktop iGPU is only used for computing tasks\n                      and doesn't drive a display\n\nNote: If booting macOS Ventura, you need to spoof your iGPU as the closest Kaby Lake model.\n\nWe also add 3 more properties, framebuffer-patch-enable, framebuffer-stolenmem and framebuffer-fbmem. The first enables patching via WhateverGreen.kext, the second sets the min stolen memory to 19MB and third sets the framebuffer memory to 9MB. This is usually unnecessary, as this can be configured in BIOS(64MB recommended) but required when not available.\n\n * Note: Headless framebuffers(where the dGPU is the display out) do not need framebuffer-patch-enable, framebuffer-stolenmem and framebuffer-fbmem\n\nAnd extra note for P530 users, your iGPU is not natively supported so you will need to add the following property:\n\nKEY         TYPE   VALUE\ndevice-id   Data   1B190000\n\nOnce you're done, you should have something similar:\n\nKEY                        TYPE   VALUE\nAAPL,ig-platform-id        Data   00001219\nframebuffer-patch-enable   Data   01000000\nframebuffer-stolenmem      Data   00003001\nframebuffer-fbmem          Data   00009000\ndevice-id                  Data   1B190000\n\n(This is an example for a desktop HD P530 without a dGPU and no BIOS options for iGPU memory)\n\nPciRoot(0x0)/Pci(0x1b,0x0)\n\nlayout-id\n\n * Applies AppleALC audio injection, you'll need to do your own research on which codec your motherboard has and match it with AppleALC's layout. AppleALC Supported Codecs.\n * You can delete this property outright as it's unused for us at this time\n\nFor us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-IDs present. More info on this is covered in the Post-Install Page\n\n\n# Delete\n\nRemoves device properties from the map, for us we can ignore this.\n\n\n# Kernel\n\n\n\n\n# Add\n\nHere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:\n\nMore in-depth Info\n\nThe main thing you need to keep in mind is:\n\n * Load order\n   * Remember that any plugins should load after its dependencies\n   * This means kexts like Lilu must come before VirtualSMC, AppleALC, WhateverGreen, etc\n\nA reminder that ProperTree users can run Cmd/Ctrl + Shift + R to add all their kexts in the correct order without manually typing each kext out.\n\n * Arch\n   * Architectures supported by this kext\n   * Currently supported values are Any, i386 (32-bit), and x86_64 (64-bit)\n * BundlePath\n   * Name of the kext\n   * ex: Lilu.kext\n * Enabled\n   * Self-explanatory, either enables or disables the kext\n * ExecutablePath\n   * Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting Show Package Contents. Generally, they'll be Contents/MacOS/Kext but some have kexts hidden within under Plugin folder. Do note that plist only kexts do not need this filled in.\n   * ex: Contents/MacOS/Lilu\n * MinKernel\n   * Lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for OS X 10.8\n * MaxKernel\n   * Highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for OS X 10.7\n * PlistPath\n   * Path to the info.plist hidden within the kext\n   * ex: Contents/Info.plist\n\nKernel Support Table\n\nOS X VERSION   MINKERNEL   MAXKERNEL\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# Emulate\n\nNeeded for spoofing unsupported CPUs like Pentiums and Celerons\n\n * Cpuid1Mask: Leave this blank\n * Cpuid1Data: Leave this blank\n\n\n# Force\n\nUsed for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).\n\nFor us, we can ignore.\n\n\n# Block\n\nBlocks certain kexts from loading. Not relevant for us.\n\n\n# Patch\n\nPatches both the kernel and kexts.\n\n\n# Quirks\n\nInfo\n\nSettings relating to the kernel, for us we'll be enabling the following:\n\nQUIRK                     ENABLED   COMMENT\nAppleXcpmCfgLock          YES       Not needed if CFG-Lock is disabled in the BIOS\nDisableIoMapper           YES       Not needed if VT-D is disabled in the BIOS\nLapicKernelPanic          NO        HP Machines will require this quirk\nPanicNoKextDump           YES       \nPowerTimeoutKernelPanic   YES       \nXhciPortLimit             YES       Disable if running macOS 11.3+\n\nMore in-depth Info\n * AppleCpuPmCfgLock: NO\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Ivy Bridge and older\n     * Note: Broadwell and older require this when running 10.10 or older\n * AppleXcpmCfgLock: YES\n   * Only needed when CFG-Lock can't be disabled in BIOS\n   * Only applicable for Haswell and newer\n     * Note: Ivy Bridge-E is also included as it's XCPM capable\n * CustomSMBIOSGuid: NO\n   * Performs GUID patching for UpdateSMBIOSMode set to Custom. Usually relevant for Dell laptops\n   * Enabling this quirk with UpdateSMBIOSMode Custom mode can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n * DisableIoMapper: YES\n   * Needed to get around VT-D if either unable to disable in BIOS or needed for other operating systems, much better alternative to dart=0 as SIP can stay on in Catalina\n * DisableLinkeditJettison: YES\n   * Allows Lilu and others to have more reliable performance without keepsyms=1\n * DisableRtcChecksum: NO\n   * Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown\n * ExtendBTFeatureFlags NO\n   * Helpful for those having continuity issues with non-Apple/non-Fenvi cards\n * LapicKernelPanic: NO\n   * Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is Kernel LAPIC\n * LegacyCommpage: NO\n   * Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)\n * PanicNoKextDump: YES\n   * Allows for reading kernel panics logs when kernel panics occur\n * PowerTimeoutKernelPanic: YES\n   * Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.\n * SetApfsTrimTimeout: -1\n   * Sets trim timeout in microseconds for APFS filesystems on SSDs, only applicable for macOS 10.14 and newer with problematic SSDs.\n * XhciPortLimit: YES\n   * This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. Please create a USB map when possible.\n   * With macOS 11.3+, XhciPortLimit may not function as intended. We recommend users either disable this quirk and map before upgrading or map from Windows. You may also install macOS 11.2.3 or older.\n\n\n# Scheme\n\nSettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:\n\nMore in-depth Info\n\n * FuzzyMatch: True\n   \n   * Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6\n\n * KernelArch: x86_64\n   \n   * Set the kernel's arch type, you can choose between Auto, i386 (32-bit), and x86_64 (64-bit).\n   * If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to Auto and let macOS decide based on your SMBIOS. See below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * KernelCache: Auto\n   \n   * Set kernel cache type, mainly useful for debugging and so we recommend Auto for best support\n\n\n# Misc\n\n\n\n\n# Boot\n\nInfo\n\nQUIRK           ENABLED   COMMENT\nHideAuxiliary   YES       Press space to show macOS recovery and other auxiliary\n                          entries\n\nMore in-depth Info\n * HideAuxiliary: YES\n   * This option will hide supplementary entries, such as macOS recovery and tools, in the picker. Hiding auxiliary entries may increase boot performance on multi-disk systems. You can press space at the picker to show these entries\n\n\n# Debug\n\nInfo\n\nHelpful for debugging OpenCore boot issues(We'll be changing everything but DisplayDelay):\n\nQUIRK             ENABLED\nAppleDebug        YES\nApplePanic        YES\nDisableWatchDog   YES\nTarget            67\n\nMore in-depth Info\n * AppleDebug: YES\n   * Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer\n * ApplePanic: YES\n   * Attempts to log kernel panics to disk\n * DisableWatchDog: YES\n   * Disables the UEFI watchdog, can help with early boot issues\n * DisplayLevel: 2147483650\n   * Shows even more debug information, requires debug version of OpenCore\n * SysReport: NO\n   * Helpful for debugging such as dumping ACPI tables\n   * Note that this is limited to DEBUG versions of OpenCore\n * Target: 67\n   * Shows more debug information, requires debug version of OpenCore\n\nThese values are based of those calculated in OpenCore debugging\n\n\n# Security\n\nInfo\n\nSecurity is pretty self-explanatory, do not skip. We'll be changing the following:\n\nQUIRK                  ENABLED    COMMENT\nAllowSetDefault        YES        \nBlacklistAppleUpdate   YES        \nScanPolicy             0          \nSecureBootModel        Default    Leave this as Default for OpenCore to automatically set the\n                                  correct value corresponding to your SMBIOS. The next page\n                                  goes into more detail about this setting.\nVault                  Optional   This is a word, it is not optional to omit this setting. You\n                                  will regret it if you don't set it to Optional, note that it\n                                  is case-sensitive\n\nMore in-depth Info\n\n * AllowSetDefault: YES\n   \n   * Allow CTRL+Enter and CTRL+Index to set default boot device in the picker\n\n * ApECID: 0\n   \n   * Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.\n\n * AuthRestart: NO\n   \n   * Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional\n\n * BlacklistAppleUpdate: YES\n   \n   * Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses run-efi-updater variable\n\n * DmgLoading: Signed\n   \n   * Ensures only signed DMGs load\n\n * ExposeSensitiveData: 6\n   \n   * Shows more debug information, requires debug version of OpenCore\n\n * Vault: Optional\n   \n   * We won't be dealing vaulting so we can ignore, you won't boot with this set to Secure\n   * This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive\n\n * ScanPolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to Security section for further details. Will not boot USB devices with this set to default\n\n * SecureBootModel: Default\n   \n   * Controls Apple's secure boot functionality in macOS, please refer to Security section for further details.\n   * Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: Stuck on OCB: LoadImage failed - Security Violation\n\n\n# Serial\n\nUsed for serial debugging (Leave everything as default).\n\n\n# Tools\n\nUsed for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.\n\n\n# Entries\n\nUsed for specifying irregular boot paths that can't be found naturally with OpenCore.\n\nWon't be covered here, see 8.6 of Configuration.pdf for more info\n\n\n# NVRAM\n\n\n\n\n# Add\n\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\nUsed for OpenCore's UI scaling, default will work for us. See in-depth section for more info\n\nMore in-depth Info\n\nBooter Path, mainly used for UI modification\n\n * DefaultBackgroundColor: Background color used by boot.efi\n   * 00000000: Syrah Black\n   * BFBFBF00: Light Gray\n\n4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102\n\nOpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users\n\nMore in-depth Info\n * rtc-blacklist: <>\n   * To be used in conjunction with RTCMemoryFixup, see here for more info: Fixing RTC write issues\n   * Most users can ignore this section\n\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\nSystem Integrity Protection bitmask\n\n * General Purpose boot-args:\n\nBOOT-ARGS     DESCRIPTION\n-v            This enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the Apple logo and progress bar. It's invaluable\n              to any Hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   This disables macOS's watchdog which helps prevents a reboot\n              on a kernel panic. That way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    This is a companion setting to debug=0x100 that tells the OS\n              to also print the symbols on a kernel panic. That can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       Used for setting layout-id for AppleALC, see supported\n              codecs to figure out which layout to use for your specific\n              system. More info on this is covered in the Post-Install\n              Page\n\n * GPU-Specific boot-args:\n\nBOOT-ARGS        DESCRIPTION\nagdpmod=pikera   Used for disabling board ID checks on some Navi GPUs (RX\n                 5000 & 6000 series), without this you'll get a black screen.\n                 Don't use if you don't have Navi (ie. Polaris and Vega cards\n                 shouldn't use this)\n-radcodec        Used for allowing officially unsupported AMD GPUs (spoofed)\n                 to use the Hardware Video Encoder\nradpg=15         Used for disabling some power-gating modes, helpful for\n                 properly initializing AMD Cape Verde based GPUs\nunfairgva=1      Used for fixing hardware DRM support on supported AMD GPUs\nnvda_drv_vrl=1   Used for enabling NVIDIA's Web Drivers on Maxwell and Pascal\n                 cards in macOS Sierra and High Sierra\n-wegnoegpu       Used for disabling all other GPUs than the integrated Intel\n                 iGPU, useful for those wanting to run newer versions of\n                 macOS where their dGPU isn't supported\n\n * csr-active-config: 00000000\n   \n   * Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: Disabling SIP\n\n * run-efi-updater: No\n   \n   * This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * Needed for non-latin keyboards in the format of lang-COUNTRY:keyboard, recommended to keep blank though you can specify it(Default in Sample config is Russian):\n   * American: en-US:0(656e2d55533a30 in HEX)\n   * Full list can be found in AppleKeyboardLayouts.txt\n   * Hint: prev-lang:kbd can be changed into a String so you can input en-US:0 directly instead of converting to HEX\n   * Hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the Language Picker to appear instead at first boot up.\n\nKEY             TYPE     VALUE\nprev-lang:kbd   String   en-US:0\n\n\n# Delete\n\nInfo\n\nForcibly rewrites NVRAM variables, do note that Add will not overwrite values already present in NVRAM so values like boot-args should be left alone. For us, we'll be changing the following:\n\nQUIRK        ENABLED\nWriteFlash   YES\n\nMore in-depth Info\n\n * LegacySchema\n   \n   * Used for assigning NVRAM variables, used with OpenVariableRuntimeDxe.efi. Only needed for systems without native NVRAM\n\n * WriteFlash: YES\n   \n   * Enables writing to flash memory for all added variables.\n\n\n# PlatformInfo\n\n\n\nInfo\n\nFor setting up the SMBIOS info, we'll use CorpNewt's GenSMBIOS application.\n\nFor this Skylake example, we'll choose the iMac17,1 SMBIOS.\n\nNote 2: iMac17,1 was dropped in macOS Ventura. If running macOS Ventura, use a Kaby Lake SMBIOS.\n\nRun GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS. This will give us an output similar to the following:\n\n  #######################################################\n #               iMac17,1 SMBIOS Info                  #\n#######################################################\n\nType:         iMac17,1\nSerial:       C02S3HYWGG7L\nBoard Serial: C02629102GUGPF7AD\nSmUUID:       3508AD44-B67D-4AD7-A109-7955130A1033\n\n\nThe Type part gets copied to Generic -> SystemProductName.\n\nThe Serial part gets copied to Generic -> SystemSerialNumber.\n\nThe Board Serial part gets copied to Generic -> MLB.\n\nThe SmUUID part gets copied to Generic -> SystemUUID.\n\nWe set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use 11223300 0000. After install follow the Fixing iServices page on how to find your real MAC Address)\n\nReminder that you need an invalid serial! When inputting your serial number in Apple's Check Coverage Page, you should get a message such as \"Unable to check coverage for this serial number.\"\n\nAutomatic: YES\n\n * Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections\n\n\n# Generic\n\nMore in-depth Info\n\n * AdviseFeatures: NO\n   \n   * Used for when the EFI partition isn't first on the Windows drive\n\n * MaxBIOSVersion: NO\n   \n   * Sets BIOS version to Max to avoid firmware updates in Big Sur+, mainly applicable for genuine Macs.\n\n * ProcessorType: 0\n   \n   * Set to 0 for automatic type detection, however this value can be overridden if desired. See AppleSmBios.h for possible values\n\n * SpoofVendor: YES\n   \n   * Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case\n\n * SystemMemoryStatus: Auto\n   \n   * Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend Auto\n\n * UpdateDataHub: YES\n   \n   * Update Data Hub fields\n\n * UpdateNVRAM: YES\n   \n   * Update NVRAM fields\n\n * UpdateSMBIOS: YES\n   \n   * Updates SMBIOS fields\n\n * UpdateSMBIOSMode: Create\n   \n   * Replace the tables with newly allocated EfiReservedMemoryType, use Custom on Dell laptops requiring CustomSMBIOSGuid quirk\n   * Setting to Custom with CustomSMBIOSGuid quirk enabled can also disable SMBIOS injection into \"non-Apple\" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk\n\n\n# UEFI\n\n\n\nConnectDrivers: YES\n\n * Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.\n\n\n# Drivers\n\nAdd your .efi drivers here.\n\nOnly drivers present here should be:\n\n * HfsPlus.efi\n * OpenRuntime.efi\n\nMore in-depth Info\n\nKEY         TYPE      DESCRIPTION\nPath        String    Path of the file from OC/Drivers directory\nLoadEarly   Boolean   Load the driver early before NVRAM setup, should only be\n                      enabled for OpenRuntime.efi and OpenVariableRuntimeDxe.efi\n                      if using legacy NVRAM\nArguments   String    Some drivers accept additional arguments which are specified\n                      here.\n\n\n# APFS\n\nBy default, OpenCore only loads APFS drivers from macOS Big Sur and newer. If you are booting macOS Catalina or earlier, you may need to set a new minimum version/date. Not setting this can result in OpenCore not finding your macOS partition!\n\nmacOS Sierra and earlier use HFS instead of APFS. You can skip this section if booting older versions of macOS.\n\nAPFS Versions\n\nBoth MinVersion and MinDate need to be set if changing the minimum version.\n\nMACOS VERSION           MIN VERSION        MIN DATE\nHigh Sierra (10.13.6)   748077008000000    20180621\nMojave (10.14.6)        945275007000000    20190820\nCatalina (10.15.4)      1412101001000000   20200306\nNo restriction          -1                 -1\n\n\n# Audio\n\nRelated to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.\n\n * For further use of AudioDxe and the Audio section, please see the Post Install page: Add GUI and Boot-chime\n\n\n# Input\n\nRelated to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: Security and FileVault\n\n\n# Output\n\nRelating to OpenCore's visual output, leave everything here as default as we have no use for these quirks.\n\nMore in-depth Info\n\nOUTPUT    VALUE   COMMENT\nUIScale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for HiDPI displays\n\n\n# ProtocolOverrides\n\nMainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: Security and FileVault\n\n\n# Quirks\n\nInfo\n\nRelating to quirks with the UEFI environment, for us we'll be changing the following:\n\nQUIRK              ENABLED   COMMENT\nUnblockFsConnect   NO        Needed mainly by HP motherboards\n\nMore in-depth Info\n\n * DisableSecurityPolicy: NO\n   \n   * Disables platform security policy in firmware, recommended for buggy firmwares where disabling Secure Boot does not allow 3rd party firmware drivers to load.\n   * If running a Microsoft Surface device, recommended to enable this option\n\n * RequestBootVarRouting: YES\n   \n   * Redirects AptioMemoryFix from EFI_GLOBAL_VARIABLE_GUID to OC_VENDOR_VARIABLE_GUID. Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.\n\n * UnblockFsConnect: NO\n   \n   * Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed\n\n\n# ReservedMemory\n\nUsed for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide\n\n\n# Cleaning up\n\nAnd now you're ready to save and place it into your EFI under EFI/OC.\n\nFor those having booting issues, please make sure to read the Troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/Hackintosh Subreddit\n * r/Hackintosh Discord\n\n\n# Intel BIOS settings\n\n * Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS\n\n\n# Disable\n\n * Fast Boot\n * Secure Boot\n * Serial/COM Port\n * Parallel Port\n * VT-d (can be enabled if you set DisableIoMapper to YES)\n * Compatibility Support Module (CSM) (Must be off in most cases, GPU errors/stalls like gIO are common when this option is enabled)\n * Thunderbolt (For initial install, as Thunderbolt can cause issues if not setup correctly)\n * Intel SGX\n * Intel Platform Trust\n * CFG Lock (MSR 0xE2 write protection)(This must be off, if you can't find the option then enable AppleXcpmCfgLock under Kernel -> Quirks. Your hack will not boot with CFG-Lock enabled)\n\n\n# Enable\n\n * VT-x\n * Above 4G Decoding\n * Hyper-Threading\n * Execute Disable Bit\n * EHCI/XHCI Hand-off\n * OS type: Windows 8.1/10 UEFI Mode (some motherboards may require \"Other OS\" instead)\n * DVMT Pre-Allocated(iGPU Memory): 64MB or higher\n * SATA Mode: AHCI\n\n\n# Once done here, we need to edit a couple extra values. Head to the Apple Secure Boot Page",normalizedContent:"# desktop skylake\n\nsupport                 version\ninitial macos support   os x 10.11, el capitan\n\n\n# starting point\n\nso making a config.plist may seem hard, it's not. it just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. this also means if you have issues, review your config settings to make sure they're correct. main things to note with opencore:\n\n * all properties must be defined, there are no default opencore will fall back on so do not delete sections unless told explicitly so. if the guide doesn't mention the option, leave it at default.\n * the sample.plist cannot be used as-is, you must configure it to your system\n * do not use configurators, these rarely respect opencore's configuration and even some like mackie's will add clover properties and corrupt plists!\n\nnow with all that, a quick reminder of the tools we need\n\n * propertree\n   * universal plist editor\n * gensmbios\n   * for generating our smbios data\n * sample/config.plist\n   * see previous section on how to obtain: config.plist setup\n\nwarning\n\nread this guide more than once before setting up opencore and make sure you have it set up correctly. do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.\n\n\n# acpi\n\n\n\n\n# add\n\ninfo\n\nthis is where you'll add ssdts for your system, these are very important to booting macos and have many uses like usb maps, disabling unsupported gpus and such. and with our system, it's even required to boot. guide on making them found here: getting started with acpi\n\nfor us we'll need a couple of ssdts to bring back functionality that clover provided:\n\nrequired ssdts   description\nssdt-plug        allows for native cpu power management on haswell and newer,\n                 see getting started with acpi guide for more details.\nssdt-ec-usbx     fixes both the embedded controller and usb power, see\n                 getting started with acpi guide for more details.\n\nnote that you should not add your generated dsdt.aml here, it is already in your firmware. so if present, remove the entry for it in your config.plist and under efi/oc/acpi.\n\nfor those wanting a deeper dive into dumping your dsdt, how to make these ssdts, and compiling them, please see the getting started with acpi page. compiled ssdts have a .aml extension(assembled) and will go into the efi/oc/acpi folder and must be specified in your config under acpi -> add as well.\n\n\n# delete\n\nthis blocks certain acpi tables from loading, for us we can ignore this.\n\n\n# patch\n\nthis section allows us to dynamically modify parts of the acpi (dsdt, ssdt, etc.) via opencore. for us, our patches are handled by our ssdts. this is a much cleaner solution as this will allow us to boot windows and other oses with opencore\n\n\n# quirks\n\nsettings relating to acpi, leave everything here as default as we have no use for these quirks.\n\n\n# booter\n\n\n\nthis section is dedicated to quirks relating to boot.efi patching with openruntime, the replacement for aptiomemoryfix.efi\n\n\n# mmiowhitelist\n\nthis section is allowing spaces to be passthrough to macos that are generally ignored, useful when paired with devirtualisemmio\n\n\n# quirks\n\ninfo\n\nsettings relating to boot.efi patching and firmware fixes, for us, we leave it as default\n\nmore in-depth info\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc.\n * enablesafemodeslide: yes\n   * enables slide variables to be used in safe mode.\n * enablewriteunprotector: yes\n   * needed to remove write protection from cr0 register.\n * providecustomslide: yes\n   * used for slide variable calculation. however the necessity of this quirk is determined by ocabc: only n/256 slide values are usable! message in the debug log. if the message ocabc: all slides are usable! you can disable providecustomslide! is present in your log, you can disable providecustomslide.\n * setupvirtualmap: yes\n   * fixes setvirtualaddresses calls to virtual addresses, required for gigabyte boards to resolve early kernel panics.\n\n\n# deviceproperties\n\n\n\n\n# add\n\nsets device properties from a map.\n\npciroot(0x0)/pci(0x2,0x0)\n\nthis section is set up via whatevergreen's framebuffer patching guide and is used for setting important igpu properties.\n\nthe config.plist doesn't already have a section for this so you will have to create it manually.\n\naapl,ig-platform-id is what macos uses to determine how the igpu drivers interact with our system, and the two values choose between are as follows:\n\naapl,ig-platform-id   comment\n00001219              used when the desktop igpu is used to drive a display\n01001219              used when the desktop igpu is only used for computing tasks\n                      and doesn't drive a display\n\nnote: if booting macos ventura, you need to spoof your igpu as the closest kaby lake model.\n\nwe also add 3 more properties, framebuffer-patch-enable, framebuffer-stolenmem and framebuffer-fbmem. the first enables patching via whatevergreen.kext, the second sets the min stolen memory to 19mb and third sets the framebuffer memory to 9mb. this is usually unnecessary, as this can be configured in bios(64mb recommended) but required when not available.\n\n * note: headless framebuffers(where the dgpu is the display out) do not need framebuffer-patch-enable, framebuffer-stolenmem and framebuffer-fbmem\n\nand extra note for p530 users, your igpu is not natively supported so you will need to add the following property:\n\nkey         type   value\ndevice-id   data   1b190000\n\nonce you're done, you should have something similar:\n\nkey                        type   value\naapl,ig-platform-id        data   00001219\nframebuffer-patch-enable   data   01000000\nframebuffer-stolenmem      data   00003001\nframebuffer-fbmem          data   00009000\ndevice-id                  data   1b190000\n\n(this is an example for a desktop hd p530 without a dgpu and no bios options for igpu memory)\n\npciroot(0x0)/pci(0x1b,0x0)\n\nlayout-id\n\n * applies applealc audio injection, you'll need to do your own research on which codec your motherboard has and match it with applealc's layout. applealc supported codecs.\n * you can delete this property outright as it's unused for us at this time\n\nfor us, we'll be using the boot-arg alcid=xxx instead to accomplish this. alcid will override all other layout-ids present. more info on this is covered in the post-install page\n\n\n# delete\n\nremoves device properties from the map, for us we can ignore this.\n\n\n# kernel\n\n\n\n\n# add\n\nhere's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. by default we recommend leaving what propertree has done, however for 32-bit cpus please see below:\n\nmore in-depth info\n\nthe main thing you need to keep in mind is:\n\n * load order\n   * remember that any plugins should load after its dependencies\n   * this means kexts like lilu must come before virtualsmc, applealc, whatevergreen, etc\n\na reminder that propertree users can run cmd/ctrl + shift + r to add all their kexts in the correct order without manually typing each kext out.\n\n * arch\n   * architectures supported by this kext\n   * currently supported values are any, i386 (32-bit), and x86_64 (64-bit)\n * bundlepath\n   * name of the kext\n   * ex: lilu.kext\n * enabled\n   * self-explanatory, either enables or disables the kext\n * executablepath\n   * path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting show package contents. generally, they'll be contents/macos/kext but some have kexts hidden within under plugin folder. do note that plist only kexts do not need this filled in.\n   * ex: contents/macos/lilu\n * minkernel\n   * lowest kernel version your kext will be injected into, see below table for possible values\n   * ex. 12.00.00 for os x 10.8\n * maxkernel\n   * highest kernel version your kext will be injected into, see below table for possible values\n   * ex. 11.99.99 for os x 10.7\n * plistpath\n   * path to the info.plist hidden within the kext\n   * ex: contents/info.plist\n\nkernel support table\n\nos x version   minkernel   maxkernel\n10.4           8.0.0       8.99.99\n10.5           9.0.0       9.99.99\n10.6           10.0.0      10.99.99\n10.7           11.0.0      11.99.99\n10.8           12.0.0      12.99.99\n10.9           13.0.0      13.99.99\n10.10          14.0.0      14.99.99\n10.11          15.0.0      15.99.99\n10.12          16.0.0      16.99.99\n10.13          17.0.0      17.99.99\n10.14          18.0.0      18.99.99\n10.15          19.0.0      19.99.99\n11             20.0.0      20.99.99\n12             21.0.0      21.99.99\n13             22.0.0      22.99.99\n\n\n# emulate\n\nneeded for spoofing unsupported cpus like pentiums and celerons\n\n * cpuid1mask: leave this blank\n * cpuid1data: leave this blank\n\n\n# force\n\nused for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. ionetworkingfamily in 10.6).\n\nfor us, we can ignore.\n\n\n# block\n\nblocks certain kexts from loading. not relevant for us.\n\n\n# patch\n\npatches both the kernel and kexts.\n\n\n# quirks\n\ninfo\n\nsettings relating to the kernel, for us we'll be enabling the following:\n\nquirk                     enabled   comment\napplexcpmcfglock          yes       not needed if cfg-lock is disabled in the bios\ndisableiomapper           yes       not needed if vt-d is disabled in the bios\nlapickernelpanic          no        hp machines will require this quirk\npanicnokextdump           yes       \npowertimeoutkernelpanic   yes       \nxhciportlimit             yes       disable if running macos 11.3+\n\nmore in-depth info\n * applecpupmcfglock: no\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for ivy bridge and older\n     * note: broadwell and older require this when running 10.10 or older\n * applexcpmcfglock: yes\n   * only needed when cfg-lock can't be disabled in bios\n   * only applicable for haswell and newer\n     * note: ivy bridge-e is also included as it's xcpm capable\n * customsmbiosguid: no\n   * performs guid patching for updatesmbiosmode set to custom. usually relevant for dell laptops\n   * enabling this quirk with updatesmbiosmode custom mode can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n * disableiomapper: yes\n   * needed to get around vt-d if either unable to disable in bios or needed for other operating systems, much better alternative to dart=0 as sip can stay on in catalina\n * disablelinkeditjettison: yes\n   * allows lilu and others to have more reliable performance without keepsyms=1\n * disablertcchecksum: no\n   * prevents applertc from writing to primary checksum (0x58-0x59), required for users who either receive bios reset or are sent into safe mode after reboot/shutdown\n * extendbtfeatureflags no\n   * helpful for those having continuity issues with non-apple/non-fenvi cards\n * lapickernelpanic: no\n   * disables kernel panic on ap core lapic interrupt, generally needed for hp systems. clover equivalent is kernel lapic\n * legacycommpage: no\n   * resolves ssse3 requirement for 64 bit cpus in macos, mainly relevant for 64-bit pentium 4 cpus(ie. prescott)\n * panicnokextdump: yes\n   * allows for reading kernel panics logs when kernel panics occur\n * powertimeoutkernelpanic: yes\n   * helps fix kernel panics relating to power changes with apple drivers in macos catalina, most notably with digital audio.\n * setapfstrimtimeout: -1\n   * sets trim timeout in microseconds for apfs filesystems on ssds, only applicable for macos 10.14 and newer with problematic ssds.\n * xhciportlimit: yes\n   * this is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing usb. please create a usb map when possible.\n   * with macos 11.3+, xhciportlimit may not function as intended. we recommend users either disable this quirk and map before upgrading or map from windows. you may also install macos 11.2.3 or older.\n\n\n# scheme\n\nsettings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy oses you can see below:\n\nmore in-depth info\n\n * fuzzymatch: true\n   \n   * used for ignoring checksums with kernelcache, instead opting for the latest cache available. can help improve boot performance on many machines in 10.6\n\n * kernelarch: x86_64\n   \n   * set the kernel's arch type, you can choose between auto, i386 (32-bit), and x86_64 (64-bit).\n   * if you're booting older oses which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to auto and let macos decide based on your smbios. see below table for supported values:\n     * 10.4-10.5 — x86_64, i386 or i386-user32\n       * i386-user32 refers 32-bit userspace, so 32-bit cpus must use this(or cpus missing ssse3)\n       * x86_64 will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5\n     * 10.6 — i386, i386-user32, or x86_64\n     * 10.7 — i386 or x86_64\n     * 10.8 or newer — x86_64\n\n * kernelcache: auto\n   \n   * set kernel cache type, mainly useful for debugging and so we recommend auto for best support\n\n\n# misc\n\n\n\n\n# boot\n\ninfo\n\nquirk           enabled   comment\nhideauxiliary   yes       press space to show macos recovery and other auxiliary\n                          entries\n\nmore in-depth info\n * hideauxiliary: yes\n   * this option will hide supplementary entries, such as macos recovery and tools, in the picker. hiding auxiliary entries may increase boot performance on multi-disk systems. you can press space at the picker to show these entries\n\n\n# debug\n\ninfo\n\nhelpful for debugging opencore boot issues(we'll be changing everything but displaydelay):\n\nquirk             enabled\nappledebug        yes\napplepanic        yes\ndisablewatchdog   yes\ntarget            67\n\nmore in-depth info\n * appledebug: yes\n   * enables boot.efi logging, useful for debugging. note this is only supported on 10.15.4 and newer\n * applepanic: yes\n   * attempts to log kernel panics to disk\n * disablewatchdog: yes\n   * disables the uefi watchdog, can help with early boot issues\n * displaylevel: 2147483650\n   * shows even more debug information, requires debug version of opencore\n * sysreport: no\n   * helpful for debugging such as dumping acpi tables\n   * note that this is limited to debug versions of opencore\n * target: 67\n   * shows more debug information, requires debug version of opencore\n\nthese values are based of those calculated in opencore debugging\n\n\n# security\n\ninfo\n\nsecurity is pretty self-explanatory, do not skip. we'll be changing the following:\n\nquirk                  enabled    comment\nallowsetdefault        yes        \nblacklistappleupdate   yes        \nscanpolicy             0          \nsecurebootmodel        default    leave this as default for opencore to automatically set the\n                                  correct value corresponding to your smbios. the next page\n                                  goes into more detail about this setting.\nvault                  optional   this is a word, it is not optional to omit this setting. you\n                                  will regret it if you don't set it to optional, note that it\n                                  is case-sensitive\n\nmore in-depth info\n\n * allowsetdefault: yes\n   \n   * allow ctrl+enter and ctrl+index to set default boot device in the picker\n\n * apecid: 0\n   \n   * used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macos installer so we highly encourage you to leave this as default.\n\n * authrestart: no\n   \n   * enables authenticated restart for filevault 2 so password is not required on reboot. can be considered a security risk so optional\n\n * blacklistappleupdate: yes\n   \n   * used for blocking firmware updates, used as extra level of protection as macos big sur no longer uses run-efi-updater variable\n\n * dmgloading: signed\n   \n   * ensures only signed dmgs load\n\n * exposesensitivedata: 6\n   \n   * shows more debug information, requires debug version of opencore\n\n * vault: optional\n   \n   * we won't be dealing vaulting so we can ignore, you won't boot with this set to secure\n   * this is a word, it is not optional to omit this setting. you will regret it if you don't set it to optional, note that it is case-sensitive\n\n * scanpolicy: 0\n   \n   * 0 allows you to see all drives available, please refer to security section for further details. will not boot usb devices with this set to default\n\n * securebootmodel: default\n   \n   * controls apple's secure boot functionality in macos, please refer to security section for further details.\n   * note: users may find upgrading opencore on an already installed system can result in early boot failures. to resolve this, see here: stuck on ocb: loadimage failed - security violation\n\n\n# serial\n\nused for serial debugging (leave everything as default).\n\n\n# tools\n\nused for running oc debugging tools like the shell, propertree's snapshot function will add these for you.\n\n\n# entries\n\nused for specifying irregular boot paths that can't be found naturally with opencore.\n\nwon't be covered here, see 8.6 of configuration.pdf for more info\n\n\n# nvram\n\n\n\n\n# add\n\n4d1ede05-38c7-4a6a-9cc6-4bcca8b38c14\n\nused for opencore's ui scaling, default will work for us. see in-depth section for more info\n\nmore in-depth info\n\nbooter path, mainly used for ui modification\n\n * defaultbackgroundcolor: background color used by boot.efi\n   * 00000000: syrah black\n   * bfbfbf00: light gray\n\n4d1fda02-38c7-4a6a-9cc6-4bcca8b30102\n\nopencore's nvram guid, mainly relevant for rtcmemoryfixup users\n\nmore in-depth info\n * rtc-blacklist: <>\n   * to be used in conjunction with rtcmemoryfixup, see here for more info: fixing rtc write issues\n   * most users can ignore this section\n\n7c436110-ab2a-4bbb-a880-fe41995c9f82\n\nsystem integrity protection bitmask\n\n * general purpose boot-args:\n\nboot-args     description\n-v            this enables verbose mode, which shows all the\n              behind-the-scenes text that scrolls by as you're booting\n              instead of the apple logo and progress bar. it's invaluable\n              to any hackintosher, as it gives you an inside look at the\n              boot process, and can help you identify issues, problem\n              kexts, etc.\ndebug=0x100   this disables macos's watchdog which helps prevents a reboot\n              on a kernel panic. that way you can hopefully glean some\n              useful info and follow the breadcrumbs to get past the\n              issues.\nkeepsyms=1    this is a companion setting to debug=0x100 that tells the os\n              to also print the symbols on a kernel panic. that can give\n              some more helpful insight as to what's causing the panic\n              itself.\nalcid=1       used for setting layout-id for applealc, see supported\n              codecs to figure out which layout to use for your specific\n              system. more info on this is covered in the post-install\n              page\n\n * gpu-specific boot-args:\n\nboot-args        description\nagdpmod=pikera   used for disabling board id checks on some navi gpus (rx\n                 5000 & 6000 series), without this you'll get a black screen.\n                 don't use if you don't have navi (ie. polaris and vega cards\n                 shouldn't use this)\n-radcodec        used for allowing officially unsupported amd gpus (spoofed)\n                 to use the hardware video encoder\nradpg=15         used for disabling some power-gating modes, helpful for\n                 properly initializing amd cape verde based gpus\nunfairgva=1      used for fixing hardware drm support on supported amd gpus\nnvda_drv_vrl=1   used for enabling nvidia's web drivers on maxwell and pascal\n                 cards in macos sierra and high sierra\n-wegnoegpu       used for disabling all other gpus than the integrated intel\n                 igpu, useful for those wanting to run newer versions of\n                 macos where their dgpu isn't supported\n\n * csr-active-config: 00000000\n   \n   * settings for 'system integrity protection' (sip). it is generally recommended to change this with csrutil via the recovery partition.\n   * csr-active-config by default is set to 00000000 which enables system integrity protection. you can choose a number of different values but overall we recommend keeping this enabled for best security practices. more info can be found in our troubleshooting page: disabling sip\n\n * run-efi-updater: no\n   \n   * this is used to prevent apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for macs) will not work.\n\n * prev-lang:kbd: <>\n   \n   * needed for non-latin keyboards in the format of lang-country:keyboard, recommended to keep blank though you can specify it(default in sample config is russian):\n   * american: en-us:0(656e2d55533a30 in hex)\n   * full list can be found in applekeyboardlayouts.txt\n   * hint: prev-lang:kbd can be changed into a string so you can input en-us:0 directly instead of converting to hex\n   * hint 2: prev-lang:kbd can be set to a blank variable (eg. <>) which will force the language picker to appear instead at first boot up.\n\nkey             type     value\nprev-lang:kbd   string   en-us:0\n\n\n# delete\n\ninfo\n\nforcibly rewrites nvram variables, do note that add will not overwrite values already present in nvram so values like boot-args should be left alone. for us, we'll be changing the following:\n\nquirk        enabled\nwriteflash   yes\n\nmore in-depth info\n\n * legacyschema\n   \n   * used for assigning nvram variables, used with openvariableruntimedxe.efi. only needed for systems without native nvram\n\n * writeflash: yes\n   \n   * enables writing to flash memory for all added variables.\n\n\n# platforminfo\n\n\n\ninfo\n\nfor setting up the smbios info, we'll use corpnewt's gensmbios application.\n\nfor this skylake example, we'll choose the imac17,1 smbios.\n\nnote 2: imac17,1 was dropped in macos ventura. if running macos ventura, use a kaby lake smbios.\n\nrun gensmbios, pick option 1 for downloading macserial and option 3 for selecting out smbios. this will give us an output similar to the following:\n\n  #######################################################\n #               imac17,1 smbios info                  #\n#######################################################\n\ntype:         imac17,1\nserial:       c02s3hywgg7l\nboard serial: c02629102gugpf7ad\nsmuuid:       3508ad44-b67d-4ad7-a109-7955130a1033\n\n\nthe type part gets copied to generic -> systemproductname.\n\nthe serial part gets copied to generic -> systemserialnumber.\n\nthe board serial part gets copied to generic -> mlb.\n\nthe smuuid part gets copied to generic -> systemuuid.\n\nwe set generic -> rom to either an apple rom (dumped from a real mac), your nic mac address, or any random mac address (could be just 6 random bytes, for this guide we'll use 11223300 0000. after install follow the fixing iservices page on how to find your real mac address)\n\nreminder that you need an invalid serial! when inputting your serial number in apple's check coverage page, you should get a message such as \"unable to check coverage for this serial number.\"\n\nautomatic: yes\n\n * generates platforminfo based on generic section instead of datahub, nvram, and smbios sections\n\n\n# generic\n\nmore in-depth info\n\n * advisefeatures: no\n   \n   * used for when the efi partition isn't first on the windows drive\n\n * maxbiosversion: no\n   \n   * sets bios version to max to avoid firmware updates in big sur+, mainly applicable for genuine macs.\n\n * processortype: 0\n   \n   * set to 0 for automatic type detection, however this value can be overridden if desired. see applesmbios.h for possible values\n\n * spoofvendor: yes\n   \n   * swaps vendor field for acidanthera, generally not safe to use apple as a vendor in most case\n\n * systemmemorystatus: auto\n   \n   * sets whether memory is soldered or not in smbios info, purely cosmetic and so we recommend auto\n\n * updatedatahub: yes\n   \n   * update data hub fields\n\n * updatenvram: yes\n   \n   * update nvram fields\n\n * updatesmbios: yes\n   \n   * updates smbios fields\n\n * updatesmbiosmode: create\n   \n   * replace the tables with newly allocated efireservedmemorytype, use custom on dell laptops requiring customsmbiosguid quirk\n   * setting to custom with customsmbiosguid quirk enabled can also disable smbios injection into \"non-apple\" oses however we do not endorse this method as it breaks bootcamp compatibility. use at your own risk\n\n\n# uefi\n\n\n\nconnectdrivers: yes\n\n * forces .efi drivers, change to no will automatically connect added uefi drivers. this can make booting slightly faster, but not all drivers connect themselves. e.g. certain file system drivers may not load.\n\n\n# drivers\n\nadd your .efi drivers here.\n\nonly drivers present here should be:\n\n * hfsplus.efi\n * openruntime.efi\n\nmore in-depth info\n\nkey         type      description\npath        string    path of the file from oc/drivers directory\nloadearly   boolean   load the driver early before nvram setup, should only be\n                      enabled for openruntime.efi and openvariableruntimedxe.efi\n                      if using legacy nvram\narguments   string    some drivers accept additional arguments which are specified\n                      here.\n\n\n# apfs\n\nby default, opencore only loads apfs drivers from macos big sur and newer. if you are booting macos catalina or earlier, you may need to set a new minimum version/date. not setting this can result in opencore not finding your macos partition!\n\nmacos sierra and earlier use hfs instead of apfs. you can skip this section if booting older versions of macos.\n\napfs versions\n\nboth minversion and mindate need to be set if changing the minimum version.\n\nmacos version           min version        min date\nhigh sierra (10.13.6)   748077008000000    20180621\nmojave (10.14.6)        945275007000000    20190820\ncatalina (10.15.4)      1412101001000000   20200306\nno restriction          -1                 -1\n\n\n# audio\n\nrelated to audiodxe settings, for us we'll be ignoring(leave as default). this is unrelated to audio support in macos.\n\n * for further use of audiodxe and the audio section, please see the post install page: add gui and boot-chime\n\n\n# input\n\nrelated to boot.efi keyboard passthrough used for filevault and hotkey support, leave everything here as default as we have no use for these quirks. see here for more details: security and filevault\n\n\n# output\n\nrelating to opencore's visual output, leave everything here as default as we have no use for these quirks.\n\nmore in-depth info\n\noutput    value   comment\nuiscale   0       0 will automatically set based on resolution\n                  -1 will leave it unchanged\n                  1 for 1x scaling, for normal displays\n                  2 for 2x scaling, for hidpi displays\n\n\n# protocoloverrides\n\nmainly relevant for virtual machines, legacy macs and filevault users. see here for more details: security and filevault\n\n\n# quirks\n\ninfo\n\nrelating to quirks with the uefi environment, for us we'll be changing the following:\n\nquirk              enabled   comment\nunblockfsconnect   no        needed mainly by hp motherboards\n\nmore in-depth info\n\n * disablesecuritypolicy: no\n   \n   * disables platform security policy in firmware, recommended for buggy firmwares where disabling secure boot does not allow 3rd party firmware drivers to load.\n   * if running a microsoft surface device, recommended to enable this option\n\n * requestbootvarrouting: yes\n   \n   * redirects aptiomemoryfix from efi_global_variable_guid to oc_vendor_variable_guid. needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, startup disk control panel functioning, etc.\n\n * unblockfsconnect: no\n   \n   * some firmware block partition handles by opening them in by driver mode, which results in file system protocols being unable to install. mainly relevant for hp systems when no drives are listed\n\n\n# reservedmemory\n\nused for exempting certain memory regions from oses to use, mainly relevant for sandy bridge igpus or systems with faulty memory. use of this quirk is not covered in this guide\n\n\n# cleaning up\n\nand now you're ready to save and place it into your efi under efi/oc.\n\nfor those having booting issues, please make sure to read the troubleshooting section first and if your questions are still unanswered we have plenty of resources at your disposal:\n\n * r/hackintosh subreddit\n * r/hackintosh discord\n\n\n# intel bios settings\n\n * note: most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your bios\n\n\n# disable\n\n * fast boot\n * secure boot\n * serial/com port\n * parallel port\n * vt-d (can be enabled if you set disableiomapper to yes)\n * compatibility support module (csm) (must be off in most cases, gpu errors/stalls like gio are common when this option is enabled)\n * thunderbolt (for initial install, as thunderbolt can cause issues if not setup correctly)\n * intel sgx\n * intel platform trust\n * cfg lock (msr 0xe2 write protection)(this must be off, if you can't find the option then enable applexcpmcfglock under kernel -> quirks. your hack will not boot with cfg-lock enabled)\n\n\n# enable\n\n * vt-x\n * above 4g decoding\n * hyper-threading\n * execute disable bit\n * ehci/xhci hand-off\n * os type: windows 8.1/10 uefi mode (some motherboards may require \"other os\" instead)\n * dvmt pre-allocated(igpu memory): 64mb or higher\n * sata mode: ahci\n\n\n# once done here, we need to edit a couple extra values. head to the apple secure boot page",charsets:{}},{title:"OpenCore and macOS 11: Big Sur",frontmatter:{search:!1},regularPath:"/extras/big-sur/",relativePath:"extras/big-sur/README.md",key:"v-095bc056",path:"/extras/big-sur/",headers:[{level:2,title:"Table of Contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:369},{level:2,title:"Prerequisites",slug:"prerequisites",normalizedTitle:"prerequisites",charIndex:414},{level:3,title:"A supported SMBIOS",slug:"a-supported-smbios",normalizedTitle:"a supported smbios",charIndex:433},{level:3,title:"Supported hardware",slug:"supported-hardware",normalizedTitle:"supported hardware",charIndex:457},{level:3,title:"Up-to-date kexts, bootloader and config.plist",slug:"up-to-date-kexts-bootloader-and-config-plist",normalizedTitle:"up-to-date kexts, bootloader and config.plist",charIndex:481},{level:3,title:"Known issues",slug:"known-issues",normalizedTitle:"known issues",charIndex:532},{level:2,title:"Installation",slug:"installation",normalizedTitle:"installation",charIndex:548},{level:2,title:"Troubleshooting",slug:"troubleshooting",normalizedTitle:"troubleshooting",charIndex:564},{level:3,title:"Stuck at Forcing CS_RUNTIME for entitlement",slug:"stuck-at-forcing-cs-runtime-for-entitlement",normalizedTitle:"stuck at forcing cs_runtime for entitlement",charIndex:585},{level:3,title:"Stuck at PCI Configuration Begins for Intel's X99 and X299 boards",slug:"stuck-at-pci-configuration-begins-for-intel-s-x99-and-x299-boards",normalizedTitle:"stuck at pci configuration begins for intel's x99 and x299 boards",charIndex:634},{level:3,title:"Stuck on ramrod(^^^^^^^^^^^^^)",slug:"stuck-on-ramrod",normalizedTitle:"stuck on ramrod(^^^^^^^^^^^^^)",charIndex:705},{level:3,title:"X79 and X99 Kernel Panic on IOPCIFamily",slug:"x79-and-x99-kernel-panic-on-iopcifamily",normalizedTitle:"x79 and x99 kernel panic on iopcifamily",charIndex:741},{level:3,title:"DeviceProperties injection failing",slug:"deviceproperties-injection-failing",normalizedTitle:"deviceproperties injection failing",charIndex:786},{level:3,title:"Keyboard and Mouse broken",slug:"keyboard-and-mouse-broken",normalizedTitle:"keyboard and mouse broken",charIndex:826},{level:3,title:"Early Kernel Panic on max_cpus_from_firmware not yet initialized",slug:"early-kernel-panic-on-max-cpus-from-firmware-not-yet-initialized",normalizedTitle:"early kernel panic on max_cpus_from_firmware not yet initialized",charIndex:857},{level:3,title:"Cannot update to newer versions of Big Sur",slug:"cannot-update-to-newer-versions-of-big-sur",normalizedTitle:"cannot update to newer versions of big sur",charIndex:927},{level:3,title:"Kernel Panic on Rooting from the live fs",slug:"kernel-panic-on-rooting-from-the-live-fs",normalizedTitle:"kernel panic on rooting from the live fs",charIndex:975},{level:3,title:"Asus Z97 and HEDT(ie. X99 and X299) failing Stage 2 Installation",slug:"asus-z97-and-hedt-ie-x99-and-x299-failing-stage-2-installation",normalizedTitle:"asus z97 and hedt(ie. x99 and x299) failing stage 2 installation",charIndex:1021},{level:3,title:"Laptops kernel panicking on cannot perform kext scan",slug:"laptops-kernel-panicking-on-cannot-perform-kext-scan",normalizedTitle:"laptops kernel panicking on cannot perform kext scan",charIndex:1091},{level:3,title:'Reboot on "AppleUSBHostPort::createDevice: failed to create device" on macOS 11.3+',slug:"reboot-on-appleusbhostport-createdevice-failed-to-create-device-on-macos-11-3",normalizedTitle:"reboot on &quot;appleusbhostport::createdevice: failed to create device&quot; on macos 11.3+",charIndex:null}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:'Table of Contents Prerequisites A supported SMBIOS Supported hardware Up-to-date kexts, bootloader and config.plist Known issues Installation Troubleshooting Stuck at Forcing CS_RUNTIME for entitlement Stuck at PCI Configuration Begins for Intel\'s X99 and X299 boards Stuck on ramrod(^^^^^^^^^^^^^) X79 and X99 Kernel Panic on IOPCIFamily DeviceProperties injection failing Keyboard and Mouse broken Early Kernel Panic on max_cpus_from_firmware not yet initialized Cannot update to newer versions of Big Sur Kernel Panic on Rooting from the live fs Asus Z97 and HEDT(ie. X99 and X299) failing Stage 2 Installation Laptops kernel panicking on cannot perform kext scan Reboot on "AppleUSBHostPort::createDevice: failed to create device" on macOS 11.3+',content:"# OpenCore and macOS 11: Big Sur\n\nIt's that time of year again and with it, and a new macOS beta has been dropped. Here's all the info you need to get started.\n\nReminder\n\nThis page will be a small discussion on exactly what you need to prepare for Big Sur, a more in depth look into what's changed on Big Sur can be found here:\n\n * What's new in macOS 11, Big Sur!\n\n\n# Table of Contents\n\n\n\n * Table of Contents\n * Prerequisites\n   * A supported SMBIOS\n   * Supported hardware\n   * Up-to-date kexts, bootloader and config.plist\n   * Known issues\n * Installation\n * Troubleshooting\n   * Stuck at Forcing CS_RUNTIME for entitlement\n   * Stuck at PCI Configuration Begins for Intel's X99 and X299 boards\n   * Stuck on ramrod(^^^^^^^^^^^^^)\n   * X79 and X99 Kernel Panic on IOPCIFamily\n   * DeviceProperties injection failing\n   * Keyboard and Mouse broken\n   * Early Kernel Panic on max_cpus_from_firmware not yet initialized\n   * Cannot update to newer versions of Big Sur\n   * Kernel Panic on Rooting from the live fs\n   * Asus Z97 and HEDT(ie. X99 and X299) failing Stage 2 Installation\n   * Laptops kernel panicking on cannot perform kext scan\n   * Reboot on \"AppleUSBHostPort::createDevice: failed to create device\" on macOS 11.3+\n\n\n\n\n# Prerequisites\n\nBefore we can jump head first into installing Big Sur, we need to go over a few things:\n\n\n# A supported SMBIOS\n\nBig Sur dropped a few Ivy Bridge and Haswell based SMBIOS from macOS, so see below that yours wasn't dropped:\n\n * iMac14,3 and older\n   * Note iMac14,4 is still supported\n * MacPro5,1 and older\n * Macmini6,x and older\n * MacBook7,1 and older\n * MacBookAir5,x and older\n * MacBookPro10,x and older\n\nIf your SMBIOS was supported in Catalina and isn't included above, you're good to go!\n\nSupported SMBIOS\n\nSMBIOS still supported in macOS Big Sur:\n\n * iMac14,4 and newer\n * MacPro6,1 and newer\n * iMacPro1,1 and newer\n * Macmini7,1 and newer\n * MacBook8,1 and newer\n * MacBookAir6,x and newer\n * MacBookPro11,x and newer\n\nFor full list of supported SMBIOS including OS support, see here: Choosing the right SMBIOS\n\nFor those wanting a simple translation for their Machines:\n\n * iMac13,1 should transition over to using iMac14,4\n * iMac13,2 should transition over to using iMac15,1\n * iMac14,2 and iMac14,3 should transition over to using iMac15,1\n   * Note: AMD CPU users with NVIDIA GPUs may find MacPro7,1 more suitable\n * iMac14,1 should transition over to iMac14,4\n\n\n# Supported hardware\n\nNot much hardware has been dropped, though the few that have:\n\n * Official Ivy Bridge U, H and S CPUs.\n   * These CPUs will still boot without much issue, but note that no Macs are supported with consumer Ivy Bridge in Big Sur.\n   * Ivy Bridge-E CPUs are still supported thanks to being in MacPro6,1\n * Ivy Bridge iGPUs slated for removal\n   * HD 4000 and HD 2500, however currently these drivers are still present in 11.0.1\n * BCM4331 and BCM43224 based WiFi cards.\n   * See Wireless Buyers guide for potential cards to upgrade to.\n   * Potential work-around is to inject a patched IO80211Family, see here for more details: IO80211 Patches\n * Certain SATA controllers dropped\n   * For some reason, Apple removed the AppleIntelPchSeriesAHCI class from AppleAHCIPort.kext. Due to the outright removal of the class, trying to spoof to another ID (generally done by SATA-unsupported.kext) can fail for many and create instability for others.\n   * A partial fix is to inject Catalina's version with any conflicting symbols being patched. You can find a sample kext here: Catalina's patched AppleAHCIPort.kext\n   * We recommend setting the MinKernel value to 20.0.0 for the kext CtlnaAHCIPort.kext to avoid any potential conflicts. This way, it will work in both Catalina and Big Sur so you can remove SATA-unsupported if you want.\n\nOther notable changes:\n\n * MSI Navi users no longer require the ATY,rom/-wegnoegpu patch to boot the installer\n * Stage 2 installation requiring working NVRAM\n   * Asus 9 series: For more info, see here: Haswell ASUS Z97 Big Sur Update Thread\n   * X99 and X299 users with broken NVRAM will need to install on another machine and move the SSD when done\n\n\n# Up-to-date kexts, bootloader and config.plist\n\nEnsure that you have the latest version of OpenCore, kexts and config.plist so it won't have any odd compatibility issues. You can simply download and update OpenCore and kexts as mentioned here:\n\n * Updating OpenCore and macOS\n\nIf you're unsure what version of OpenCore you're using, you can run the following in terminal:\n\nnvram 4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102:opencore-version\n\n\n * Note: The about command will require you to include bit 0x2 in Misc -> Security -> ExposeSensitiveData, recommended values for ExposeSensitiveData is 0x6 which includes bits 0x2 and 0x4.\n\n# AMD Note\n\nReminder for AMD Users: Don't forget to update your kernel patches with those provided by AMD OS X, otherwise you'll be unable to boot Big Sur:\n\n * AMD OSX Patches\n\n# Intel HEDT Note\n\nFor X79, X99 and X299 users, pay close attention to the below. Big Sur has added new requirements for ACPI, so you'll need to grab some new SSDTs:\n\n * X79\n   * SSDT-UNC\n * X99\n   * SSDT-UNC\n   * SSDT-RTC0-RANGE\n * X299\n   * SSDT-RTC0-RANGE\n\nFor those who'd like precompiled files, see here:\n\n * Getting started with ACPI: Prebuilt SSDTs\n\n\n# Known issues\n\nWith Big Sur, quite a bit broke. Mainly the following:\n\n * Lilu\n   * Mainly user-space patching has severely broke, meaning certain functionality may have broken\n   * These include:\n     * DiskArbitrationFixup\n     * MacProMemoryNotificationDisabler\n     * SidecarEnabler\n     * SystemProfilerMemoryFixup\n     * NoTouchID\n     * WhateverGreen's DRM and -cdfon patches\n * AirportBrcmFixup\n   * Forcing a specific driver to load with brcmfx-driver= may help\n     * BCM94352Z users for example may need brcmfx-driver=2 in boot-args to resolve this, other chipsets will need other variables.\n   * Setting MaxKernel to 19.9.9 for AirPortBrcm4360_Injector.kext may help. More information from the repo\n * SATA Support broken\n   * Due to Apple dropping the AppleIntelPchSeriesAHCI class in AppleAHCIPort.kext\n   * To resolve, add Catalina's patched AppleAHCIPort.kext with the MinKernel set to 20.0.0\n * XhciPortLimit broken in macOS 11.3 Beta 2 and newer\n   * With macOS 11.3 and newer, XhciPortLimit is broken resulting in boot loops. We advise users either install an older OS(ie. macOS 10.15, Catalina) or find a 11.2.3 or older Big Sur installer\n     * For education purposes, we have a copy provided here: macOS 11.2.3 InstallAssistant(macOS)\n     * If you've already mapped your USB ports and disabled XhciPortLimit, you can boot macOS 11.3+ without issue\n\nAnd while not an issue, SIP has now gained a new bit so to properly disable SIP you need to set csr-active-config to FF0F0000. See here for more info: Disabling SIP\n\n\n# Installation\n\nGuides have been updated to accommodate Big Sur, see the applicable OS environment for you:\n\n * macOS users\n * Windows users\n * Linux users\n\n\n# Troubleshooting\n\n\n# Stuck at Forcing CS_RUNTIME for entitlement\n\n\n\nThis is actually the part at where macOS will seal the system volume, and where it may seem that macOS has gotten stuck. DO NOT RESTART thinking you're stuck, this will take quite some time to complete, otherwise you'll break your installation.\n\n\n# Stuck at PCI Configuration Begins for Intel's X99 and X299 boards\n\n\n\nAs previously mentioned, Intel HEDT motherboards may have some issues revolving around their RTC device in ACPI. To resolve, you'll need to look at your RTC device and see which regions are missing. For more information, see here: SSDT-RTC0-RANGE.dsl\n\n\n# Stuck on ramrod(^^^^^^^^^^^^^)\n\n\n\nIf you get stuck around the ramrod section (specifically, it boots, hits this error, and reboots again back into this, causing a loop), this hints that your SMC emulator is broken. To fix this, you have 2 options:\n\n * Ensure you're using the latest builds of VirtualSMC and Lilu, with the vsmcgen=1 boot-arg\n * Switch over to Rehabman's FakeSMC (you can use the MinKernel/MaxKernel trick mentioned above to restrict FakeSMC to Big Sur and up)\n\nAnd when switching kexts, ensure you don't have both FakeSMC and VirtualSMC enabled in your config.plist, as this will cause a conflict.\n\n\n# X79 and X99 Kernel Panic on IOPCIFamily\n\nThis is due to an unused uncore PCI Bridges being enabled in ACPI, and so IOPCIFamily will kernel panic when probing unknown devices. To resolve, you'll need to add SSDT-UNC to your system\n\n\n# DeviceProperties injection failing\n\nWith Big Sur, macOS has become much pickier with devices being present in ACPI. Especially if you're injecting important properties for WhateverGreen or AppleALC, you may find they're no longer applying. To verify whether your ACPI defines your hardware, check for the acpi-path property in IORegistryExplorer:\n\n\n\nIf no property is found, you'll need to create an SSDT that provides the full pathing as you likely have a PCI Bridge that is not documented in your ACPI tables. An example of this can be found here: SSDT-BRG0\n\n * Note: This issue may also pop up in older versions of macOS, however Big Sur is most likely to have issues.\n\n\n# Keyboard and Mouse broken\n\nFor certain legacy systems, you may notice that while the USB ports work your HID-based devices such as the keyboard and mouse may be broken. To resolve this, add the following patch:\n\nIOHIDFamily Patch\n\nconfig.plist -> Kernel -> Patch:\n\nKEY           TYPE      VALUE\nBase          String    _isSingleUser\nCount         Integer   1\nEnabled       Boolean   True\nFind          Data      \nIdentifier    String    com.apple.iokit.IOHIDFamily\nLimit         Integer   0\nMask          Data      \nMaxKernel     String    \nMinKernel     String    20.0.0\nReplace       Data      B801000000C3\nReplaceMask   Data      \nSkip          Integer   0\n\nSource\n\n\n# Early Kernel Panic on max_cpus_from_firmware not yet initialized\n\nIf you receive an early kernel panic on max_cpus_from_firmware not yet initialized, this is due to the new acpi_count_enabled_logical_processors method added in macOS Big Sur's kernel. To resolve, please ensure you're on OpenCore 0.6.0 or newer with the AvoidRuntimeDefrag Quirk enabled.\n\n * Note: Due to how early this kernel panic happens, you may only be able to log it either via serial or rebooting in a known working install of macOS and checking your panic logged in NVRAM.\n   * Most users will see this panic simply as [EB|#LOG:EXITBS:START]\n\nExample Kernel Panic\n\nOn-screen:\n\n\n\nVia serial logging or NVRAM:\n\n\n\nLegacy Edge Case\n\nOn certain hardware, mainly the HP DC7900, the kernel still can't determine exactly how many threads your hardware supports. This will result in the aforementioned kernel panic and so we need to hard code the CPU core's value.\n\nTo do this, Add the following patch(replacing the 04 from B8 04 00 00 00 C3 with the amount of CPU threads your hardware supports):\n\nKEY           TYPE      VALUE\nBase          String    _acpi_count_enabled_logical_processors\nCount         Integer   1\nEnabled       Boolean   True\nFind          Data      \nIdentifier    String    Kernel\nLimit         Integer   0\nMask          Data      \nMaxKernel     String    \nMinKernel     String    20.0.0\nReplace       Data      B804000000C3\nReplaceMask   Data      \nSkip          Integer   0\n\n\n# Cannot update to newer versions of Big Sur\n\nGenerally there's 2 main culprits:\n\n * Broken Update Utility\n   * Most common error if running a beta, try this first\n * Broken Seal\n\n# Broken Update Utility\n\nGenerally seen with every beta cycle, simply unenroll and enroll again:\n\n# Unenroll from beta catalog\nsudo /System/Library/PrivateFrameworks/Seeding.framework/Resources/seedutil unenroll\n# Enroll back in\nsudo /System/Library/PrivateFrameworks/Seeding.framework/Resources/seedutil enroll DeveloperSeed\n\n\nThen check back with settings, and it should pop up. If not, run the following:\n\n# List software updates via terminal\nsoftwareupdate -l\n\n\nThis should help kick the update utility back into gear. If you still have issues, check the Broken Seal section.\n\n# Broken Seal\n\nWith Apple's new snapshotting for the system drive, they now depend heavily on this for OS updates to apply correctly. So when a drove's seal is broken, macOS will refuse to update the drive.\n\nTo verify yourself, check that Snapshot Sealed returns as YES:\n\n# List all APFS volumes\ndiskutil apfs list\n\n# Look for your system volume\nVolume disk1s8 A604D636-3C54-4CAA-9A31-5E1A460DC5C0\n        ---------------------------------------------------\n        APFS Volume Disk (Role):   disk1s8 (System)\n        Name:                      Big Sur HD (Case-insensitive)\n        Mount Point:               Not Mounted\n        Capacity Consumed:         15113809920 B (15.1 GB)\n        Sealed:                    Broken\n        FileVault:                 No\n        |\n        Snapshot:                  4202EBE5-288B-4701-BA1E-B6EC8AD6397D\n        Snapshot Disk:             disk1s8s1\n        Snapshot Mount Point:      /\n        Snapshot Sealed:           Yes\n\n\nIf it returns Snapshot Sealed: Broken, then you'll want to go through the following:\n\n * Update to OpenCore 0.6.4 or newer\n   * Specifically commit ba10b5d or newer is required\n * Revert to older snapshots\n   * Mainly for those who have tampered with the system volume\n   * See here how to revert: Rolling back APFS Snapshots\n\n\n# Kernel Panic on Rooting from the live fs\n\nFull error:\n\nRooting from the live fs of a sealed volume is not allowed on a RELEASE build\n\n\nThis is due to issues around Secure Boot boot being enabled in Beta 10 with older versions of OpenCore. Simply update to 0.6.4 to resolve\n\n * Specifically commit ba10b5d or newer is required\n\n\n# Asus Z97 and HEDT(ie. X99 and X299) failing Stage 2 Installation\n\nWith Big Sur, there's a higher reliance on native NVRAM for installation otherwise the installer will get stuck in a reboot loop. To resolve this you'll need to either:\n\n * Install Big Sur on another machine, then transfer the drive\n * Fix the motherboard's NVRAM\n   * mainly applicable with Asus's Z97 series\n\nFor the latter, see here: Haswell ASUS Z97 Big Sur Update Thread\n\n\n# Laptops kernel panicking on cannot perform kext scan\n\nThis is due to multiple copies of the same kext being in your kernel cache, and to be more specific having multiple copies of VoodooInput. Look over your Kernel -> Add and verify you only have 1 copy of VoodooInput enabled.\n\n * Note: Both VoodooI2C and VoodooPS2 have a bundled copy of VoodooInput, which you disable is up to personal preference\n\n\n# Reboot on \"AppleUSBHostPort::createDevice: failed to create device\" on macOS 11.3+\n\nThis is due to XhciPortLimit breaking with macOS 11.3 and newer, to resolve you must disable XhciPortLimit under Kernel -> Quirks. Please ensure you've mapped your USB ports correctly before doing so.",normalizedContent:"# opencore and macos 11: big sur\n\nit's that time of year again and with it, and a new macos beta has been dropped. here's all the info you need to get started.\n\nreminder\n\nthis page will be a small discussion on exactly what you need to prepare for big sur, a more in depth look into what's changed on big sur can be found here:\n\n * what's new in macos 11, big sur!\n\n\n# table of contents\n\n\n\n * table of contents\n * prerequisites\n   * a supported smbios\n   * supported hardware\n   * up-to-date kexts, bootloader and config.plist\n   * known issues\n * installation\n * troubleshooting\n   * stuck at forcing cs_runtime for entitlement\n   * stuck at pci configuration begins for intel's x99 and x299 boards\n   * stuck on ramrod(^^^^^^^^^^^^^)\n   * x79 and x99 kernel panic on iopcifamily\n   * deviceproperties injection failing\n   * keyboard and mouse broken\n   * early kernel panic on max_cpus_from_firmware not yet initialized\n   * cannot update to newer versions of big sur\n   * kernel panic on rooting from the live fs\n   * asus z97 and hedt(ie. x99 and x299) failing stage 2 installation\n   * laptops kernel panicking on cannot perform kext scan\n   * reboot on \"appleusbhostport::createdevice: failed to create device\" on macos 11.3+\n\n\n\n\n# prerequisites\n\nbefore we can jump head first into installing big sur, we need to go over a few things:\n\n\n# a supported smbios\n\nbig sur dropped a few ivy bridge and haswell based smbios from macos, so see below that yours wasn't dropped:\n\n * imac14,3 and older\n   * note imac14,4 is still supported\n * macpro5,1 and older\n * macmini6,x and older\n * macbook7,1 and older\n * macbookair5,x and older\n * macbookpro10,x and older\n\nif your smbios was supported in catalina and isn't included above, you're good to go!\n\nsupported smbios\n\nsmbios still supported in macos big sur:\n\n * imac14,4 and newer\n * macpro6,1 and newer\n * imacpro1,1 and newer\n * macmini7,1 and newer\n * macbook8,1 and newer\n * macbookair6,x and newer\n * macbookpro11,x and newer\n\nfor full list of supported smbios including os support, see here: choosing the right smbios\n\nfor those wanting a simple translation for their machines:\n\n * imac13,1 should transition over to using imac14,4\n * imac13,2 should transition over to using imac15,1\n * imac14,2 and imac14,3 should transition over to using imac15,1\n   * note: amd cpu users with nvidia gpus may find macpro7,1 more suitable\n * imac14,1 should transition over to imac14,4\n\n\n# supported hardware\n\nnot much hardware has been dropped, though the few that have:\n\n * official ivy bridge u, h and s cpus.\n   * these cpus will still boot without much issue, but note that no macs are supported with consumer ivy bridge in big sur.\n   * ivy bridge-e cpus are still supported thanks to being in macpro6,1\n * ivy bridge igpus slated for removal\n   * hd 4000 and hd 2500, however currently these drivers are still present in 11.0.1\n * bcm4331 and bcm43224 based wifi cards.\n   * see wireless buyers guide for potential cards to upgrade to.\n   * potential work-around is to inject a patched io80211family, see here for more details: io80211 patches\n * certain sata controllers dropped\n   * for some reason, apple removed the appleintelpchseriesahci class from appleahciport.kext. due to the outright removal of the class, trying to spoof to another id (generally done by sata-unsupported.kext) can fail for many and create instability for others.\n   * a partial fix is to inject catalina's version with any conflicting symbols being patched. you can find a sample kext here: catalina's patched appleahciport.kext\n   * we recommend setting the minkernel value to 20.0.0 for the kext ctlnaahciport.kext to avoid any potential conflicts. this way, it will work in both catalina and big sur so you can remove sata-unsupported if you want.\n\nother notable changes:\n\n * msi navi users no longer require the aty,rom/-wegnoegpu patch to boot the installer\n * stage 2 installation requiring working nvram\n   * asus 9 series: for more info, see here: haswell asus z97 big sur update thread\n   * x99 and x299 users with broken nvram will need to install on another machine and move the ssd when done\n\n\n# up-to-date kexts, bootloader and config.plist\n\nensure that you have the latest version of opencore, kexts and config.plist so it won't have any odd compatibility issues. you can simply download and update opencore and kexts as mentioned here:\n\n * updating opencore and macos\n\nif you're unsure what version of opencore you're using, you can run the following in terminal:\n\nnvram 4d1fda02-38c7-4a6a-9cc6-4bcca8b30102:opencore-version\n\n\n * note: the about command will require you to include bit 0x2 in misc -> security -> exposesensitivedata, recommended values for exposesensitivedata is 0x6 which includes bits 0x2 and 0x4.\n\n# amd note\n\nreminder for amd users: don't forget to update your kernel patches with those provided by amd os x, otherwise you'll be unable to boot big sur:\n\n * amd osx patches\n\n# intel hedt note\n\nfor x79, x99 and x299 users, pay close attention to the below. big sur has added new requirements for acpi, so you'll need to grab some new ssdts:\n\n * x79\n   * ssdt-unc\n * x99\n   * ssdt-unc\n   * ssdt-rtc0-range\n * x299\n   * ssdt-rtc0-range\n\nfor those who'd like precompiled files, see here:\n\n * getting started with acpi: prebuilt ssdts\n\n\n# known issues\n\nwith big sur, quite a bit broke. mainly the following:\n\n * lilu\n   * mainly user-space patching has severely broke, meaning certain functionality may have broken\n   * these include:\n     * diskarbitrationfixup\n     * macpromemorynotificationdisabler\n     * sidecarenabler\n     * systemprofilermemoryfixup\n     * notouchid\n     * whatevergreen's drm and -cdfon patches\n * airportbrcmfixup\n   * forcing a specific driver to load with brcmfx-driver= may help\n     * bcm94352z users for example may need brcmfx-driver=2 in boot-args to resolve this, other chipsets will need other variables.\n   * setting maxkernel to 19.9.9 for airportbrcm4360_injector.kext may help. more information from the repo\n * sata support broken\n   * due to apple dropping the appleintelpchseriesahci class in appleahciport.kext\n   * to resolve, add catalina's patched appleahciport.kext with the minkernel set to 20.0.0\n * xhciportlimit broken in macos 11.3 beta 2 and newer\n   * with macos 11.3 and newer, xhciportlimit is broken resulting in boot loops. we advise users either install an older os(ie. macos 10.15, catalina) or find a 11.2.3 or older big sur installer\n     * for education purposes, we have a copy provided here: macos 11.2.3 installassistant(macos)\n     * if you've already mapped your usb ports and disabled xhciportlimit, you can boot macos 11.3+ without issue\n\nand while not an issue, sip has now gained a new bit so to properly disable sip you need to set csr-active-config to ff0f0000. see here for more info: disabling sip\n\n\n# installation\n\nguides have been updated to accommodate big sur, see the applicable os environment for you:\n\n * macos users\n * windows users\n * linux users\n\n\n# troubleshooting\n\n\n# stuck at forcing cs_runtime for entitlement\n\n\n\nthis is actually the part at where macos will seal the system volume, and where it may seem that macos has gotten stuck. do not restart thinking you're stuck, this will take quite some time to complete, otherwise you'll break your installation.\n\n\n# stuck at pci configuration begins for intel's x99 and x299 boards\n\n\n\nas previously mentioned, intel hedt motherboards may have some issues revolving around their rtc device in acpi. to resolve, you'll need to look at your rtc device and see which regions are missing. for more information, see here: ssdt-rtc0-range.dsl\n\n\n# stuck on ramrod(^^^^^^^^^^^^^)\n\n\n\nif you get stuck around the ramrod section (specifically, it boots, hits this error, and reboots again back into this, causing a loop), this hints that your smc emulator is broken. to fix this, you have 2 options:\n\n * ensure you're using the latest builds of virtualsmc and lilu, with the vsmcgen=1 boot-arg\n * switch over to rehabman's fakesmc (you can use the minkernel/maxkernel trick mentioned above to restrict fakesmc to big sur and up)\n\nand when switching kexts, ensure you don't have both fakesmc and virtualsmc enabled in your config.plist, as this will cause a conflict.\n\n\n# x79 and x99 kernel panic on iopcifamily\n\nthis is due to an unused uncore pci bridges being enabled in acpi, and so iopcifamily will kernel panic when probing unknown devices. to resolve, you'll need to add ssdt-unc to your system\n\n\n# deviceproperties injection failing\n\nwith big sur, macos has become much pickier with devices being present in acpi. especially if you're injecting important properties for whatevergreen or applealc, you may find they're no longer applying. to verify whether your acpi defines your hardware, check for the acpi-path property in ioregistryexplorer:\n\n\n\nif no property is found, you'll need to create an ssdt that provides the full pathing as you likely have a pci bridge that is not documented in your acpi tables. an example of this can be found here: ssdt-brg0\n\n * note: this issue may also pop up in older versions of macos, however big sur is most likely to have issues.\n\n\n# keyboard and mouse broken\n\nfor certain legacy systems, you may notice that while the usb ports work your hid-based devices such as the keyboard and mouse may be broken. to resolve this, add the following patch:\n\niohidfamily patch\n\nconfig.plist -> kernel -> patch:\n\nkey           type      value\nbase          string    _issingleuser\ncount         integer   1\nenabled       boolean   true\nfind          data      \nidentifier    string    com.apple.iokit.iohidfamily\nlimit         integer   0\nmask          data      \nmaxkernel     string    \nminkernel     string    20.0.0\nreplace       data      b801000000c3\nreplacemask   data      \nskip          integer   0\n\nsource\n\n\n# early kernel panic on max_cpus_from_firmware not yet initialized\n\nif you receive an early kernel panic on max_cpus_from_firmware not yet initialized, this is due to the new acpi_count_enabled_logical_processors method added in macos big sur's kernel. to resolve, please ensure you're on opencore 0.6.0 or newer with the avoidruntimedefrag quirk enabled.\n\n * note: due to how early this kernel panic happens, you may only be able to log it either via serial or rebooting in a known working install of macos and checking your panic logged in nvram.\n   * most users will see this panic simply as [eb|#log:exitbs:start]\n\nexample kernel panic\n\non-screen:\n\n\n\nvia serial logging or nvram:\n\n\n\nlegacy edge case\n\non certain hardware, mainly the hp dc7900, the kernel still can't determine exactly how many threads your hardware supports. this will result in the aforementioned kernel panic and so we need to hard code the cpu core's value.\n\nto do this, add the following patch(replacing the 04 from b8 04 00 00 00 c3 with the amount of cpu threads your hardware supports):\n\nkey           type      value\nbase          string    _acpi_count_enabled_logical_processors\ncount         integer   1\nenabled       boolean   true\nfind          data      \nidentifier    string    kernel\nlimit         integer   0\nmask          data      \nmaxkernel     string    \nminkernel     string    20.0.0\nreplace       data      b804000000c3\nreplacemask   data      \nskip          integer   0\n\n\n# cannot update to newer versions of big sur\n\ngenerally there's 2 main culprits:\n\n * broken update utility\n   * most common error if running a beta, try this first\n * broken seal\n\n# broken update utility\n\ngenerally seen with every beta cycle, simply unenroll and enroll again:\n\n# unenroll from beta catalog\nsudo /system/library/privateframeworks/seeding.framework/resources/seedutil unenroll\n# enroll back in\nsudo /system/library/privateframeworks/seeding.framework/resources/seedutil enroll developerseed\n\n\nthen check back with settings, and it should pop up. if not, run the following:\n\n# list software updates via terminal\nsoftwareupdate -l\n\n\nthis should help kick the update utility back into gear. if you still have issues, check the broken seal section.\n\n# broken seal\n\nwith apple's new snapshotting for the system drive, they now depend heavily on this for os updates to apply correctly. so when a drove's seal is broken, macos will refuse to update the drive.\n\nto verify yourself, check that snapshot sealed returns as yes:\n\n# list all apfs volumes\ndiskutil apfs list\n\n# look for your system volume\nvolume disk1s8 a604d636-3c54-4caa-9a31-5e1a460dc5c0\n        ---------------------------------------------------\n        apfs volume disk (role):   disk1s8 (system)\n        name:                      big sur hd (case-insensitive)\n        mount point:               not mounted\n        capacity consumed:         15113809920 b (15.1 gb)\n        sealed:                    broken\n        filevault:                 no\n        |\n        snapshot:                  4202ebe5-288b-4701-ba1e-b6ec8ad6397d\n        snapshot disk:             disk1s8s1\n        snapshot mount point:      /\n        snapshot sealed:           yes\n\n\nif it returns snapshot sealed: broken, then you'll want to go through the following:\n\n * update to opencore 0.6.4 or newer\n   * specifically commit ba10b5d or newer is required\n * revert to older snapshots\n   * mainly for those who have tampered with the system volume\n   * see here how to revert: rolling back apfs snapshots\n\n\n# kernel panic on rooting from the live fs\n\nfull error:\n\nrooting from the live fs of a sealed volume is not allowed on a release build\n\n\nthis is due to issues around secure boot boot being enabled in beta 10 with older versions of opencore. simply update to 0.6.4 to resolve\n\n * specifically commit ba10b5d or newer is required\n\n\n# asus z97 and hedt(ie. x99 and x299) failing stage 2 installation\n\nwith big sur, there's a higher reliance on native nvram for installation otherwise the installer will get stuck in a reboot loop. to resolve this you'll need to either:\n\n * install big sur on another machine, then transfer the drive\n * fix the motherboard's nvram\n   * mainly applicable with asus's z97 series\n\nfor the latter, see here: haswell asus z97 big sur update thread\n\n\n# laptops kernel panicking on cannot perform kext scan\n\nthis is due to multiple copies of the same kext being in your kernel cache, and to be more specific having multiple copies of voodooinput. look over your kernel -> add and verify you only have 1 copy of voodooinput enabled.\n\n * note: both voodooi2c and voodoops2 have a bundled copy of voodooinput, which you disable is up to personal preference\n\n\n# reboot on \"appleusbhostport::createdevice: failed to create device\" on macos 11.3+\n\nthis is due to xhciportlimit breaking with macos 11.3 and newer, to resolve you must disable xhciportlimit under kernel -> quirks. please ensure you've mapped your usb ports correctly before doing so.",charsets:{cjk:!0}},{title:"VMware Fusion",frontmatter:{search:!1},regularPath:"/extras/big-sur/fusion.html",relativePath:"extras/big-sur/fusion.md",key:"v-5c149794",path:"/extras/big-sur/fusion.html",headers:[{level:2,title:"Requirements",slug:"requirements",normalizedTitle:"requirements",charIndex:20},{level:2,title:"Converting Installation Media",slug:"converting-installation-media",normalizedTitle:"converting installation media",charIndex:281},{level:2,title:"Installing macOS Big Sur in VMware Fusion",slug:"installing-macos-big-sur-in-vmware-fusion",normalizedTitle:"installing macos big sur in vmware fusion",charIndex:955}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Requirements Converting Installation Media Installing macOS Big Sur in VMware Fusion",content:'# VMware Fusion\n\n\n# Requirements\n\n * VMware Fusion\n * Java (both the JRE and JDK work)\n * A computer running macOS\n * The desired macOS installation software installed to /Applications\n * A USB attached hard disk or SSD, or an internal disk that can be passed through entirely\n\n\n# Converting Installation Media\n\nVMware cannot directly use a raw disk image, so we\'ll create a linked VMDK, which will allow you to use it as a virtual hard drive in VMware Fusion.\n\nDownload raw2vmdk from here, and put it in the same directory as the .img file. Then, run the following command:\n\n### Change "Install macOS Big Sur Beta" if the name of the .img file differs\njava -jar raw2vmdk.jar "Install macOS Big Sur Beta.img" "Install macOS Big Sur Beta.vmdk"\n\n\nThis will create a VMDK that references the .img file (the raw disk image) for VMware to use. If you\'re going to move this vmdk or transfer it to another computer, you must move the img file along with it.\n\n\n# Installing macOS Big Sur in VMware Fusion\n\nYou have two options here: pass through a raw disk, or pass through an entire USB device. The steps are not that different for both, so they\'ll be combined here.\n\n 1.  (Skip this if you are doing USB passthrough) For raw disk passthrough, attach the disk that is your target for macOS installation, and create a virtual hard disk that references it to use with Fusion.\n     \n     Note: You may need to remove the partitions of the disk before using it.\n     \n     diskutil list\n     # locate the external disk that matches, and replace /dev/disk3 below with the device path.\n     sudo /Applications/VMware\\ Fusion.app/Contents/Library/vmware-rawdiskCreator create /dev/disk3 fullDevice RawHDD ide\n     \n\n 2.  Next, start VMware Fusion. You should see the homepage. If not, close any window that opened and select File > New from the menu bar.\n\n 3.  Select the "Create a custom virtual machine" option, and select macOS 10.15 (as 10.16/11 isn\'t available).\n\n 4.  Select "Use an existing virtual disk" at the screen below.\n\n 5.  Then, click "Choose virtual disk" and select the Install macOS Beta.vmdk vmdk we made earlier. If you want to make sure VMware does not copy the disk to where you will be storing the VM (for example, if you are low on space), select "Share this virtual disk with the virtual machine that created it". Once done, it should look like this.\n\n 6.  Hit Continue, then click "Customize Settings". Make sure to save the VM to somewhere that\'s not the disk you are passing through.\n     \n     Once done, you should arrive at a screen that looks like this.\n\n 7.  First, select "Processors & Memory", and set the memory to at least 4096 MB.\n\n 8.  (If you are doing raw disk passthrough, skip this step) Select "Show All" and click "USB & Bluetooth". Plug in your USB device and under "Plug In Action", change it from "Ask what to do" to "Connect to the VM". It should look similar to this when done. (In this case, "VIA AmazonBasics Hard Drive Enclos" is my device.) Then, close the window.\n\n 9.  (If you are doing USB passthrough, skip steps 9 through 13) Close the window and close VMware Fusion. Locate the "macOS 10.15.vmwarevm" (or whatever you named it when saving) folder in Finder, and right click > "Show Package Contents".\n     \n     The result should look like the image below.\n\n 10. Open the vmx (not vmxf or vmx.lck folder) file in TextEdit. It should look something like this:\n\n 11. Find the lines starting with sata0:1:\n\n 12. Replace all the lines starting with sata0:1 with the following. Replace <path/to/vmdk> with the full path to RawHDD.vmdk, created earlier above.\n     \n     Tip: Find it in Finder, then right click, hold down option, and select \'Copy "RawHDD.vmdk" as Pathname\' to get the full path easily.\n     \n     sata0:1.fileName = "<path/to/vmdk>"\n     sata0:1.present = "TRUE"\n     sata0:1.deviceType = "rawDisk"\n     \n     \n     It should look something like the below when done.\n\n 13. Save and quit TextEdit, and reopen VMware Fusion. Your VM should automatically open, but if not, open it from the Virtual Machine Library.\n\n 14. Select "Virtual Machine" > "Power On To Firmware" from the menu bar, so that we can boot to the VM BIOS.\n     \n     * (For raw disk passthrough) If you get prompted for your password when you do this, enter it. Even though the prompt mentions Boot Camp disks, it is still working normally.\n     \n     * If you get an error that the resource is busy like below, run the following in Terminal and try again:\n     \n     diskutil list\n     # replace /dev/disk3 below with the proper device path. for raw disk passthrough, it was found before\n     sudo diskutil unmountDisk /dev/disk3\n     \n     \n     \n\n 15. You should get to the VM Boot Manager, as shown below. Select the first hard drive ("EFI VMware Virtual SATA Hard Drive (0.0)). The VM should start booting the Big Sur installer.\n\n 16. Complete the installation as you would on any other device. the installation is complete, and you are at the Welcome screen, select "Virtual Machine" > "Shut Down" from the menu bar.\n     \n     If needed, add your prepared EFI to the EFI partition on the device, then eject it.\n     \n     Place the drive back in your hack and boot normally. You now have Big Sur!',normalizedContent:'# vmware fusion\n\n\n# requirements\n\n * vmware fusion\n * java (both the jre and jdk work)\n * a computer running macos\n * the desired macos installation software installed to /applications\n * a usb attached hard disk or ssd, or an internal disk that can be passed through entirely\n\n\n# converting installation media\n\nvmware cannot directly use a raw disk image, so we\'ll create a linked vmdk, which will allow you to use it as a virtual hard drive in vmware fusion.\n\ndownload raw2vmdk from here, and put it in the same directory as the .img file. then, run the following command:\n\n### change "install macos big sur beta" if the name of the .img file differs\njava -jar raw2vmdk.jar "install macos big sur beta.img" "install macos big sur beta.vmdk"\n\n\nthis will create a vmdk that references the .img file (the raw disk image) for vmware to use. if you\'re going to move this vmdk or transfer it to another computer, you must move the img file along with it.\n\n\n# installing macos big sur in vmware fusion\n\nyou have two options here: pass through a raw disk, or pass through an entire usb device. the steps are not that different for both, so they\'ll be combined here.\n\n 1.  (skip this if you are doing usb passthrough) for raw disk passthrough, attach the disk that is your target for macos installation, and create a virtual hard disk that references it to use with fusion.\n     \n     note: you may need to remove the partitions of the disk before using it.\n     \n     diskutil list\n     # locate the external disk that matches, and replace /dev/disk3 below with the device path.\n     sudo /applications/vmware\\ fusion.app/contents/library/vmware-rawdiskcreator create /dev/disk3 fulldevice rawhdd ide\n     \n\n 2.  next, start vmware fusion. you should see the homepage. if not, close any window that opened and select file > new from the menu bar.\n\n 3.  select the "create a custom virtual machine" option, and select macos 10.15 (as 10.16/11 isn\'t available).\n\n 4.  select "use an existing virtual disk" at the screen below.\n\n 5.  then, click "choose virtual disk" and select the install macos beta.vmdk vmdk we made earlier. if you want to make sure vmware does not copy the disk to where you will be storing the vm (for example, if you are low on space), select "share this virtual disk with the virtual machine that created it". once done, it should look like this.\n\n 6.  hit continue, then click "customize settings". make sure to save the vm to somewhere that\'s not the disk you are passing through.\n     \n     once done, you should arrive at a screen that looks like this.\n\n 7.  first, select "processors & memory", and set the memory to at least 4096 mb.\n\n 8.  (if you are doing raw disk passthrough, skip this step) select "show all" and click "usb & bluetooth". plug in your usb device and under "plug in action", change it from "ask what to do" to "connect to the vm". it should look similar to this when done. (in this case, "via amazonbasics hard drive enclos" is my device.) then, close the window.\n\n 9.  (if you are doing usb passthrough, skip steps 9 through 13) close the window and close vmware fusion. locate the "macos 10.15.vmwarevm" (or whatever you named it when saving) folder in finder, and right click > "show package contents".\n     \n     the result should look like the image below.\n\n 10. open the vmx (not vmxf or vmx.lck folder) file in textedit. it should look something like this:\n\n 11. find the lines starting with sata0:1:\n\n 12. replace all the lines starting with sata0:1 with the following. replace <path/to/vmdk> with the full path to rawhdd.vmdk, created earlier above.\n     \n     tip: find it in finder, then right click, hold down option, and select \'copy "rawhdd.vmdk" as pathname\' to get the full path easily.\n     \n     sata0:1.filename = "<path/to/vmdk>"\n     sata0:1.present = "true"\n     sata0:1.devicetype = "rawdisk"\n     \n     \n     it should look something like the below when done.\n\n 13. save and quit textedit, and reopen vmware fusion. your vm should automatically open, but if not, open it from the virtual machine library.\n\n 14. select "virtual machine" > "power on to firmware" from the menu bar, so that we can boot to the vm bios.\n     \n     * (for raw disk passthrough) if you get prompted for your password when you do this, enter it. even though the prompt mentions boot camp disks, it is still working normally.\n     \n     * if you get an error that the resource is busy like below, run the following in terminal and try again:\n     \n     diskutil list\n     # replace /dev/disk3 below with the proper device path. for raw disk passthrough, it was found before\n     sudo diskutil unmountdisk /dev/disk3\n     \n     \n     \n\n 15. you should get to the vm boot manager, as shown below. select the first hard drive ("efi vmware virtual sata hard drive (0.0)). the vm should start booting the big sur installer.\n\n 16. complete the installation as you would on any other device. the installation is complete, and you are at the welcome screen, select "virtual machine" > "shut down" from the menu bar.\n     \n     if needed, add your prepared efi to the efi partition on the device, then eject it.\n     \n     place the drive back in your hack and boot normally. you now have big sur!',charsets:{}},{title:"VirtualBox",frontmatter:{search:!1},regularPath:"/extras/big-sur/virtualbox.html",relativePath:"extras/big-sur/virtualbox.md",key:"v-f9ebde94",path:"/extras/big-sur/virtualbox.html",headers:[{level:2,title:"Requirements",slug:"requirements",normalizedTitle:"requirements",charIndex:17},{level:2,title:"Converting Installation Media",slug:"converting-installation-media",normalizedTitle:"converting installation media",charIndex:182},{level:2,title:"Installing macOS in VirtualBox",slug:"installing-macos-in-virtualbox",normalizedTitle:"installing macos in virtualbox",charIndex:550}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Requirements Converting Installation Media Installing macOS in VirtualBox",content:'# VirtualBox\n\n\n# Requirements\n\n * VirtualBox\n * A computer running macOS\n * The desired macOS installation software installed to /Applications\n * A USB attached hard disk or SSD\n\n\n# Converting Installation Media\n\nVirtualBox cannot directly use a raw disk image, so we\'re going to convert it to a VDI.\n\ncd to the location of the disk image and run the following:\n\n### Change "Install macOS Big Sur Beta" if the name of the .img file differs\nVBoxManage convertfromraw "Install macOS Big Sur Beta.img" "Install macOS Big Sur Beta.vdi" --format VDI\n\n\n\n# Installing macOS in VirtualBox\n\nFirst, attach the USB disk that is your target for macOS installation, and create a virtual hard disk that references it to use with VirtualBox. Note: You may need to remove the partitions of the disk before using it. You will also need to edit the destination device.\n\ndiskutil list\n# locate the external disk that matches, and replace /dev/disk3 below with the device path.\nsudo VBoxManage internalcommands createrawvmdk -filename RawHDD.vmdk -rawdisk /dev/disk3\n\n\nNext, start VirtualBox as root and create a new macOS virtual machine.\n\nsudo VirtualBox\n\n\n * Name: Big Sur\n\n * Type: macOS 64bit\n\n * 2-4 CPU cores\n\n * 4-8 GB RAM\n\n * Do not create a virtual disk.\n\nAttach the disks that you\'ve created in previous steps as shown:\n\n\n\nNow, close VirtualBox and add the following properties to the VM to allow it to boot.\n\nsudo VBoxManage modifyvm "Big Sur" --cpuidset 00000001 000306a9 04100800 7fbae3ff bfebfbff\n\nsudo VBoxManage setextradata "Big Sur" "VBoxInternal/Devices/efi/0/Config/DmiSystemProduct" "iMacPro1,1"\n\nsudo VBoxManage setextradata "Big Sur" "VBoxInternal/Devices/efi/0/Config/DmiSystemVersion" "1.0"\n\nsudo VBoxManage setextradata "Big Sur" "VBoxInternal/Devices/efi/0/Config/DmiBoardProduct" "Mac-7BA5B2D9E42DDD94"\n\nsudo VBoxManage setextradata "Big Sur" "VBoxInternal/Devices/smc/0/Config/DeviceKey" "ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc"\n\nsudo VBoxManage setextradata "Big Sur" "VBoxInternal/Devices/smc/0/Config/GetKeyFromRealSMC" 1\n\n\nStart VirtualBox as root, and start the VM. The installer should begin to boot. Complete the installation as you would on any other device.\n\nsudo VirtualBox\n\n\nWhen the installation is complete, and you are at the Welcome screen, send an ACPI shutdown signal to macOS and select shutdown.\n\nAdd your prepared EFI to the EFI partition on the USB device, and eject it.\n\nPlace the drive back in your hack and boot normally.',normalizedContent:'# virtualbox\n\n\n# requirements\n\n * virtualbox\n * a computer running macos\n * the desired macos installation software installed to /applications\n * a usb attached hard disk or ssd\n\n\n# converting installation media\n\nvirtualbox cannot directly use a raw disk image, so we\'re going to convert it to a vdi.\n\ncd to the location of the disk image and run the following:\n\n### change "install macos big sur beta" if the name of the .img file differs\nvboxmanage convertfromraw "install macos big sur beta.img" "install macos big sur beta.vdi" --format vdi\n\n\n\n# installing macos in virtualbox\n\nfirst, attach the usb disk that is your target for macos installation, and create a virtual hard disk that references it to use with virtualbox. note: you may need to remove the partitions of the disk before using it. you will also need to edit the destination device.\n\ndiskutil list\n# locate the external disk that matches, and replace /dev/disk3 below with the device path.\nsudo vboxmanage internalcommands createrawvmdk -filename rawhdd.vmdk -rawdisk /dev/disk3\n\n\nnext, start virtualbox as root and create a new macos virtual machine.\n\nsudo virtualbox\n\n\n * name: big sur\n\n * type: macos 64bit\n\n * 2-4 cpu cores\n\n * 4-8 gb ram\n\n * do not create a virtual disk.\n\nattach the disks that you\'ve created in previous steps as shown:\n\n\n\nnow, close virtualbox and add the following properties to the vm to allow it to boot.\n\nsudo vboxmanage modifyvm "big sur" --cpuidset 00000001 000306a9 04100800 7fbae3ff bfebfbff\n\nsudo vboxmanage setextradata "big sur" "vboxinternal/devices/efi/0/config/dmisystemproduct" "imacpro1,1"\n\nsudo vboxmanage setextradata "big sur" "vboxinternal/devices/efi/0/config/dmisystemversion" "1.0"\n\nsudo vboxmanage setextradata "big sur" "vboxinternal/devices/efi/0/config/dmiboardproduct" "mac-7ba5b2d9e42ddd94"\n\nsudo vboxmanage setextradata "big sur" "vboxinternal/devices/smc/0/config/devicekey" "ourhardworkbythesewordsguardedpleasedontsteal(c)applecomputerinc"\n\nsudo vboxmanage setextradata "big sur" "vboxinternal/devices/smc/0/config/getkeyfromrealsmc" 1\n\n\nstart virtualbox as root, and start the vm. the installer should begin to boot. complete the installation as you would on any other device.\n\nsudo virtualbox\n\n\nwhen the installation is complete, and you are at the welcome screen, send an acpi shutdown signal to macos and select shutdown.\n\nadd your prepared efi to the efi partition on the usb device, and eject it.\n\nplace the drive back in your hack and boot normally.',charsets:{}},{title:"Soon™",frontmatter:{search:!1},regularPath:"/extras/big-sur/workstation.html",relativePath:"extras/big-sur/workstation.md",key:"v-39a90a8c",path:"/extras/big-sur/workstation.html",lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:null,content:"# Soon™",normalizedContent:"# soon™",charsets:{}},{title:"Fixing KASLR slide values",frontmatter:{},regularPath:"/extras/kaslr-fix.html",relativePath:"extras/kaslr-fix.md",key:"v-753edfe4",path:"/extras/kaslr-fix.html",headers:[{level:2,title:"So what is KASLR",slug:"so-what-is-kaslr",normalizedTitle:"so what is kaslr",charIndex:259},{level:2,title:"And who is this info for",slug:"and-who-is-this-info-for",normalizedTitle:"and who is this info for",charIndex:993},{level:2,title:"So how do I fix this",slug:"so-how-do-i-fix-this",normalizedTitle:"so how do i fix this",charIndex:1880},{level:2,title:"Prepping the BIOS",slug:"prepping-the-bios",normalizedTitle:"prepping the bios",charIndex:3108},{level:2,title:"Test boot",slug:"test-boot",normalizedTitle:"test boot",charIndex:5030},{level:2,title:"Finding the Slide value",slug:"finding-the-slide-value",normalizedTitle:"finding the slide value",charIndex:5240},{level:2,title:"Using DevirtualiseMmio",slug:"using-devirtualisemmio",normalizedTitle:"using devirtualisemmio",charIndex:9411}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"So what is KASLR And who is this info for So how do I fix this Prepping the BIOS Test boot Finding the Slide value Using DevirtualiseMmio",content:"# Fixing KASLR slide values\n\nThis section is for users who wish to understand and fix \"Couldn't allocate runtime area\" errors. This is most common with either Z390, X99 and X299.\n\n * Note: OpenCore is required, Clover is no longer supported in this guide\n\n\n# So what is KASLR\n\nWell KASLR stands for Kernel address space layout randomization, what it's used for is security purposes. Specifically, this makes it much harder for attackers to figure out where the important objects are in memory as it's always random both between machines and between boots. More in-depth explainer on KASLR\n\nWhere this becomes an issue is when you introduce devices with either small memory maps or just way too many devices present. There likely is space for the kernel to operate but there's also free space where the kernel won't fit entirely. This is where slide=xxx fits in. Instead of letting macOS choose a random area to operate in each boot, we'll constrain it to somewhere that we know will work.\n\n\n# And who is this info for\n\nWell as I mentioned earlier, this is for users who don't have enough space for the kernel or moves to a place that is too small. You'll generally experience an error similar to this when booting:\n\nError allocating 0x1197b pages at 0x0000000017a80000 alloc type 2\nCouldn't allocate runtime area\n\n\nWith some variation:\n\nOnly 244/256 slide values are usable!\n\n\nOr even crashes while running macOS:\n\npanic(cpu 6 caller 0xffffff801fc057ba): a freed zone element has been modified in zone kalloc.4096: expected 0x3f00116dbe8a46f6 but found 0x3f00116d00000000\n\n\nThe best part about these errors is that they can be random, also the reason why power cycling your PC 20 times also can fix the issue but only temporarily.\n\nFun Fact: It takes around 31 ms to find an area to operate in, manually setting a slide value can on average can reduce boot times by 0.207%!!!\n\n\n# So how do I fix this\n\nThe real fix to this is quite simple actually. What you'll need:\n\n * OpenCore users:\n   * OpenRuntime\n   * OpenShell(Don't forget to enable this under Root -> Misc -> Tools)\n\nAnd we'll also need to configure our config.plist -> Booter:\n\n * AvoidRuntimeDefrag: YES\n   * Fixes UEFI runtime services like date, time, NVRAM, power control, etc\n * DevirtualiseMmio: YES\n   * Reduces Stolen Memory Footprint, expands options for slide=N values and very helpful with fixing Memory Allocation issues on Z390.\n * EnableSafeModeSlide: YES\n   * Allows for slide values to be used in Safe mode\n * ProtectUefiServices: NO\n   * Protects UEFI services from being overridden by the firmware, mainly relevant for VMs, 300 series and newer systems like Ice Lake and Comet Lake\n * ProvideCustomSlide: YES\n   * This makes sure the kernel will only choose good regions and avoid those that may result in boot failures. It's still random but omits those bad regions in its randomization\n * RebuildAppleMemoryMap: YES\n   * Generates Memory Map compatible with macOS, can break on some laptop OEM firmwares so if you receive early boot failures disable this, this makes sure our memory map will fit to what the kernel expects\n\n\n# Prepping the BIOS\n\nThe reason we need to reset the memory map is we want it to be more deterministic, what I mean by this is that there will be less variation on each boot so we have fewer edge cases(Memory Maps are not always consistent on boots). To prep:\n\n * Update BIOS(extremely important as early BIOS's shipped are known to have memory map issues, especially with Z390)\n * Clear CMOS\n * Enable much needed BIOS settings:\n   * Above4GDecoding: This allows devices to use memory regions above 4GB meaning macOS will have more room to fit, but can be problematic on some X99/X299 boasrds.\n     * If experiencing issues, ensure \"MMIOH Base\" is set to 12 TB or lower, as macOS only supports 44-bit physical addressing.\n     * Note: On BIOS supporting Resizable BAR Support, enabling Above 4G will unlock this option. Please ensure that Booter -> Quirks -> ResizeAppleGpuBars is set to 0 if this is enabled.\n   * Boot Options -> Windows8.1/10 mode: This will make sure no old legacy garbage is loaded. Fun fact, other OS is only designed for booting older versions of Windows and not for other OS.\n * Disable as many unneeded devices in the BIOS(this means there is less variation in the map on each boot, so fewer chances of boot failure). Common settings:\n   * CSM: For legacy support, adds a bunch of garbage we don't want. This also can break the shell so you can't boot into it.\n   * Intel SGX: Software Guard Extensions, takes up a lot of space and does nothing in macOS.\n   * Parallel Port: macOS can't even see parallel.\n   * Serial Port: I'd like to know how many of you are debugging the kernel...\n   * iGPU: Not ideal but some systems have such bloated maps that the iGPU just can't fit.\n   * Thunderbolt: Many hacks don't have thunderbolt working, boards that don't have thunderbolt but have this option just waste more space.\n   * LED lighting: Sorry mate, time to go.\n   * Legacy USB: More Legacy Crap.\n\n\n# Test boot\n\nWith our adjusted EFI, config.plist and BIOS settings, it's time we try out our new setup. If you still have issues, well it looks like we'll need to do a deep dive and calculate our slide value\n\n\n# Finding the Slide value\n\nNow what you'll want to do is open the EFI shell in your boot manager of choice and run memmap. This will give you a list of all pages and their sizes. This is where the fun begins.\n\nExample of what you'll see:\n\nTYPE         START              END                # PAGES            ATTRIBUTES\nRT_Data      0000000000000000   0000000000000FFF   0000000000000001   800000000000000F\nAvailable    0000000000001000   0000000000057FFF   0000000000000057   000000000000000F\nReserved     0000000000058000   0000000000058FFF   0000000000000001   000000000000000F\nAvailable    0000000000059000   000000000008FFFF   0000000000000037   000000000000000F\nRT_Code      0000000000090000   0000000000090FFF   0000000000000001   800000000000000F\nAvailable    0000000000091000   000000000009DFFF   000000000000000D   000000000000000F\nReserved     000000000009E000   000000000009FFFF   0000000000000002   000000000000000F\nAvailable    0000000000100000   000000005B635FFF   000000000005B536   000000000000000F\nBS_Data      000000005B636000   000000005B675FFF   0000000000000040   000000000000000F\nAvailable    000000005B676000   000000006AF77FFF   000000000000F902   000000000000000F\nLoaderCode   000000006AF78000   000000006B155FFF   00000000000001DE   000000000000000F\nBS_Data      000000006B156000   000000006B523FFF   00000000000003CE   000000000000000F\nACPI_NVS     000000006B524000   000000006B524FFF   0000000000000001   000000000000000F\nBS_Data      000000006B526000   000000006B625FFF   0000000000000100   000000000000000F\nAvailable    000000006B626000   000000006B634FFF   000000000000000F   000000000000000F\n\nNow you may be wondering how the hell we convert this to a slide value, well it's quite simple. What we're interested in is the largest available value within the Start column. In this example we see that 000000006B626000 is our largest, do note that these are in HEX so if there are multiple values close to each other you may need to convert them to decimal. To the calculate slide value(macOS's built-in calculator has a programming function by pressing ⌘+3):\n\n000000006B626000 = 0x6B626000\n\n(0x6B626000 - 0x100000)/0x200000 = 0x35A\n\nAnd to verify that this is correct:\n\n0x100000 + (0x35A * 0x200000) = 0x6B500000\n\nWhenever the returned value is not the original(0x6B500000 vs 0x6B626000), just add +1 to your final slide value. This is due to rounding. So for example 0x35A converted to decimal becomes 858 and then +1 will give you slide=859.\n\n> But wait for just a second, this is higher than 256!\n\nThat is correct, this is caused by memory maps that include Above4GDecoding sectors which cannot be used. So you will need to keep going down the list until you find a small enough value(for us that would be 0000000000100000).\n\nAnd just to make it a bit clearer on the formula:\n\n(HEX - 0x100000)/0x200000 = Slide Value in HEX\n\n0x100000 + (Slide Value in HEX * 0x200000) = Your original HEX value(if not then add +1 to your slide value)\n\nWith this formula in mind, the highest Start value you would be able to use to give you a low enough slide value would be 0x20100000.\n\nNow navigate into your config.plist and add your slide value with the rest of your boot arguments(for us it would be slide=0 when using 0x100000). If this value still gives you errors then you may proceed to the second-largest Start value and so on.\n\nSometimes you may find that when you calculate slide that you receive super small values like slide=-0.379150390625, when this happens round this to slide=0.\n\nAnd for users who are having issues finding their slide value can also type $slide [insert largest #Pages value] in the #Sandbox channel on the r/Hackintosh Discord\n\n> But this is soooooo hard\n\nWell fret not, for there is a simple solution. After running memmap in the shell, run:\n\nshell> fs0: //replace with your USB\n\nfs0:\\> dir //to verify this is the right directory, if not try fs1 and so on\n\nDirectory of fs0:\\\n01/01/01 3:30p   EFI\n\nfs0:\\> memmap > memmap.txt\n\n\nThis will add a memmap.txt file to the root of your EFI, you can then proceed to drop it into the r/Hackintosh discord in the #Sandbox channel and type $slide [insert a link to memmap.txt]\n\n\n# Using DevirtualiseMmio\n\nDevirtualiseMmio is quite an interesting quirk, specifically in that it gets around a huge hurdle with many PCI device systems like some Z390 boards and virtually all HEDT boards like X99 and X299. How it does this is it takes MMIO regions and removes runtime attributes allowing them to be used as space for the kernel to sit comfortably, pair this with ProvideCustomSlide quirk means we can keep the security feature of slide while also getting a bootable machine.\n\nFor extremely problematic systems like Threadripper TRX40 19h, we need to find specific regions that aren't required for proper operation. This is where MmioWhitelist comes into play. Note that whitelisting isn't required for most systems\n\nIf you run the debug version of OpenCore with DevirtualiseMmio, you'll notice this in your logs:\n\n21:495 00:009 OCABC: MMIO devirt start\n21:499 00:003 OCABC: MMIO devirt 0x60000000 (0x10000 pages, 0x8000000000000001) skip 0\n21:503 00:003 OCABC: MMIO devirt 0xFE000000 (0x11 pages, 0x8000000000000001) skip 0\n21:506 00:003 OCABC: MMIO devirt 0xFEC00000 (0x1 pages, 0x8000000000000001) skip 0\n21:510 00:003 OCABC: MMIO devirt 0xFED00000 (0x1 pages, 0x8000000000000001) skip 0\n21:513 00:003 OCABC: MMIO devirt 0xFEE00000 (0x1 pages, 0x800000000000100D) skip 0\n21:516 00:003 OCABC: MMIO devirt 0xFF000000 (0x1000 pages, 0x800000000000100D) skip 0\n21:520 00:003 OCABC: MMIO devirt end, saved 278608 KB\n\n\n * Note: See OpenCore Debugging on how to enable logging to file\n\nSo we have 6 regions we need to go through and see which are bad, best idea is to block all MMIO sections except one and try each region to get a list of good regions.\n\nNow lets take the above example and create our own MmioWhitelist, we'll need to first convert the address from hexadecimal to decimal:\n\n * MMIO devirt 0x60000000 -> 1610612736\n * MMIO devirt 0xFE000000 -> 4261412864\n * MMIO devirt 0xFEC00000 -> 4273995776\n * MMIO devirt 0xFED00000 -> 4275044352\n * MMIO devirt 0xFEE00000 -> 4276092928\n * MMIO devirt 0xFF000000 -> 4278190080\n\nShould look something like this when done:\n\n",normalizedContent:"# fixing kaslr slide values\n\nthis section is for users who wish to understand and fix \"couldn't allocate runtime area\" errors. this is most common with either z390, x99 and x299.\n\n * note: opencore is required, clover is no longer supported in this guide\n\n\n# so what is kaslr\n\nwell kaslr stands for kernel address space layout randomization, what it's used for is security purposes. specifically, this makes it much harder for attackers to figure out where the important objects are in memory as it's always random both between machines and between boots. more in-depth explainer on kaslr\n\nwhere this becomes an issue is when you introduce devices with either small memory maps or just way too many devices present. there likely is space for the kernel to operate but there's also free space where the kernel won't fit entirely. this is where slide=xxx fits in. instead of letting macos choose a random area to operate in each boot, we'll constrain it to somewhere that we know will work.\n\n\n# and who is this info for\n\nwell as i mentioned earlier, this is for users who don't have enough space for the kernel or moves to a place that is too small. you'll generally experience an error similar to this when booting:\n\nerror allocating 0x1197b pages at 0x0000000017a80000 alloc type 2\ncouldn't allocate runtime area\n\n\nwith some variation:\n\nonly 244/256 slide values are usable!\n\n\nor even crashes while running macos:\n\npanic(cpu 6 caller 0xffffff801fc057ba): a freed zone element has been modified in zone kalloc.4096: expected 0x3f00116dbe8a46f6 but found 0x3f00116d00000000\n\n\nthe best part about these errors is that they can be random, also the reason why power cycling your pc 20 times also can fix the issue but only temporarily.\n\nfun fact: it takes around 31 ms to find an area to operate in, manually setting a slide value can on average can reduce boot times by 0.207%!!!\n\n\n# so how do i fix this\n\nthe real fix to this is quite simple actually. what you'll need:\n\n * opencore users:\n   * openruntime\n   * openshell(don't forget to enable this under root -> misc -> tools)\n\nand we'll also need to configure our config.plist -> booter:\n\n * avoidruntimedefrag: yes\n   * fixes uefi runtime services like date, time, nvram, power control, etc\n * devirtualisemmio: yes\n   * reduces stolen memory footprint, expands options for slide=n values and very helpful with fixing memory allocation issues on z390.\n * enablesafemodeslide: yes\n   * allows for slide values to be used in safe mode\n * protectuefiservices: no\n   * protects uefi services from being overridden by the firmware, mainly relevant for vms, 300 series and newer systems like ice lake and comet lake\n * providecustomslide: yes\n   * this makes sure the kernel will only choose good regions and avoid those that may result in boot failures. it's still random but omits those bad regions in its randomization\n * rebuildapplememorymap: yes\n   * generates memory map compatible with macos, can break on some laptop oem firmwares so if you receive early boot failures disable this, this makes sure our memory map will fit to what the kernel expects\n\n\n# prepping the bios\n\nthe reason we need to reset the memory map is we want it to be more deterministic, what i mean by this is that there will be less variation on each boot so we have fewer edge cases(memory maps are not always consistent on boots). to prep:\n\n * update bios(extremely important as early bios's shipped are known to have memory map issues, especially with z390)\n * clear cmos\n * enable much needed bios settings:\n   * above4gdecoding: this allows devices to use memory regions above 4gb meaning macos will have more room to fit, but can be problematic on some x99/x299 boasrds.\n     * if experiencing issues, ensure \"mmioh base\" is set to 12 tb or lower, as macos only supports 44-bit physical addressing.\n     * note: on bios supporting resizable bar support, enabling above 4g will unlock this option. please ensure that booter -> quirks -> resizeapplegpubars is set to 0 if this is enabled.\n   * boot options -> windows8.1/10 mode: this will make sure no old legacy garbage is loaded. fun fact, other os is only designed for booting older versions of windows and not for other os.\n * disable as many unneeded devices in the bios(this means there is less variation in the map on each boot, so fewer chances of boot failure). common settings:\n   * csm: for legacy support, adds a bunch of garbage we don't want. this also can break the shell so you can't boot into it.\n   * intel sgx: software guard extensions, takes up a lot of space and does nothing in macos.\n   * parallel port: macos can't even see parallel.\n   * serial port: i'd like to know how many of you are debugging the kernel...\n   * igpu: not ideal but some systems have such bloated maps that the igpu just can't fit.\n   * thunderbolt: many hacks don't have thunderbolt working, boards that don't have thunderbolt but have this option just waste more space.\n   * led lighting: sorry mate, time to go.\n   * legacy usb: more legacy crap.\n\n\n# test boot\n\nwith our adjusted efi, config.plist and bios settings, it's time we try out our new setup. if you still have issues, well it looks like we'll need to do a deep dive and calculate our slide value\n\n\n# finding the slide value\n\nnow what you'll want to do is open the efi shell in your boot manager of choice and run memmap. this will give you a list of all pages and their sizes. this is where the fun begins.\n\nexample of what you'll see:\n\ntype         start              end                # pages            attributes\nrt_data      0000000000000000   0000000000000fff   0000000000000001   800000000000000f\navailable    0000000000001000   0000000000057fff   0000000000000057   000000000000000f\nreserved     0000000000058000   0000000000058fff   0000000000000001   000000000000000f\navailable    0000000000059000   000000000008ffff   0000000000000037   000000000000000f\nrt_code      0000000000090000   0000000000090fff   0000000000000001   800000000000000f\navailable    0000000000091000   000000000009dfff   000000000000000d   000000000000000f\nreserved     000000000009e000   000000000009ffff   0000000000000002   000000000000000f\navailable    0000000000100000   000000005b635fff   000000000005b536   000000000000000f\nbs_data      000000005b636000   000000005b675fff   0000000000000040   000000000000000f\navailable    000000005b676000   000000006af77fff   000000000000f902   000000000000000f\nloadercode   000000006af78000   000000006b155fff   00000000000001de   000000000000000f\nbs_data      000000006b156000   000000006b523fff   00000000000003ce   000000000000000f\nacpi_nvs     000000006b524000   000000006b524fff   0000000000000001   000000000000000f\nbs_data      000000006b526000   000000006b625fff   0000000000000100   000000000000000f\navailable    000000006b626000   000000006b634fff   000000000000000f   000000000000000f\n\nnow you may be wondering how the hell we convert this to a slide value, well it's quite simple. what we're interested in is the largest available value within the start column. in this example we see that 000000006b626000 is our largest, do note that these are in hex so if there are multiple values close to each other you may need to convert them to decimal. to the calculate slide value(macos's built-in calculator has a programming function by pressing ⌘+3):\n\n000000006b626000 = 0x6b626000\n\n(0x6b626000 - 0x100000)/0x200000 = 0x35a\n\nand to verify that this is correct:\n\n0x100000 + (0x35a * 0x200000) = 0x6b500000\n\nwhenever the returned value is not the original(0x6b500000 vs 0x6b626000), just add +1 to your final slide value. this is due to rounding. so for example 0x35a converted to decimal becomes 858 and then +1 will give you slide=859.\n\n> but wait for just a second, this is higher than 256!\n\nthat is correct, this is caused by memory maps that include above4gdecoding sectors which cannot be used. so you will need to keep going down the list until you find a small enough value(for us that would be 0000000000100000).\n\nand just to make it a bit clearer on the formula:\n\n(hex - 0x100000)/0x200000 = slide value in hex\n\n0x100000 + (slide value in hex * 0x200000) = your original hex value(if not then add +1 to your slide value)\n\nwith this formula in mind, the highest start value you would be able to use to give you a low enough slide value would be 0x20100000.\n\nnow navigate into your config.plist and add your slide value with the rest of your boot arguments(for us it would be slide=0 when using 0x100000). if this value still gives you errors then you may proceed to the second-largest start value and so on.\n\nsometimes you may find that when you calculate slide that you receive super small values like slide=-0.379150390625, when this happens round this to slide=0.\n\nand for users who are having issues finding their slide value can also type $slide [insert largest #pages value] in the #sandbox channel on the r/hackintosh discord\n\n> but this is soooooo hard\n\nwell fret not, for there is a simple solution. after running memmap in the shell, run:\n\nshell> fs0: //replace with your usb\n\nfs0:\\> dir //to verify this is the right directory, if not try fs1 and so on\n\ndirectory of fs0:\\\n01/01/01 3:30p   efi\n\nfs0:\\> memmap > memmap.txt\n\n\nthis will add a memmap.txt file to the root of your efi, you can then proceed to drop it into the r/hackintosh discord in the #sandbox channel and type $slide [insert a link to memmap.txt]\n\n\n# using devirtualisemmio\n\ndevirtualisemmio is quite an interesting quirk, specifically in that it gets around a huge hurdle with many pci device systems like some z390 boards and virtually all hedt boards like x99 and x299. how it does this is it takes mmio regions and removes runtime attributes allowing them to be used as space for the kernel to sit comfortably, pair this with providecustomslide quirk means we can keep the security feature of slide while also getting a bootable machine.\n\nfor extremely problematic systems like threadripper trx40 19h, we need to find specific regions that aren't required for proper operation. this is where mmiowhitelist comes into play. note that whitelisting isn't required for most systems\n\nif you run the debug version of opencore with devirtualisemmio, you'll notice this in your logs:\n\n21:495 00:009 ocabc: mmio devirt start\n21:499 00:003 ocabc: mmio devirt 0x60000000 (0x10000 pages, 0x8000000000000001) skip 0\n21:503 00:003 ocabc: mmio devirt 0xfe000000 (0x11 pages, 0x8000000000000001) skip 0\n21:506 00:003 ocabc: mmio devirt 0xfec00000 (0x1 pages, 0x8000000000000001) skip 0\n21:510 00:003 ocabc: mmio devirt 0xfed00000 (0x1 pages, 0x8000000000000001) skip 0\n21:513 00:003 ocabc: mmio devirt 0xfee00000 (0x1 pages, 0x800000000000100d) skip 0\n21:516 00:003 ocabc: mmio devirt 0xff000000 (0x1000 pages, 0x800000000000100d) skip 0\n21:520 00:003 ocabc: mmio devirt end, saved 278608 kb\n\n\n * note: see opencore debugging on how to enable logging to file\n\nso we have 6 regions we need to go through and see which are bad, best idea is to block all mmio sections except one and try each region to get a list of good regions.\n\nnow lets take the above example and create our own mmiowhitelist, we'll need to first convert the address from hexadecimal to decimal:\n\n * mmio devirt 0x60000000 -> 1610612736\n * mmio devirt 0xfe000000 -> 4261412864\n * mmio devirt 0xfec00000 -> 4273995776\n * mmio devirt 0xfed00000 -> 4275044352\n * mmio devirt 0xfee00000 -> 4276092928\n * mmio devirt 0xff000000 -> 4278190080\n\nshould look something like this when done:\n\n",charsets:{}},{title:"Legacy Install",frontmatter:{search:!1},regularPath:"/extras/legacy.html",relativePath:"extras/legacy.md",key:"v-1bf0bb16",path:"/extras/legacy.html",lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:null,content:"# Legacy Install\n\nGuide has been moved into respective install guides: Installer Guides",normalizedContent:"# legacy install\n\nguide has been moved into respective install guides: installer guides",charsets:{}},{title:"macOS 12: Monterey",frontmatter:{search:!1},regularPath:"/extras/monterey.html",relativePath:"extras/monterey.md",key:"v-3c062454",path:"/extras/monterey.html",headers:[{level:2,title:"Table of Contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:650},{level:2,title:"Prerequisites",slug:"prerequisites",normalizedTitle:"prerequisites",charIndex:695},{level:3,title:"Supported SMBIOS",slug:"supported-smbios",normalizedTitle:"supported smbios",charIndex:714},{level:3,title:"Supported hardware",slug:"supported-hardware",normalizedTitle:"supported hardware",charIndex:736},{level:3,title:"AMD Patches",slug:"amd-patches",normalizedTitle:"amd patches",charIndex:760},{level:3,title:"Bluetooth",slug:"bluetooth",normalizedTitle:"bluetooth",charIndex:777},{level:3,title:"Ethernet",slug:"ethernet",normalizedTitle:"ethernet",charIndex:792},{level:3,title:"OTA Updates",slug:"ota-updates",normalizedTitle:"ota updates",charIndex:806},{level:3,title:"Troubleshooting",slug:"troubleshooting",normalizedTitle:"troubleshooting",charIndex:823}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Table of Contents Prerequisites Supported SMBIOS Supported hardware AMD Patches Bluetooth Ethernet OTA Updates Troubleshooting",content:"# macOS 12: Monterey\n\nReminder that Dortania and any tools mentioned in this guide are neither responsible for any corruption, data loss, or other ill effects that may arise from this guide, including ones caused by typos. You, the end user, must understand this is beta software on unsupported machines so do not pester developers for fixes. Dortania will not be accepting issues regarding this mini-guide except for typos and/or errors. This guide expects you to have a basic understanding of hackintoshing. If you are not familiar with it, we highly recommend you to wait until there is an easier and more straight-forward solution available.\n\n\n# Table of Contents\n\n\n\n * Table of Contents\n * Prerequisites\n   * Supported SMBIOS\n   * Supported hardware\n   * AMD Patches\n   * Bluetooth\n   * Ethernet\n   * OTA Updates\n   * Troubleshooting\n\n\n\n\n# Prerequisites\n\n\n# Supported SMBIOS\n\nSMBIOS dropped in Monterey:\n\n * iMac15,x and older\n * Macmini6,x and older\n * MacBook8,1 and older\n * MacBookAir6,x and older\n * MacBookPro11,3 and older\n   * MacBookPro11,4 and 11,5 are still supported\n\nIf your SMBIOS was supported in Big Sur and is not included above, you're good to go!\n\nSupported SMBIOS\n * iMac16,1 and newer\n * MacPro6,1 and newer\n * iMacPro1,1 and newer\n * Macmini7,1 and newer\n * MacBook9,1 and newer\n * MacBookAir7,1 and newer\n * MacBookPro11,4 and newer\n\nClick here for a full list of supported SMBIOS.\n\nFor those on Haswell or Ivy Bridge, here are some simple conversions:\n\n * Ivy Bridge desktops with dGPU should use MacPro6,1\n * Haswell desktops with dGPU should use iMac17,1\n * Haswell desktops with only an iGPU should use iMac16,2\n * Haswell laptops should use MacBookPro11,4 or MacBookPro11,5\n\n\n# Supported hardware\n\nDropped GPU Hardware:\n\n * Ivy Bridge (HD 4000 and HD 2500)\n * NVIDIA Kepler (GTX 6xx/7xx Cards)\n * You can use OpenCore-Legacy-Patcher to add back support\n   * No support is provided for Hackintoshes using OCLP!\n   * You will lose access to non-full updates (Small 1-3GB updates)\n   * Requires SIP, Apple Secure Boot, and AMFI disabled.\n\nHaswell iGPUs are still supported in Monterey\n\n * Macmini7,1 uses these drivers\n\n\n# AMD Patches\n\nFor those on AMD CPUs, make sure to update your kernel patches for Monterey. Don't forget to update your patches as well with the core count of your CPU. The patches which need to be edited are all named algrey - Force cpuid_cores_per_package, and you only need to change the Replace value. You should change:\n\n * B8000000 0000 => B8 <core count> 0000 0000\n * BA000000 0000 => BA <core count> 0000 0000\n * BA000000 0090 => BA <core count> 0000 0090\n\nWhere <core count> is replaced with the physical core count of your CPU in hexadecimal. For example, an 8-Core 5800X would have the new Replace value be:\n\n * B8 08 0000 0000\n * BA 08 0000 0000\n * BA 08 0000 0090\n\nCore Count => Hexadecimal Table\n\nCORE COUNT   HEXADECIMAL\n4 Core       04\n6 Core       06\n8 Core       08\n12 Core      0C\n16 Core      10\n24 Core      18\n32 Core      20\n64 Core      40\n\n\n# Bluetooth\n\nWARNING\n\nNote that all cards have not been fixed yet, and that bluetooth support is being worked on still.\n\nDo not be surprised if your card does not work, and please be patient!\n\nWith Monterey, Apple has completely rewritten the bluetooth stack. As of writing, many bluetooth devices do not work (legacy Broadcom and Intel). With the rewrite, injector kexts break bluetooth support in Monterey, though firmware uploader kexts are still needed. Make sure that you:\n\n * Disable injector kexts\n   * IntelBluetoothInjector.kext for Intel cards\n   * BrcmBluetoothInjector.kext for Broadcom cards\n   * If you still boot Big Sur or older, you can instead set the MaxKernel field to 20.99.9 for your injector kext in your config.plist.\n * Keep Firmware uploader kexts\n   * IntelBluetoothFirmware.kext for Intel\n   * BrcmPatchRAM2/3.kext + BrcmFirmwareData.kext for Broadcom\n * Add BlueToolFixup\n   * Needed for all non-native Bluetooth devices (Including Intel)\n   * If you still boot Big Sur or older, you can set the MinKernel field to 21.00.0 to prevent BlueToolFixup loading on older OSes.\n\nSee the below issues for more details:\n\n * BlueToolFixup PR\n * Monterey Beta 5+ issues\n\n\n# Ethernet\n\nIntel I211 chipset (typical for some AMD boards i.e. B450) no longer works with SmallTreeIntel82576 kext (network remains in Cable Unplugged status).\n\nAppleIGB confirmed working on I211 @ B450, but NICs on other boards might experience issues (please report if any)\n\nSee the below issues for more details:\n\n * Kext no longer working with MacOS 12.0\n\nThe boot-arg for enabling Intel I225-V ethernet controller has changed since macOS Monterey 12.3. Use e1000=0 instead of dk.e1000=0.\n\n\n# OTA Updates\n\nStarting with Monterey, updates are not delivered to T2 Macs which don't have Secure Boot enabled, and updates do not install properly if your SecureBootModel does not match your machine (ie. non-T2 SMBIOS using j137 or iMacPro1,1 using j160). Hackintoshes which use a T2 SMBIOS MUST have OpenCore 0.7.4+ with SecureBootModel set to Default. If your SMBIOS does not have a T2 chip, then either Default or Disabled is ok. More information is available on the Apple Secure Boot page.\n\nT2 SMBIOS List\n\nSMBIOS                           MINIMUM MACOS VERSION\niMacPro1,1 (December 2017)       10.13.2 (17C2111)\nMacBookPro15,1 (July 2018)       10.13.6 (17G2112)\nMacBookPro15,2 (July 2018)       10.13.6 (17G2112)\nMacmini8,1 (October 2018)        10.14 (18A2063)\nMacBookAir8,1 (October 2018)     10.14.1 (18B2084)\nMacBookPro15,3 (May 2019)        10.14.5 (18F132)\nMacBookPro15,4 (July 2019)       10.14.5 (18F2058)\nMacBookAir8,2 (July 2019)        10.14.5 (18F2058)\nMacBookPro16,1 (November 2019)   10.15.1 (19B2093)\nMacPro7,1 (December 2019)        10.15.1 (19B88)\nMacBookAir9,1 (March 2020)       10.15.3 (19D2064)\nMacBookPro16,2 (May 2020)        10.15.4 (19E2269)\nMacBookPro16,3 (May 2020)        10.15.4 (19E2265)\nMacBookPro16,4 (June 2020)       10.15.5 (19F96)\niMac20,1 (August 2020)           10.15.6 (19G2005)\niMac20,2 (August 2020)           10.15.6 (19G2005)\n\nNote: You do not need the -revsbvmm boot argument from RestrictEvents. Use OpenCore 0.7.4 or later.\n\n\n# Troubleshooting\n\n# No Updates\n\nMake sure that SIP is enabled. Two bits in SIP specifically cause issues:\n\n * CSR_ALLOW_APPLE_INTERNAL (Bit 4 = 0x10)\n   * Prevents updates appearing at all\n * CSR_ALLOW_UNAUTHENTICATED_ROOT (Bit 11 = 0x800)\n   * Prevents incremental OTA updates\n\nIf you want to still have SIP disabled, use either:\n\n * csrutil disable --no-internal in Recovery\n * A SIP value which does not include the two flags above\n\nTo enable SIP:\n\n * Set csr-active-config to <00 00 00 00> in your config.plist\n * Use csrutil clear in Recovery\n   * Can instead add csr-active-config to NVRAM->Delete or reset NVRAM",normalizedContent:"# macos 12: monterey\n\nreminder that dortania and any tools mentioned in this guide are neither responsible for any corruption, data loss, or other ill effects that may arise from this guide, including ones caused by typos. you, the end user, must understand this is beta software on unsupported machines so do not pester developers for fixes. dortania will not be accepting issues regarding this mini-guide except for typos and/or errors. this guide expects you to have a basic understanding of hackintoshing. if you are not familiar with it, we highly recommend you to wait until there is an easier and more straight-forward solution available.\n\n\n# table of contents\n\n\n\n * table of contents\n * prerequisites\n   * supported smbios\n   * supported hardware\n   * amd patches\n   * bluetooth\n   * ethernet\n   * ota updates\n   * troubleshooting\n\n\n\n\n# prerequisites\n\n\n# supported smbios\n\nsmbios dropped in monterey:\n\n * imac15,x and older\n * macmini6,x and older\n * macbook8,1 and older\n * macbookair6,x and older\n * macbookpro11,3 and older\n   * macbookpro11,4 and 11,5 are still supported\n\nif your smbios was supported in big sur and is not included above, you're good to go!\n\nsupported smbios\n * imac16,1 and newer\n * macpro6,1 and newer\n * imacpro1,1 and newer\n * macmini7,1 and newer\n * macbook9,1 and newer\n * macbookair7,1 and newer\n * macbookpro11,4 and newer\n\nclick here for a full list of supported smbios.\n\nfor those on haswell or ivy bridge, here are some simple conversions:\n\n * ivy bridge desktops with dgpu should use macpro6,1\n * haswell desktops with dgpu should use imac17,1\n * haswell desktops with only an igpu should use imac16,2\n * haswell laptops should use macbookpro11,4 or macbookpro11,5\n\n\n# supported hardware\n\ndropped gpu hardware:\n\n * ivy bridge (hd 4000 and hd 2500)\n * nvidia kepler (gtx 6xx/7xx cards)\n * you can use opencore-legacy-patcher to add back support\n   * no support is provided for hackintoshes using oclp!\n   * you will lose access to non-full updates (small 1-3gb updates)\n   * requires sip, apple secure boot, and amfi disabled.\n\nhaswell igpus are still supported in monterey\n\n * macmini7,1 uses these drivers\n\n\n# amd patches\n\nfor those on amd cpus, make sure to update your kernel patches for monterey. don't forget to update your patches as well with the core count of your cpu. the patches which need to be edited are all named algrey - force cpuid_cores_per_package, and you only need to change the replace value. you should change:\n\n * b8000000 0000 => b8 <core count> 0000 0000\n * ba000000 0000 => ba <core count> 0000 0000\n * ba000000 0090 => ba <core count> 0000 0090\n\nwhere <core count> is replaced with the physical core count of your cpu in hexadecimal. for example, an 8-core 5800x would have the new replace value be:\n\n * b8 08 0000 0000\n * ba 08 0000 0000\n * ba 08 0000 0090\n\ncore count => hexadecimal table\n\ncore count   hexadecimal\n4 core       04\n6 core       06\n8 core       08\n12 core      0c\n16 core      10\n24 core      18\n32 core      20\n64 core      40\n\n\n# bluetooth\n\nwarning\n\nnote that all cards have not been fixed yet, and that bluetooth support is being worked on still.\n\ndo not be surprised if your card does not work, and please be patient!\n\nwith monterey, apple has completely rewritten the bluetooth stack. as of writing, many bluetooth devices do not work (legacy broadcom and intel). with the rewrite, injector kexts break bluetooth support in monterey, though firmware uploader kexts are still needed. make sure that you:\n\n * disable injector kexts\n   * intelbluetoothinjector.kext for intel cards\n   * brcmbluetoothinjector.kext for broadcom cards\n   * if you still boot big sur or older, you can instead set the maxkernel field to 20.99.9 for your injector kext in your config.plist.\n * keep firmware uploader kexts\n   * intelbluetoothfirmware.kext for intel\n   * brcmpatchram2/3.kext + brcmfirmwaredata.kext for broadcom\n * add bluetoolfixup\n   * needed for all non-native bluetooth devices (including intel)\n   * if you still boot big sur or older, you can set the minkernel field to 21.00.0 to prevent bluetoolfixup loading on older oses.\n\nsee the below issues for more details:\n\n * bluetoolfixup pr\n * monterey beta 5+ issues\n\n\n# ethernet\n\nintel i211 chipset (typical for some amd boards i.e. b450) no longer works with smalltreeintel82576 kext (network remains in cable unplugged status).\n\nappleigb confirmed working on i211 @ b450, but nics on other boards might experience issues (please report if any)\n\nsee the below issues for more details:\n\n * kext no longer working with macos 12.0\n\nthe boot-arg for enabling intel i225-v ethernet controller has changed since macos monterey 12.3. use e1000=0 instead of dk.e1000=0.\n\n\n# ota updates\n\nstarting with monterey, updates are not delivered to t2 macs which don't have secure boot enabled, and updates do not install properly if your securebootmodel does not match your machine (ie. non-t2 smbios using j137 or imacpro1,1 using j160). hackintoshes which use a t2 smbios must have opencore 0.7.4+ with securebootmodel set to default. if your smbios does not have a t2 chip, then either default or disabled is ok. more information is available on the apple secure boot page.\n\nt2 smbios list\n\nsmbios                           minimum macos version\nimacpro1,1 (december 2017)       10.13.2 (17c2111)\nmacbookpro15,1 (july 2018)       10.13.6 (17g2112)\nmacbookpro15,2 (july 2018)       10.13.6 (17g2112)\nmacmini8,1 (october 2018)        10.14 (18a2063)\nmacbookair8,1 (october 2018)     10.14.1 (18b2084)\nmacbookpro15,3 (may 2019)        10.14.5 (18f132)\nmacbookpro15,4 (july 2019)       10.14.5 (18f2058)\nmacbookair8,2 (july 2019)        10.14.5 (18f2058)\nmacbookpro16,1 (november 2019)   10.15.1 (19b2093)\nmacpro7,1 (december 2019)        10.15.1 (19b88)\nmacbookair9,1 (march 2020)       10.15.3 (19d2064)\nmacbookpro16,2 (may 2020)        10.15.4 (19e2269)\nmacbookpro16,3 (may 2020)        10.15.4 (19e2265)\nmacbookpro16,4 (june 2020)       10.15.5 (19f96)\nimac20,1 (august 2020)           10.15.6 (19g2005)\nimac20,2 (august 2020)           10.15.6 (19g2005)\n\nnote: you do not need the -revsbvmm boot argument from restrictevents. use opencore 0.7.4 or later.\n\n\n# troubleshooting\n\n# no updates\n\nmake sure that sip is enabled. two bits in sip specifically cause issues:\n\n * csr_allow_apple_internal (bit 4 = 0x10)\n   * prevents updates appearing at all\n * csr_allow_unauthenticated_root (bit 11 = 0x800)\n   * prevents incremental ota updates\n\nif you want to still have sip disabled, use either:\n\n * csrutil disable --no-internal in recovery\n * a sip value which does not include the two flags above\n\nto enable sip:\n\n * set csr-active-config to <00 00 00 00> in your config.plist\n * use csrutil clear in recovery\n   * can instead add csr-active-config to nvram->delete or reset nvram",charsets:{}},{title:"Choosing the right SMBIOS",frontmatter:{},regularPath:"/extras/smbios-support.html",relativePath:"extras/smbios-support.md",key:"v-42cf4456",path:"/extras/smbios-support.html",headers:[{level:2,title:"How to decide",slug:"how-to-decide",normalizedTitle:"how to decide",charIndex:2483},{level:2,title:"macOS SMBIOS list",slug:"macos-smbios-list",normalizedTitle:"macos smbios list",charIndex:3801},{level:3,title:"MacBook",slug:"macbook",normalizedTitle:"macbook",charIndex:2392},{level:3,title:"MacBook Air",slug:"macbook-air",normalizedTitle:"macbook air",charIndex:4001},{level:3,title:"MacBook Pro",slug:"macbook-pro",normalizedTitle:"macbook pro",charIndex:4018},{level:3,title:"Mac Mini",slug:"mac-mini",normalizedTitle:"mac mini",charIndex:882},{level:3,title:"iMac",slug:"imac",normalizedTitle:"imac",charIndex:1598},{level:3,title:"iMac Pro",slug:"imac-pro",normalizedTitle:"imac pro",charIndex:1660},{level:3,title:"Mac Pro",slug:"mac-pro",normalizedTitle:"mac pro",charIndex:1661},{level:3,title:"Xserve",slug:"xserve",normalizedTitle:"xserve",charIndex:4086},{level:3,title:"Miscellaneous SMBIOS",slug:"miscellaneous-smbios",normalizedTitle:"miscellaneous smbios",charIndex:4098}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"How to decide macOS SMBIOS list MacBook MacBook Air MacBook Pro Mac Mini iMac iMac Pro Mac Pro Xserve Miscellaneous SMBIOS",content:'# Choosing the right SMBIOS\n\nWhen choosing the right SMBIOS for your machine, you\'ve gotta understand that it\'s more than just simple CPU match up. Many things can affect how your machine works as your SMBIOS determines CPU Power management, GPU profiles, USB maps and much more.\n\nThe main things to consider when selecting your SMBIOS:\n\n * CPU Type\n   \n   * Specifically mobile vs desktop vs server, as this can greatly affect sleep and overall system stability\n   * This also determines whether or not you can use Apple\'s XCPM and what profiles you get\n     * These 2 are mostly resolved with CPUFriend: Fixing Power management\n   * Note: AMD CPUs do not need to concern about this\n\n * GPU Type\n   \n   * Many things are affected here, like GPU power management (AGPM), display out support (AGDP), sleep (AGDC) and much more.\n     * This is especially relevant when we look to the Mac Mini SMBIOS that only uses mobile hardware, which doesn\'t match well with desktop hardware. This is the reason we highly discourage them unless used for Intel\'s NUC series and such which are based off mobile hardware.\n     * Laptops should also pay very close attention, as Apple always assumes that when a dGPU is present for the SMBIOS, all display outs will be routed through it. This can become an issue when an Optimus laptop has its external displays wired through the iGPU instead, causing black screen issues which would require more patching.\n   * CPUs without an iGPU need to pay very close attention, as features like Quick Look and such will be broken if the SMBIOS expects an iGPU (ie. Every single iMac SMBIOS)\n     * For these situations, look closely at the iMac Pro and Mac Pro SMBIOS\n   * DRM is also tied in here as well however this is mostly resolved here: Fixing DRM\n\n * OS Support\n   \n   * Mainly relevant for older hardware, as macOS may still have support for the CPU however no longer supports SMBIOS from that era\n     * Arrandale CPUs are a great example, as they still have OS support even in Big Sur (however no iGPU support past 10.13.6)\n\n * USB Devices\n   \n   * Certain SMBIOS will have their own USB map which may attach to your hardware causing USB issues.\n     * See here for more info: USB Mapping\n   * Also to note, Skylake+ SMBIOS will also require a USBX device to fix USB current output\n     * See here for more info: Fixing USB Power\n\nXCPM Supported SMBIOS\n\nSMBIOS\nMacBook8,1+\nMacBookAir6,x+\nMacBookPro11,x+\nMacmini7,1+\niMac14,x+\niMacPro1,1\nMacPro7,1+\n\n\n# How to decide\n\nGenerally our recommendations with SMBIOS is as follows:\n\n 1. Find the right CPU Generation and tier as closely as possible\n 2. Then match up with either iGPU only or dGPU SMBIOS\n 3. Finally decide on misc things (like exact GPU and CPU)\n\nAnd there\'s also some special notes with SMBIOS:\n\n * iMacPro1,1 and MacPro7,1 are the only 2 SMBIOS that will allow for dGPU to handle all the workload including background rendering and other tasks that the iGPU would handle\n   * We only recommend this SMBIOS if you require this, however you\'ll likely need to fix power management as sleep may break if your hardware isn\'t of this class (ie. HEDT/Server/AMD): Fixing Power management\n   * Note that this requires a Polaris, Vega or Navi GPU to work properly.\n * iMac20,2 is a custom SMBIOS meant only for Apple\'s custom i9-10910 CPU, so unless you have an i9-10900K we recommend using iMac20,1\n * Mac Mini SMBIOS should be avoided unless you\'re running mobile hardware without a built-in display\n   * Intel NUCs are the ideal hardware for this SMBIOS\n * iGPU-less CPUs MUST pay very close attention when selecting a SMBIOS, as Apple always assumes the iGPU is present on the iMac SMBIOS, so you will need to find a SMBIOS without this requirement like iMac Pro or Mac Pro.\n   * This also applies to AMD CPUs\n\n\n# macOS SMBIOS list\n\nThis is a full list of all of the SMBIOS Apple has ever supported in macOS with extra information like CPU and GPU types.\n\n\n\n * How to decide\n * macOS SMBIOS list\n   * MacBook\n   * MacBook Air\n   * MacBook Pro\n   * Mac Mini\n   * iMac\n   * iMac Pro\n   * Mac Pro\n   * Xserve\n   * Miscellaneous SMBIOS\n\n\n\nInfo pulled from both EveryMac and OpenCorePkg\n\nSpecial Note:\n\n * The letter beside each CPU Family is the tier of CPU, see below table for more info:\n\nLETTER         TYPE\nY              Mobile (Low end)\nU, M           Mobile (Mid tier)\nH, QM, HQ      Mobile (High End)\nS              Desktop\nEP, SP, W, X   HEDT/Server\n\n\n# MacBook\n\nSMBIOS        CPU FAMILY     GPU             BOARD-ID               INITIAL SUPPORT     LAST SUPPORTED VERSION\nMacBook1,1    Yonah(M)       GMA 950         Mac-F4208CC8           10.4.6 (8I2025)     10.6.8\nMacBook2,1    Merom(M)       GMA 950         Mac-F4208CA9           10.4.8 (8N1108)     10.7.5\nMacBook3,1    Merom(M)       GMA X3100       Mac-F22788C8           10.5 (9A3111)\nMacBook4,1    Penryn(M)      GMA X3100       Mac-F22788A9           10.5.2 (9C2015)\nMacBook5,1    Penryn(M)      GeForce 9400M   Mac-F42D89C8           10.5.5 (9F2114)     10.11.6\nMacBook5,2    Penryn(M)      GeForce 9400M   Mac-F22788AA           10.5.6 (9G2110)\nMacBook6,1    Penryn(M)      GeForce 9400M   Mac-F22C8AC8           10.6.1 (10A2047)    10.13.6\nMacBook7,1    Penryn(M)      GeForce 320M    Mac-F22C89C8           10.6.3 (10D2162)\nMacBook8,1    Broadwell(Y)   HD 5300         Mac-BE0E8AC46FE800CC   10.10.2 (14C2061)   11.7.x\nMacBook9,1    Skylake(Y)     HD 515          Mac-9AE82516C7C6B903   10.11.4 (15E2066)   12.6.x\nMacBook10,1   Kaby Lake(Y)   HD 615          Mac-EE2EBD4B90B839A8   10.12.5 (16F207)    Current\n\n\n# MacBook Air\n\nSMBIOS          CPU FAMILY        GPU                     BOARD-ID               INITIAL SUPPORT     LAST SUPPORTED VERSION\nMacBookAir1,1   Merom(M)          GMA X3100 (11")         Mac-F42C8CC8           10.5.1 (9B2324)     10.7.5\nMacBookAir2,1   Penryn(M)         GeForce 9400M (13")     Mac-F42D88C8           10.5.5              10.11.6\nMacBookAir3,1   Penryn(M)         GeForce 320M (11")      Mac-942452F5819B1C1B   10.6.4 (10F3061)    10.13.6\nMacBookAir3,2   Penryn(M)         GeForce 320M (13")      Mac-942C5DF58193131B   10.6.4 (10F3061)\nMacBookAir4,1   Sandy Bridge(M)   HD 3000 (11")           Mac-C08A6BB70A942AC2   10.7 (11A2063)\nMacBookAir4,2   Sandy Bridge(M)   HD 3000 (13")           Mac-742912EFDBEE19B3   10.7 (11A2063)\nMacBookAir5,1   Ivy Bridge(U)     HD 4000 (11")           Mac-66F35F19FE2A0D05   10.7.4 (11E2520)    10.15.7\nMacBookAir5,2   Ivy Bridge(U)     HD 4000 (13")           Mac-2E6FAB96566FE58C   10.8.2 (12C2034)\nMacBookAir6,1   Haswell(U)        HD 5000 (11")           Mac-35C1E88140C3E6CF   10.8.4 (12E3067)    11.7.x\nMacBookAir6,2   Haswell(U)        HD 5000 (13")           Mac-7DF21CB3ED6977E5   10.8.4 (12E3067)\nMacBookAir7,1   Broadwell(U)      HD 6000 (11")           Mac-9F18E312C5C2BF0B   10.10.2 (14C2507)   12.6.x\nMacBookAir7,2   Broadwell(U)      HD 6000 (13")           Mac-937CB26E2E02BB01   10.10.2 (14C2507)\nMacBookAir8,1   Amber Lake(Y)     UHD 617 (13")           Mac-827FAC58A8FDFA22   10.14.1 (18B2084)   Current\nMacBookAir8,2   Amber Lake(Y)     UHD 617 (13")           Mac-226CB3C6A851A671   10.14.5 (18F2058)\nMacBookAir9,1   Ice Lake(Y)       Iris Plus G4/G7 (13")   Mac-0CFF9C7C2B63DF8D   10.15.4 (19E287)\n\n\n# MacBook Pro\n\nSMBIOS           CPU FAMILY         GPU                                   BOARD-ID               INITIAL SUPPORT     LAST SUPPORTED VERSION\nMacBookPro1,1    Yonah(M)           Radeon X1600 (15")                    Mac-F425BEC8           10.4.5 (8G1453)     10.6.8\nMacBookPro1,2    Yonah(M)           Radeon X1600 (17")                    Mac-F42DBEC8           10.4.6 (8I2032)\nMacBookPro2,1    Merom(M)           Radeon X1600 (15")                    Mac-F42189C8           10.4.8 (8N1051)     10.7.5\nMacBookPro2,2    Merom(M)           Radeon X1600 (17")                    Mac-F42187C8           10.4.8 (8N1037)\nMacBookPro3,1    Merom(M)           GeForce 8600M GT (15/17")             Mac-F4238BC8           10.4.9 (8Q1058)     10.11.6\nMacBookPro4,1    Penryn(M)          GeForce 8600MG GT (17")               Mac-F42C89C8           10.5.2 (9C2018)\nMacBookPro5,1    Penryn(M)          GeForce 9400M/9600M GT (15")          Mac-F42D86C8           10.5.5 (9F2114)\nMacBookPro5,2    Penryn(M)          GeForce 9400M/9600M GT (17")          Mac-F2268EC8           10.5.6 (9G2141)\nMacBookPro5,3    Penryn(M)          GeForce 9400M/9600M GT (15")          Mac-F22587C8           10.5.7 (9J3050)\nMacBookPro5,4    Penryn(M)          GeForce 9400M/9600M GT (15")          Mac-F22587A1           10.5.7 (9J3050)\nMacBookPro5,5    Penryn(M)          GeForce 9400M/9600M GT (13")          Mac-F2268AC8           10.5.7 (9J3050)\nMacBookPro6,1    Arrandale(M)       HD Graphics/GeForce GT 330M (17")     Mac-F22589C8           10.6.3 (10D2063a)   10.13.6\nMacBookPro6,2    Arrandale(M)       HD Graphics/GeForce GT 330M (15")     Mac-F22586C8           10.6.3 (10D2094)    10.13.6\nMacBookPro7,1    Penryn(M)          GeForce 320M (13")                    Mac-F222BEC8           10.6.3 (10D2125)\nMacBookPro8,1    Sandy Bridge(M)    HD 3000 (13")                         Mac-94245B3640C91C81   10.6.6 (10J3210)\nMacBookPro8,2    Sandy Bridge(QM)   HD 3000/Radeon HD 6490M (15")         Mac-94245A3940C91C80   10.6.6 (10J3210)\nMacBookPro8,3    Sandy Bridge(QM)   HD 3000/Radeon HD 6750M (17")         Mac-942459F5819B171B   10.6.6 (10J3210)\nMacBookPro9,1    Ivy Bridge(QM)     HD 4000/GeForce GT 650M (15")         Mac-4B7AC7E43945597E   10.7.3 (11D2097)    10.15.7\nMacBookPro9,2    Ivy Bridge(M)      HD 4000 (13")                         Mac-6F01561E16C75D06   10.7.3 (11D2515)\nMacBookPro10,1   Ivy Bridge(QM)     HD 4000/GeForce GT 650M (15")         Mac-C3EC7CD22292981F   10.7.4 (11E2068)\nMacBookPro10,2   Ivy Bridge(M)      HD 4000 (13")                         Mac-AFD8A9D944EA4843   10.8.2 (12C2034)\nMacBookPro11,1   Haswell(U)         Iris 5100 (13")                       Mac-189A3D4F975D5FFC   10.9 (13A2093)      11.7.x\nMacBookPro11,2   Haswell(HQ)        Iris Pro 5200 (15")                   Mac-3CBD00234E554E41   10.9 (13A3017)\nMacBookPro11,3   Haswell(HQ)        Iris Pro 5200/GeForce GT 750M (15")   Mac-2BD1B31983FE1663   10.9 (13A3017)\nMacBookPro11,4   Haswell(HQ)        Iris Pro 5200 (15")                   Mac-06F11FD93F0323C5   10.10.3 (14D2134)   12.6.x\nMacBookPro11,5   Haswell(HQ)        Iris Pro 5200/Radeon R9 M370X (15")   Mac-06F11F11946D27C5   10.10.3 (14D2134)\nMacBookPro12,1   Broadwell(U)       Iris 6100 (13")                       Mac-E43C1C25D4880AD6   10.10.2 (14C2507)\nMacBookPro13,1   Skylake(U)         Iris 540 (13")                        Mac-473D31EABEB93F9B   10.12 (16A2323a)\nMacBookPro13,2   Skylake(U)         Iris 550 (13")                        Mac-66E35819EE2D0D05   10.12.1 (16B2657)\nMacBookPro13,3   Skylake(H)         HD 530/Radeon Pro 450 (15")           Mac-A5C67F76ED83108C   10.12.1 (16B2659)\nMacBookPro14,1   Kaby Lake(U)       Iris Plus 640 (13")                   Mac-B4831CEBD52A0C4C   10.12.5 (16F2073)   Current\nMacBookPro14,2   Kaby Lake(U)       Iris Plus 650 (13")                   Mac-CAD6701F7CEA0921   10.12.5 (16F2073)\nMacBookPro14,3   Kaby Lake(H)       HD 630/Radeon Pro 555 (15")           Mac-551B86E5744E2388   10.12.5 (16F2073)\nMacBookPro15,1   Coffee Lake(H)     UHD 630/Radeon Pro 555X (15")         Mac-937A206F2EE63C01   10.13.6 (17G2112)\nMacBookPro15,2   Coffee Lake(U)     Iris Plus 655 (13")                   Mac-827FB448E656EC26   10.13.6 (17G2112)\nMacBookPro15,3   Coffee Lake(H)     UHD 630/Radeon Pro Vega 16 (15")      Mac-1E7E29AD0135F9BC   10.14.1 (18B3094)\nMacBookPro15,4   Coffee Lake(U)     Iris Plus 645 (13")                   Mac-53FDB3D8DB8CA971   10.14.5 (18F2058)\nMacBookPro16,1   Coffee Lake(H)     UHD 630/Radeon Pro 5300 (16")         Mac-E1008331FDC96864   10.15.1 (19B2093)\nMacBookPro16,2   Ice Lake(U)        Iris Plus G4/G7 (13")                 Mac-5F9802EFE386AA28   10.15.4 (19E2269)\nMacBookPro16,3   Coffee Lake(U)     Iris Plus 645 (13")                   Mac-E7203C0F68AA0004   10.15.4 (19E2269)\nMacBookPro16,4   Coffee Lake(H)     UHD 630/Radeon Pro 5600M (16")        Mac-A61BADE1FDAD7B05   10.15.1 (19B2093)\n\n\n# Mac Mini\n\nSMBIOS       CPU FAMILY         GPU                    BOARD-ID               INITIAL SUPPORT    LAST SUPPORTED VERSION\nMacmini1,1   Yonah(M)           GMA 950                Mac-F4208EC8           10.4.5 (8H1619)    10.6.8\nMacmini2,1   Merom(M)           GMA 950                Mac-F4208EAA           10.4.10 (8R3014)   10.7.5\nMacmini3,1   Penryn(M)          GeForce 9400M          Mac-F22C86C8           10.5.6 (9G2030)    10.11.6\nMacmini4,1   Penryn(M)          GeForce 320M           Mac-F2208EC8           10.6.4 (10F2025)   10.13.6\nMacmini5,1   Sandy Bridge(M)    HD 3000                Mac-8ED6AF5B48C039E1   10.7 (11A2061)\nMacmini5,2   Sandy Bridge(M)    Radeon HD 6630M        Mac-4BC72D62AD45599E   10.7 (11A2061)\nMacmini5,3   Sandy Bridge(QM)   HD 3000                Mac-7BA5B2794B2CDB12   10.7 (11A2061)\nMacmini6,1   Ivy Bridge(M)      HD 4000                Mac-031AEE4D24BFF0B1   10.8.1 (12B2080)   10.15.7\nMacmini6,2   Ivy Bridge(QM)     HD 4000                Mac-F65AE981FFA204ED   10.8.1 (12B2080)\nMacmini7,1   Haswell(U)         HD 5000 or Iris 5100   Mac-35C5E08120C7EEAF   10.10 (14A389)     12.6.x\nMacmini8,1   Coffee Lake(H)     UHD 630                Mac-7BA5B2DFE22DDD8C   10.14 (18A2063)    Current\n\n\n# iMac\n\nSMBIOS     CPU FAMILY        GPU                        BOARD-ID                                      INITIAL SUPPORT     LAST SUPPORTED VERSION\niMac4,1    Yonah(M)          Radeon X1600               Mac-F42786C8                                  10.4.4 (8G1165)     10.6.8\niMac4,2    Yonah(M)          GMA 950                    Mac-F4218EC8                                  10.4.7 (8I2057)\niMac5,1    Merom(M)          Radeon X1600               Mac-F4228EC8                                  10.4.7 (8K1106)     10.7.5\niMac5,2    Merom(M)          GMA 950                    Mac-F4218EC8                                  10.4.7 (8K1106)\niMac6,1    Merom(M)          GeForce 7300GT             Mac-F4218FC8                                  10.4.7 (8K1123)\niMac7,1    Merom(M)          Radeon HD 2400 XT          Mac-F42386C8                                  10.4.10 (8R4031)    10.11.6\niMac8,1    Penryn(M)         Radeon HD 2400 XT          Mac-F227BEC8                                  10.5.2 (9C2028)\niMac9,1    Penryn(M)         GeForce 9400M              Mac-F2218FA9                                  10.5.6 (9G2030)\niMac10,1   Wolfdale(S)       GeForce 9400M              Mac-F221DCC8                                  10.6.1 (10A2155)    10.13.6\niMac10,1   Wolfdale(S)       Radeon HD 4670             Mac-F2268CC8                                  10.6.1 (10A2155)\niMac11,1   Lynnfield(S)      Radeon HD 4850             Mac-F2268DAE                                  10.6.2 (10C2234)\niMac11,2   Clarkdale(S)      Radeon HD 4670             Mac-F2238AC8                                  10.6.3 (10D2322a)\niMac11,3   Clarkdale(S)      Radeon HD 5670             Mac-F2238BAE                                  10.6.3 (10D2322a)\niMac12,1   Sandy Bridge(S)   Radeon HD 6750M            Mac-942B5BF58194151B                          10.6.6 (10J4026)\niMac12,2   Sandy Bridge(S)   Radeon HD 6770M            Mac-942B59F58194171B                          10.6.6 (10J4026)\niMac13,1   Ivy Bridge(S)     GeForce GT 640M            Mac-00BE6ED71E35EB86                          10.8.2 (12C3104)    10.15.7\niMac13,1   Ivy Bridge(S)     HD 4000                    Mac-00BE6ED71E35EB86                          10.8.2 (12C3104)\niMac13,2   Ivy Bridge(S)     GeForce GTX 660M           Mac-FC02E91DDD3FA6A4                          10.8.2 (12C2037)\niMac13,3   Ivy Bridge(S)     HD 4000                    Mac-7DF2A3B5E5D671ED                          10.8.2 (12C2037)\niMac14,1   Haswell(S)        Iris Pro 5200              Mac-031B6874CF7F642A                          10.8.4 (12E4022)\niMac14,2   Haswell(S)        GeForce GT 750M            Mac-27ADBB7B4CEE8E61                          10.8.4 (12E4022)\niMac14,3   Haswell(S)        GeForce GT 755M            Mac-77EB7D7DAF985301                          10.8.4 (12E4022)\niMac14,4   Haswell(U)        HD 5000                    Mac-81E3E92DD6088272                          10.9.3 (13D2061)    11.7.x\niMac15,1   Haswell(S)        Radeon R9 M290X            Mac-42FD25EABCABB274                          10.10 (14A389)\niMac16,1   Broadwell(U)      HD 6000 or Iris Pro 6200   Mac-A369DDC4E67F1C45                          10.11 (15A2301)     12.6.x\niMac16,2   Broadwell(S)      Iris Pro 6200              Mac-FFE5EF870D7BA81A                          10.11 (15A2301)\niMac17,1   Skylake(S)        Radeon R9 M380             Mac-DB15BD556843C820, Mac-65CE76090165799A,   10.11 (15A4310)\n                                                        Mac-B809C3757DA9BB8D\niMac18,1   Kaby Lake(U)      Iris Plus 640              Mac-4B682C642B45593E                          10.12.4 (16E2193)   Current\niMac18,2   Kaby Lake(S)      Radeon Pro 555             Mac-77F17D7DA9285301                          10.12.4 (16F2073)\niMac18,3                     Radeon Pro 570             Mac-BE088AF8C5EB4FA2                          10.12.4 (16F2073)\niMac19,1   Coffee Lake(S)    Radeon Pro 570X            Mac-AA95B1DDAB278B95                          10.14.4 (18E226)\niMac19,2                     Radeon Pro 555X            Mac-63001698E7A34814                          10.14.4 (18E226)\niMac20,1   Comet Lake(S)     Radeon Pro 5300            Mac-CFF7D910A743CAAF                          10.15.6 (19G2005)\niMac20,2                                                Mac-AF89B6D9451A490B                          10.15.6 (19G2005)\n\n\n# iMac Pro\n\nSMBIOS       CPU FAMILY   GPU       BOARD-ID               INITIAL SUPPORT     LAST SUPPORTED VERSION\niMacPro1,1   Skylake-W    Vega 56   Mac-7BA5B2D9E42DDD94   10.13.2 (17C2111)   Current\n\n\n# Mac Pro\n\nSMBIOS      CPU FAMILY       GPU                 BOARD-ID               INITIAL SUPPORT    LAST SUPPORTED VERSION\nMacPro1,1   Woodcrest        GeForce 7300 GT     Mac-F4208DC8           10.4.7 (8K1079)    10.7.5\nMacPro2,1   Clovertown                           Mac-F4208DA9           10.4.9 (8P4037)\nMacPro3,1   Harpertown       Radeon HD 2600 XT   Mac-F42C88C8           10.5.1 (9B2117)    10.11.6\nMacPro4,1   Nehalem          GeForce GT 120      Mac-F221BEC8           10.5.6 (9G3553)\nMacPro5,1   Nehalem          Radeon HD 5770      Mac-F221BEC8           10.6.4 (10F2521)   10.14.6\nMacPro5,1   Westmere EP                          Mac-F221BEC8           10.6.4 (10F2521)\nMacPro6,1   Ivy Bridge EP    FirePro D300        Mac-F60DEB81FF30ACF6   10.9.1 (13B4116)   12.6.x\nMacPro7,1   Cascade Lake-W   Radeon Pro 580X     Mac-27AD2F918AE68F61   10.15.0 (19A583)   Current\n\n\n# Xserve\n\nSMBIOS      CPU FAMILY   GPU              BOARD-ID       INITIAL SUPPORT          LAST SUPPORTED VERSION\nXserve1,1   Woodcrest    Radeon X1300     Mac-F4208AC8   Server 10.4.8 (8N1215)   Server 10.7.5\nXserve2,1   Harpertown                    Mac-F42289C8   Server 10.5 (9B2117)\nXserve3,1   Nehalem EP   GeForce GT 120   Mac-F223BEC8   Server 10.5.6            10.11.6\n\n\n# Miscellaneous SMBIOS\n\nAll models listed below are not supported by OpenCore however are documented here for ease of reference.\n\n * Apple Development Platforms\n   * Developer Transition Kit\n * Apple Silicon\n   * Mac Mini\n   * MacBook Air\n   * MacBook Pro\n   * iMac\n * PowerPC\n   * PowerBook\n   * iBook\n   * PowerMac\n   * iMac\n   * eMac\n   * Cube\n   * Mac Mini\n   * Xserve\n\nApple Silicon Notes\n\nExtra information regarding Apple\'s CPUs:\n\n * They do not rely on ACPI or UEFI\n * They do not include DeviceProperties in their firmware\n * They use iPad8,6 for iOS/iPadOS applications\n * board-id is only applicable with Intel Macs, PowerPC and ARM do not have this entry\n\n# Developer Transition Kit\n\nSMBIOS   YEAR       CPU FAMILY       PRODUCT IDENTIFIER   INITIAL SUPPORT\nADP2,1   Mid 2005   Intel Prescott   N/A                  10.4.1 (8B1025)\nADP3,2   Mid 2020   Apple A12Z       J273                 11.0.0 (20A5299w)\n\n# Mac Mini - Apple Silicon\n\nSMBIOS       YEAR        CPU FAMILY   PRODUCT IDENTIFIER   INITIAL SUPPORT\nMacmini9,1   Late 2020   Apple M1     J274                 11.0.0 (20A2411)\n\n# MacBook Air - Apple Silicon\n\nSMBIOS           YEAR        CPU FAMILY   PRODUCT IDENTIFIER   INITIAL SUPPORT\nMacBookAir10,1   Late 2020   Apple M1     J313                 11.0.0 (20A2411)\n\n# MacBook Pro - Apple Silicon\n\nSMBIOS           YEAR        CPU FAMILY   PRODUCT IDENTIFIER   INITIAL SUPPORT\nMacBookPro17,1   Late 2020   Apple M1     J293                 11.0.0 (20A2411)\n\n# iMac - Apple Silicon\n\nSMBIOS     YEAR       CPU FAMILY   PRODUCT IDENTIFIER   INITIAL SUPPORT\niMac21,1   Mid 2021   Apple M1     J256                 11.3 (20E232?)\niMac21,2   Mid 2021   Apple M1     J257                 11.3 (20E232?)\n\nPower PC SMBIOS Table\n\n\n# PowerBook - PowerPC\n\nSMBIOS         YEAR         CPU FAMILY           INITIAL SUPPORT   LAST SUPPORTED VERSION\nPowerBook1,1   Mid-1999     PowerPC 750 (G3)     8.6               10.3.9\nPowerBook3,1   Early 2000                        9.0.2             10.4.11\nPowerBook3,2   Early 2001   PowerPC 7410 (G4)    9.1\nPowerBook3,3   Late 2001    PowerPC 7440 (G4)    9.2.1\nPowerBook3,4   Mid-2002     PowerPC 7451 (G4)    9.2.2\nPowerBook3,5   Late 2002    PowerPC 7455 (G4)                      10.5.8\nPowerBook5,1   Early 2003                        10.2.4\nPowerBook5,2   Late 2003    PowerPC 7447 (G4)    10.2.7\nPowerBook5,3\nPowerBook5,4   Mid-2004     PowerPC 7447a (G4)   10.3.3\nPowerBook5,5\nPowerBook5,6   Early 2005   10.3.7\nPowerBook5,7\nPowerBook5,8   Late 2005                         10.4.2\nPowerBook5,9\nPowerBook6,1   Early 2003   PowerPC 7455 (G4)    10.2.3\nPowerBook6,2\nPowerBook6,4   Mid-2004     PowerPC 7447a (G4)   10.2.7\nPowerBook6,8   Early 2005                        10.3.7\n\n# iBook - PowerPC\n\nSMBIOS         YEAR         CPU FAMILY           INITIAL SUPPORT   LAST SUPPORTED VERSION\nPowerBook2,1   Mid-1999     PowerPC 750 (G3)     8.6               10.3.9\nPowerBook2,2   Late 2000    PowerPC 750cx (G3)   9.0.4             10.4.11\nPowerBook4,1   Late 2002    PowerPC 7455 (G4)    9.2.2             10.5.8\nPowerBook4,2   Early 2002   PowerPC 750cx (G3)   9.2.1             10.4.11\nPowerBook4,3   Mid-2002     PowerPC 750fx (G3)   9.2.2\nPowerBook6,3   Late 2003    PowerPC 7457 (G4)    10.3 (7B85)\nPowerBook6,5   Mid-2004     PowerPC 7447a (G4)   10.3.3 (7G51)     10.5.8\nPowerBook6,7   Mid-2005                          10.4.2 (8D37)\n\n# PowerMac - PowerPC\n\nSMBIOS         YEAR         CPU FAMILY           INITIAL SUPPORT   LAST SUPPORTED VERSION\nPowerMac1,1    Early 1999   PowerPC 750 (G3)     8.5.1             10.4.11\nPowerMac1,2    Mid 1999     PowerPC 7400 (G4)    8.6\nPowerMac3,1\nPowerMac3,2    Mid-2001     PowerPC 7450 (G4)    9.2\nPowerMac3,3    Mid-2000     PowerPC 7400 (G4)    9.0.4\nPowerMac3,4    Early 2001   PowerPC 7410 (G4)    9.1\nPowerMac3,5    Mid-2001     PowerPC 7450 (G4)    9.2               10.5.8\nPowerMac3,6    Mid-2002     PowerPC 7455 (G4)    9.2.2\nPowerMac7,2    Mid-2003     PowerPC 970 (G5)     10.2.7\nPowerMac7,3    Early-2005   PowerPC 970fx (G5)   10.4\nPowerMac9,1    Late 2004                         10.3.5 (8E90)\nPowerMac11,2   Late 2005    PowerPC 970MP (G5)   10.4.2\n\n# iMac - PowerPC\n\nSMBIOS         YEAR         CPU FAMILY           INITIAL SUPPORT   LAST SUPPORTED VERSION\niMac,1         Mid 1998     PowerPC 750 (G3)     8.1               10.3.9\nPowerMac2,1    Late 1999                         8.6               10.4.11\nPowerMac2,2    Mid 2000                          9.0.4             10.3.9\nPowerMac4,1    Early 2001   PowerPC 750cx (G3)   9.1               10.4.11\nPowerMac4,2    Early 2002   PowerPC 7441 (G4)    9.2.2\nPowerMac4,5    Mid-2002     PowerPC 7445 (G4)    9.2.2\nPowerMac6,1    Early 2003                        10.2.3            10.5.8\nPowerMac6,3    Late 2003                         10.3.1\nPowerMac8,1    Mid-2004     PowerPC 970 (G5)     10.3.5 (7P35)\nPowerMac8,2    Mid-2005                          10.4 (8A428)\nPowerMac12,1   Late 2005    PowerPC 970fx (G5)   10.4.2 (8E102)\n\n# eMac - PowerPC\n\nSMBIOS        YEAR         CPU FAMILY           INITIAL SUPPORT   LAST SUPPORTED VERSION\nPowerMac4,4   Mid-2003     PowerPC 7445 (G4     9.2.2             10.5.8\nPowerMac6,4   Early 2004   PowerPC 7447a (G4)   10.3.3\n\n# Cube - PowerPC\n\nSMBIOS        YEAR       CPU FAMILY          INITIAL SUPPORT   LAST SUPPORTED VERSION\nPowerMac5,1   Mid-2000   PowerPC 7400 (G4)   9.0.4             10.4.11\nPowerMac5,2\n\n# Mac Mini - PowerPC\n\nSMBIOS         YEAR         CPU FAMILY           INITIAL SUPPORT   LAST SUPPORTED VERSION\nPowerMac10,1   Early 2005   PowerPC 7447a (G4)   10.3.7 (7T11)     10.5.8\nPowerMac10,2   Late 2005                         10.4.2 (8D40)\n\n# Xserve - PowerPC\n\nSMBIOS       YEAR         CPU FAMILY           INITIAL SUPPORT   LAST SUPPORTED VERSION\nRackMac1,1   Mid-2002     PowerPC 7455 (G4)    10.1.5 (6C115)    Server 10.5.8\nRackMac1,2   Early 2003                        10.2.4 (6I34)\nRackMac3,1   Early 2004   PowerPC 970fx (G5)   10.3.0',normalizedContent:'# choosing the right smbios\n\nwhen choosing the right smbios for your machine, you\'ve gotta understand that it\'s more than just simple cpu match up. many things can affect how your machine works as your smbios determines cpu power management, gpu profiles, usb maps and much more.\n\nthe main things to consider when selecting your smbios:\n\n * cpu type\n   \n   * specifically mobile vs desktop vs server, as this can greatly affect sleep and overall system stability\n   * this also determines whether or not you can use apple\'s xcpm and what profiles you get\n     * these 2 are mostly resolved with cpufriend: fixing power management\n   * note: amd cpus do not need to concern about this\n\n * gpu type\n   \n   * many things are affected here, like gpu power management (agpm), display out support (agdp), sleep (agdc) and much more.\n     * this is especially relevant when we look to the mac mini smbios that only uses mobile hardware, which doesn\'t match well with desktop hardware. this is the reason we highly discourage them unless used for intel\'s nuc series and such which are based off mobile hardware.\n     * laptops should also pay very close attention, as apple always assumes that when a dgpu is present for the smbios, all display outs will be routed through it. this can become an issue when an optimus laptop has its external displays wired through the igpu instead, causing black screen issues which would require more patching.\n   * cpus without an igpu need to pay very close attention, as features like quick look and such will be broken if the smbios expects an igpu (ie. every single imac smbios)\n     * for these situations, look closely at the imac pro and mac pro smbios\n   * drm is also tied in here as well however this is mostly resolved here: fixing drm\n\n * os support\n   \n   * mainly relevant for older hardware, as macos may still have support for the cpu however no longer supports smbios from that era\n     * arrandale cpus are a great example, as they still have os support even in big sur (however no igpu support past 10.13.6)\n\n * usb devices\n   \n   * certain smbios will have their own usb map which may attach to your hardware causing usb issues.\n     * see here for more info: usb mapping\n   * also to note, skylake+ smbios will also require a usbx device to fix usb current output\n     * see here for more info: fixing usb power\n\nxcpm supported smbios\n\nsmbios\nmacbook8,1+\nmacbookair6,x+\nmacbookpro11,x+\nmacmini7,1+\nimac14,x+\nimacpro1,1\nmacpro7,1+\n\n\n# how to decide\n\ngenerally our recommendations with smbios is as follows:\n\n 1. find the right cpu generation and tier as closely as possible\n 2. then match up with either igpu only or dgpu smbios\n 3. finally decide on misc things (like exact gpu and cpu)\n\nand there\'s also some special notes with smbios:\n\n * imacpro1,1 and macpro7,1 are the only 2 smbios that will allow for dgpu to handle all the workload including background rendering and other tasks that the igpu would handle\n   * we only recommend this smbios if you require this, however you\'ll likely need to fix power management as sleep may break if your hardware isn\'t of this class (ie. hedt/server/amd): fixing power management\n   * note that this requires a polaris, vega or navi gpu to work properly.\n * imac20,2 is a custom smbios meant only for apple\'s custom i9-10910 cpu, so unless you have an i9-10900k we recommend using imac20,1\n * mac mini smbios should be avoided unless you\'re running mobile hardware without a built-in display\n   * intel nucs are the ideal hardware for this smbios\n * igpu-less cpus must pay very close attention when selecting a smbios, as apple always assumes the igpu is present on the imac smbios, so you will need to find a smbios without this requirement like imac pro or mac pro.\n   * this also applies to amd cpus\n\n\n# macos smbios list\n\nthis is a full list of all of the smbios apple has ever supported in macos with extra information like cpu and gpu types.\n\n\n\n * how to decide\n * macos smbios list\n   * macbook\n   * macbook air\n   * macbook pro\n   * mac mini\n   * imac\n   * imac pro\n   * mac pro\n   * xserve\n   * miscellaneous smbios\n\n\n\ninfo pulled from both everymac and opencorepkg\n\nspecial note:\n\n * the letter beside each cpu family is the tier of cpu, see below table for more info:\n\nletter         type\ny              mobile (low end)\nu, m           mobile (mid tier)\nh, qm, hq      mobile (high end)\ns              desktop\nep, sp, w, x   hedt/server\n\n\n# macbook\n\nsmbios        cpu family     gpu             board-id               initial support     last supported version\nmacbook1,1    yonah(m)       gma 950         mac-f4208cc8           10.4.6 (8i2025)     10.6.8\nmacbook2,1    merom(m)       gma 950         mac-f4208ca9           10.4.8 (8n1108)     10.7.5\nmacbook3,1    merom(m)       gma x3100       mac-f22788c8           10.5 (9a3111)\nmacbook4,1    penryn(m)      gma x3100       mac-f22788a9           10.5.2 (9c2015)\nmacbook5,1    penryn(m)      geforce 9400m   mac-f42d89c8           10.5.5 (9f2114)     10.11.6\nmacbook5,2    penryn(m)      geforce 9400m   mac-f22788aa           10.5.6 (9g2110)\nmacbook6,1    penryn(m)      geforce 9400m   mac-f22c8ac8           10.6.1 (10a2047)    10.13.6\nmacbook7,1    penryn(m)      geforce 320m    mac-f22c89c8           10.6.3 (10d2162)\nmacbook8,1    broadwell(y)   hd 5300         mac-be0e8ac46fe800cc   10.10.2 (14c2061)   11.7.x\nmacbook9,1    skylake(y)     hd 515          mac-9ae82516c7c6b903   10.11.4 (15e2066)   12.6.x\nmacbook10,1   kaby lake(y)   hd 615          mac-ee2ebd4b90b839a8   10.12.5 (16f207)    current\n\n\n# macbook air\n\nsmbios          cpu family        gpu                     board-id               initial support     last supported version\nmacbookair1,1   merom(m)          gma x3100 (11")         mac-f42c8cc8           10.5.1 (9b2324)     10.7.5\nmacbookair2,1   penryn(m)         geforce 9400m (13")     mac-f42d88c8           10.5.5              10.11.6\nmacbookair3,1   penryn(m)         geforce 320m (11")      mac-942452f5819b1c1b   10.6.4 (10f3061)    10.13.6\nmacbookair3,2   penryn(m)         geforce 320m (13")      mac-942c5df58193131b   10.6.4 (10f3061)\nmacbookair4,1   sandy bridge(m)   hd 3000 (11")           mac-c08a6bb70a942ac2   10.7 (11a2063)\nmacbookair4,2   sandy bridge(m)   hd 3000 (13")           mac-742912efdbee19b3   10.7 (11a2063)\nmacbookair5,1   ivy bridge(u)     hd 4000 (11")           mac-66f35f19fe2a0d05   10.7.4 (11e2520)    10.15.7\nmacbookair5,2   ivy bridge(u)     hd 4000 (13")           mac-2e6fab96566fe58c   10.8.2 (12c2034)\nmacbookair6,1   haswell(u)        hd 5000 (11")           mac-35c1e88140c3e6cf   10.8.4 (12e3067)    11.7.x\nmacbookair6,2   haswell(u)        hd 5000 (13")           mac-7df21cb3ed6977e5   10.8.4 (12e3067)\nmacbookair7,1   broadwell(u)      hd 6000 (11")           mac-9f18e312c5c2bf0b   10.10.2 (14c2507)   12.6.x\nmacbookair7,2   broadwell(u)      hd 6000 (13")           mac-937cb26e2e02bb01   10.10.2 (14c2507)\nmacbookair8,1   amber lake(y)     uhd 617 (13")           mac-827fac58a8fdfa22   10.14.1 (18b2084)   current\nmacbookair8,2   amber lake(y)     uhd 617 (13")           mac-226cb3c6a851a671   10.14.5 (18f2058)\nmacbookair9,1   ice lake(y)       iris plus g4/g7 (13")   mac-0cff9c7c2b63df8d   10.15.4 (19e287)\n\n\n# macbook pro\n\nsmbios           cpu family         gpu                                   board-id               initial support     last supported version\nmacbookpro1,1    yonah(m)           radeon x1600 (15")                    mac-f425bec8           10.4.5 (8g1453)     10.6.8\nmacbookpro1,2    yonah(m)           radeon x1600 (17")                    mac-f42dbec8           10.4.6 (8i2032)\nmacbookpro2,1    merom(m)           radeon x1600 (15")                    mac-f42189c8           10.4.8 (8n1051)     10.7.5\nmacbookpro2,2    merom(m)           radeon x1600 (17")                    mac-f42187c8           10.4.8 (8n1037)\nmacbookpro3,1    merom(m)           geforce 8600m gt (15/17")             mac-f4238bc8           10.4.9 (8q1058)     10.11.6\nmacbookpro4,1    penryn(m)          geforce 8600mg gt (17")               mac-f42c89c8           10.5.2 (9c2018)\nmacbookpro5,1    penryn(m)          geforce 9400m/9600m gt (15")          mac-f42d86c8           10.5.5 (9f2114)\nmacbookpro5,2    penryn(m)          geforce 9400m/9600m gt (17")          mac-f2268ec8           10.5.6 (9g2141)\nmacbookpro5,3    penryn(m)          geforce 9400m/9600m gt (15")          mac-f22587c8           10.5.7 (9j3050)\nmacbookpro5,4    penryn(m)          geforce 9400m/9600m gt (15")          mac-f22587a1           10.5.7 (9j3050)\nmacbookpro5,5    penryn(m)          geforce 9400m/9600m gt (13")          mac-f2268ac8           10.5.7 (9j3050)\nmacbookpro6,1    arrandale(m)       hd graphics/geforce gt 330m (17")     mac-f22589c8           10.6.3 (10d2063a)   10.13.6\nmacbookpro6,2    arrandale(m)       hd graphics/geforce gt 330m (15")     mac-f22586c8           10.6.3 (10d2094)    10.13.6\nmacbookpro7,1    penryn(m)          geforce 320m (13")                    mac-f222bec8           10.6.3 (10d2125)\nmacbookpro8,1    sandy bridge(m)    hd 3000 (13")                         mac-94245b3640c91c81   10.6.6 (10j3210)\nmacbookpro8,2    sandy bridge(qm)   hd 3000/radeon hd 6490m (15")         mac-94245a3940c91c80   10.6.6 (10j3210)\nmacbookpro8,3    sandy bridge(qm)   hd 3000/radeon hd 6750m (17")         mac-942459f5819b171b   10.6.6 (10j3210)\nmacbookpro9,1    ivy bridge(qm)     hd 4000/geforce gt 650m (15")         mac-4b7ac7e43945597e   10.7.3 (11d2097)    10.15.7\nmacbookpro9,2    ivy bridge(m)      hd 4000 (13")                         mac-6f01561e16c75d06   10.7.3 (11d2515)\nmacbookpro10,1   ivy bridge(qm)     hd 4000/geforce gt 650m (15")         mac-c3ec7cd22292981f   10.7.4 (11e2068)\nmacbookpro10,2   ivy bridge(m)      hd 4000 (13")                         mac-afd8a9d944ea4843   10.8.2 (12c2034)\nmacbookpro11,1   haswell(u)         iris 5100 (13")                       mac-189a3d4f975d5ffc   10.9 (13a2093)      11.7.x\nmacbookpro11,2   haswell(hq)        iris pro 5200 (15")                   mac-3cbd00234e554e41   10.9 (13a3017)\nmacbookpro11,3   haswell(hq)        iris pro 5200/geforce gt 750m (15")   mac-2bd1b31983fe1663   10.9 (13a3017)\nmacbookpro11,4   haswell(hq)        iris pro 5200 (15")                   mac-06f11fd93f0323c5   10.10.3 (14d2134)   12.6.x\nmacbookpro11,5   haswell(hq)        iris pro 5200/radeon r9 m370x (15")   mac-06f11f11946d27c5   10.10.3 (14d2134)\nmacbookpro12,1   broadwell(u)       iris 6100 (13")                       mac-e43c1c25d4880ad6   10.10.2 (14c2507)\nmacbookpro13,1   skylake(u)         iris 540 (13")                        mac-473d31eabeb93f9b   10.12 (16a2323a)\nmacbookpro13,2   skylake(u)         iris 550 (13")                        mac-66e35819ee2d0d05   10.12.1 (16b2657)\nmacbookpro13,3   skylake(h)         hd 530/radeon pro 450 (15")           mac-a5c67f76ed83108c   10.12.1 (16b2659)\nmacbookpro14,1   kaby lake(u)       iris plus 640 (13")                   mac-b4831cebd52a0c4c   10.12.5 (16f2073)   current\nmacbookpro14,2   kaby lake(u)       iris plus 650 (13")                   mac-cad6701f7cea0921   10.12.5 (16f2073)\nmacbookpro14,3   kaby lake(h)       hd 630/radeon pro 555 (15")           mac-551b86e5744e2388   10.12.5 (16f2073)\nmacbookpro15,1   coffee lake(h)     uhd 630/radeon pro 555x (15")         mac-937a206f2ee63c01   10.13.6 (17g2112)\nmacbookpro15,2   coffee lake(u)     iris plus 655 (13")                   mac-827fb448e656ec26   10.13.6 (17g2112)\nmacbookpro15,3   coffee lake(h)     uhd 630/radeon pro vega 16 (15")      mac-1e7e29ad0135f9bc   10.14.1 (18b3094)\nmacbookpro15,4   coffee lake(u)     iris plus 645 (13")                   mac-53fdb3d8db8ca971   10.14.5 (18f2058)\nmacbookpro16,1   coffee lake(h)     uhd 630/radeon pro 5300 (16")         mac-e1008331fdc96864   10.15.1 (19b2093)\nmacbookpro16,2   ice lake(u)        iris plus g4/g7 (13")                 mac-5f9802efe386aa28   10.15.4 (19e2269)\nmacbookpro16,3   coffee lake(u)     iris plus 645 (13")                   mac-e7203c0f68aa0004   10.15.4 (19e2269)\nmacbookpro16,4   coffee lake(h)     uhd 630/radeon pro 5600m (16")        mac-a61bade1fdad7b05   10.15.1 (19b2093)\n\n\n# mac mini\n\nsmbios       cpu family         gpu                    board-id               initial support    last supported version\nmacmini1,1   yonah(m)           gma 950                mac-f4208ec8           10.4.5 (8h1619)    10.6.8\nmacmini2,1   merom(m)           gma 950                mac-f4208eaa           10.4.10 (8r3014)   10.7.5\nmacmini3,1   penryn(m)          geforce 9400m          mac-f22c86c8           10.5.6 (9g2030)    10.11.6\nmacmini4,1   penryn(m)          geforce 320m           mac-f2208ec8           10.6.4 (10f2025)   10.13.6\nmacmini5,1   sandy bridge(m)    hd 3000                mac-8ed6af5b48c039e1   10.7 (11a2061)\nmacmini5,2   sandy bridge(m)    radeon hd 6630m        mac-4bc72d62ad45599e   10.7 (11a2061)\nmacmini5,3   sandy bridge(qm)   hd 3000                mac-7ba5b2794b2cdb12   10.7 (11a2061)\nmacmini6,1   ivy bridge(m)      hd 4000                mac-031aee4d24bff0b1   10.8.1 (12b2080)   10.15.7\nmacmini6,2   ivy bridge(qm)     hd 4000                mac-f65ae981ffa204ed   10.8.1 (12b2080)\nmacmini7,1   haswell(u)         hd 5000 or iris 5100   mac-35c5e08120c7eeaf   10.10 (14a389)     12.6.x\nmacmini8,1   coffee lake(h)     uhd 630                mac-7ba5b2dfe22ddd8c   10.14 (18a2063)    current\n\n\n# imac\n\nsmbios     cpu family        gpu                        board-id                                      initial support     last supported version\nimac4,1    yonah(m)          radeon x1600               mac-f42786c8                                  10.4.4 (8g1165)     10.6.8\nimac4,2    yonah(m)          gma 950                    mac-f4218ec8                                  10.4.7 (8i2057)\nimac5,1    merom(m)          radeon x1600               mac-f4228ec8                                  10.4.7 (8k1106)     10.7.5\nimac5,2    merom(m)          gma 950                    mac-f4218ec8                                  10.4.7 (8k1106)\nimac6,1    merom(m)          geforce 7300gt             mac-f4218fc8                                  10.4.7 (8k1123)\nimac7,1    merom(m)          radeon hd 2400 xt          mac-f42386c8                                  10.4.10 (8r4031)    10.11.6\nimac8,1    penryn(m)         radeon hd 2400 xt          mac-f227bec8                                  10.5.2 (9c2028)\nimac9,1    penryn(m)         geforce 9400m              mac-f2218fa9                                  10.5.6 (9g2030)\nimac10,1   wolfdale(s)       geforce 9400m              mac-f221dcc8                                  10.6.1 (10a2155)    10.13.6\nimac10,1   wolfdale(s)       radeon hd 4670             mac-f2268cc8                                  10.6.1 (10a2155)\nimac11,1   lynnfield(s)      radeon hd 4850             mac-f2268dae                                  10.6.2 (10c2234)\nimac11,2   clarkdale(s)      radeon hd 4670             mac-f2238ac8                                  10.6.3 (10d2322a)\nimac11,3   clarkdale(s)      radeon hd 5670             mac-f2238bae                                  10.6.3 (10d2322a)\nimac12,1   sandy bridge(s)   radeon hd 6750m            mac-942b5bf58194151b                          10.6.6 (10j4026)\nimac12,2   sandy bridge(s)   radeon hd 6770m            mac-942b59f58194171b                          10.6.6 (10j4026)\nimac13,1   ivy bridge(s)     geforce gt 640m            mac-00be6ed71e35eb86                          10.8.2 (12c3104)    10.15.7\nimac13,1   ivy bridge(s)     hd 4000                    mac-00be6ed71e35eb86                          10.8.2 (12c3104)\nimac13,2   ivy bridge(s)     geforce gtx 660m           mac-fc02e91ddd3fa6a4                          10.8.2 (12c2037)\nimac13,3   ivy bridge(s)     hd 4000                    mac-7df2a3b5e5d671ed                          10.8.2 (12c2037)\nimac14,1   haswell(s)        iris pro 5200              mac-031b6874cf7f642a                          10.8.4 (12e4022)\nimac14,2   haswell(s)        geforce gt 750m            mac-27adbb7b4cee8e61                          10.8.4 (12e4022)\nimac14,3   haswell(s)        geforce gt 755m            mac-77eb7d7daf985301                          10.8.4 (12e4022)\nimac14,4   haswell(u)        hd 5000                    mac-81e3e92dd6088272                          10.9.3 (13d2061)    11.7.x\nimac15,1   haswell(s)        radeon r9 m290x            mac-42fd25eabcabb274                          10.10 (14a389)\nimac16,1   broadwell(u)      hd 6000 or iris pro 6200   mac-a369ddc4e67f1c45                          10.11 (15a2301)     12.6.x\nimac16,2   broadwell(s)      iris pro 6200              mac-ffe5ef870d7ba81a                          10.11 (15a2301)\nimac17,1   skylake(s)        radeon r9 m380             mac-db15bd556843c820, mac-65ce76090165799a,   10.11 (15a4310)\n                                                        mac-b809c3757da9bb8d\nimac18,1   kaby lake(u)      iris plus 640              mac-4b682c642b45593e                          10.12.4 (16e2193)   current\nimac18,2   kaby lake(s)      radeon pro 555             mac-77f17d7da9285301                          10.12.4 (16f2073)\nimac18,3                     radeon pro 570             mac-be088af8c5eb4fa2                          10.12.4 (16f2073)\nimac19,1   coffee lake(s)    radeon pro 570x            mac-aa95b1ddab278b95                          10.14.4 (18e226)\nimac19,2                     radeon pro 555x            mac-63001698e7a34814                          10.14.4 (18e226)\nimac20,1   comet lake(s)     radeon pro 5300            mac-cff7d910a743caaf                          10.15.6 (19g2005)\nimac20,2                                                mac-af89b6d9451a490b                          10.15.6 (19g2005)\n\n\n# imac pro\n\nsmbios       cpu family   gpu       board-id               initial support     last supported version\nimacpro1,1   skylake-w    vega 56   mac-7ba5b2d9e42ddd94   10.13.2 (17c2111)   current\n\n\n# mac pro\n\nsmbios      cpu family       gpu                 board-id               initial support    last supported version\nmacpro1,1   woodcrest        geforce 7300 gt     mac-f4208dc8           10.4.7 (8k1079)    10.7.5\nmacpro2,1   clovertown                           mac-f4208da9           10.4.9 (8p4037)\nmacpro3,1   harpertown       radeon hd 2600 xt   mac-f42c88c8           10.5.1 (9b2117)    10.11.6\nmacpro4,1   nehalem          geforce gt 120      mac-f221bec8           10.5.6 (9g3553)\nmacpro5,1   nehalem          radeon hd 5770      mac-f221bec8           10.6.4 (10f2521)   10.14.6\nmacpro5,1   westmere ep                          mac-f221bec8           10.6.4 (10f2521)\nmacpro6,1   ivy bridge ep    firepro d300        mac-f60deb81ff30acf6   10.9.1 (13b4116)   12.6.x\nmacpro7,1   cascade lake-w   radeon pro 580x     mac-27ad2f918ae68f61   10.15.0 (19a583)   current\n\n\n# xserve\n\nsmbios      cpu family   gpu              board-id       initial support          last supported version\nxserve1,1   woodcrest    radeon x1300     mac-f4208ac8   server 10.4.8 (8n1215)   server 10.7.5\nxserve2,1   harpertown                    mac-f42289c8   server 10.5 (9b2117)\nxserve3,1   nehalem ep   geforce gt 120   mac-f223bec8   server 10.5.6            10.11.6\n\n\n# miscellaneous smbios\n\nall models listed below are not supported by opencore however are documented here for ease of reference.\n\n * apple development platforms\n   * developer transition kit\n * apple silicon\n   * mac mini\n   * macbook air\n   * macbook pro\n   * imac\n * powerpc\n   * powerbook\n   * ibook\n   * powermac\n   * imac\n   * emac\n   * cube\n   * mac mini\n   * xserve\n\napple silicon notes\n\nextra information regarding apple\'s cpus:\n\n * they do not rely on acpi or uefi\n * they do not include deviceproperties in their firmware\n * they use ipad8,6 for ios/ipados applications\n * board-id is only applicable with intel macs, powerpc and arm do not have this entry\n\n# developer transition kit\n\nsmbios   year       cpu family       product identifier   initial support\nadp2,1   mid 2005   intel prescott   n/a                  10.4.1 (8b1025)\nadp3,2   mid 2020   apple a12z       j273                 11.0.0 (20a5299w)\n\n# mac mini - apple silicon\n\nsmbios       year        cpu family   product identifier   initial support\nmacmini9,1   late 2020   apple m1     j274                 11.0.0 (20a2411)\n\n# macbook air - apple silicon\n\nsmbios           year        cpu family   product identifier   initial support\nmacbookair10,1   late 2020   apple m1     j313                 11.0.0 (20a2411)\n\n# macbook pro - apple silicon\n\nsmbios           year        cpu family   product identifier   initial support\nmacbookpro17,1   late 2020   apple m1     j293                 11.0.0 (20a2411)\n\n# imac - apple silicon\n\nsmbios     year       cpu family   product identifier   initial support\nimac21,1   mid 2021   apple m1     j256                 11.3 (20e232?)\nimac21,2   mid 2021   apple m1     j257                 11.3 (20e232?)\n\npower pc smbios table\n\n\n# powerbook - powerpc\n\nsmbios         year         cpu family           initial support   last supported version\npowerbook1,1   mid-1999     powerpc 750 (g3)     8.6               10.3.9\npowerbook3,1   early 2000                        9.0.2             10.4.11\npowerbook3,2   early 2001   powerpc 7410 (g4)    9.1\npowerbook3,3   late 2001    powerpc 7440 (g4)    9.2.1\npowerbook3,4   mid-2002     powerpc 7451 (g4)    9.2.2\npowerbook3,5   late 2002    powerpc 7455 (g4)                      10.5.8\npowerbook5,1   early 2003                        10.2.4\npowerbook5,2   late 2003    powerpc 7447 (g4)    10.2.7\npowerbook5,3\npowerbook5,4   mid-2004     powerpc 7447a (g4)   10.3.3\npowerbook5,5\npowerbook5,6   early 2005   10.3.7\npowerbook5,7\npowerbook5,8   late 2005                         10.4.2\npowerbook5,9\npowerbook6,1   early 2003   powerpc 7455 (g4)    10.2.3\npowerbook6,2\npowerbook6,4   mid-2004     powerpc 7447a (g4)   10.2.7\npowerbook6,8   early 2005                        10.3.7\n\n# ibook - powerpc\n\nsmbios         year         cpu family           initial support   last supported version\npowerbook2,1   mid-1999     powerpc 750 (g3)     8.6               10.3.9\npowerbook2,2   late 2000    powerpc 750cx (g3)   9.0.4             10.4.11\npowerbook4,1   late 2002    powerpc 7455 (g4)    9.2.2             10.5.8\npowerbook4,2   early 2002   powerpc 750cx (g3)   9.2.1             10.4.11\npowerbook4,3   mid-2002     powerpc 750fx (g3)   9.2.2\npowerbook6,3   late 2003    powerpc 7457 (g4)    10.3 (7b85)\npowerbook6,5   mid-2004     powerpc 7447a (g4)   10.3.3 (7g51)     10.5.8\npowerbook6,7   mid-2005                          10.4.2 (8d37)\n\n# powermac - powerpc\n\nsmbios         year         cpu family           initial support   last supported version\npowermac1,1    early 1999   powerpc 750 (g3)     8.5.1             10.4.11\npowermac1,2    mid 1999     powerpc 7400 (g4)    8.6\npowermac3,1\npowermac3,2    mid-2001     powerpc 7450 (g4)    9.2\npowermac3,3    mid-2000     powerpc 7400 (g4)    9.0.4\npowermac3,4    early 2001   powerpc 7410 (g4)    9.1\npowermac3,5    mid-2001     powerpc 7450 (g4)    9.2               10.5.8\npowermac3,6    mid-2002     powerpc 7455 (g4)    9.2.2\npowermac7,2    mid-2003     powerpc 970 (g5)     10.2.7\npowermac7,3    early-2005   powerpc 970fx (g5)   10.4\npowermac9,1    late 2004                         10.3.5 (8e90)\npowermac11,2   late 2005    powerpc 970mp (g5)   10.4.2\n\n# imac - powerpc\n\nsmbios         year         cpu family           initial support   last supported version\nimac,1         mid 1998     powerpc 750 (g3)     8.1               10.3.9\npowermac2,1    late 1999                         8.6               10.4.11\npowermac2,2    mid 2000                          9.0.4             10.3.9\npowermac4,1    early 2001   powerpc 750cx (g3)   9.1               10.4.11\npowermac4,2    early 2002   powerpc 7441 (g4)    9.2.2\npowermac4,5    mid-2002     powerpc 7445 (g4)    9.2.2\npowermac6,1    early 2003                        10.2.3            10.5.8\npowermac6,3    late 2003                         10.3.1\npowermac8,1    mid-2004     powerpc 970 (g5)     10.3.5 (7p35)\npowermac8,2    mid-2005                          10.4 (8a428)\npowermac12,1   late 2005    powerpc 970fx (g5)   10.4.2 (8e102)\n\n# emac - powerpc\n\nsmbios        year         cpu family           initial support   last supported version\npowermac4,4   mid-2003     powerpc 7445 (g4     9.2.2             10.5.8\npowermac6,4   early 2004   powerpc 7447a (g4)   10.3.3\n\n# cube - powerpc\n\nsmbios        year       cpu family          initial support   last supported version\npowermac5,1   mid-2000   powerpc 7400 (g4)   9.0.4             10.4.11\npowermac5,2\n\n# mac mini - powerpc\n\nsmbios         year         cpu family           initial support   last supported version\npowermac10,1   early 2005   powerpc 7447a (g4)   10.3.7 (7t11)     10.5.8\npowermac10,2   late 2005                         10.4.2 (8d40)\n\n# xserve - powerpc\n\nsmbios       year         cpu family           initial support   last supported version\nrackmac1,1   mid-2002     powerpc 7455 (g4)    10.1.5 (6c115)    server 10.5.8\nrackmac1,2   early 2003                        10.2.4 (6i34)\nrackmac3,1   early 2004   powerpc 970fx (g5)   10.3.0',charsets:{}},{title:"Selecting the right SMBIOS",frontmatter:{search:!1},regularPath:"/extras/smbios.html",relativePath:"extras/smbios.md",key:"v-262ab396",path:"/extras/smbios.html",lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:null,content:"# Selecting the right SMBIOS\n\nPage has been moved here: Choosing the right SMBIOS",normalizedContent:"# selecting the right smbios\n\npage has been moved here: choosing the right smbios",charsets:{}},{title:"Disabling GPU",frontmatter:{},regularPath:"/extras/spoof.html",relativePath:"extras/spoof.md",key:"v-1238a4a8",path:"/extras/spoof.html",headers:[{level:3,title:"Boot Flag",slug:"boot-flag",normalizedTitle:"boot flag",charIndex:223},{level:3,title:"DeviceProperties Method",slug:"deviceproperties-method",normalizedTitle:"deviceproperties method",charIndex:645},{level:3,title:"SSDT Method",slug:"ssdt-method",normalizedTitle:"ssdt method",charIndex:1125},{level:2,title:"Windows GPU Selection",slug:"windows-gpu-selection",normalizedTitle:"windows gpu selection",charIndex:2282}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Boot Flag DeviceProperties Method SSDT Method Windows GPU Selection",content:'# Disabling GPU\n\nSo you need to hide your unsupported GPU? Well with OpenCore things are slightly different, specifically that we need to specify to which exact device we want to spoof. There are 3 ways we can do this:\n\n * Boot Flag\n   * Disables all GPUs except the iGPU\n * DeviceProperties\n   * Disables GPU on a per-slot basis\n * SSDT\n   * Disables GPU on a per-slot basis\n\nCSM must be off in the BIOS for the spoofing to work correctly, especially on AMD CPU based systems.\n\n\n# Boot Flag\n\nBy far the simplest way, all you need to do is add the following boot-arg:\n\n-wegnoegpu\n\nDo note that this will disable all GPUs excluding the iGPU.\n\n\n# DeviceProperties Method\n\nHere is quite simple, find the PCI route with gfxutil and then create a new DeviceProperties section with your spoof:\n\npath/to/gfxutil -f GFX0\n\n\nAnd the output will result in something similar:\n\nDevicePath = PciRoot(0x0)/Pci(0x1,0x0)/Pci(0x0,0x0)/Pci(0x0,0x0)/Pci(0x0,0x0)\n\n\nWith this, navigate towards Root -> DeviceProperties -> Add and add your PCI route with the following properties:\n\nKEY           TYPE      VALUE\ndisable-gpu   Boolean   True\n\n\n\n\n# SSDT Method\n\nThere are many ways to find the path but generally, the easiest way is to get into Device Manager under windows and find the PCI path.\n\nExample of device path for \\_SB.PCI0.PEG0.PEGP:\n\n\n    DefinitionBlock ("", "SSDT", 2, "DRTNIA", "spoof", 0x00000000)\n    {\n       External (_SB_.PCI0.PEG0.PEGP, DeviceObj)\n\n       Method (_SB.PCI0.PEG0.PEGP._DSM, 4, NotSerialized)\n       {\n          If ((!Arg2 || !(_OSI ("Darwin"))))\n          {\n             Return (Buffer (One)\n             {\n                0x03\n             })\n          }\n\n          Return (Package (0x0A)\n          {\n             "name",\n             Buffer (0x09)\n             {\n                "#display"\n             },\n\n             "IOName",\n             "#display",\n             "class-code",\n             Buffer (0x04)\n             {\n                0xFF, 0xFF, 0xFF, 0xFF\n             },\n          })\n       }\n    }\n\n\n\nA copy of this SSDT can be found here: Spoof-SSDT.dsl. You will need MaciASL to compile this. Remember that .aml is assembled and .dsl is source code. You can compile with MaciASL by selecting File -> Save As -> ACPI Machine Language.\n\nSource: CorpNewt\n\n\n# Windows GPU Selection\n\nDepending on your setup, you may find that Windows renders games or applications using an undesired GPU.\n\nMany users only have two GPUs. NVIDIA and the Intel HD/UHD IGPU. Since NVIDIA no longer works on macOS, they may have the monitor plugged into the motherboards HDMI/DP connection for convenience. As a result, Windows will render all games and applications through the IGPU. You can reroute a specific game or application to a different GPU by going to: Settings > System > Display > Graphics settings\n\n\n\nThe rendered game or application will have its buffer copied to the IGPU. Which is then displayed to you. This does come with a few downsides:\n\n * GSync will no longer work.\n * NVIDIA settings can no longer be opened. This requires the display to be connected to the GPU\n * Decreased frame rate.\n * Increased input latency.\n * Refresh rate cap.\n\nIf your motherboard only has an HDMI connector for the iGPU, the maximum refresh rate for spec 2.1 is 120Hz. This assumes your board and monitor are of the same spec. This means your 144Hz monitor is only seeing a maximum of 120Hz as determined by the hardware. This limitation does not apply if your board has a DP connector for the IGPU.\n\nIf you have more than two GPUs (AMD, NVIDIA and Intel), this setting is limited. A monitor connected to the AMD GPU means Windows will only allow you to select the AMD GPU or the Intel IGPU. The NVIDIA GPU will not show. In a future version of Windows, this limitation is removed.\n\nAs a recommendation, if you use both operating systems equally and prefer no downsides, your best option is an HDMI or DP switch.',normalizedContent:'# disabling gpu\n\nso you need to hide your unsupported gpu? well with opencore things are slightly different, specifically that we need to specify to which exact device we want to spoof. there are 3 ways we can do this:\n\n * boot flag\n   * disables all gpus except the igpu\n * deviceproperties\n   * disables gpu on a per-slot basis\n * ssdt\n   * disables gpu on a per-slot basis\n\ncsm must be off in the bios for the spoofing to work correctly, especially on amd cpu based systems.\n\n\n# boot flag\n\nby far the simplest way, all you need to do is add the following boot-arg:\n\n-wegnoegpu\n\ndo note that this will disable all gpus excluding the igpu.\n\n\n# deviceproperties method\n\nhere is quite simple, find the pci route with gfxutil and then create a new deviceproperties section with your spoof:\n\npath/to/gfxutil -f gfx0\n\n\nand the output will result in something similar:\n\ndevicepath = pciroot(0x0)/pci(0x1,0x0)/pci(0x0,0x0)/pci(0x0,0x0)/pci(0x0,0x0)\n\n\nwith this, navigate towards root -> deviceproperties -> add and add your pci route with the following properties:\n\nkey           type      value\ndisable-gpu   boolean   true\n\n\n\n\n# ssdt method\n\nthere are many ways to find the path but generally, the easiest way is to get into device manager under windows and find the pci path.\n\nexample of device path for \\_sb.pci0.peg0.pegp:\n\n\n    definitionblock ("", "ssdt", 2, "drtnia", "spoof", 0x00000000)\n    {\n       external (_sb_.pci0.peg0.pegp, deviceobj)\n\n       method (_sb.pci0.peg0.pegp._dsm, 4, notserialized)\n       {\n          if ((!arg2 || !(_osi ("darwin"))))\n          {\n             return (buffer (one)\n             {\n                0x03\n             })\n          }\n\n          return (package (0x0a)\n          {\n             "name",\n             buffer (0x09)\n             {\n                "#display"\n             },\n\n             "ioname",\n             "#display",\n             "class-code",\n             buffer (0x04)\n             {\n                0xff, 0xff, 0xff, 0xff\n             },\n          })\n       }\n    }\n\n\n\na copy of this ssdt can be found here: spoof-ssdt.dsl. you will need maciasl to compile this. remember that .aml is assembled and .dsl is source code. you can compile with maciasl by selecting file -> save as -> acpi machine language.\n\nsource: corpnewt\n\n\n# windows gpu selection\n\ndepending on your setup, you may find that windows renders games or applications using an undesired gpu.\n\nmany users only have two gpus. nvidia and the intel hd/uhd igpu. since nvidia no longer works on macos, they may have the monitor plugged into the motherboards hdmi/dp connection for convenience. as a result, windows will render all games and applications through the igpu. you can reroute a specific game or application to a different gpu by going to: settings > system > display > graphics settings\n\n\n\nthe rendered game or application will have its buffer copied to the igpu. which is then displayed to you. this does come with a few downsides:\n\n * gsync will no longer work.\n * nvidia settings can no longer be opened. this requires the display to be connected to the gpu\n * decreased frame rate.\n * increased input latency.\n * refresh rate cap.\n\nif your motherboard only has an hdmi connector for the igpu, the maximum refresh rate for spec 2.1 is 120hz. this assumes your board and monitor are of the same spec. this means your 144hz monitor is only seeing a maximum of 120hz as determined by the hardware. this limitation does not apply if your board has a dp connector for the igpu.\n\nif you have more than two gpus (amd, nvidia and intel), this setting is limited. a monitor connected to the amd gpu means windows will only allow you to select the amd gpu or the intel igpu. the nvidia gpu will not show. in a future version of windows, this limitation is removed.\n\nas a recommendation, if you use both operating systems equally and prefer no downsides, your best option is an hdmi or dp switch.',charsets:{cjk:!0}},{title:"创建USB",frontmatter:{},regularPath:"/installer-guide/",relativePath:"installer-guide/README.md",key:"v-bd251b96",path:"/installer-guide/",headers:[{level:3,title:"在线vs离线安装程序",slug:"在线vs离线安装程序",normalizedTitle:"在线vs离线安装程序",charIndex:234},{level:3,title:"制作安装程序",slug:"制作安装程序",normalizedTitle:"制作安装程序",charIndex:461}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"在线vs离线安装程序 制作安装程序",content:"# 创建USB\n\n需要的东西\n\n * OpenCorePkg，强烈建议运行调试版本以显示更多信息\n * ProperTree 编辑.plist文件(OpenCore Configurator是另一个工具，但严重过时，Mackie版本以损坏而闻名。请不惜一切代价避免使用这些工具!).\n * 如果您希望使用OpenCore作为主要引导加载程序，则必须将Clover从系统中完全删除。保留一个基于Clover的EFI备份。请看这里需要清理的地方:Clover转换\n\n\n# 在线vs离线安装程序\n\n离线安装程序有一个完整的macOS副本，而在线安装程序只有一个恢复映像(约500MB)，一旦启动，它就会从苹果服务器下载macOS。\n\n * 离线\n   * 只能在macOS上制作\n   * Windows/Linux没有完整安装程序所需的APFS/HFS驱动程序\n * 在线\n   * 可以在macOS/Linux/Windows上制作\n   * 需要通过目标机器上的macOS支持的网络适配器进行internet连接\n\n\n# 制作安装程序\n\n根据你使用的操作系统，请参见制作USB的具体部分:\n\n * macOS用户\n   * 支持OS X 10.4到当前版本\n   * 支持传统和UEFI安装\n * Windows用户\n   * 支持OS X 10.7到当前版本\n   * 仅在线安装程序\n   * 支持传统和UEFI安装\n * Linux用户（UEFI）\n   * 支持OS X 10.7到当前版本\n   * 仅在线安装程序\n   * 适用于支持UEFI引导的机器",normalizedContent:"# 创建usb\n\n需要的东西\n\n * opencorepkg，强烈建议运行调试版本以显示更多信息\n * propertree 编辑.plist文件(opencore configurator是另一个工具，但严重过时，mackie版本以损坏而闻名。请不惜一切代价避免使用这些工具!).\n * 如果您希望使用opencore作为主要引导加载程序，则必须将clover从系统中完全删除。保留一个基于clover的efi备份。请看这里需要清理的地方:clover转换\n\n\n# 在线vs离线安装程序\n\n离线安装程序有一个完整的macos副本，而在线安装程序只有一个恢复映像(约500mb)，一旦启动，它就会从苹果服务器下载macos。\n\n * 离线\n   * 只能在macos上制作\n   * windows/linux没有完整安装程序所需的apfs/hfs驱动程序\n * 在线\n   * 可以在macos/linux/windows上制作\n   * 需要通过目标机器上的macos支持的网络适配器进行internet连接\n\n\n# 制作安装程序\n\n根据你使用的操作系统，请参见制作usb的具体部分:\n\n * macos用户\n   * 支持os x 10.4到当前版本\n   * 支持传统和uefi安装\n * windows用户\n   * 支持os x 10.7到当前版本\n   * 仅在线安装程序\n   * 支持传统和uefi安装\n * linux用户（uefi）\n   * 支持os x 10.7到当前版本\n   * 仅在线安装程序\n   * 适用于支持uefi引导的机器",charsets:{cjk:!0}},{title:"抓取旧版本的macOS/OS X",frontmatter:{},regularPath:"/installer-guide/legacy-mac-install.html",relativePath:"installer-guide/legacy-mac-install.md",key:"v-139624c0",path:"/installer-guide/legacy-mac-install.html",lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:null,content:"# 抓取旧版本的macOS/OS X\n\n此页已弃用，请参阅旧版macOS安装程序的相应安装页",normalizedContent:"# 抓取旧版本的macos/os x\n\n此页已弃用，请参阅旧版macos安装程序的相应安装页",charsets:{cjk:!0}},{title:"Installation Process",frontmatter:{},regularPath:"/installation/installation-process.html",relativePath:"installation/installation-process.md",key:"v-77e1f516",path:"/installation/installation-process.html",headers:[{level:2,title:"Double checking your work",slug:"double-checking-your-work",normalizedTitle:"double checking your work",charIndex:525},{level:2,title:"Booting the OpenCore USB",slug:"booting-the-opencore-usb",normalizedTitle:"booting the opencore usb",charIndex:1323},{level:2,title:"macOS Installer",slug:"macos-installer",normalizedTitle:"macos installer",charIndex:2325}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Double checking your work Booting the OpenCore USB macOS Installer",content:"# Installation Process\n\nNow that you've finished setting up OpenCore, you're finally able to boot, main things to keep in mind:\n\n * Enable BIOS settings optimal for macOS\n * Read up on the OpenCore Multiboot Guide as well as Setting up LauncherOption\n   * Mainly relevant for those running a single drive for multiple OSes\n * And a copy of the General Troubleshooting page\n * Read up on the macOS Boot Process\n   * Can help first time installers better understand where they may be getting stuck\n * And a ton of patience\n\n\n# Double checking your work\n\nOne last thing we should go over before booting is how your EFI is setup:\n\nGOOD EFI                                     BAD EFI\n                                             \nEFI folder found on EFI partition            EFI folder missing\nACPI Files are compiled(.aml)                ACPI Files are not compiled(.dsl)\nDSDT is not included                         * DSDT is included\nRemoved unneeded Drivers(.efi)               Leaves default Drivers\nRemoved unneeded Tools(.efi)                 Leaves default Tools\nAll files in the Kexts folder end in .kext   Includes source code and folders\nconfig.plist found under EFI/OC              Neither renamed or placed the .plist in right location\nOnly uses kexts that are needed              Downloaded every kext listed\n\n\n# Booting the OpenCore USB\n\nSo you're now ready to finally put the USB stick into your computer and boot off of it. Remember that most laptops and some desktops will still default to the internal drive with Windows, and you'll need to manually select OpenCore in the BIOS boot options. You'll need to check in the user manual or use a bit of google to find out what Fn key accesses the BIOS and boot menu(ie. Esc, F2, F10 or F12)\n\nOnce you boot the USB, you'll likely be greeted to the following boot options:\n\n 1. Windows\n 2. macOS Base System (External) / Install macOS Big Sur (External) / USB drive name (External)\n 3. OpenShell.efi\n 4. Reset NVRAM\n\nWARNING\n\nYou might need to press space in order to see the installer, as in later versions of OpenCore HideAuxiliary is enabled by default.\n\nFor us, Option 2. is the one we want. Depending how the installer was made, it may report as either \"macOS Base System (External)\", \"Install macOS Big Sur (External)\" or \"Your USB drive's name (External)\"\n\n\n# macOS Installer\n\nSo you've finally got the installer booted, got through the verbose and hit the installer! Now that you've gotten this far, the main things to keep in mind:\n\n * Drives you wish to install macOS on must be both of GUID partition Scheme and APFS\n   * High Sierra on HDD and all Sierra users will need to use macOS Journaled(HFS+)\n * The drive must also have a 200MB partition\n   * By default, macOS will setup freshly formatted drives with 200MB\n   * See the Multiboot Guide for more info on partitioning a Windows Drive\n\nOnce you start the installation, you will want to wait until the system restarts. You will once again want to boot into OpenCore, but rather than selecting your USB installer/recovery - you will want to select the macOS installer on the hard drive to continue installation. You should get an apple logo, and after a few minutes you should get a timer at the bottom saying \"x minutes remaining\". This may be a good time to get a drink or snack as this will take a while. It may restart a couple more times, but if all goes well, it should finally plop you at the \"Setup your Mac screen\"\n\nYou're in! 🎉 You will want to go through the Post-Installation pages to finish setting up your system.",normalizedContent:"# installation process\n\nnow that you've finished setting up opencore, you're finally able to boot, main things to keep in mind:\n\n * enable bios settings optimal for macos\n * read up on the opencore multiboot guide as well as setting up launcheroption\n   * mainly relevant for those running a single drive for multiple oses\n * and a copy of the general troubleshooting page\n * read up on the macos boot process\n   * can help first time installers better understand where they may be getting stuck\n * and a ton of patience\n\n\n# double checking your work\n\none last thing we should go over before booting is how your efi is setup:\n\ngood efi                                     bad efi\n                                             \nefi folder found on efi partition            efi folder missing\nacpi files are compiled(.aml)                acpi files are not compiled(.dsl)\ndsdt is not included                         * dsdt is included\nremoved unneeded drivers(.efi)               leaves default drivers\nremoved unneeded tools(.efi)                 leaves default tools\nall files in the kexts folder end in .kext   includes source code and folders\nconfig.plist found under efi/oc              neither renamed or placed the .plist in right location\nonly uses kexts that are needed              downloaded every kext listed\n\n\n# booting the opencore usb\n\nso you're now ready to finally put the usb stick into your computer and boot off of it. remember that most laptops and some desktops will still default to the internal drive with windows, and you'll need to manually select opencore in the bios boot options. you'll need to check in the user manual or use a bit of google to find out what fn key accesses the bios and boot menu(ie. esc, f2, f10 or f12)\n\nonce you boot the usb, you'll likely be greeted to the following boot options:\n\n 1. windows\n 2. macos base system (external) / install macos big sur (external) / usb drive name (external)\n 3. openshell.efi\n 4. reset nvram\n\nwarning\n\nyou might need to press space in order to see the installer, as in later versions of opencore hideauxiliary is enabled by default.\n\nfor us, option 2. is the one we want. depending how the installer was made, it may report as either \"macos base system (external)\", \"install macos big sur (external)\" or \"your usb drive's name (external)\"\n\n\n# macos installer\n\nso you've finally got the installer booted, got through the verbose and hit the installer! now that you've gotten this far, the main things to keep in mind:\n\n * drives you wish to install macos on must be both of guid partition scheme and apfs\n   * high sierra on hdd and all sierra users will need to use macos journaled(hfs+)\n * the drive must also have a 200mb partition\n   * by default, macos will setup freshly formatted drives with 200mb\n   * see the multiboot guide for more info on partitioning a windows drive\n\nonce you start the installation, you will want to wait until the system restarts. you will once again want to boot into opencore, but rather than selecting your usb installer/recovery - you will want to select the macos installer on the hard drive to continue installation. you should get an apple logo, and after a few minutes you should get a timer at the bottom saying \"x minutes remaining\". this may be a good time to get a drink or snack as this will take a while. it may restart a couple more times, but if all goes well, it should finally plop you at the \"setup your mac screen\"\n\nyou're in! 🎉 you will want to go through the post-installation pages to finish setting up your system.",charsets:{}},{title:"在Linux上创建安装程序",frontmatter:{},regularPath:"/installer-guide/linux-install.html",relativePath:"installer-guide/linux-install.md",key:"v-6b3aba76",path:"/installer-guide/linux-install.html",headers:[{level:2,title:"下载macOS",slug:"下载macos",normalizedTitle:"下载macos",charIndex:116},{level:2,title:"制作安装程序",slug:"制作安装程序",normalizedTitle:"制作安装程序",charIndex:1966},{level:3,title:"方法1",slug:"方法1",normalizedTitle:"方法1",charIndex:2197},{level:3,title:"方法二(如果第一种方法不起作用)",slug:"方法二-如果第一种方法不起作用",normalizedTitle:"方法二(如果第一种方法不起作用)",charIndex:3356},{level:2,title:"现在，所有这些都完成了，转到设置EFI来完成您的工作",slug:"现在-所有这些都完成了-转到设置efi来完成您的工作",normalizedTitle:"现在，所有这些都完成了，转到设置efi来完成您的工作",charIndex:4779}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"下载macOS 制作安装程序 方法1 方法二(如果第一种方法不起作用) 现在，所有这些都完成了，转到设置EFI来完成您的工作",content:'# 在Linux上创建安装程序\n\n虽然你不需要重新安装macOS来使用OpenCore，但有些用户更喜欢在启动管理器升级时使用新的版本。\n\n首先，您需要以下内容:\n\n * 4GB USB\n * macrecovery.py\n\n\n# 下载macOS\n\n现在开始，首先进入macrecovery的文件夹，并运行以下命令之一:\n\n\n\n# 调整下面的命令到正确的文件夹\ncd ~/Downloads/OpenCore-0/Utilities/macrecovery/\n\n\n接下来，根据你想要启动的操作系统运行以下命令之一：\n\n# Lion (10.7):\npython3 ./macrecovery.py -b Mac-2E6FAB96566FE58C -m 00000000000F25Y00 download\npython3 ./macrecovery.py -b Mac-C3EC7CD22292981F -m 00000000000F0HM00 download\n\n# Mountain Lion (10.8):\npython3 ./macrecovery.py -b Mac-7DF2A3B5E5D671ED -m 00000000000F65100 download\n\n# Mavericks (10.9):\npython3 ./macrecovery.py -b Mac-F60DEB81FF30ACF6 -m 00000000000FNN100 download\n\n# Yosemite (10.10):\npython3 ./macrecovery.py -b Mac-E43C1C25D4880AD6 -m 00000000000GDVW00 download\n\n# El Capitan (10.11):\npython3 ./macrecovery.py -b Mac-FFE5EF870D7BA81A -m 00000000000GQRX00 download\n\n# Sierra (10.12):\npython3 ./macrecovery.py -b Mac-77F17D7DA9285301 -m 00000000000J0DX00 download\n\n# High Sierra (10.13)\npython3 ./macrecovery.py -b Mac-7BA5B2D9E42DDD94 -m 00000000000J80300 download\npython3 ./macrecovery.py -b Mac-BE088AF8C5EB4FA2 -m 00000000000J80300 download\n\n# Mojave (10.14)\npython3 ./macrecovery.py -b Mac-7BA5B2DFE22DDD8C -m 00000000000KXPG00 download\n\n# Catalina (10.15)\npython3 ./macrecovery.py -b Mac-00BE6ED71E35EB86 -m 00000000000000000 download\n\n# Big Sur (11)\npython3 ./macrecovery.py -b Mac-42FD25EABCABB274 -m 00000000000000000 download\n\n# Monterey (12)\npython3 ./macrecovery.py -b Mac-FFE5EF870D7BA81A -m 00000000000000000 download\n\n# Latest version\n# ie. Ventura (13)\npython3 ./macrecovery.py -b Mac-4B682C642B45593E -m 00000000000000000 download\n\n\n从这里开始，在终端中运行这些命令之一，一旦完成，你将得到类似于这样的输出：\n\n\n\n * Note: 根据操作系统的不同，您将获得BaseSystem或RecoveryImage文件。它们都以相同的方式工作，所以当我们引用BaseSystem时，相同的信息适用于RecoveryImage\n\n * macOS 12及以上注释:由于最近的macOS版本引入了对USB堆栈的更改，建议您在安装macOS之前映射USB端口(使用USBToolBox)。\n   \n   * 警告： 在macOS 11.3及更新版本中，XhciPortLimit被损坏导致启动循环。\n     * 如果你已经映射你的USB端口并禁用XhciPortLimit，你在启动macOS 11.3+时不会出现问题。\n\n\n# 制作安装程序\n\n本节的目标是在USB设备中创建必要的分区。你可以使用你最喜欢的程序。gdisk``fdisk``parted``gparted或gnome-disks。本指南将重点介绍gdisk，因为它很好，可以稍后更改分区类型，因为我们需要它，以便macOS Recovery HD可以启动。(这里使用的发行版是Ubuntu 18.04，其他版本或发行版也可以使用)\n\n感谢mid 1996在Internet安装指南指南上所做的工作，这是本文的基础。\n\n\n# 方法1\n\n在终端:\n\n 1. 运行lsblk并确定您的USB设备块\n 2. 运行sudo gdisk /dev/<your USB block>\n    1. 如果询问使用哪个分区表，请选择GPT。\n    2. 输入p来打印块的分区 (并验证它是所需要的)\n    3. 输入o来清除分区表并创建一个新的GPT表(如果不是空的)\n       1. 输入y确认\n    4. 输入 n\n       1. partition number：默认为空\n       2. first sector：默认为空\n       3. last sector：默认为空\n       4. Hex code or GUID：0700用于Microsoft Basic Data类型\n    5. 输入w\n       * 输入y确认\n       * 在某些情况下需要重新启动，但很少，如果你想要确保，重新启动你的计算机。你也可以尝试重新插入USB。\n    6. 输入q,关闭gdisk\n 3. 使用\' lsblk \'来确定分区的标识符\n 4. 运行sudo mkfs.vfat -F 32 -n "OPENCORE" /dev/<your USB partition block>以将你的USB格式化为FAT32文件系统并命名为OPENCORE。\n 5. 然后cd到/OpenCore/Utilities/macrecovery/你应该得到一个.dmg和.chunklist文件\n    1. 使用udisksctl挂载USB分区(udisksctl mount -b /dev/<your USB partition block>，大多数情况下不需要sudo)或mount(sudo mount/ dev/<your USB partition block> /where/your/mount/stuff，sudo是必需的)\n    2. cd到你的USB驱动器并在FAT32分区根目录mkdir com.apple.recovery.boot\n       由于acidanthera更新了macrecovery，它现在会自动生成com.apple.recovery文件夹并将BaseSystem或RecoveryImage以及chunklist放入文件夹。你可以直接使用com.apple.recovery文件夹。跳过此步骤\n    3. 使用cp或rsync将BaseSystem.dmg和BaseSystem.chunklist放入com.apple.recovery.boot文件夹。\n       使用cp或rsync将com.apple.recovery.boot文件夹放入FAT32分区根目录\n\n\n# 方法二(如果第一种方法不起作用)\n\n在终端:\n\n 1. 运行lsblk并确定您的USB设备块\n 2. 运行sudo gdisk /dev/<your USB block>\n    1. 如果询问使用哪个分区表，请选择GPT。\n    2. 输入p打印块的分区(并验证它是所需要的)\n    3. 输入o清除分区表并创建一个新的GPT表(如果不是空的)\n       1. 输入y确认\n    4. 输入 n\n       1. partition number：默认为空\n       2. first sector：默认为空\n       3. last sector：+200M创建一个200MB的分区，稍后在OPENCORE上命名\n       4. Hex code or GUID：0700用于Microsoft Basic Data类型\n    5. 输入 n\n       1. partition number：默认为空\n       2. first sector：默认值保持空白\n       3. last sector：默认为空 (或者如果你想进一步分区USB的其余部分，你可以把它设为+3G)\n       4. Hex code or GUID：af00用于Apple HFS/HFS+\n    6. 输入w\n       * 输入y确认\n       * 在某些情况下需要重新启动，但很少，如果你想要确保，重新启动你的计算机。你也可以尝试重新插入USB。\n    7. 输入q,关闭gdisk\n 3. 再次使用lsblk来确定200MB的驱动器和其他分区\n 4. 运行sudo mkfs.vfat -F 32 -n "OPENCORE" /dev/<your USB partition block>以将你的USB格式化为FAT32文件系统并命名为OPENCORE。\n 5. 然后cd到/OpenCore/Utilities/macrecovery/你应该得到一个.dmg和.chunklist文件\n    1. 使用udisksctl挂载USB分区(udisksctl mount -b /dev/<your USB partition block>，大多数情况下不需要sudo)或mount(sudo mount/ dev/<your USB partition block> /where/your/mount/stuff，sudo是必需的)\n    2. 使用cp或rsync将BaseSystem.dmg和BaseSystem.chunklist放入com.apple.recovery.boot文件夹。\n       使用cp或rsync将com.apple.recovery.boot文件夹放入FAT32分区根目录\n    3. 下载dmg2img(大多数发行版都有)\n    4. 运行dmg2img -l BaseSystem.dmg并确定哪个分区具有磁盘映像属性\n    5. 运行sudo dmg2img -p <the partition number> BaseSystem.dmg /dev/<your 3GB+ partition block>提取恢复映像并将其写入分区磁盘\n       * 这需要一些时间。如果你用的是慢速USB(我用快的USB2.0硬盘花了不到5分钟)。\n\n\n# 现在，所有这些都完成了，转到设置EFI来完成您的工作',normalizedContent:'# 在linux上创建安装程序\n\n虽然你不需要重新安装macos来使用opencore，但有些用户更喜欢在启动管理器升级时使用新的版本。\n\n首先，您需要以下内容:\n\n * 4gb usb\n * macrecovery.py\n\n\n# 下载macos\n\n现在开始，首先进入macrecovery的文件夹，并运行以下命令之一:\n\n\n\n# 调整下面的命令到正确的文件夹\ncd ~/downloads/opencore-0/utilities/macrecovery/\n\n\n接下来，根据你想要启动的操作系统运行以下命令之一：\n\n# lion (10.7):\npython3 ./macrecovery.py -b mac-2e6fab96566fe58c -m 00000000000f25y00 download\npython3 ./macrecovery.py -b mac-c3ec7cd22292981f -m 00000000000f0hm00 download\n\n# mountain lion (10.8):\npython3 ./macrecovery.py -b mac-7df2a3b5e5d671ed -m 00000000000f65100 download\n\n# mavericks (10.9):\npython3 ./macrecovery.py -b mac-f60deb81ff30acf6 -m 00000000000fnn100 download\n\n# yosemite (10.10):\npython3 ./macrecovery.py -b mac-e43c1c25d4880ad6 -m 00000000000gdvw00 download\n\n# el capitan (10.11):\npython3 ./macrecovery.py -b mac-ffe5ef870d7ba81a -m 00000000000gqrx00 download\n\n# sierra (10.12):\npython3 ./macrecovery.py -b mac-77f17d7da9285301 -m 00000000000j0dx00 download\n\n# high sierra (10.13)\npython3 ./macrecovery.py -b mac-7ba5b2d9e42ddd94 -m 00000000000j80300 download\npython3 ./macrecovery.py -b mac-be088af8c5eb4fa2 -m 00000000000j80300 download\n\n# mojave (10.14)\npython3 ./macrecovery.py -b mac-7ba5b2dfe22ddd8c -m 00000000000kxpg00 download\n\n# catalina (10.15)\npython3 ./macrecovery.py -b mac-00be6ed71e35eb86 -m 00000000000000000 download\n\n# big sur (11)\npython3 ./macrecovery.py -b mac-42fd25eabcabb274 -m 00000000000000000 download\n\n# monterey (12)\npython3 ./macrecovery.py -b mac-ffe5ef870d7ba81a -m 00000000000000000 download\n\n# latest version\n# ie. ventura (13)\npython3 ./macrecovery.py -b mac-4b682c642b45593e -m 00000000000000000 download\n\n\n从这里开始，在终端中运行这些命令之一，一旦完成，你将得到类似于这样的输出：\n\n\n\n * note: 根据操作系统的不同，您将获得basesystem或recoveryimage文件。它们都以相同的方式工作，所以当我们引用basesystem时，相同的信息适用于recoveryimage\n\n * macos 12及以上注释:由于最近的macos版本引入了对usb堆栈的更改，建议您在安装macos之前映射usb端口(使用usbtoolbox)。\n   \n   * 警告： 在macos 11.3及更新版本中，xhciportlimit被损坏导致启动循环。\n     * 如果你已经映射你的usb端口并禁用xhciportlimit，你在启动macos 11.3+时不会出现问题。\n\n\n# 制作安装程序\n\n本节的目标是在usb设备中创建必要的分区。你可以使用你最喜欢的程序。gdisk``fdisk``parted``gparted或gnome-disks。本指南将重点介绍gdisk，因为它很好，可以稍后更改分区类型，因为我们需要它，以便macos recovery hd可以启动。(这里使用的发行版是ubuntu 18.04，其他版本或发行版也可以使用)\n\n感谢mid 1996在internet安装指南指南上所做的工作，这是本文的基础。\n\n\n# 方法1\n\n在终端:\n\n 1. 运行lsblk并确定您的usb设备块\n 2. 运行sudo gdisk /dev/<your usb block>\n    1. 如果询问使用哪个分区表，请选择gpt。\n    2. 输入p来打印块的分区 (并验证它是所需要的)\n    3. 输入o来清除分区表并创建一个新的gpt表(如果不是空的)\n       1. 输入y确认\n    4. 输入 n\n       1. partition number：默认为空\n       2. first sector：默认为空\n       3. last sector：默认为空\n       4. hex code or guid：0700用于microsoft basic data类型\n    5. 输入w\n       * 输入y确认\n       * 在某些情况下需要重新启动，但很少，如果你想要确保，重新启动你的计算机。你也可以尝试重新插入usb。\n    6. 输入q,关闭gdisk\n 3. 使用\' lsblk \'来确定分区的标识符\n 4. 运行sudo mkfs.vfat -f 32 -n "opencore" /dev/<your usb partition block>以将你的usb格式化为fat32文件系统并命名为opencore。\n 5. 然后cd到/opencore/utilities/macrecovery/你应该得到一个.dmg和.chunklist文件\n    1. 使用udisksctl挂载usb分区(udisksctl mount -b /dev/<your usb partition block>，大多数情况下不需要sudo)或mount(sudo mount/ dev/<your usb partition block> /where/your/mount/stuff，sudo是必需的)\n    2. cd到你的usb驱动器并在fat32分区根目录mkdir com.apple.recovery.boot\n       由于acidanthera更新了macrecovery，它现在会自动生成com.apple.recovery文件夹并将basesystem或recoveryimage以及chunklist放入文件夹。你可以直接使用com.apple.recovery文件夹。跳过此步骤\n    3. 使用cp或rsync将basesystem.dmg和basesystem.chunklist放入com.apple.recovery.boot文件夹。\n       使用cp或rsync将com.apple.recovery.boot文件夹放入fat32分区根目录\n\n\n# 方法二(如果第一种方法不起作用)\n\n在终端:\n\n 1. 运行lsblk并确定您的usb设备块\n 2. 运行sudo gdisk /dev/<your usb block>\n    1. 如果询问使用哪个分区表，请选择gpt。\n    2. 输入p打印块的分区(并验证它是所需要的)\n    3. 输入o清除分区表并创建一个新的gpt表(如果不是空的)\n       1. 输入y确认\n    4. 输入 n\n       1. partition number：默认为空\n       2. first sector：默认为空\n       3. last sector：+200m创建一个200mb的分区，稍后在opencore上命名\n       4. hex code or guid：0700用于microsoft basic data类型\n    5. 输入 n\n       1. partition number：默认为空\n       2. first sector：默认值保持空白\n       3. last sector：默认为空 (或者如果你想进一步分区usb的其余部分，你可以把它设为+3g)\n       4. hex code or guid：af00用于apple hfs/hfs+\n    6. 输入w\n       * 输入y确认\n       * 在某些情况下需要重新启动，但很少，如果你想要确保，重新启动你的计算机。你也可以尝试重新插入usb。\n    7. 输入q,关闭gdisk\n 3. 再次使用lsblk来确定200mb的驱动器和其他分区\n 4. 运行sudo mkfs.vfat -f 32 -n "opencore" /dev/<your usb partition block>以将你的usb格式化为fat32文件系统并命名为opencore。\n 5. 然后cd到/opencore/utilities/macrecovery/你应该得到一个.dmg和.chunklist文件\n    1. 使用udisksctl挂载usb分区(udisksctl mount -b /dev/<your usb partition block>，大多数情况下不需要sudo)或mount(sudo mount/ dev/<your usb partition block> /where/your/mount/stuff，sudo是必需的)\n    2. 使用cp或rsync将basesystem.dmg和basesystem.chunklist放入com.apple.recovery.boot文件夹。\n       使用cp或rsync将com.apple.recovery.boot文件夹放入fat32分区根目录\n    3. 下载dmg2img(大多数发行版都有)\n    4. 运行dmg2img -l basesystem.dmg并确定哪个分区具有磁盘映像属性\n    5. 运行sudo dmg2img -p <the partition number> basesystem.dmg /dev/<your 3gb+ partition block>提取恢复映像并将其写入分区磁盘\n       * 这需要一些时间。如果你用的是慢速usb(我用快的usb2.0硬盘花了不到5分钟)。\n\n\n# 现在，所有这些都完成了，转到设置efi来完成您的工作',charsets:{cjk:!0}},{title:"旧版macOS：离线办法",frontmatter:{},regularPath:"/installer-guide/mac-install-pkg.html",relativePath:"installer-guide/mac-install-pkg.md",key:"v-4bcae236",path:"/installer-guide/mac-install-pkg.html",headers:[{level:3,title:"提取安装程序",slug:"提取安装程序",normalizedTitle:"提取安装程序",charIndex:469},{level:3,title:"完成后，您可以转到设置安装程序",slug:"完成后-您可以转到设置安装程序",normalizedTitle:"完成后，您可以转到设置安装程序",charIndex:1846}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"提取安装程序 完成后，您可以转到设置安装程序",content:'# 旧版macOS：离线办法\n\n这种方法允许我们从苹果下载完整的安装程序，但仅限于以下macOS版本:\n\n * Lion (10.7)\n * Mountain Lion (10.8)\n * Yosemite (10.10)\n * El Capitan (10.11)\n * Sierra (10.12)\n\n提示\n\nMavericks(10.9)无法使用此方法。此版本参见旧版macOS：在线办法。\n\n要开始，请进入以下链接之一:\n\n * Mac OS X Lion安装程序\n * Mac OS X Mountain Lion安装程序\n * 如何获得旧版本的macOS（对于10.10 - 10.12安装程序）\n\n下载所需的版本，应该提供.dmg文件，其中包含.pkg文件。\n\n根据你使用的操作系统，你可以安装这个包，它会为你提供一个“安装(macOS版本)”。然后转到设置安装程序。但是，如果您收到此错误：\n\n\n\n这意味着您的SMBIOS太新了，无法本地运行该版本(即使您试图为另一台计算机制作USB，它仍然会检查)。这意味着我们需要手动提取安装程序。\n\n\n# 提取安装程序\n\n首先，获取InstallMacOSX/InstallOS.dmg并挂载:\n\n\n\n接下来，让我们打开终端窗口并将软件包解压缩到桌面上的一个文件夹中。这可能需要一段时间。\n\n * 对于Lion和Mountain Lion:\n\ncd ~/Desktop\npkgutil --expand-full "/Volumes/Install Mac OS X/InstallMacOSX.pkg" OSInstaller\n\n\n * 对于Yosemite和El Capitan:\n\ncd ~/Desktop\npkgutil --expand-full "/Volumes/Install OS X/InstallMacOSX.pkg" OSInstaller\n\n\n * 对于Sierra:\n\ncd ~/Desktop\npkgutil --expand-full "/Volumes/Install macOS/InstallOS.pkg" OSInstaller\n\n\n接下来，运行以下命令(一次一个):\n\n * Lion:\n\ncd OSInstaller/InstallMacOSX.pkg\nmv InstallESD.dmg "Payload/Install Mac OS X Lion.app/Contents/SharedSupport/"\nmv "Payload/Install Mac OS X Lion.app" /Applications\n\n\n * Mountain Lion:\n\ncd OSInstaller/InstallMacOSX.pkg\nmv InstallESD.dmg "Payload/Install OS X Mountain Lion.app/Contents/SharedSupport/"\nmv "Payload/Install OS X Mountain Lion.app" /Applications\n\n\n * Yosemite:\n\ncd OSInstaller/InstallMacOSX.pkg\nmv InstallESD.dmg "Payload/Install OS X Yosemite.app/Contents/SharedSupport/"\nmv "Payload/Install OS X Yosemite.app" /Applications\n\n\n * El Capitan:\n\ncd OSInstaller/InstallMacOSX.pkg\nmv InstallESD.dmg "Payload/Install OS X El Capitan.app/Contents/SharedSupport/"\nmv "Payload/Install OS X El Capitan.app" /Applications\n\n\n * Sierra:\n\ncd OSInstaller/InstallOS.pkg\nmv InstallESD.dmg "Payload/Install macOS Sierra.app/Contents/SharedSupport/"\nmv "Payload/Install macOS Sierra.app" /Applications\n\n\n\n# 完成后，您可以转到设置安装程序',normalizedContent:'# 旧版macos：离线办法\n\n这种方法允许我们从苹果下载完整的安装程序，但仅限于以下macos版本:\n\n * lion (10.7)\n * mountain lion (10.8)\n * yosemite (10.10)\n * el capitan (10.11)\n * sierra (10.12)\n\n提示\n\nmavericks(10.9)无法使用此方法。此版本参见旧版macos：在线办法。\n\n要开始，请进入以下链接之一:\n\n * mac os x lion安装程序\n * mac os x mountain lion安装程序\n * 如何获得旧版本的macos（对于10.10 - 10.12安装程序）\n\n下载所需的版本，应该提供.dmg文件，其中包含.pkg文件。\n\n根据你使用的操作系统，你可以安装这个包，它会为你提供一个“安装(macos版本)”。然后转到设置安装程序。但是，如果您收到此错误：\n\n\n\n这意味着您的smbios太新了，无法本地运行该版本(即使您试图为另一台计算机制作usb，它仍然会检查)。这意味着我们需要手动提取安装程序。\n\n\n# 提取安装程序\n\n首先，获取installmacosx/installos.dmg并挂载:\n\n\n\n接下来，让我们打开终端窗口并将软件包解压缩到桌面上的一个文件夹中。这可能需要一段时间。\n\n * 对于lion和mountain lion:\n\ncd ~/desktop\npkgutil --expand-full "/volumes/install mac os x/installmacosx.pkg" osinstaller\n\n\n * 对于yosemite和el capitan:\n\ncd ~/desktop\npkgutil --expand-full "/volumes/install os x/installmacosx.pkg" osinstaller\n\n\n * 对于sierra:\n\ncd ~/desktop\npkgutil --expand-full "/volumes/install macos/installos.pkg" osinstaller\n\n\n接下来，运行以下命令(一次一个):\n\n * lion:\n\ncd osinstaller/installmacosx.pkg\nmv installesd.dmg "payload/install mac os x lion.app/contents/sharedsupport/"\nmv "payload/install mac os x lion.app" /applications\n\n\n * mountain lion:\n\ncd osinstaller/installmacosx.pkg\nmv installesd.dmg "payload/install os x mountain lion.app/contents/sharedsupport/"\nmv "payload/install os x mountain lion.app" /applications\n\n\n * yosemite:\n\ncd osinstaller/installmacosx.pkg\nmv installesd.dmg "payload/install os x yosemite.app/contents/sharedsupport/"\nmv "payload/install os x yosemite.app" /applications\n\n\n * el capitan:\n\ncd osinstaller/installmacosx.pkg\nmv installesd.dmg "payload/install os x el capitan.app/contents/sharedsupport/"\nmv "payload/install os x el capitan.app" /applications\n\n\n * sierra:\n\ncd osinstaller/installos.pkg\nmv installesd.dmg "payload/install macos sierra.app/contents/sharedsupport/"\nmv "payload/install macos sierra.app" /applications\n\n\n\n# 完成后，您可以转到设置安装程序',charsets:{cjk:!0}},{title:"旧版macOS：磁盘映像",frontmatter:{},regularPath:"/installer-guide/mac-install-dmg.html",relativePath:"installer-guide/mac-install-dmg.md",key:"v-26c27776",path:"/installer-guide/mac-install-dmg.html",headers:[{level:3,title:"恢复驱动器",slug:"恢复驱动器",normalizedTitle:"恢复驱动器",charIndex:348},{level:3,title:"一旦你完成，你可以前往设置OpenCore的EFI环境",slug:"一旦你完成-你可以前往设置opencore的efi环境",normalizedTitle:"一旦你完成，你可以前往设置opencore的efi环境",charIndex:825},{level:3,title:"一旦你完成，你可以前往设置OpenCore的EFI环境",slug:"一旦你完成-你可以前往设置opencore的efi环境-2",normalizedTitle:"一旦你完成，你可以前往设置opencore的efi环境",charIndex:825}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"恢复驱动器 一旦你完成，你可以前往设置OpenCore的EFI环境 一旦你完成，你可以前往设置OpenCore的EFI环境",content:"# 旧版macOS：磁盘映像\n\n这种方法依赖于来自Apple或Acidanthera的托管映像，并将其恢复到您的驱动器上。\n\n# Acidanthera映像\n\n下面的安装程序是从真正的Mac恢复磁盘中提取的，删除了SMBIOS锁，OS X本身的内容没有以任何方式修改。\n\n * OS X 10.4.10(8R4088)MEGA镜像\n\n * OS X 10.5.7(9J3050)MEGA镜像\n\n * OS X 10.6.7(10J4139)MEGA镜像\n\n# Apple映像\n\n请注意，这些映像需要你有一个Apple开发者账户才能访问。\n\n * OS X 10.5.0 Golden Master(9a581)\n\n * OS X 10.6.0 Golden Master(10a432)\n\n\n# 恢复驱动器\n\n现在是有趣的部分，您首先要打开刚刚下载的dmg并将其挂载。现在打开磁盘工具，用GUID分区映射将你的驱动器格式化为macOS日志式(HFS+):\n\n\n\nNext we have 2 options to follow:\n\n * ASR恢复(Apple Software Restore)\n   * 基于终端，在启用SIP的情况下工作\n * 磁盘管理恢复\n   * May require SIP disabled in newer OSes\n\n# ASR\n\n这里你只需要打开终端并运行以下命令:\n\nsudo asr restore -source /Volumes/Mac\\ OS\\ X\\ Install\\ DVD  -target /Volumes/MyVolume -erase -noverify\n\n\n * 注:这可能与您的设置不一致，请相应地更改:\n   * 将/Volumes/Mac\\ OS\\ X\\ Install\\ DVD更改为您挂载的磁盘映像的名称\n   * 将/Volumes/MyVolume更改为USB的名称\n\n\n# 一旦你完成，你可以前往设置OpenCore的EFI环境\n\n# 磁盘管理\n\n由于磁盘管理的一些麻烦问题，如果启用SIP，许多恢复可能会失败。如果您有问题，我们建议您使用ASR方法或禁用SIP。\n\n首先，打开磁盘管理，您应该在侧边栏中看到USB驱动器和磁盘映像。从这里，选择restore\n\n\n\n排错\n\n如果在恢复过程中出现如下错误:\n\n\n\n这可能意味着需要禁用SIP，但是我们建议使用ASR方法代替。\n\n\n# 一旦你完成，你可以前往设置OpenCore的EFI环境",normalizedContent:"# 旧版macos：磁盘映像\n\n这种方法依赖于来自apple或acidanthera的托管映像，并将其恢复到您的驱动器上。\n\n# acidanthera映像\n\n下面的安装程序是从真正的mac恢复磁盘中提取的，删除了smbios锁，os x本身的内容没有以任何方式修改。\n\n * os x 10.4.10(8r4088)mega镜像\n\n * os x 10.5.7(9j3050)mega镜像\n\n * os x 10.6.7(10j4139)mega镜像\n\n# apple映像\n\n请注意，这些映像需要你有一个apple开发者账户才能访问。\n\n * os x 10.5.0 golden master(9a581)\n\n * os x 10.6.0 golden master(10a432)\n\n\n# 恢复驱动器\n\n现在是有趣的部分，您首先要打开刚刚下载的dmg并将其挂载。现在打开磁盘工具，用guid分区映射将你的驱动器格式化为macos日志式(hfs+):\n\n\n\nnext we have 2 options to follow:\n\n * asr恢复(apple software restore)\n   * 基于终端，在启用sip的情况下工作\n * 磁盘管理恢复\n   * may require sip disabled in newer oses\n\n# asr\n\n这里你只需要打开终端并运行以下命令:\n\nsudo asr restore -source /volumes/mac\\ os\\ x\\ install\\ dvd  -target /volumes/myvolume -erase -noverify\n\n\n * 注:这可能与您的设置不一致，请相应地更改:\n   * 将/volumes/mac\\ os\\ x\\ install\\ dvd更改为您挂载的磁盘映像的名称\n   * 将/volumes/myvolume更改为usb的名称\n\n\n# 一旦你完成，你可以前往设置opencore的efi环境\n\n# 磁盘管理\n\n由于磁盘管理的一些麻烦问题，如果启用sip，许多恢复可能会失败。如果您有问题，我们建议您使用asr方法或禁用sip。\n\n首先，打开磁盘管理，您应该在侧边栏中看到usb驱动器和磁盘映像。从这里，选择restore\n\n\n\n排错\n\n如果在恢复过程中出现如下错误:\n\n\n\n这可能意味着需要禁用sip，但是我们建议使用asr方法代替。\n\n\n# 一旦你完成，你可以前往设置opencore的efi环境",charsets:{cjk:!0}},{title:"旧版macOS：在线办法",frontmatter:{},regularPath:"/installer-guide/mac-install-recovery.html",relativePath:"installer-guide/mac-install-recovery.md",key:"v-04e4f2a8",path:"/installer-guide/mac-install-recovery.html",headers:[{level:3,title:"一旦你完成，你可以前往设置OpenCore的EFI环境",slug:"一旦你完成-你可以前往设置opencore的efi环境",normalizedTitle:"一旦你完成，你可以前往设置opencore的efi环境",charIndex:2034}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"一旦你完成，你可以前往设置OpenCore的EFI环境",content:"# 旧版macOS：在线办法\n\n这种方法允许我们下载macOS的旧版本，包括10.7到最新版本，但是这些只是恢复安装程序，所以需要在安装程序本身内部连接互联网\n\n首先，您需要使用macrecovery.py。这个工具实际上已经在OpenCorePkg中捆绑了；\n\n\n\n运行说明非常简单，根据你想下载的操作系统选择下面的命令:\n\n# Lion (10.7):\npython3 ./macrecovery.py -b Mac-2E6FAB96566FE58C -m 00000000000F25Y00 download\npython3 ./macrecovery.py -b Mac-C3EC7CD22292981F -m 00000000000F0HM00 download\n\n# Mountain Lion (10.8):\npython3 ./macrecovery.py -b Mac-7DF2A3B5E5D671ED -m 00000000000F65100 download\n\n# Mavericks (10.9):\npython3 ./macrecovery.py -b Mac-F60DEB81FF30ACF6 -m 00000000000FNN100 download\n\n# Yosemite (10.10):\npython3 ./macrecovery.py -b Mac-E43C1C25D4880AD6 -m 00000000000GDVW00 download\n\n# El Capitan (10.11):\npython3 ./macrecovery.py -b Mac-FFE5EF870D7BA81A -m 00000000000GQRX00 download\n\n# Sierra (10.12):\npython3 ./macrecovery.py -b Mac-77F17D7DA9285301 -m 00000000000J0DX00 download\n\n# High Sierra (10.13)\npython3 ./macrecovery.py -b Mac-7BA5B2D9E42DDD94 -m 00000000000J80300 download\npython3 ./macrecovery.py -b Mac-BE088AF8C5EB4FA2 -m 00000000000J80300 download\n\n# Mojave (10.14)\npython3 ./macrecovery.py -b Mac-7BA5B2DFE22DDD8C -m 00000000000KXPG00 download\n\n# Catalina (10.15)\npython3 ./macrecovery.py -b Mac-00BE6ED71E35EB86 -m 00000000000000000 download\n\n# Big Sur (11)\npython3 ./macrecovery.py -b Mac-42FD25EABCABB274 -m 00000000000000000 download\n\n# Monterey (12)\npython3 ./macrecovery.py -b Mac-FFE5EF870D7BA81A -m 00000000000000000 download\n\n# Latest version\n# ie. Ventura (13)\npython3 ./macrecovery.py -b Mac-4B682C642B45593E -m 00000000000000000 download\n\n\n * macOS 12及以上注释:由于最近的macOS版本引入了对USB堆栈的更改，建议您在安装macOS之前映射USB端口(使用USBToolBox)。\n   * 警告： 在macOS 11.3及更新版本中，XhciPortLimit被损坏导致启动循环。\n     * 如果你已经映射你的USB端口并禁用XhciPortLimit，你在启动macOS 11.3+时不会出现问题。\n\n从这里开始，在终端中运行这些命令之一，一旦完成，你将得到类似于这样的输出:\n\n\n\n一旦这样做，格式化你的USB为GUID分区表和FAT32文件系统：\n\n\n\n下一步骤说明\n\nacidanthera更新了macrecovery，它现在会自动生成com.apple.recovery.boot文件夹并将BaseSystem或RecoveryImage以及chunklist放入文件夹。你可以直接使用com.apple.recovery.boot文件夹。\n\n最后，在这个驱动器的根目录下创建一个名为com.apple.recovery.boot的文件夹。并将新下载的BaseSystem/RecoveryImage文件放入:\n\n\n\n\n# 一旦你完成，你可以前往设置OpenCore的EFI环境",normalizedContent:"# 旧版macos：在线办法\n\n这种方法允许我们下载macos的旧版本，包括10.7到最新版本，但是这些只是恢复安装程序，所以需要在安装程序本身内部连接互联网\n\n首先，您需要使用macrecovery.py。这个工具实际上已经在opencorepkg中捆绑了；\n\n\n\n运行说明非常简单，根据你想下载的操作系统选择下面的命令:\n\n# lion (10.7):\npython3 ./macrecovery.py -b mac-2e6fab96566fe58c -m 00000000000f25y00 download\npython3 ./macrecovery.py -b mac-c3ec7cd22292981f -m 00000000000f0hm00 download\n\n# mountain lion (10.8):\npython3 ./macrecovery.py -b mac-7df2a3b5e5d671ed -m 00000000000f65100 download\n\n# mavericks (10.9):\npython3 ./macrecovery.py -b mac-f60deb81ff30acf6 -m 00000000000fnn100 download\n\n# yosemite (10.10):\npython3 ./macrecovery.py -b mac-e43c1c25d4880ad6 -m 00000000000gdvw00 download\n\n# el capitan (10.11):\npython3 ./macrecovery.py -b mac-ffe5ef870d7ba81a -m 00000000000gqrx00 download\n\n# sierra (10.12):\npython3 ./macrecovery.py -b mac-77f17d7da9285301 -m 00000000000j0dx00 download\n\n# high sierra (10.13)\npython3 ./macrecovery.py -b mac-7ba5b2d9e42ddd94 -m 00000000000j80300 download\npython3 ./macrecovery.py -b mac-be088af8c5eb4fa2 -m 00000000000j80300 download\n\n# mojave (10.14)\npython3 ./macrecovery.py -b mac-7ba5b2dfe22ddd8c -m 00000000000kxpg00 download\n\n# catalina (10.15)\npython3 ./macrecovery.py -b mac-00be6ed71e35eb86 -m 00000000000000000 download\n\n# big sur (11)\npython3 ./macrecovery.py -b mac-42fd25eabcabb274 -m 00000000000000000 download\n\n# monterey (12)\npython3 ./macrecovery.py -b mac-ffe5ef870d7ba81a -m 00000000000000000 download\n\n# latest version\n# ie. ventura (13)\npython3 ./macrecovery.py -b mac-4b682c642b45593e -m 00000000000000000 download\n\n\n * macos 12及以上注释:由于最近的macos版本引入了对usb堆栈的更改，建议您在安装macos之前映射usb端口(使用usbtoolbox)。\n   * 警告： 在macos 11.3及更新版本中，xhciportlimit被损坏导致启动循环。\n     * 如果你已经映射你的usb端口并禁用xhciportlimit，你在启动macos 11.3+时不会出现问题。\n\n从这里开始，在终端中运行这些命令之一，一旦完成，你将得到类似于这样的输出:\n\n\n\n一旦这样做，格式化你的usb为guid分区表和fat32文件系统：\n\n\n\n下一步骤说明\n\nacidanthera更新了macrecovery，它现在会自动生成com.apple.recovery.boot文件夹并将basesystem或recoveryimage以及chunklist放入文件夹。你可以直接使用com.apple.recovery.boot文件夹。\n\n最后，在这个驱动器的根目录下创建一个名为com.apple.recovery.boot的文件夹。并将新下载的basesystem/recoveryimage文件放入:\n\n\n\n\n# 一旦你完成，你可以前往设置opencore的efi环境",charsets:{cjk:!0}},{title:"在macOS上创建安装程序",frontmatter:{},regularPath:"/installer-guide/mac-install.html",relativePath:"installer-guide/mac-install.md",key:"v-653bc856",path:"/installer-guide/mac-install.html",headers:[{level:2,title:"下载现代macOS",slug:"下载现代macos",normalizedTitle:"下载现代macos",charIndex:236},{level:2,title:"使用App Store",slug:"使用app-store",normalizedTitle:"使用app store",charIndex:536},{level:2,title:"命令行软件更新实用程序",slug:"命令行软件更新实用程序",normalizedTitle:"命令行软件更新实用程序",charIndex:585},{level:2,title:"Munki的InstallInstallMacOS实用程序",slug:"munki的installinstallmacos实用程序",normalizedTitle:"munki的installinstallmacos实用程序",charIndex:601},{level:2,title:"下载旧版macOS",slug:"下载旧版macos",normalizedTitle:"下载旧版macos",charIndex:285},{level:2,title:"设置安装程序",slug:"设置安装程序",normalizedTitle:"设置安装程序",charIndex:705},{level:2,title:"遗留的设置",slug:"遗留的设置",normalizedTitle:"遗留的设置",charIndex:5037},{level:2,title:"设置OpenCore的EFI环境",slug:"设置opencore的efi环境",normalizedTitle:"设置opencore的efi环境",charIndex:2694},{level:2,title:"现在，所有这些都完成了，转到设置EFI来完成您的工作",slug:"现在-所有这些都完成了-转到设置efi来完成您的工作",normalizedTitle:"现在，所有这些都完成了，转到设置efi来完成您的工作",charIndex:5688}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"下载现代macOS 使用App Store 命令行软件更新实用程序 Munki的InstallInstallMacOS实用程序 下载旧版macOS 设置安装程序 遗留的设置 设置OpenCore的EFI环境 现在，所有这些都完成了，转到设置EFI来完成您的工作",content:'# 在macOS上创建安装程序\n\n虽然你不需要重新安装macOS来使用OpenCore，但有些用户更喜欢在启动管理器升级时使用新的版本。\n\n首先，我们需要一个macOS的拷贝。如果你只是制作一个可引导的OpenCore而不是安装程序，你可以跳过这个步骤，直接格式化USB。对于其他人，你可以从App Store下载macOS，也可以使用Munki的脚本。\n\n> 译者注：本指南中所有的安装程序都称为Install macOS.app，而非安装macOS.app。\n\n\n# 下载现代macOS\n\n此方法允许您下载macOS 10.13及更新版本，10.12及更早版本请参见下载旧版macOS。\n\n * macOS 12及以上注释:由于最近的macOS版本引入了对USB堆栈的更改，建议您在安装macOS之前映射USB端口(使用USBToolBox)。\n   * 警告： 在macOS 11.3及更新版本中，XhciPortLimit被损坏导致启动循环。\n     * 如果你已经映射你的USB端口并禁用XhciPortLimit，你在启动macOS 11.3+时不会出现问题。\n\n从一台符合你想要安装的操作系统版本要求的macOS机器，直接进入App Store:\n\n * 使用App Store\n\n对于需要特定操作系统版本或无法从App Store下载的机器:\n\n * 命令行软件更新实用程序,\n * Munki的InstallInstallMacOS实用程序\n\n\n# 使用App Store\n\n从一台符合你想要安装的操作系统版本要求的macOS机器上，直接到App Store下载所需的操作系统版本，然后继续设置安装程序。\n\n\n# 命令行软件更新实用程序\n\n打开终端窗口，复制粘贴下面的命令:\n\nsoftwareupdate --list-full-installers;echo;echo "请输入你想下载的版本号:";read;$(if [ -n "$REPLY" ]; then; echo "softwareupdate --fetch-full-installer --full-installer-version "$REPLY; fi);\n\n\n\n\n这将为您提供一个可供选择的可用版本列表。 一旦下载，它将保存在您的应用程序文件夹。 您可以继续设置安装程序。\n\n\n# Munki的InstallInstallMacOS实用程序\n\n运行macOS Monterey 12.3或以上版本的用户注意事项\n\n从macOS Monterey 12.3开始，Apple取消了对\' python2.7 \'的支持。因此没有它，installinstallmacos.py将抛出以下错误:\n\nThis tool requires the Python xattr module. Perhaps run \'pip install xattr\' to install it.\n\n\n为了解决这个问题，我们建议安装Command Line Tools for Xcode，在终端中运行xcode-select --install，然后运行pip3 install xattr。\n\n之后，你可以运行下面相同的命令，但使用python3而不是python:\n\nmkdir -p ~/macOS-installer && cd ~/macOS-installer && curl https://raw.githubusercontent.com/munki/macadmin-scripts/main/installinstallmacos.py > installinstallmacos.py && sudo python3 installinstallmacos.py\n\n\n为了运行它，只需在终端窗口中复制并粘贴下面的命令:\n\nmkdir -p ~/macOS-installer && cd ~/macOS-installer && curl https://raw.githubusercontent.com/munki/macadmin-scripts/main/installinstallmacos.py > installinstallmacos.py && sudo python installinstallmacos.py\n\n\n\n\n正如你所看到的，我们得到了一个很好的macOS安装程序列表。如果你需要一个特定版本的macOS，你可以通过输入旁边的数字来选择它。在这个例子中，我们选择10：\n\n\n\n这将需要一段时间，因为我们正在下载整个8GB以上的macOS安装程序，所以强烈建议你在等待的同时阅读指南的其余部分。\n\n完成后，您会在~/macOS-Installer/文件夹中发现一个包含macOS安装程序的DMG。这里以名为Install_macOS_11.1-20C69.dmg的安装程序为例。挂载它，您将找到安装应用程序。\n\n * 注意:我们建议将安装macOS.app放到/Applications文件夹中，因为我们将从那里执行命令。\n * 注意2:在访达中运行Cmd+Shift+G将允许您轻松跳转到~/macOS-installer\n\n\n\n\n\n从这里，跳转到设置安装程序完成您的工作。如果您想检查下载的完整性，您可以检查这个校验和存储库，但请注意，这些是众包校验和，可能不是检查真实性的可靠方法。\n\n\n# 下载旧版macOS\n\n * This method allows you to download much older versions of OS X, currently supporting all Intel versions of OS X(10.4 to current)\n   \n   * 旧版macOS：离线办法\n     * 支持10.7-10.12，不包括10.9\n   * 旧版macOS：在线办法\n     * 支持10.7-11\n   * 旧版macOS：磁盘映像\n     * 支持10.4-10.6\n\n\n# 设置安装程序\n\n现在我们将格式化USB，为macOS安装程序和OpenCore做准备。我们希望使用带有GUID分区映射的macOS日志式(HFS+)。这将创建两个分区:主分区MyVolume和第二个名为EFI的分区，它用作引导分区，固件将在其中检查引导文件。\n\n * 注1:格式化USB创建的“EFI”分区是隐藏的。直到当设置OpenCore的EFI环境时你挂载它\n * 注2:默认情况下，磁盘实用程序只显示分区-按Cmd/Win+2显示所有设备(或者你可以按视图按钮)\n * 注3:遵循旧版macOS：在线办法部分的用户可以跳转到设置OpenCore的EFI环境\n\n\n\n接下来运行Apple提供的createinstallmedia命令。请注意，该命令是为格式化后的名称为MyVolume的USB准备的（如果是其他盘符，请替换掉/Volumes/MyVolime中的MyVolume）:\n\nsudo /Applications/Install\\ macOS\\ Big\\ Sur.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume\n\n\nApple Silicon上安装比Big Sur更老的macOS的用户的注意事项\n\n如果createinstallmedia出现zsh: killed或killed: 9失败，那么很可能是安装程序的代码签名有问题。要解决这个问题，可以运行以下命令:\n\ncd /Applications/Install\\ macOS\\ Big\\ Sur.app/Contents/Resources/\ncodesign -s - -f --deep /Applications/Install\\ macOS\\ Big\\ Sur.app\n\n\n你需要安装Xcode的命令行工具:\n\nxcode-select --install\n\n\n这需要一些时间，所以你可能想喝杯咖啡或继续阅读指南(公平地说，你真的不应该在没有阅读全文的情况下一步一步地遵循本指南)。\n\n您还可以将createinstallmedia路径替换为安装程序所在的路径(与驱动器名称相同)。\n\n遗留的createinstallmedia命令\n\n摘自苹果自己的网站:如何为macOS创建一个可启动的安装程序\n\n# Ventura\nsudo /Applications/Install\\ macOS\\ Ventura.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume\n\n# Monterey\nsudo /Applications/Install\\ macOS\\ Monterey.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume\n\n# Big Sur\nsudo /Applications/Install\\ macOS\\ Big\\ Sur.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume\n\n# Catalina\nsudo /Applications/Install\\ macOS\\ Catalina.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume\n\n# Mojave\nsudo /Applications/Install\\ macOS\\ Mojave.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume\n\n# High Sierra\nsudo /Applications/Install\\ macOS\\ High\\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume\n\n# Sierra\nsudo /Applications/Install\\ macOS\\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume --applicationpath /Applications/Install\\ macOS\\ Sierra.app\n\n# El Capitan\nsudo /Applications/Install\\ OS\\ X\\ El\\ Capitan.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume --applicationpath /Applications/Install\\ OS\\ X\\ El\\ Capitan.app\n\n# Yosemite\nsudo /Applications/Install\\ OS\\ X\\ Yosemite.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume --applicationpath /Applications/Install\\ OS\\ X\\ Yosemite.app\n\n# Mavericks\nsudo /Applications/Install\\ OS\\ X\\ Mavericks.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume --applicationpath /Applications/Install\\ OS\\ X\\ Mavericks.app --nointeraction\n\n\n\n# 遗留的设置\n\n对于不支持UEFI引导的系统，请参见以下内容:\n\n设置旧启动\n\n首先，您需要以下内容:\n\n * BootInstall_IA32.tool或BootInstall_X64.tool\n   * 这可以在OpenCorePkg下的/utilities/LegacyBoot/中找到。\n * 安装USB(上面创建的)\n\n在你的OpenCore构建文件夹中，导航到Utilities/LegacyBoot。在这里你会发现一个名为BootInstall_ARCH.tool的文件。它的作用是将DuetPkg安装到所需的驱动器上。\n\n\n\n现在在终端中使用sudo运行这个工具(否则这个工具可能会失败):\n\n# 如果您有32位CPU，请将X64替换为IA32\nsudo ~/Downloads/OpenCore/Utilities/legacyBoot/BootInstall_X64.tool\n\n\n\n\n这将为您提供可用磁盘的列表，选择您的磁盘，然后将提示您编写新的MBR。选择[y]，你就完成了。\n\n\n\n\n\n这将为您提供一个带有bootia32或bootx64文件的EFI分区\n\n\n# 设置OpenCore的EFI环境\n\n设置OpenCore的EFI环境很简单——你所需要做的就是挂载我们的EFI系统分区。这是在我们使用GUID格式化时自动创建的，但默认情况下是卸载的，这就是我们的朋友MountEFI的作用:\n\n\n\n您会注意到，一旦我们打开EFI分区，它是空的。这就是乐趣开始的地方。\n\n\n\n\n# 现在，所有这些都完成了，转到设置EFI来完成您的工作',normalizedContent:'# 在macos上创建安装程序\n\n虽然你不需要重新安装macos来使用opencore，但有些用户更喜欢在启动管理器升级时使用新的版本。\n\n首先，我们需要一个macos的拷贝。如果你只是制作一个可引导的opencore而不是安装程序，你可以跳过这个步骤，直接格式化usb。对于其他人，你可以从app store下载macos，也可以使用munki的脚本。\n\n> 译者注：本指南中所有的安装程序都称为install macos.app，而非安装macos.app。\n\n\n# 下载现代macos\n\n此方法允许您下载macos 10.13及更新版本，10.12及更早版本请参见下载旧版macos。\n\n * macos 12及以上注释:由于最近的macos版本引入了对usb堆栈的更改，建议您在安装macos之前映射usb端口(使用usbtoolbox)。\n   * 警告： 在macos 11.3及更新版本中，xhciportlimit被损坏导致启动循环。\n     * 如果你已经映射你的usb端口并禁用xhciportlimit，你在启动macos 11.3+时不会出现问题。\n\n从一台符合你想要安装的操作系统版本要求的macos机器，直接进入app store:\n\n * 使用app store\n\n对于需要特定操作系统版本或无法从app store下载的机器:\n\n * 命令行软件更新实用程序,\n * munki的installinstallmacos实用程序\n\n\n# 使用app store\n\n从一台符合你想要安装的操作系统版本要求的macos机器上，直接到app store下载所需的操作系统版本，然后继续设置安装程序。\n\n\n# 命令行软件更新实用程序\n\n打开终端窗口，复制粘贴下面的命令:\n\nsoftwareupdate --list-full-installers;echo;echo "请输入你想下载的版本号:";read;$(if [ -n "$reply" ]; then; echo "softwareupdate --fetch-full-installer --full-installer-version "$reply; fi);\n\n\n\n\n这将为您提供一个可供选择的可用版本列表。 一旦下载，它将保存在您的应用程序文件夹。 您可以继续设置安装程序。\n\n\n# munki的installinstallmacos实用程序\n\n运行macos monterey 12.3或以上版本的用户注意事项\n\n从macos monterey 12.3开始，apple取消了对\' python2.7 \'的支持。因此没有它，installinstallmacos.py将抛出以下错误:\n\nthis tool requires the python xattr module. perhaps run \'pip install xattr\' to install it.\n\n\n为了解决这个问题，我们建议安装command line tools for xcode，在终端中运行xcode-select --install，然后运行pip3 install xattr。\n\n之后，你可以运行下面相同的命令，但使用python3而不是python:\n\nmkdir -p ~/macos-installer && cd ~/macos-installer && curl https://raw.githubusercontent.com/munki/macadmin-scripts/main/installinstallmacos.py > installinstallmacos.py && sudo python3 installinstallmacos.py\n\n\n为了运行它，只需在终端窗口中复制并粘贴下面的命令:\n\nmkdir -p ~/macos-installer && cd ~/macos-installer && curl https://raw.githubusercontent.com/munki/macadmin-scripts/main/installinstallmacos.py > installinstallmacos.py && sudo python installinstallmacos.py\n\n\n\n\n正如你所看到的，我们得到了一个很好的macos安装程序列表。如果你需要一个特定版本的macos，你可以通过输入旁边的数字来选择它。在这个例子中，我们选择10：\n\n\n\n这将需要一段时间，因为我们正在下载整个8gb以上的macos安装程序，所以强烈建议你在等待的同时阅读指南的其余部分。\n\n完成后，您会在~/macos-installer/文件夹中发现一个包含macos安装程序的dmg。这里以名为install_macos_11.1-20c69.dmg的安装程序为例。挂载它，您将找到安装应用程序。\n\n * 注意:我们建议将安装macos.app放到/applications文件夹中，因为我们将从那里执行命令。\n * 注意2:在访达中运行cmd+shift+g将允许您轻松跳转到~/macos-installer\n\n\n\n\n\n从这里，跳转到设置安装程序完成您的工作。如果您想检查下载的完整性，您可以检查这个校验和存储库，但请注意，这些是众包校验和，可能不是检查真实性的可靠方法。\n\n\n# 下载旧版macos\n\n * this method allows you to download much older versions of os x, currently supporting all intel versions of os x(10.4 to current)\n   \n   * 旧版macos：离线办法\n     * 支持10.7-10.12，不包括10.9\n   * 旧版macos：在线办法\n     * 支持10.7-11\n   * 旧版macos：磁盘映像\n     * 支持10.4-10.6\n\n\n# 设置安装程序\n\n现在我们将格式化usb，为macos安装程序和opencore做准备。我们希望使用带有guid分区映射的macos日志式(hfs+)。这将创建两个分区:主分区myvolume和第二个名为efi的分区，它用作引导分区，固件将在其中检查引导文件。\n\n * 注1:格式化usb创建的“efi”分区是隐藏的。直到当设置opencore的efi环境时你挂载它\n * 注2:默认情况下，磁盘实用程序只显示分区-按cmd/win+2显示所有设备(或者你可以按视图按钮)\n * 注3:遵循旧版macos：在线办法部分的用户可以跳转到设置opencore的efi环境\n\n\n\n接下来运行apple提供的createinstallmedia命令。请注意，该命令是为格式化后的名称为myvolume的usb准备的（如果是其他盘符，请替换掉/volumes/myvolime中的myvolume）:\n\nsudo /applications/install\\ macos\\ big\\ sur.app/contents/resources/createinstallmedia --volume /volumes/myvolume\n\n\napple silicon上安装比big sur更老的macos的用户的注意事项\n\n如果createinstallmedia出现zsh: killed或killed: 9失败，那么很可能是安装程序的代码签名有问题。要解决这个问题，可以运行以下命令:\n\ncd /applications/install\\ macos\\ big\\ sur.app/contents/resources/\ncodesign -s - -f --deep /applications/install\\ macos\\ big\\ sur.app\n\n\n你需要安装xcode的命令行工具:\n\nxcode-select --install\n\n\n这需要一些时间，所以你可能想喝杯咖啡或继续阅读指南(公平地说，你真的不应该在没有阅读全文的情况下一步一步地遵循本指南)。\n\n您还可以将createinstallmedia路径替换为安装程序所在的路径(与驱动器名称相同)。\n\n遗留的createinstallmedia命令\n\n摘自苹果自己的网站:如何为macos创建一个可启动的安装程序\n\n# ventura\nsudo /applications/install\\ macos\\ ventura.app/contents/resources/createinstallmedia --volume /volumes/myvolume\n\n# monterey\nsudo /applications/install\\ macos\\ monterey.app/contents/resources/createinstallmedia --volume /volumes/myvolume\n\n# big sur\nsudo /applications/install\\ macos\\ big\\ sur.app/contents/resources/createinstallmedia --volume /volumes/myvolume\n\n# catalina\nsudo /applications/install\\ macos\\ catalina.app/contents/resources/createinstallmedia --volume /volumes/myvolume\n\n# mojave\nsudo /applications/install\\ macos\\ mojave.app/contents/resources/createinstallmedia --volume /volumes/myvolume\n\n# high sierra\nsudo /applications/install\\ macos\\ high\\ sierra.app/contents/resources/createinstallmedia --volume /volumes/myvolume\n\n# sierra\nsudo /applications/install\\ macos\\ sierra.app/contents/resources/createinstallmedia --volume /volumes/myvolume --applicationpath /applications/install\\ macos\\ sierra.app\n\n# el capitan\nsudo /applications/install\\ os\\ x\\ el\\ capitan.app/contents/resources/createinstallmedia --volume /volumes/myvolume --applicationpath /applications/install\\ os\\ x\\ el\\ capitan.app\n\n# yosemite\nsudo /applications/install\\ os\\ x\\ yosemite.app/contents/resources/createinstallmedia --volume /volumes/myvolume --applicationpath /applications/install\\ os\\ x\\ yosemite.app\n\n# mavericks\nsudo /applications/install\\ os\\ x\\ mavericks.app/contents/resources/createinstallmedia --volume /volumes/myvolume --applicationpath /applications/install\\ os\\ x\\ mavericks.app --nointeraction\n\n\n\n# 遗留的设置\n\n对于不支持uefi引导的系统，请参见以下内容:\n\n设置旧启动\n\n首先，您需要以下内容:\n\n * bootinstall_ia32.tool或bootinstall_x64.tool\n   * 这可以在opencorepkg下的/utilities/legacyboot/中找到。\n * 安装usb(上面创建的)\n\n在你的opencore构建文件夹中，导航到utilities/legacyboot。在这里你会发现一个名为bootinstall_arch.tool的文件。它的作用是将duetpkg安装到所需的驱动器上。\n\n\n\n现在在终端中使用sudo运行这个工具(否则这个工具可能会失败):\n\n# 如果您有32位cpu，请将x64替换为ia32\nsudo ~/downloads/opencore/utilities/legacyboot/bootinstall_x64.tool\n\n\n\n\n这将为您提供可用磁盘的列表，选择您的磁盘，然后将提示您编写新的mbr。选择[y]，你就完成了。\n\n\n\n\n\n这将为您提供一个带有bootia32或bootx64文件的efi分区\n\n\n# 设置opencore的efi环境\n\n设置opencore的efi环境很简单——你所需要做的就是挂载我们的efi系统分区。这是在我们使用guid格式化时自动创建的，但默认情况下是卸载的，这就是我们的朋友mountefi的作用:\n\n\n\n您会注意到，一旦我们打开efi分区，它是空的。这就是乐趣开始的地方。\n\n\n\n\n# 现在，所有这些都完成了，转到设置efi来完成您的工作',charsets:{cjk:!0}},{title:"添加基本OpenCore文件",frontmatter:{},regularPath:"/installer-guide/opencore-efi.html",relativePath:"installer-guide/opencore-efi.md",key:"v-d26f5a2c",path:"/installer-guide/opencore-efi.html",lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:null,content:"# 添加基本OpenCore文件\n\n要设置OpenCore的文件夹结构，你需要在OpenCorePkg的发布中找到EFI文件夹。请注意，它们将在IA32或X64文件夹下，前者用于32位固件，后者用于64位固件：\n\n\n\n关于DEBUG与RELEASE版本：\n\n * DEBUG：可以极大地帮助调试启动问题，但是可能会增加一些明显的启动时间延迟(例如:3-5秒到达拾取器)。安装后，您可以轻松地过渡到RELEASE\n * RELEASE：更快的启动时间，但实际上没有提供有用的调试信息，使故障排除更加困难。\n\n下载后，将EFI文件夹（从OpenCorePkg获取的）放在EFI分区的根目录上：\n\n\n\n注意:\n\n * Windows用户： 您将需要将EFI文件夹放在您之前制作的USB驱动器的根目录上\n * Linux用户： 这是我们之前创建的OPENCORE分区\n * 注意，方法1只创建了1个分区，而方法2创建了2个分区\n\n现在让我们打开我们的EFI文件夹，看看里面是什么：\n\n\n\n现在你会注意到它附带了一堆文件在Drivers和Tools文件夹中，我们不需要其中的大多数：\n\n * 从Drivers文件夹保留以下文件（如果兼容）：\n\nDRIVER                 状态   描述\nOpenUsbKbDxe.efi       可选   非EFI系统需要（2012以前）\nOpenPartitionDxe.efi        启动macOS 10.7-10.9恢复所需\nResetNvramEntry.efi         重置系统的NVRAM时需要\nOpenRuntime.efi        必需   正常操作所需\n\n提供的Drivers的更多信息\n * AudioDxe.efi\n   * 与macOS中的音频支持无关\n * CrScreenshotDxe.efi\n   * 用于在UEFI中创建快照，我们不需要\n * HiiDatabase.efi\n   * 用于修复GUI支持，如OpenShell。适用于Sandy Bridge和更老的系统\n   * 启动时不需要\n * NvmExpressDxe.efi\n   * 用于Haswell和旧版本，当固件中没有内置NVMe驱动程序时\n   * 不要使用，除非你知道你在做什么\n * OpenCanopy.efi\n   * 这是OpenCore的可选GUI，我们将在安装后中设置它，所以现在删除它\n * OpenHfsPlus.efi\n   * 开源的HFS Plus驱动程序，相当慢，所以我们建议不要使用，除非你知道你在做什么。\n * OpenPartitionDxe.efi\n   * 在启动OS X 10.7到10.9的恢复时需要\n     * 注:OpenDuet用户（即没有UEFI）将内置这个驱动程序，不需要它\n * OpenUsbKbDxe.efi\n   * 用于运行DuetPkg的旧系统上的OpenCore启动器，不推荐，在Ivy Bridge和更新的系统上甚至有害\n * Ps2KeyboardDxe.efi + Ps2MouseDxe.efi\n   * 很明显，当你需要它时，USB键盘和鼠标用户不需要它\n   * 提示：PS2 ≠ USB\n * ResetNvramEntry.efi\n   * 允许从引导选择器中重置NVRAM\n * UsbMouseDxe.efi\n   * 类似于OpenUsbKbDxe的想法，应该只需要在使用DuetPkg的遗留系统上\n * XhciDxe.efi\n   * 用于Sandy Bridge和旧版本，当固件中没有内置XHCI驱动程序时\n   * 只有当你在旧机器上使用USB 3.0扩展卡时才需要\n\n * 从Tools文件夹保留以下文件：\n\nTOOL            状态   解释\nOpenShell.efi   可选   推荐：更容易调试\n\n整理后的EFI：\n\n\n\n现在你可以把你需要的固件驱动程序(.efi)放到 Drivers 文件夹中，把Kext/ACPI放到它们各自的文件夹中。有关应该使用哪些文件的更多信息，请参阅收集文件。\n\n * 请注意，来自Clover的UEFI驱动程序不支持OpenCore！（EmuVariableUEFI, aptiommemoryfix, OsxAptioFixDrv等）。有关支持的驱动程序和合并到OpenCore中的驱动程序的更多信息，请参阅Clover固件驱动程序转换。\n\n下面是一个被填充的EFI **可以**的样子（你的会有所不同）：\n\n\n\n提示:\n\n * SSDT和自定义DSDT（.aml）放在ACPI文件夹中\n * Kext（.kext）放在Kexts文件夹中\n * 固件驱动程序（.efi放在Drivers文件夹中\n\n\n# 现在所有这些都完成了，前往收集文件获取所需的kext和固件驱动程序",normalizedContent:"# 添加基本opencore文件\n\n要设置opencore的文件夹结构，你需要在opencorepkg的发布中找到efi文件夹。请注意，它们将在ia32或x64文件夹下，前者用于32位固件，后者用于64位固件：\n\n\n\n关于debug与release版本：\n\n * debug：可以极大地帮助调试启动问题，但是可能会增加一些明显的启动时间延迟(例如:3-5秒到达拾取器)。安装后，您可以轻松地过渡到release\n * release：更快的启动时间，但实际上没有提供有用的调试信息，使故障排除更加困难。\n\n下载后，将efi文件夹（从opencorepkg获取的）放在efi分区的根目录上：\n\n\n\n注意:\n\n * windows用户： 您将需要将efi文件夹放在您之前制作的usb驱动器的根目录上\n * linux用户： 这是我们之前创建的opencore分区\n * 注意，方法1只创建了1个分区，而方法2创建了2个分区\n\n现在让我们打开我们的efi文件夹，看看里面是什么：\n\n\n\n现在你会注意到它附带了一堆文件在drivers和tools文件夹中，我们不需要其中的大多数：\n\n * 从drivers文件夹保留以下文件（如果兼容）：\n\ndriver                 状态   描述\nopenusbkbdxe.efi       可选   非efi系统需要（2012以前）\nopenpartitiondxe.efi        启动macos 10.7-10.9恢复所需\nresetnvramentry.efi         重置系统的nvram时需要\nopenruntime.efi        必需   正常操作所需\n\n提供的drivers的更多信息\n * audiodxe.efi\n   * 与macos中的音频支持无关\n * crscreenshotdxe.efi\n   * 用于在uefi中创建快照，我们不需要\n * hiidatabase.efi\n   * 用于修复gui支持，如openshell。适用于sandy bridge和更老的系统\n   * 启动时不需要\n * nvmexpressdxe.efi\n   * 用于haswell和旧版本，当固件中没有内置nvme驱动程序时\n   * 不要使用，除非你知道你在做什么\n * opencanopy.efi\n   * 这是opencore的可选gui，我们将在安装后中设置它，所以现在删除它\n * openhfsplus.efi\n   * 开源的hfs plus驱动程序，相当慢，所以我们建议不要使用，除非你知道你在做什么。\n * openpartitiondxe.efi\n   * 在启动os x 10.7到10.9的恢复时需要\n     * 注:openduet用户（即没有uefi）将内置这个驱动程序，不需要它\n * openusbkbdxe.efi\n   * 用于运行duetpkg的旧系统上的opencore启动器，不推荐，在ivy bridge和更新的系统上甚至有害\n * ps2keyboarddxe.efi + ps2mousedxe.efi\n   * 很明显，当你需要它时，usb键盘和鼠标用户不需要它\n   * 提示：ps2 = usb\n * resetnvramentry.efi\n   * 允许从引导选择器中重置nvram\n * usbmousedxe.efi\n   * 类似于openusbkbdxe的想法，应该只需要在使用duetpkg的遗留系统上\n * xhcidxe.efi\n   * 用于sandy bridge和旧版本，当固件中没有内置xhci驱动程序时\n   * 只有当你在旧机器上使用usb 3.0扩展卡时才需要\n\n * 从tools文件夹保留以下文件：\n\ntool            状态   解释\nopenshell.efi   可选   推荐：更容易调试\n\n整理后的efi：\n\n\n\n现在你可以把你需要的固件驱动程序(.efi)放到 drivers 文件夹中，把kext/acpi放到它们各自的文件夹中。有关应该使用哪些文件的更多信息，请参阅收集文件。\n\n * 请注意，来自clover的uefi驱动程序不支持opencore！（emuvariableuefi, aptiommemoryfix, osxaptiofixdrv等）。有关支持的驱动程序和合并到opencore中的驱动程序的更多信息，请参阅clover固件驱动程序转换。\n\n下面是一个被填充的efi **可以**的样子（你的会有所不同）：\n\n\n\n提示:\n\n * ssdt和自定义dsdt（.aml）放在acpi文件夹中\n * kext（.kext）放在kexts文件夹中\n * 固件驱动程序（.efi放在drivers文件夹中\n\n\n# 现在所有这些都完成了，前往收集文件获取所需的kext和固件驱动程序",charsets:{cjk:!0}},{title:"在Windows中制作安装程序",frontmatter:{},regularPath:"/installer-guide/windows-install.html",relativePath:"installer-guide/windows-install.md",key:"v-5a334256",path:"/installer-guide/windows-install.html",headers:[{level:2,title:"下载macOS",slug:"下载macos",normalizedTitle:"下载macos",charIndex:180},{level:2,title:"制作安装程序",slug:"制作安装程序",normalizedTitle:"制作安装程序",charIndex:11},{level:3,title:"磁盘管理方法",slug:"磁盘管理方法",normalizedTitle:"磁盘管理方法",charIndex:2051},{level:3,title:"Rufus方法",slug:"rufus方法",normalizedTitle:"rufus方法",charIndex:124},{level:3,title:"diskpart方法",slug:"diskpart方法",normalizedTitle:"diskpart方法",charIndex:2154},{level:2,title:"现在，所有这些都完成了，转到设置EFI来完成您的工作",slug:"现在-所有这些都完成了-转到设置efi来完成您的工作",normalizedTitle:"现在，所有这些都完成了，转到设置efi来完成您的工作",charIndex:5436}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"下载macOS 制作安装程序 磁盘管理方法 Rufus方法 diskpart方法 现在，所有这些都完成了，转到设置EFI来完成您的工作",content:'# 在Windows中制作安装程序\n\n虽然你不需要重新安装macOS来使用OpenCore，但有些用户更喜欢在启动管理器升级时使用新的版本。\n\n首先，您需要以下内容：\n\n * 4GB USB\n\n * 对于大于16GB的USB进行FAT32格式化使用Rufus方法\n\n * macrecovery.py\n   \n   * 这需要已安装的Python 3\n\n\n# 下载macOS\n\n要获取旧的安装程序非常容易，首先获取OpenCorePkg的副本，然后转到/Utilities/macrecovery/。接下来，单击当前文件夹路径旁边的，并键入cmd，在当前目录中打开命令提示符:\n\n\n\n现在根据你想要的macOS版本运行以下其中一个（注意这些脚本依赖于Python 3支持，如果你还没有安装，请安装）：\n\n# Lion (10.7):\npython3 macrecovery.py -b Mac-2E6FAB96566FE58C -m 00000000000F25Y00 download\npython3 macrecovery.py -b Mac-C3EC7CD22292981F -m 00000000000F0HM00 download\n\n# Mountain Lion (10.8):\npython3 macrecovery.py -b Mac-7DF2A3B5E5D671ED -m 00000000000F65100 download\n\n# Mavericks (10.9):\npython3 macrecovery.py -b Mac-F60DEB81FF30ACF6 -m 00000000000FNN100 download\n\n# Yosemite (10.10):\npython3 macrecovery.py -b Mac-E43C1C25D4880AD6 -m 00000000000GDVW00 download\n\n# El Capitan (10.11):\npython3 macrecovery.py -b Mac-FFE5EF870D7BA81A -m 00000000000GQRX00 download\n\n# Sierra (10.12):\npython3 macrecovery.py -b Mac-77F17D7DA9285301 -m 00000000000J0DX00 download\n\n# High Sierra (10.13)\npython3 macrecovery.py -b Mac-7BA5B2D9E42DDD94 -m 00000000000J80300 download\npython3 macrecovery.py -b Mac-BE088AF8C5EB4FA2 -m 00000000000J80300 download\n\n# Mojave (10.14)\npython3 macrecovery.py -b Mac-7BA5B2DFE22DDD8C -m 00000000000KXPG00 download\n\n# Catalina (10.15)\npython3 macrecovery.py -b Mac-00BE6ED71E35EB86 -m 00000000000000000 download\n\n# Big Sur (11)\npython3 macrecovery.py -b Mac-42FD25EABCABB274 -m 00000000000000000 download\n\n# Monterey (12)\npython3 macrecovery.py -b Mac-FFE5EF870D7BA81A -m 00000000000000000 download\n\n# Latest version\n# ie. Ventura (13)\npython3 macrecovery.py -b Mac-4B682C642B45593E -m 00000000000000000 download\n\n\n * macOS 12及以上注释:由于最近的macOS版本引入了对USB堆栈的更改，建议您在安装macOS之前映射USB端口(使用USBToolBox)。\n   * 警告： 在macOS 11.3及更新版本中，XhciPortLimit被损坏导致启动循环。\n     * 如果你已经映射你的USB端口并禁用XhciPortLimit，你在启动macOS 11.3+时不会出现问题。\n\n这将需要一些时间，但是一旦你完成，你应该得到BaseSystem或RecoveryImage文件:\n\nBASESYSTEM   RECOVERYIMAGE\n             \n\n现在我们下载了安装程序，接下来我们要格式化我们的USB。\n\n\n# 制作安装程序\n\n在这里，我们将格式化我们的USB并添加macOS，我们有3个选项：\n\n * 磁盘管理方法\n   * 基于GUI，最简单的方法\n   * 仅支持UEFI系统（2012+）\n * Rufus方法\n   * 基于GUI，最简单的方法\n   * 对于更大的USB驱动器（16GB+）\n * diskpart方法\n   * 基于命令行，稍微多做一些工作\n   * 旧版系统需要（非UEFI，2012前）\n\n\n# 磁盘管理方法\n\n只需打开磁盘管理，并将USB格式化为FAT32:\n\n 1. 右键单击任务栏上的开始按钮（或按Win+X），选择“磁盘管理”。\n 2. 您应该看到所有的分区和磁盘。在下半部分，你会看到你的设备。找到你的USB。\n 3. 您需要将USB格式化为FAT32分区（不需要全部）。\n\n * 如果你在USB上有多个分区，右键单击每个分区，然后单击删除USB卷（这将删除数据，确保你有备份，只从USB上删除分区）\n   * 右键单击未分配的空间并创建一个新的简单卷。确保它是FAT32的，并且至少有1到2gb。命名为“EFI”。\n * 否则，右键单击USB上的分区，单击“格式化”，将其设置为FAT32。\n\n\n\n接下来，进入USB驱动器的根目录，创建一个名为com.apple.recovery.boot的文件夹。然后移动下载的BaseSystem或RecoveryImage文件。请确保将.dmg和.chunklist文件拷贝到此文件夹：\n\n其他信息\n\nacidanthera更新了OpenCorePkg中的macrecovery.py，现在它可以自动创建com.apple.recovery.boot文件夹并将.dmg和.chunklist文件放入。你可以直接将com.apple.recovery.boot文件夹放入EFI USB。\n\n\n\n现在解压缩你之前下载的OpenCorePkg并打开它:\n\n\n\n这里我们看到IA32（32位cpu）和X64（64位cpu）文件夹，选择最适合您的硬件并打开它。接下来抓住里面的EFI文件夹，并把它放在USB驱动器的根目录上，旁边是com.apple.recovery.boot。完成后应该是这样的:\n\n其他信息\n\nacidanthera更新了OpenCorePkg中的macrecovery.py，现在它可以自动创建com.apple.recovery.boot文件夹并将.dmg和.chunklist文件放入。你可以直接将com.apple.recovery.boot文件夹放入EFI USB。所以此处应该显示为：\n\n\n# Rufus方法\n\n 1. 下载Rufus\n 2. 将BOOT选项设置为不可引导\n 3. 将文件系统设置为FAT32\n 4. 单击“开始”\n 5. 删除USB驱动器分区中autorun的所有文件\n\n\n\n接下来，进入USB驱动器的根目录，创建一个名为com.apple.recovery.boot的文件夹。然后移动下载的BaseSystem或RecoveryImage文件。请确保将.dmg和.chunklist文件拷贝到此文件夹：\n\n其他信息\n\nacidanthera更新了OpenCorePkg中的macrecovery.py，现在它可以自动创建com.apple.recovery.boot文件夹并将.dmg和.chunklist文件放入。你可以直接将com.apple.recovery.boot文件夹放入EFI USB。\n\n\n\n现在解压缩你之前下载的OpenCorePkg并打开它:\n\n\n\n这里我们看到IA32（32位cpu）和X64（64位cpu）文件夹，选择最适合您的硬件并打开它。接下来抓住里面的EFI文件夹，并把它放在USB驱动器的根目录上，旁边是com.apple.recovery.boot。完成后应该是这样的:\n\n其他信息\n\nacidanthera更新了OpenCorePkg中的macrecovery.py，现在它可以自动创建com.apple.recovery.boot文件夹并将.dmg和.chunklist文件放入。你可以直接将com.apple.recovery.boot文件夹放入EFI USB。所以此处应该显示为：\n\n\n# diskpart方法\n\ndiskpart方法\n\n按下Windows+R\n\n现在运行以下命令：\n\n# List available disks\nlist disk\n# Select your disk(ie. disk 1)\nselect disk 1\n# Format the drive\nclean\n# Convert to GPT\n# Due to an odd bug with BOOTICE and DuetPkg, MBR disks will fail to boot\nconvert gpt\n# Create a new partition\ncreate partition primary\n# Select your partition\n# Running clean ensures we only have 1 partition so it will be "partition 1"\nselect partition 1\n# Format the drive as FAT32\nformat fs=fat32 quick\n# Assign a drive letter(ie. Drive E, ensure it\'s not currently in use)\nASSIGN LETTER=E\n\n\n接下来，进入USB驱动器的根目录，创建一个名为com.apple.recovery.boot的文件夹。然后移动下载的BaseSystem或RecoveryImage文件。请确保将.dmg和.chunklist文件拷贝到此文件夹：\n\n其他信息\n\nacidanthera更新了OpenCorePkg中的macrecovery.py，现在它可以自动创建com.apple.recovery.boot文件夹并将.dmg和.chunklist文件放入。你可以直接将com.apple.recovery.boot文件夹放入EFI USB。\n\n\n\n现在解压缩你之前下载的OpenCorePkg并打开它:\n\n\n\n这里我们看到IA32（32位cpu）和X64（64位cpu）文件夹，选择最适合您的硬件并打开它。接下来抓住里面的EFI文件夹，并把它放在USB驱动器的根目录上，旁边是com.apple.recovery.boot。完成后应该是这样的:\n\n其他信息\n\nacidanthera更新了OpenCorePkg中的macrecovery.py，现在它可以自动创建com.apple.recovery.boot文件夹并将.dmg和.chunklist文件放入。你可以直接将com.apple.recovery.boot文件夹放入EFI USB。所以此处应该显示为：\n\n旧版安装设置\n\n如果您的固件不支持UEFI，请参见以下说明：\n\n首先，您需要以下内容：\n\n * 7-Zip\n * BOOTICE\n * OpenCorePkg\n\n接下来，打开BOOTICE并确保您选择了正确的驱动器。\n\n\n\n接下来，进入“Process MBR”，然后选择“Restore MBR”，从OpenCorePkg的Utilities/LegacyBoot/中选择boot0文件:\n\nRESTORE MBR   RESTORE BOOT0 FILE\n              \n\n然后返回主屏幕，选择“Process PBR”，然后选择“Restore PBR”。从这里，从OpenCorePkg的Utilities/LegacyBoot/中选择boot1f32文件:\n\nRESTORE PBR   RESTORE BOOT1F32 FILE\n              \n\n完成后，回到USB，做最后一件事。从Utilities/LegacyBoot/中获取bootx64（64位cpu）或bootia32（32位cpu）文件并将其放在驱动器的根目录上。重命名该文件为boot，以确保DuetPkg可以正确：\n\n\n\n\n# 现在，所有这些都完成了，转到设置EFI来完成您的工作',normalizedContent:'# 在windows中制作安装程序\n\n虽然你不需要重新安装macos来使用opencore，但有些用户更喜欢在启动管理器升级时使用新的版本。\n\n首先，您需要以下内容：\n\n * 4gb usb\n\n * 对于大于16gb的usb进行fat32格式化使用rufus方法\n\n * macrecovery.py\n   \n   * 这需要已安装的python 3\n\n\n# 下载macos\n\n要获取旧的安装程序非常容易，首先获取opencorepkg的副本，然后转到/utilities/macrecovery/。接下来，单击当前文件夹路径旁边的，并键入cmd，在当前目录中打开命令提示符:\n\n\n\n现在根据你想要的macos版本运行以下其中一个（注意这些脚本依赖于python 3支持，如果你还没有安装，请安装）：\n\n# lion (10.7):\npython3 macrecovery.py -b mac-2e6fab96566fe58c -m 00000000000f25y00 download\npython3 macrecovery.py -b mac-c3ec7cd22292981f -m 00000000000f0hm00 download\n\n# mountain lion (10.8):\npython3 macrecovery.py -b mac-7df2a3b5e5d671ed -m 00000000000f65100 download\n\n# mavericks (10.9):\npython3 macrecovery.py -b mac-f60deb81ff30acf6 -m 00000000000fnn100 download\n\n# yosemite (10.10):\npython3 macrecovery.py -b mac-e43c1c25d4880ad6 -m 00000000000gdvw00 download\n\n# el capitan (10.11):\npython3 macrecovery.py -b mac-ffe5ef870d7ba81a -m 00000000000gqrx00 download\n\n# sierra (10.12):\npython3 macrecovery.py -b mac-77f17d7da9285301 -m 00000000000j0dx00 download\n\n# high sierra (10.13)\npython3 macrecovery.py -b mac-7ba5b2d9e42ddd94 -m 00000000000j80300 download\npython3 macrecovery.py -b mac-be088af8c5eb4fa2 -m 00000000000j80300 download\n\n# mojave (10.14)\npython3 macrecovery.py -b mac-7ba5b2dfe22ddd8c -m 00000000000kxpg00 download\n\n# catalina (10.15)\npython3 macrecovery.py -b mac-00be6ed71e35eb86 -m 00000000000000000 download\n\n# big sur (11)\npython3 macrecovery.py -b mac-42fd25eabcabb274 -m 00000000000000000 download\n\n# monterey (12)\npython3 macrecovery.py -b mac-ffe5ef870d7ba81a -m 00000000000000000 download\n\n# latest version\n# ie. ventura (13)\npython3 macrecovery.py -b mac-4b682c642b45593e -m 00000000000000000 download\n\n\n * macos 12及以上注释:由于最近的macos版本引入了对usb堆栈的更改，建议您在安装macos之前映射usb端口(使用usbtoolbox)。\n   * 警告： 在macos 11.3及更新版本中，xhciportlimit被损坏导致启动循环。\n     * 如果你已经映射你的usb端口并禁用xhciportlimit，你在启动macos 11.3+时不会出现问题。\n\n这将需要一些时间，但是一旦你完成，你应该得到basesystem或recoveryimage文件:\n\nbasesystem   recoveryimage\n             \n\n现在我们下载了安装程序，接下来我们要格式化我们的usb。\n\n\n# 制作安装程序\n\n在这里，我们将格式化我们的usb并添加macos，我们有3个选项：\n\n * 磁盘管理方法\n   * 基于gui，最简单的方法\n   * 仅支持uefi系统（2012+）\n * rufus方法\n   * 基于gui，最简单的方法\n   * 对于更大的usb驱动器（16gb+）\n * diskpart方法\n   * 基于命令行，稍微多做一些工作\n   * 旧版系统需要（非uefi，2012前）\n\n\n# 磁盘管理方法\n\n只需打开磁盘管理，并将usb格式化为fat32:\n\n 1. 右键单击任务栏上的开始按钮（或按win+x），选择“磁盘管理”。\n 2. 您应该看到所有的分区和磁盘。在下半部分，你会看到你的设备。找到你的usb。\n 3. 您需要将usb格式化为fat32分区（不需要全部）。\n\n * 如果你在usb上有多个分区，右键单击每个分区，然后单击删除usb卷（这将删除数据，确保你有备份，只从usb上删除分区）\n   * 右键单击未分配的空间并创建一个新的简单卷。确保它是fat32的，并且至少有1到2gb。命名为“efi”。\n * 否则，右键单击usb上的分区，单击“格式化”，将其设置为fat32。\n\n\n\n接下来，进入usb驱动器的根目录，创建一个名为com.apple.recovery.boot的文件夹。然后移动下载的basesystem或recoveryimage文件。请确保将.dmg和.chunklist文件拷贝到此文件夹：\n\n其他信息\n\nacidanthera更新了opencorepkg中的macrecovery.py，现在它可以自动创建com.apple.recovery.boot文件夹并将.dmg和.chunklist文件放入。你可以直接将com.apple.recovery.boot文件夹放入efi usb。\n\n\n\n现在解压缩你之前下载的opencorepkg并打开它:\n\n\n\n这里我们看到ia32（32位cpu）和x64（64位cpu）文件夹，选择最适合您的硬件并打开它。接下来抓住里面的efi文件夹，并把它放在usb驱动器的根目录上，旁边是com.apple.recovery.boot。完成后应该是这样的:\n\n其他信息\n\nacidanthera更新了opencorepkg中的macrecovery.py，现在它可以自动创建com.apple.recovery.boot文件夹并将.dmg和.chunklist文件放入。你可以直接将com.apple.recovery.boot文件夹放入efi usb。所以此处应该显示为：\n\n\n# rufus方法\n\n 1. 下载rufus\n 2. 将boot选项设置为不可引导\n 3. 将文件系统设置为fat32\n 4. 单击“开始”\n 5. 删除usb驱动器分区中autorun的所有文件\n\n\n\n接下来，进入usb驱动器的根目录，创建一个名为com.apple.recovery.boot的文件夹。然后移动下载的basesystem或recoveryimage文件。请确保将.dmg和.chunklist文件拷贝到此文件夹：\n\n其他信息\n\nacidanthera更新了opencorepkg中的macrecovery.py，现在它可以自动创建com.apple.recovery.boot文件夹并将.dmg和.chunklist文件放入。你可以直接将com.apple.recovery.boot文件夹放入efi usb。\n\n\n\n现在解压缩你之前下载的opencorepkg并打开它:\n\n\n\n这里我们看到ia32（32位cpu）和x64（64位cpu）文件夹，选择最适合您的硬件并打开它。接下来抓住里面的efi文件夹，并把它放在usb驱动器的根目录上，旁边是com.apple.recovery.boot。完成后应该是这样的:\n\n其他信息\n\nacidanthera更新了opencorepkg中的macrecovery.py，现在它可以自动创建com.apple.recovery.boot文件夹并将.dmg和.chunklist文件放入。你可以直接将com.apple.recovery.boot文件夹放入efi usb。所以此处应该显示为：\n\n\n# diskpart方法\n\ndiskpart方法\n\n按下windows+r\n\n现在运行以下命令：\n\n# list available disks\nlist disk\n# select your disk(ie. disk 1)\nselect disk 1\n# format the drive\nclean\n# convert to gpt\n# due to an odd bug with bootice and duetpkg, mbr disks will fail to boot\nconvert gpt\n# create a new partition\ncreate partition primary\n# select your partition\n# running clean ensures we only have 1 partition so it will be "partition 1"\nselect partition 1\n# format the drive as fat32\nformat fs=fat32 quick\n# assign a drive letter(ie. drive e, ensure it\'s not currently in use)\nassign letter=e\n\n\n接下来，进入usb驱动器的根目录，创建一个名为com.apple.recovery.boot的文件夹。然后移动下载的basesystem或recoveryimage文件。请确保将.dmg和.chunklist文件拷贝到此文件夹：\n\n其他信息\n\nacidanthera更新了opencorepkg中的macrecovery.py，现在它可以自动创建com.apple.recovery.boot文件夹并将.dmg和.chunklist文件放入。你可以直接将com.apple.recovery.boot文件夹放入efi usb。\n\n\n\n现在解压缩你之前下载的opencorepkg并打开它:\n\n\n\n这里我们看到ia32（32位cpu）和x64（64位cpu）文件夹，选择最适合您的硬件并打开它。接下来抓住里面的efi文件夹，并把它放在usb驱动器的根目录上，旁边是com.apple.recovery.boot。完成后应该是这样的:\n\n其他信息\n\nacidanthera更新了opencorepkg中的macrecovery.py，现在它可以自动创建com.apple.recovery.boot文件夹并将.dmg和.chunklist文件放入。你可以直接将com.apple.recovery.boot文件夹放入efi usb。所以此处应该显示为：\n\n旧版安装设置\n\n如果您的固件不支持uefi，请参见以下说明：\n\n首先，您需要以下内容：\n\n * 7-zip\n * bootice\n * opencorepkg\n\n接下来，打开bootice并确保您选择了正确的驱动器。\n\n\n\n接下来，进入“process mbr”，然后选择“restore mbr”，从opencorepkg的utilities/legacyboot/中选择boot0文件:\n\nrestore mbr   restore boot0 file\n              \n\n然后返回主屏幕，选择“process pbr”，然后选择“restore pbr”。从这里，从opencorepkg的utilities/legacyboot/中选择boot1f32文件:\n\nrestore pbr   restore boot1f32 file\n              \n\n完成后，回到usb，做最后一件事。从utilities/legacyboot/中获取bootx64（64位cpu）或bootia32（32位cpu）文件并将其放在驱动器的根目录上。重命名该文件为boot，以确保duetpkg可以正确：\n\n\n\n\n# 现在，所有这些都完成了，转到设置efi来完成您的工作',charsets:{cjk:!0}},{title:"收集文件",frontmatter:{},regularPath:"/ktext.html",relativePath:"ktext.md",key:"v-aef69694",path:"/ktext.html",headers:[{level:2,title:"固件驱动程序",slug:"固件驱动程序",normalizedTitle:"固件驱动程序",charIndex:195},{level:3,title:"通用",slug:"通用",normalizedTitle:"通用",charIndex:207},{level:3,title:"旧版用户",slug:"旧版用户",normalizedTitle:"旧版用户",charIndex:215},{level:2,title:"Kexts",slug:"kexts",normalizedTitle:"kexts",charIndex:223},{level:3,title:"必需",slug:"必需",normalizedTitle:"必需",charIndex:234},{level:3,title:"VirtualSMC插件",slug:"virtualsmc插件",normalizedTitle:"virtualsmc插件",charIndex:242},{level:3,title:"图形",slug:"图形",normalizedTitle:"图形",charIndex:260},{level:3,title:"音频",slug:"音频",normalizedTitle:"音频",charIndex:268},{level:3,title:"以太网",slug:"以太网",normalizedTitle:"以太网",charIndex:276},{level:3,title:"USB",slug:"usb",normalizedTitle:"usb",charIndex:285},{level:3,title:"WiFi和蓝牙",slug:"wifi和蓝牙",normalizedTitle:"wifi和蓝牙",charIndex:294},{level:3,title:"AMD CPU特定的kext",slug:"amd-cpu特定的kext",normalizedTitle:"amd cpu特定的kext",charIndex:307},{level:3,title:"附加",slug:"附加",normalizedTitle:"附加",charIndex:327},{level:3,title:"笔记本电脑输入",slug:"笔记本电脑输入",normalizedTitle:"笔记本电脑输入",charIndex:335},{level:2,title:"SSDTs",slug:"ssdts",normalizedTitle:"ssdts",charIndex:346},{level:3,title:"台式机",slug:"台式机",normalizedTitle:"台式机",charIndex:357},{level:3,title:"高端台式机",slug:"高端台式机",normalizedTitle:"高端台式机",charIndex:366},{level:3,title:"笔记本",slug:"笔记本",normalizedTitle:"笔记本",charIndex:335}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"固件驱动程序 通用 旧版用户 Kexts 必需 VirtualSMC插件 图形 音频 以太网 USB WiFi和蓝牙 AMD CPU特定的kext 附加 笔记本电脑输入 SSDTs 台式机 高端台式机 笔记本",content:"# 收集文件\n\n本节是收集启动macOS的各种文件，我们希望你在开始之前对你的硬件有很好的了解，希望你之前做过一个黑苹果，因为我们不会在这里深入研究。\n\n> 确定我的硬件是否受支持的最佳方法是什么?\n\n参见硬件限制页面以更好地了解macOS启动需要什么，Clover和OpenCore之间的硬件支持非常相似。\n\n> 有什么方法可以知道我有什么硬件?\n\n参见前一页：查找你的硬件\n\n\n\n * 固件驱动程序\n   * 通用\n   * 旧版用户\n * Kexts\n   * 必需\n   * VirtualSMC插件\n   * 图形\n   * 音频\n   * 以太网\n   * USB\n   * WiFi和蓝牙\n   * AMD CPU特定的kext\n   * 附加\n   * 笔记本电脑输入\n * SSDTs\n   * 台式机\n   * 高端台式机\n   * 笔记本\n\n\n\n\n# 固件驱动程序\n\n固件驱动程序是OpenCore在UEFI环境下使用的驱动程序。它们主要是启动机器所需的，或者是通过扩展OpenCore的补丁功能，要么在OpenCore选择器中显示不同类型的驱动器（HFS驱动）。\n\n * 位置: 这些文件必须放在EFI/OC/Drivers/下\n\n\n# 通用\n\n必需驱动程序\n\n对于大多数系统，您只需要2个.efi驱动程序启动和运行:\n\n * HfsPlus.efi(必需)\n   * 查看HFS卷（macOS安装程序和恢复分区/映像）需要。请勿混合使用其他HFS驱动程序\n   * 对于Sandy Bridge和更老版本（包括低端Ivy Bridge（i3和赛扬）），查看下面的旧版部分\n * OpenRuntime.efi(必需)\n   * 替代AptioMemoryFix.efi，用作OpenCore的扩展，以帮助修补引导。用于NVRAM修复和更好的内存管理。\n   * 提醒一下，这是在我们之前下载的OpenCorePkg中捆绑的\n\n\n# 旧版用户\n\n除此之外，如果您的硬件不支持UEFI（2011年及更早的版本），那么您需要以下内容。请密切关注每一个条目，因为您可能不需要全部4个条目:\n\n * OpenUsbKbDxe.efi\n   * 用于运行DuetPkg的旧系统上的OpenCore拾取器，在UEFI（Ivy Bridge及更新版本）上不推荐甚至有害\n * HfsPlusLegacy.efi\n   * HfsPlus的旧版变体，用于缺乏RDRAND指令支持的系统。这通常在Sandy Bridge和更老的系统（以及低端Ivy Bridge（i3和Celerons））上看到。\n   * 不要把这个和HfsPlus.efi混在一起，根据你的硬件选择一个或另一个\n * OpenPartitionDxe\n   * 在OS X 10.7到10.9上启动恢复时需要\n     * 该文件与OpenCorePkg捆绑在EFI/OC/Drivers下\n     * 注：OpenDuet用户（即没有UEFI）将有这个驱动程序内置，不需要它\n   * OS X 10.10，Yosemite及更新版本不需要\n\n这些文件将在你的EFI驱动文件夹\n\n32位的细节\n\n对于那些使用32位CPU的设备，您也需要获取这些驱动程序\n\n * HfsPlus32\n   * HfsPlusLegacy的替代方案，但对于32位cpu，不要将其与其他HFS.efi驱动程序混合使用\n\n\n# Kexts\n\nkext是内核扩展（kernel extension）的简称，你可以把它看成macOS的驱动，这些文件将进入EFI中的Kexts文件夹。\n\n * Windows和Linux注意：kext将看起来像你的操作系统中的普通文件夹，仔细检查，你正在安装的文件夹有一个可见的。kext扩展名(如果它丢失，不要手动添加一个)。\n   * 如果kext还包含.dSYM文件，您可以简单地删除它。它们仅用于调试目的。\n * 位置说明：这些文件必须放在EFI/OC/kext/下。\n\n下面列出的大多数文本都可以在build repo中找到预编译版本。这里的kext在每次有新的提交时进行编译。\n\n\n# 必需\n\n必需的kext\n\n没有下面的2个，系统是无法启动的：\n\n * Lilu(必需)\n   * 一个ext来修补许多进程，AppleALC, WhateverGreen, VirtualSMC和许多其他的kext需要。没有Lilu，他们就不会工作。\n   * 请注意，虽然Lilu最低支持Mac OS X 10.4，但许多插件只适用于较新的版本。\n * VirtualSMC(必需)\n   * 模拟在真正的Mac上发现的SMC芯片，没有这个macOS将无法启动\n   * 需要Mac OS X 10.4或更新版本\n\n\n# VirtualSMC插件\n\n下面的插件不需要引导，它们只是为系统添加了额外的功能，比如硬件监控。除非另有说明，否则这些插件都是VirtualSMC附带的\n\nTIP\n\n虽然VirtualSMC支持10.4，但插件可能需要更新的版本。\n\n * SMCProcessor.kext\n   * 用于监控Intel CPU温度\n   * 不适合基于AMD CPU的系统\n   * 需要Mac OS X 10.7或更新版本\n * SMCAMDProcessor\n   * 用于监控AMD Zen系统的CPU温度\n   * 积极发展下，潜在不稳定\n   * 需要AMDRyzenCPUPowerManagement（参见AMD CPU特定的kext）\n   * 需要macOS 10.13或更新版本\n * SMCRadeonGPU\n   * 用于监控AMD GPU系统上的GPU温度\n   * 需要来自同一存储库的RadeonSensor\n   * 需要macOS 11或更新版本\n * SMCSuperIO.kext\n   * 用于监控风扇转速\n   * 不适合基于AMD CPU的系统\n   * 需要Mac OS X 10.6或更新版本\n * SMCLightSensor.kext\n   * 用于笔记本电脑的环境光传感器\n   * 如果你没有环境光传感器（即台式机），不要使用。否则会导致问题\n   * 需要Mac OS X 10.6或更新版本\n * SMCBatteryManager.kext\n   * 用于测量笔记本电脑上的电池读数\n   * 不在台式机上使用\n   * 需要Mac OS X 10.4或更新版本\n * SMCDellSensors.kext\n   * 允许对支持系统管理模式(SMM)的戴尔机器上的风扇进行更精细的监控和控制\n   * 如果您没有受支持的戴尔计算机，请不要使用，主要是戴尔笔记本电脑可以从中受益\n   * 需要Mac OS X 10.7或更新版本\n\n\n# 图形\n\n * WhateverGreen(必需)\n   * 用于图形修补，DRM修复，板ID检查，帧缓冲区修复等。所有的GPU都能从中受益。\n   * 注意SSDT-PNLF.dsl文件仅适用于笔记本电脑和AIO，请参阅ACPI入门了解更多信息\n   * 需要Mac OS X 10.6或更新版本\n\n\n# 音频\n\n * AppleALC\n   * 用于AppleHDA补丁，允许支持大多数板载声音控制器\n   * AppleALCU.kext是AppleALC的精简版，只支持数字音频，但你仍然可以在数字音频专用系统上使用AppleALC\n   * AMD 15h/16h可能与AppleALC和Ryzen/Threadripper系统有问题，很少有麦克风支持\n   * 需要OS X 10.4或更新版本\n\n传统音频kext\n\n对于那些计划启动10.7或更老版本的人来说，可能会选择以下Kext：\n\n * VoodooHDA\n   \n   * 要求OS X 10.6或更新版本\n\n * VoodooHDA-FAT\n   \n   * 与上面类似，但是支持32位和64位内核，因此非常适合OS X 10.4-5引导和32位CPU\n\n\n# 以太网\n\n这里我们假设您知道您的系统有什么以太网卡，提醒您，产品规格页面很可能会列出网卡的类型。\n\n * IntelMausi\n   * 对于大多数Intel网卡来说，基于I211的芯片组需要SmallTreeIntel82576.kext\n   * 官方支持Intel的82578、82579、I217、I218和I219网卡\n   * 要求OS X 10.9或更新版本，10.6-10.8用户可以使用IntelSnowMausi代替旧的操作系统\n * AppleIGB\n   * 在macOS Monterey及以上版本上运行的I211网卡必需\n   * 可能在一些网卡上有不稳定的问题，建议留在Big Sur上并使用SmallTree\n   * 大多数运行Intel网卡的AMD主板都需要\n   * 需要macOS 12及以上版本\n * SmallTreeIntel82576\n   * 需要I211网卡运行在macOS版本到Big Sur上，基于SmallTree ext，但打了补丁以支持I211（在macOS 12 Monterey或更高版本上不起作用）\n   * 大多数运行Intel网卡的AMD主板都需要\n   * 要求OS X 10.9-12(v1.0.6)，macOS 10.13-14(v1.2.5)，macOS 10.15+(v1.3.0)\n * AtherosE2200Ethernet\n   * Atheros和Killer网卡所需\n   * 要求OS X 10.8或更新版本\n   * 注意:Atheros Killer E2500型号实际上是基于Realtek的，对于这些系统，请使用RealtekRTL8111代替\n * RealtekRTL8111\n   * 为Realtek的千兆以太网\n   * v2.2.0及以下版本需要OS X 10.8及以上版本，v2.2.2版本需要macOS 10.12及以上版本，v2.3.0及以上版本需要macOS 10.14及以上版本\n   * 注意： 有时最新版本的ext可能无法与您的以太网正常工作。如果您看到此问题，请尝试旧版本。\n * LucyRTL8125Ethernet\n   * Realtek的2.5Gb以太网\n   * 需要macOS 10.15或更新版本\n * 对于Intel的I225-V网卡，补丁在台式机Comet Lake DeviceProperties部分中提到。不需要kext。\n   * 需要macOS 10.15或更新版本\n * 对于Intel的I350网卡，补丁在HEDT Sandy和Ivy Bridge-E DeviceProperties部分中提到。不需要kext。\n   * 要求OS X 10.10或更新版本\n\n旧版以太网kext\n\n与旧的macOS安装或旧的PC硬件相关。\n\n * AppleIntele1000e\n   * 主要与基于10/100MBe的英特尔以太网控制器相关\n   * 需要10.6或更新版本\n * RealtekRTL8100\n   * 主要与基于10/100MBe的Realtek以太网控制器相关\n   * v2.0.0+需要macOS 10.12或更新版本\n * BCM5722D\n   * 主要与基于BCM5722的Broadcom以太网控制器相关\n   * 要求OS X 10.6或更新版本\n\n还要记住，某些网卡实际上是macOS原生支持的:\n\nNative Ethernet Controllers\n\n# Aquantia系列\n\n# AppleEthernetAquantiaAqtion.kext\npci1d6a,1    = Aquantia AQC107\npci1d6a,d107 = Aquantia AQC107\npci1d6a,7b1  = Aquantia AQC107\npci1d6a,80b1 = Aquantia AQC107\npci1d6a,87b1 = Aquantia AQC107\npci1d6a,88b1 = Aquantia AQC107\npci1d6a,89b1 = Aquantia AQC107\npci1d6a,91b1 = Aquantia AQC107\npci1d6a,92b1 = Aquantia AQC107\npci1d6a,c0   = Aquantia AQC113\npci1d6a,4c0  = Aquantia AQC113\n\n\n注：由于许多Aquantia网卡上的一些过时的固件，您可能需要更新Linux/Windows中的固件以确保它与macos兼容。\n\n# Intel系列\n\n# AppleIntel8254XEthernet.kext\npci8086,1096 = Intel 80003ES2LAN\npci8086,100f = Intel 82545EM\npci8086,105e = Intel 82571EB/82571GB\n\n# AppleIntelI210Ethernet.kext\npci8086,1533 = Intel I210\npci8086,15f2 = Intel I225LM (Added in macOS 10.15)\n\n# Intel82574L.kext\npci8086,104b = Intel 82566DC\npci8086,10f6 = Intel 82574L\n\n\n\n# Broadcom系列\n\n# AppleBCM5701Ethernet.kext\npci14e4,1684 = Broadcom BCM5764M\npci14e4,16b0 = Broadcom BCM57761\npci14e4,16b4 = Broadcom BCM57765\npci14e4,1682 = Broadcom BCM57762\npci14e4,1686 = Broadcom BCM57766\n\n\n\n# USB\n\n * USBToolBox （tool和k0ext）\n   \n   * 对于Windows和macOS的USB映射工具。\n   * 建议您在安装macOS之前映射USB端口，以避免任何端口限制问题\n   * 特性\n     * 支持从Windows和macOS映射（Linux支持正在进行中）\n     * 可以使用USBToolBox kext或原生Apple kext（AppleUSBHostMergeProperties）构建映射\n     * 支持多种匹配方式\n     * 支持配套端口（在Windows上）\n\n * XHCI-unsupported\n   \n   * 非原生USB控制器所需\n   * 基于AMD CPU的系统不需要这个\n   * 需要此功能的常见芯片组：\n     * H370\n     * B360\n     * H310\n     * Z390（Mojave和更新版本不需要）\n     * X79\n     * X99\n     * ASRock Intel主板（B460/Z490+不需要）\n\n\n# WiFi和蓝牙\n\n# 非原生蓝牙卡\n\n * BlueToolFixup\n   * 修复macOS 12+蓝牙栈，支持第三方卡\n   * 所有非原生（非Apple的Broadcom，Intel等）蓝牙卡都需要\n   * 包括在BrcmPatchRAM压缩\n   * 不要在macOS 11或更早的版本上使用\n\n# Intel\n\n * AirportItlwm\n   * 增加了对各种英特尔无线卡的支持，并由于IO80211Family集成而在恢复模式中原生工作\n   * 需要macOS 10.13或更新版本，并需要苹果的安全引导才能正常工作\n * Itlwm\n   * 对于无法启用Apple安全启动的系统，AirportItlwm的替代方案\n   * 需要Heliport\n   * 它将被视为以太网卡，你必须通过Heliport连接Wi-Fi\n   * 在macOS恢复模式中不工作\n * IntelBluetoothFirmware\n   * 当与英特尔无线网卡配对时，为macOS增加蓝牙支持\n   * 除了在macOS中修补错误外，还使用IntelBTPatcher（包含）\n   * 需要macOS 10.13或更新版本\n   * 在macOS 10.13到11上，您还需要IntelBluetoothInjector（包含）\n\n关于启用AirportItlwm的更多信息\n\n要在OpenCore中启用AirportItlwm支持，您需要:\n\n * 将它设置为Default或其他可用值以启用Misc -> Security -> SecureBootModel\n   * 这将在本指南的后面部分和安装后指南中讨论：Apple安全启动\n * 如果你不能启用SecureBootModel，你仍然可以强制注入IO80211Family（强烈反对）\n   * 在config.plist中的Kernel -> Force下设置以下内容。（在本指南后面讨论）：\n\n\n\n# Broadcom\n\n * AirportBrcmFixup\n   * 用于修补非Apple/非Fenvi的Broadcom卡，将不适用于Intel，Killer和Realtek等\n   * 要求OS X 10.10或更新版本\n   * 关于Big Sur，请参阅Bis Sur已知问题了解有关AirPortBrcm4360驱动程序的额外步骤。\n * BrcmPatchRAM\n   * 用于在Broadcom蓝牙芯片组上上传固件，所有非Apple/非Fenvi卡都需要。\n   * 与BrcmFirmwareData.kext配对\n     * BrcmPatchRAM3 for 10.15+（必须与BrcmBluetoothInjector配对）\n     * BrcmPatchRAM2 for 10.11-10.14\n     * BrcmPatchRAM for 10.8-10.10\n   * 在macOS 10.11到macOS 11上，您还需要BrcmBluetoothInjector（包含）\n\nBrcmPatchRAM加载顺序\n\n在Kernel -> Add中的顺序应该是：\n\n 1. BrcmBluetoothInjector（如果需要）\n 2. BrcmFirmwareData\n 3. BrcmPatchRAM3（或BrcmPatchRAM2/BrcmPatchRAM）\n\nBlueToolFixup可以在Lilu之后的任何地方。\n\n但是ProperTree将为您处理这个问题，因此您不必自己担心\n\n\n# AMD CPU特定的kext\n\n * XLNCUSBFIX\n   * USB修复AMD FX系统，Ryzen不建议\n   * 需要macOS 10.13或更新版本\n * VoodooHDA\n   * FX系统的音频和Ryzen系统的前面板Mic+音频支持，不要与AppleALC混合。音频质量明显比Zen cpu上的AppleALC差\n   * 要求OS X 10.6或更新版本\n   * 不建议在macOS 11.3及以上版本上使用此ext，因为您需要修改macOS文件系统并禁用SIP\n * AMDRyzenCPUPowerManagement\n   * Ryzen系统的CPU电源管理\n   * 积极发展下，潜在不稳定\n   * 需要macOS 10.13或更新版本\n\n\n# 附加\n\n * AppleMCEReporterDisabler\n   * 需要在macOS 12.3及更高版本的AMD系统上，以及macOS 10.15及更高版本的Intel双插槽系统上。\n   * 影响的SMBIOS：\n     * MacPro6,1\n     * MacPro7,1\n     * iMacPro1,1\n * CpuTscSync\n   * 需要在一些英特尔的HEDT和服务器主板上同步TSC，没有这个macOS可能会非常慢甚至无法启动。\n   * 不能在AMD CPU上工作\n   * 要求OS X 10.8或更新版本\n * NVMeFix\n   * 用于修复非Apple NVMe的电源管理和初始化\n   * 需要macOS 10.14或更新版本\n * SATA-Unsupported\n   * 增加了对多种SATA控制器的支持，主要适用于在macOS中无法看到SATA驱动器的笔记本电脑。我们建议先不使用这个进行测试。\n   * Big Sur+注意：CtlnaAHCIPort将需要使用，因为大量的控制器被从二进制文件本身删除\n     * Catalina和更老的系统不必担心\n * CPUTopologyRebuild\n   * 一个实验性的Lilu插件，优化了Alder Lake的异构核心配置。仅适用于Alder Lake CPU\n * RestrictEvents\n   * 修补macOS的各种功能，参见README了解更多信息\n * EmeraldSDHC\n   * 支持eMMC的macOS内核扩展。目前只支持最高HS200速度的eMMC/MMC卡。此驱动程序目前正在进行中，在某些设备上可能会遇到性能不佳或不可用的情况。目前不支持SD卡。\n\n传统SATA kext\n * AppleIntelPIIXATA.kext\n   * 旧的核心2双核/四核和奔腾4系统的传统IDE和ATA ext。macOS 11（Big Sur）和更新版本需要，因为这个kext在macOS 10.15（Catalina）中被删除了。\n * AHCIPortInjector\n   * 传统的SATA/AHCI注入器，主要适用于Penryn前的旧机器\n * ATAPortInjector\n   * 旧版的ATA注入器，主要与IDE和ATA设备相关(即。当BIOS中没有AHCI选项时)\n   * 依赖于AppleIntelPIIXATA.kext，使用macOS 11（Big Sur）及更新版本时需要注入\n\n\n# 笔记本电脑输入\n\n要弄清楚你有什么样的键盘和触控板，请查看Windows中的设备管理器或Linux中的dmesg | grep -i input\n\n警告\n\n大多数笔记本电脑的键盘都是PS2！即使您有I2C, USB或SMBus触控板，您也会想要抓取VoodooPS2。\n\n# PS2键盘和触摸板\n\n * VoodooPS2\n   * 适用于各种PS2键盘，鼠标和触控板\n   * MT2（Magic Trackpad 2）功能需要macOS 10.11或更新版本\n * RehabMan's VoodooPS2\n   * 对于带有PS2键盘，鼠标和触控板的旧系统，或者当您不想使用VoodooInput时\n   * 支持macOS 10.6+\n\n# SMBus触摸板\n\n * VoodooRMI\n   * 适用于带有Synaptics SMBus触控板的系统\n   * MT2功能需要macOS 10.11或更新版本\n   * 取决于Acidanthera的VoodooPS2\n * VoodooSMBus\n   * 适用于带有ELAN SMBus触控板的系统\n   * 目前支持macOS 10.14或更新版本\n\n# I2C/USB HID设备\n\n * VoodooI2C\n   * 支持macOS 10.11+\n   * 连接到I2C控制器，允许插件与I2C触控板交互\n   * 使用以下插件的USB设备仍然需要VoodooI2C\n   * 必须与一个或多个插件配对如下所示：\n\nVoodooI2C插件\n\n连接类型            插件                  注释\n多点触控HID         VoodooI2CHID        可以与I2C/USB触摸屏和触控板一起使用\nELAN专有          VoodooI2CElan       ELAN1200+需要VoodooI2CHID代替\nFTE1001触摸板      VoodooI2CFTE        \nAtmel多点触控协议     VoodooI2CAtmelMXT   \nSynaptics HID   VoodooRMI           I2C Synaptic触控板（需要VoodooI2C仅用于I2C模式）\nAlps HID        AlpsHID             可与USB或I2C Alps触控板一起使用。主要出现在戴尔笔记本电脑和一些惠普EliteBook型号上\n\n# 杂项\n\n * ECEnabler\n   * 修复了在许多设备上读取电池状态（允许读取超过8位长的EC字段）\n   * 支持OS X 10.7及以上版本（10.4 - 10.6不需要）\n * BrightnessKeys\n   * 自动修复亮度键\n\n请参考kexts.md（或OpenCore中的Docs\\Kexts.md获取支持的完整kext列表\n\n\n# SSDTs\n\n你在AcpiSamples文件夹中看到所有的SSDT，想知道你是否需要它们。对于我们来说，我们将讨论在config.plist的特定ACPI部分中需要哪些SSDT，因为所需的SSDT是特定于平台的。有一些系统特定的地方需要配置，如果我现在给你一个SSDT列表供你选择，你很容易迷路。\n\nACPI入门有一个关于SSDT的扩展部分，包括在不同平台上编译它们。\n\n一个所需SSDT的快速TL;DR（这是源代码，你必须将它们编译成一个.aml文件）：\n\n\n# 台式机\n\n平台                    CPU                           EC             AWAC        NVRAM      USB\nPenryn                N/A                           SSDT-EC        N/A         N/A        N/A\nLynnfield和Clarkdale\nSandy Bridge          CPU-PM（安装后运行）\nIvy Bridge\nHaswell               SSDT-PLUG\nBroadwell\nSkylake                                             SSDT-EC-USBX\nKaby Lake\nCoffee Lake                                                        SSDT-AWAC   SSDT-PMC\nComet Lake                                                                     N/A        SSDT-RHUB\nAMD (15/16h)          N/A                                          N/A                    N/A\nAMD (17/19h)          SSDT-CPUR for B550 and A520\n\n\n# 高端台式机\n\n平台                 CPU         EC             RTC               PCI\nNehalem和Westmere   N/A         SSDT-EC        N/A               N/A\nSandy Bridge-E                                                  SSDT-UNC\nIvy Bridge-E\nHaswell-E          SSDT-PLUG   SSDT-EC-USBX   SSDT-RTC0-RANGE\nBroadwell-E\nSkylake-X                                                       N/A\n\n\n# 笔记本\n\n平台                                  CPU             EC             BACKLIGHT   I2C TRACKPAD   AWAC        USB         IRQ\nClarksfield和Arrandale               N/A             SSDT-EC        SSDT-PNLF   N/A            N/A         N/A         IRQ SSDT\nSandy Bridge                        CPU-PM（安装后运行）\nIvy Bridge\nHaswell                             SSDT-PLUG                                  SSDT-GPI0\nBroadwell\nSkylake                                             SSDT-EC-USBX                                                      N/A\nKaby Lake\nCoffee Lake（8th Gen）和Whiskey Lake                                  SSDT-PNLF                  SSDT-AWAC\nCoffee Lake（9th Gen）\nComet Lake\nIce Lake                                                                                                  SSDT-RHUB\n\n续表：\n\n平台                                  NVRAM      IMEI\nClarksfield和Arrandale               N/A        N/A\nSandy Bridge                                   SSDT-IMEI\nIvy Bridge\nHaswell                                        N/A\nBroadwell\nSkylake\nKaby Lake\nCoffee Lake（8th Gen）和Whiskey Lake\nCoffee Lake（9th Gen）                SSDT-PMC\nComet Lake                          N/A\nIce Lake\n\n\n# 现在所有这些都完成了，前往ACPI入门",normalizedContent:"# 收集文件\n\n本节是收集启动macos的各种文件，我们希望你在开始之前对你的硬件有很好的了解，希望你之前做过一个黑苹果，因为我们不会在这里深入研究。\n\n> 确定我的硬件是否受支持的最佳方法是什么?\n\n参见硬件限制页面以更好地了解macos启动需要什么，clover和opencore之间的硬件支持非常相似。\n\n> 有什么方法可以知道我有什么硬件?\n\n参见前一页：查找你的硬件\n\n\n\n * 固件驱动程序\n   * 通用\n   * 旧版用户\n * kexts\n   * 必需\n   * virtualsmc插件\n   * 图形\n   * 音频\n   * 以太网\n   * usb\n   * wifi和蓝牙\n   * amd cpu特定的kext\n   * 附加\n   * 笔记本电脑输入\n * ssdts\n   * 台式机\n   * 高端台式机\n   * 笔记本\n\n\n\n\n# 固件驱动程序\n\n固件驱动程序是opencore在uefi环境下使用的驱动程序。它们主要是启动机器所需的，或者是通过扩展opencore的补丁功能，要么在opencore选择器中显示不同类型的驱动器（hfs驱动）。\n\n * 位置: 这些文件必须放在efi/oc/drivers/下\n\n\n# 通用\n\n必需驱动程序\n\n对于大多数系统，您只需要2个.efi驱动程序启动和运行:\n\n * hfsplus.efi(必需)\n   * 查看hfs卷（macos安装程序和恢复分区/映像）需要。请勿混合使用其他hfs驱动程序\n   * 对于sandy bridge和更老版本（包括低端ivy bridge（i3和赛扬）），查看下面的旧版部分\n * openruntime.efi(必需)\n   * 替代aptiomemoryfix.efi，用作opencore的扩展，以帮助修补引导。用于nvram修复和更好的内存管理。\n   * 提醒一下，这是在我们之前下载的opencorepkg中捆绑的\n\n\n# 旧版用户\n\n除此之外，如果您的硬件不支持uefi（2011年及更早的版本），那么您需要以下内容。请密切关注每一个条目，因为您可能不需要全部4个条目:\n\n * openusbkbdxe.efi\n   * 用于运行duetpkg的旧系统上的opencore拾取器，在uefi（ivy bridge及更新版本）上不推荐甚至有害\n * hfspluslegacy.efi\n   * hfsplus的旧版变体，用于缺乏rdrand指令支持的系统。这通常在sandy bridge和更老的系统（以及低端ivy bridge（i3和celerons））上看到。\n   * 不要把这个和hfsplus.efi混在一起，根据你的硬件选择一个或另一个\n * openpartitiondxe\n   * 在os x 10.7到10.9上启动恢复时需要\n     * 该文件与opencorepkg捆绑在efi/oc/drivers下\n     * 注：openduet用户（即没有uefi）将有这个驱动程序内置，不需要它\n   * os x 10.10，yosemite及更新版本不需要\n\n这些文件将在你的efi驱动文件夹\n\n32位的细节\n\n对于那些使用32位cpu的设备，您也需要获取这些驱动程序\n\n * hfsplus32\n   * hfspluslegacy的替代方案，但对于32位cpu，不要将其与其他hfs.efi驱动程序混合使用\n\n\n# kexts\n\nkext是内核扩展（kernel extension）的简称，你可以把它看成macos的驱动，这些文件将进入efi中的kexts文件夹。\n\n * windows和linux注意：kext将看起来像你的操作系统中的普通文件夹，仔细检查，你正在安装的文件夹有一个可见的。kext扩展名(如果它丢失，不要手动添加一个)。\n   * 如果kext还包含.dsym文件，您可以简单地删除它。它们仅用于调试目的。\n * 位置说明：这些文件必须放在efi/oc/kext/下。\n\n下面列出的大多数文本都可以在build repo中找到预编译版本。这里的kext在每次有新的提交时进行编译。\n\n\n# 必需\n\n必需的kext\n\n没有下面的2个，系统是无法启动的：\n\n * lilu(必需)\n   * 一个ext来修补许多进程，applealc, whatevergreen, virtualsmc和许多其他的kext需要。没有lilu，他们就不会工作。\n   * 请注意，虽然lilu最低支持mac os x 10.4，但许多插件只适用于较新的版本。\n * virtualsmc(必需)\n   * 模拟在真正的mac上发现的smc芯片，没有这个macos将无法启动\n   * 需要mac os x 10.4或更新版本\n\n\n# virtualsmc插件\n\n下面的插件不需要引导，它们只是为系统添加了额外的功能，比如硬件监控。除非另有说明，否则这些插件都是virtualsmc附带的\n\ntip\n\n虽然virtualsmc支持10.4，但插件可能需要更新的版本。\n\n * smcprocessor.kext\n   * 用于监控intel cpu温度\n   * 不适合基于amd cpu的系统\n   * 需要mac os x 10.7或更新版本\n * smcamdprocessor\n   * 用于监控amd zen系统的cpu温度\n   * 积极发展下，潜在不稳定\n   * 需要amdryzencpupowermanagement（参见amd cpu特定的kext）\n   * 需要macos 10.13或更新版本\n * smcradeongpu\n   * 用于监控amd gpu系统上的gpu温度\n   * 需要来自同一存储库的radeonsensor\n   * 需要macos 11或更新版本\n * smcsuperio.kext\n   * 用于监控风扇转速\n   * 不适合基于amd cpu的系统\n   * 需要mac os x 10.6或更新版本\n * smclightsensor.kext\n   * 用于笔记本电脑的环境光传感器\n   * 如果你没有环境光传感器（即台式机），不要使用。否则会导致问题\n   * 需要mac os x 10.6或更新版本\n * smcbatterymanager.kext\n   * 用于测量笔记本电脑上的电池读数\n   * 不在台式机上使用\n   * 需要mac os x 10.4或更新版本\n * smcdellsensors.kext\n   * 允许对支持系统管理模式(smm)的戴尔机器上的风扇进行更精细的监控和控制\n   * 如果您没有受支持的戴尔计算机，请不要使用，主要是戴尔笔记本电脑可以从中受益\n   * 需要mac os x 10.7或更新版本\n\n\n# 图形\n\n * whatevergreen(必需)\n   * 用于图形修补，drm修复，板id检查，帧缓冲区修复等。所有的gpu都能从中受益。\n   * 注意ssdt-pnlf.dsl文件仅适用于笔记本电脑和aio，请参阅acpi入门了解更多信息\n   * 需要mac os x 10.6或更新版本\n\n\n# 音频\n\n * applealc\n   * 用于applehda补丁，允许支持大多数板载声音控制器\n   * applealcu.kext是applealc的精简版，只支持数字音频，但你仍然可以在数字音频专用系统上使用applealc\n   * amd 15h/16h可能与applealc和ryzen/threadripper系统有问题，很少有麦克风支持\n   * 需要os x 10.4或更新版本\n\n传统音频kext\n\n对于那些计划启动10.7或更老版本的人来说，可能会选择以下kext：\n\n * voodoohda\n   \n   * 要求os x 10.6或更新版本\n\n * voodoohda-fat\n   \n   * 与上面类似，但是支持32位和64位内核，因此非常适合os x 10.4-5引导和32位cpu\n\n\n# 以太网\n\n这里我们假设您知道您的系统有什么以太网卡，提醒您，产品规格页面很可能会列出网卡的类型。\n\n * intelmausi\n   * 对于大多数intel网卡来说，基于i211的芯片组需要smalltreeintel82576.kext\n   * 官方支持intel的82578、82579、i217、i218和i219网卡\n   * 要求os x 10.9或更新版本，10.6-10.8用户可以使用intelsnowmausi代替旧的操作系统\n * appleigb\n   * 在macos monterey及以上版本上运行的i211网卡必需\n   * 可能在一些网卡上有不稳定的问题，建议留在big sur上并使用smalltree\n   * 大多数运行intel网卡的amd主板都需要\n   * 需要macos 12及以上版本\n * smalltreeintel82576\n   * 需要i211网卡运行在macos版本到big sur上，基于smalltree ext，但打了补丁以支持i211（在macos 12 monterey或更高版本上不起作用）\n   * 大多数运行intel网卡的amd主板都需要\n   * 要求os x 10.9-12(v1.0.6)，macos 10.13-14(v1.2.5)，macos 10.15+(v1.3.0)\n * atherose2200ethernet\n   * atheros和killer网卡所需\n   * 要求os x 10.8或更新版本\n   * 注意:atheros killer e2500型号实际上是基于realtek的，对于这些系统，请使用realtekrtl8111代替\n * realtekrtl8111\n   * 为realtek的千兆以太网\n   * v2.2.0及以下版本需要os x 10.8及以上版本，v2.2.2版本需要macos 10.12及以上版本，v2.3.0及以上版本需要macos 10.14及以上版本\n   * 注意： 有时最新版本的ext可能无法与您的以太网正常工作。如果您看到此问题，请尝试旧版本。\n * lucyrtl8125ethernet\n   * realtek的2.5gb以太网\n   * 需要macos 10.15或更新版本\n * 对于intel的i225-v网卡，补丁在台式机comet lake deviceproperties部分中提到。不需要kext。\n   * 需要macos 10.15或更新版本\n * 对于intel的i350网卡，补丁在hedt sandy和ivy bridge-e deviceproperties部分中提到。不需要kext。\n   * 要求os x 10.10或更新版本\n\n旧版以太网kext\n\n与旧的macos安装或旧的pc硬件相关。\n\n * appleintele1000e\n   * 主要与基于10/100mbe的英特尔以太网控制器相关\n   * 需要10.6或更新版本\n * realtekrtl8100\n   * 主要与基于10/100mbe的realtek以太网控制器相关\n   * v2.0.0+需要macos 10.12或更新版本\n * bcm5722d\n   * 主要与基于bcm5722的broadcom以太网控制器相关\n   * 要求os x 10.6或更新版本\n\n还要记住，某些网卡实际上是macos原生支持的:\n\nnative ethernet controllers\n\n# aquantia系列\n\n# appleethernetaquantiaaqtion.kext\npci1d6a,1    = aquantia aqc107\npci1d6a,d107 = aquantia aqc107\npci1d6a,7b1  = aquantia aqc107\npci1d6a,80b1 = aquantia aqc107\npci1d6a,87b1 = aquantia aqc107\npci1d6a,88b1 = aquantia aqc107\npci1d6a,89b1 = aquantia aqc107\npci1d6a,91b1 = aquantia aqc107\npci1d6a,92b1 = aquantia aqc107\npci1d6a,c0   = aquantia aqc113\npci1d6a,4c0  = aquantia aqc113\n\n\n注：由于许多aquantia网卡上的一些过时的固件，您可能需要更新linux/windows中的固件以确保它与macos兼容。\n\n# intel系列\n\n# appleintel8254xethernet.kext\npci8086,1096 = intel 80003es2lan\npci8086,100f = intel 82545em\npci8086,105e = intel 82571eb/82571gb\n\n# appleinteli210ethernet.kext\npci8086,1533 = intel i210\npci8086,15f2 = intel i225lm (added in macos 10.15)\n\n# intel82574l.kext\npci8086,104b = intel 82566dc\npci8086,10f6 = intel 82574l\n\n\n\n# broadcom系列\n\n# applebcm5701ethernet.kext\npci14e4,1684 = broadcom bcm5764m\npci14e4,16b0 = broadcom bcm57761\npci14e4,16b4 = broadcom bcm57765\npci14e4,1682 = broadcom bcm57762\npci14e4,1686 = broadcom bcm57766\n\n\n\n# usb\n\n * usbtoolbox （tool和k0ext）\n   \n   * 对于windows和macos的usb映射工具。\n   * 建议您在安装macos之前映射usb端口，以避免任何端口限制问题\n   * 特性\n     * 支持从windows和macos映射（linux支持正在进行中）\n     * 可以使用usbtoolbox kext或原生apple kext（appleusbhostmergeproperties）构建映射\n     * 支持多种匹配方式\n     * 支持配套端口（在windows上）\n\n * xhci-unsupported\n   \n   * 非原生usb控制器所需\n   * 基于amd cpu的系统不需要这个\n   * 需要此功能的常见芯片组：\n     * h370\n     * b360\n     * h310\n     * z390（mojave和更新版本不需要）\n     * x79\n     * x99\n     * asrock intel主板（b460/z490+不需要）\n\n\n# wifi和蓝牙\n\n# 非原生蓝牙卡\n\n * bluetoolfixup\n   * 修复macos 12+蓝牙栈，支持第三方卡\n   * 所有非原生（非apple的broadcom，intel等）蓝牙卡都需要\n   * 包括在brcmpatchram压缩\n   * 不要在macos 11或更早的版本上使用\n\n# intel\n\n * airportitlwm\n   * 增加了对各种英特尔无线卡的支持，并由于io80211family集成而在恢复模式中原生工作\n   * 需要macos 10.13或更新版本，并需要苹果的安全引导才能正常工作\n * itlwm\n   * 对于无法启用apple安全启动的系统，airportitlwm的替代方案\n   * 需要heliport\n   * 它将被视为以太网卡，你必须通过heliport连接wi-fi\n   * 在macos恢复模式中不工作\n * intelbluetoothfirmware\n   * 当与英特尔无线网卡配对时，为macos增加蓝牙支持\n   * 除了在macos中修补错误外，还使用intelbtpatcher（包含）\n   * 需要macos 10.13或更新版本\n   * 在macos 10.13到11上，您还需要intelbluetoothinjector（包含）\n\n关于启用airportitlwm的更多信息\n\n要在opencore中启用airportitlwm支持，您需要:\n\n * 将它设置为default或其他可用值以启用misc -> security -> securebootmodel\n   * 这将在本指南的后面部分和安装后指南中讨论：apple安全启动\n * 如果你不能启用securebootmodel，你仍然可以强制注入io80211family（强烈反对）\n   * 在config.plist中的kernel -> force下设置以下内容。（在本指南后面讨论）：\n\n\n\n# broadcom\n\n * airportbrcmfixup\n   * 用于修补非apple/非fenvi的broadcom卡，将不适用于intel，killer和realtek等\n   * 要求os x 10.10或更新版本\n   * 关于big sur，请参阅bis sur已知问题了解有关airportbrcm4360驱动程序的额外步骤。\n * brcmpatchram\n   * 用于在broadcom蓝牙芯片组上上传固件，所有非apple/非fenvi卡都需要。\n   * 与brcmfirmwaredata.kext配对\n     * brcmpatchram3 for 10.15+（必须与brcmbluetoothinjector配对）\n     * brcmpatchram2 for 10.11-10.14\n     * brcmpatchram for 10.8-10.10\n   * 在macos 10.11到macos 11上，您还需要brcmbluetoothinjector（包含）\n\nbrcmpatchram加载顺序\n\n在kernel -> add中的顺序应该是：\n\n 1. brcmbluetoothinjector（如果需要）\n 2. brcmfirmwaredata\n 3. brcmpatchram3（或brcmpatchram2/brcmpatchram）\n\nbluetoolfixup可以在lilu之后的任何地方。\n\n但是propertree将为您处理这个问题，因此您不必自己担心\n\n\n# amd cpu特定的kext\n\n * xlncusbfix\n   * usb修复amd fx系统，ryzen不建议\n   * 需要macos 10.13或更新版本\n * voodoohda\n   * fx系统的音频和ryzen系统的前面板mic+音频支持，不要与applealc混合。音频质量明显比zen cpu上的applealc差\n   * 要求os x 10.6或更新版本\n   * 不建议在macos 11.3及以上版本上使用此ext，因为您需要修改macos文件系统并禁用sip\n * amdryzencpupowermanagement\n   * ryzen系统的cpu电源管理\n   * 积极发展下，潜在不稳定\n   * 需要macos 10.13或更新版本\n\n\n# 附加\n\n * applemcereporterdisabler\n   * 需要在macos 12.3及更高版本的amd系统上，以及macos 10.15及更高版本的intel双插槽系统上。\n   * 影响的smbios：\n     * macpro6,1\n     * macpro7,1\n     * imacpro1,1\n * cputscsync\n   * 需要在一些英特尔的hedt和服务器主板上同步tsc，没有这个macos可能会非常慢甚至无法启动。\n   * 不能在amd cpu上工作\n   * 要求os x 10.8或更新版本\n * nvmefix\n   * 用于修复非apple nvme的电源管理和初始化\n   * 需要macos 10.14或更新版本\n * sata-unsupported\n   * 增加了对多种sata控制器的支持，主要适用于在macos中无法看到sata驱动器的笔记本电脑。我们建议先不使用这个进行测试。\n   * big sur+注意：ctlnaahciport将需要使用，因为大量的控制器被从二进制文件本身删除\n     * catalina和更老的系统不必担心\n * cputopologyrebuild\n   * 一个实验性的lilu插件，优化了alder lake的异构核心配置。仅适用于alder lake cpu\n * restrictevents\n   * 修补macos的各种功能，参见readme了解更多信息\n * emeraldsdhc\n   * 支持emmc的macos内核扩展。目前只支持最高hs200速度的emmc/mmc卡。此驱动程序目前正在进行中，在某些设备上可能会遇到性能不佳或不可用的情况。目前不支持sd卡。\n\n传统sata kext\n * appleintelpiixata.kext\n   * 旧的核心2双核/四核和奔腾4系统的传统ide和ata ext。macos 11（big sur）和更新版本需要，因为这个kext在macos 10.15（catalina）中被删除了。\n * ahciportinjector\n   * 传统的sata/ahci注入器，主要适用于penryn前的旧机器\n * ataportinjector\n   * 旧版的ata注入器，主要与ide和ata设备相关(即。当bios中没有ahci选项时)\n   * 依赖于appleintelpiixata.kext，使用macos 11（big sur）及更新版本时需要注入\n\n\n# 笔记本电脑输入\n\n要弄清楚你有什么样的键盘和触控板，请查看windows中的设备管理器或linux中的dmesg | grep -i input\n\n警告\n\n大多数笔记本电脑的键盘都是ps2！即使您有i2c, usb或smbus触控板，您也会想要抓取voodoops2。\n\n# ps2键盘和触摸板\n\n * voodoops2\n   * 适用于各种ps2键盘，鼠标和触控板\n   * mt2（magic trackpad 2）功能需要macos 10.11或更新版本\n * rehabman's voodoops2\n   * 对于带有ps2键盘，鼠标和触控板的旧系统，或者当您不想使用voodooinput时\n   * 支持macos 10.6+\n\n# smbus触摸板\n\n * voodoormi\n   * 适用于带有synaptics smbus触控板的系统\n   * mt2功能需要macos 10.11或更新版本\n   * 取决于acidanthera的voodoops2\n * voodoosmbus\n   * 适用于带有elan smbus触控板的系统\n   * 目前支持macos 10.14或更新版本\n\n# i2c/usb hid设备\n\n * voodooi2c\n   * 支持macos 10.11+\n   * 连接到i2c控制器，允许插件与i2c触控板交互\n   * 使用以下插件的usb设备仍然需要voodooi2c\n   * 必须与一个或多个插件配对如下所示：\n\nvoodooi2c插件\n\n连接类型            插件                  注释\n多点触控hid         voodooi2chid        可以与i2c/usb触摸屏和触控板一起使用\nelan专有          voodooi2celan       elan1200+需要voodooi2chid代替\nfte1001触摸板      voodooi2cfte        \natmel多点触控协议     voodooi2catmelmxt   \nsynaptics hid   voodoormi           i2c synaptic触控板（需要voodooi2c仅用于i2c模式）\nalps hid        alpshid             可与usb或i2c alps触控板一起使用。主要出现在戴尔笔记本电脑和一些惠普elitebook型号上\n\n# 杂项\n\n * ecenabler\n   * 修复了在许多设备上读取电池状态（允许读取超过8位长的ec字段）\n   * 支持os x 10.7及以上版本（10.4 - 10.6不需要）\n * brightnesskeys\n   * 自动修复亮度键\n\n请参考kexts.md（或opencore中的docs\\kexts.md获取支持的完整kext列表\n\n\n# ssdts\n\n你在acpisamples文件夹中看到所有的ssdt，想知道你是否需要它们。对于我们来说，我们将讨论在config.plist的特定acpi部分中需要哪些ssdt，因为所需的ssdt是特定于平台的。有一些系统特定的地方需要配置，如果我现在给你一个ssdt列表供你选择，你很容易迷路。\n\nacpi入门有一个关于ssdt的扩展部分，包括在不同平台上编译它们。\n\n一个所需ssdt的快速tl;dr（这是源代码，你必须将它们编译成一个.aml文件）：\n\n\n# 台式机\n\n平台                    cpu                           ec             awac        nvram      usb\npenryn                n/a                           ssdt-ec        n/a         n/a        n/a\nlynnfield和clarkdale\nsandy bridge          cpu-pm（安装后运行）\nivy bridge\nhaswell               ssdt-plug\nbroadwell\nskylake                                             ssdt-ec-usbx\nkaby lake\ncoffee lake                                                        ssdt-awac   ssdt-pmc\ncomet lake                                                                     n/a        ssdt-rhub\namd (15/16h)          n/a                                          n/a                    n/a\namd (17/19h)          ssdt-cpur for b550 and a520\n\n\n# 高端台式机\n\n平台                 cpu         ec             rtc               pci\nnehalem和westmere   n/a         ssdt-ec        n/a               n/a\nsandy bridge-e                                                  ssdt-unc\nivy bridge-e\nhaswell-e          ssdt-plug   ssdt-ec-usbx   ssdt-rtc0-range\nbroadwell-e\nskylake-x                                                       n/a\n\n\n# 笔记本\n\n平台                                  cpu             ec             backlight   i2c trackpad   awac        usb         irq\nclarksfield和arrandale               n/a             ssdt-ec        ssdt-pnlf   n/a            n/a         n/a         irq ssdt\nsandy bridge                        cpu-pm（安装后运行）\nivy bridge\nhaswell                             ssdt-plug                                  ssdt-gpi0\nbroadwell\nskylake                                             ssdt-ec-usbx                                                      n/a\nkaby lake\ncoffee lake（8th gen）和whiskey lake                                  ssdt-pnlf                  ssdt-awac\ncoffee lake（9th gen）\ncomet lake\nice lake                                                                                                  ssdt-rhub\n\n续表：\n\n平台                                  nvram      imei\nclarksfield和arrandale               n/a        n/a\nsandy bridge                                   ssdt-imei\nivy bridge\nhaswell                                        n/a\nbroadwell\nskylake\nkaby lake\ncoffee lake（8th gen）和whiskey lake\ncoffee lake（9th gen）                ssdt-pmc\ncomet lake                          n/a\nice lake\n\n\n# 现在所有这些都完成了，前往acpi入门",charsets:{cjk:!0}},{title:"硬件限制",frontmatter:{},regularPath:"/macos-limits.html",relativePath:"macos-limits.md",key:"v-077d4a3e",path:"/macos-limits.html",headers:[{level:2,title:"处理器支持",slug:"处理器支持",normalizedTitle:"处理器支持",charIndex:108},{level:2,title:"显卡支持",slug:"显卡支持",normalizedTitle:"显卡支持",charIndex:117},{level:2,title:"主板支持",slug:"主板支持",normalizedTitle:"主板支持",charIndex:125},{level:2,title:"存储支持",slug:"存储支持",normalizedTitle:"存储支持",charIndex:133},{level:2,title:"有线网络",slug:"有线网络",normalizedTitle:"有线网络",charIndex:141},{level:2,title:"无线网络",slug:"无线网络",normalizedTitle:"无线网络",charIndex:149},{level:2,title:"其他",slug:"其他",normalizedTitle:"其他",charIndex:157}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"处理器支持 显卡支持 主板支持 存储支持 有线网络 无线网络 其他",content:"# 硬件限制\n\n对于macOS，在开始安装之前，您需要了解许多硬件限制。这是由于Apple支持的硬件数量有限，所以我们不是受到Apple的限制，就是受到社区创建的补丁的限制。\n\n要验证的主要硬件部分有:\n\n\n\n * 处理器支持\n * 显卡支持\n * 主板支持\n * 存储支持\n * 有线网络\n * 无线网络\n * 其他\n\n\n\n有关该主题的更详细指南，请参阅此处:\n\n * 显卡购买指南\n   * 检查你的显卡是否受支持，以及你可以运行哪个macOS版本。\n * 无线网卡购买指南\n   * 检查是否支持您的无线网卡卡。\n * 购买踩坑指南\n   * 关于应该避免什么以及硬件可能遇到的坑的总体指南。\n\n\n# 处理器支持\n\n对于CPU支持，我们有以下细分:\n\n * 支持32位和64位CPU\n   * 但是，这需要操作系统支持您的体系结构，请参阅下面的CPU要求部分\n * 支持Intel台式机CPU。\n   * 本指南提供Yonah Lake至Comet Lake支持。\n * Intel高端台式机（HEDT）和服务器CPU。\n   * 本指南提供Nehalem至Cascade Lake X支持。\n * Intel酷睿\"i\"和至强系列笔记本CPU\n   * 本指南提供Arrandale至Ice Lake支持\n   * 请注意，Mobile Atoms、赛扬和奔腾cpu不支持\n * AMD台式机Bulldozer (15h), Jaguar (16h) 和Ryzen (17h) CPU\n   * 不支持AMD笔记本CPU\n   * 注意，AMD并不支持macOS的所有功能，见下文\n\n如欲了解更多详情，请参阅此处:购买踩坑指南\n\nCPU要求\n\n架构需求\n\n * 10.4.1 ~ 10.6.8版本支持32位cpu\n   * 注意10.7.x需要64位用户空间，将32位CPU限制在10.6及以下\n * 注意10.7。x需要64位用户空间，将32位cpu限制为10.6\n\nSSE要求:\n\n * 所有Intel版本的OS X/macOS都需要SSE3\n * 所有64位版本的OS X/macOS都需要SSSE3\n   * 对于缺少SSSE3的CPU(即某些64位奔腾)，我们建议运行32位用户空间(i386-user32)\n * 对于缺少SSSE3的cpu(即某些64位奔腾)，我们建议运行32位用户空间(i386-user32)\n * 需要SSE4.2\n   * telemtrap.kext支持SSE4.1 cpu\n   * 较新的AMD驱动程序也需要SSE4.2 for Metal支持。要解决这个问题，请参见这里:MouSSE: SSE4.2 emulation\n\n固件要求:\n\n * OS X 10.4.1到10.4.7需要EFI32(即IA32(32位)版本的OpenCore)\n   * OS X 10.4.8到10.7.5支持EFI32和EFI64\n * OS X 10.8及更新版本需要EFI64(即x64(64位)版本的OpenCore)\n * OS X 10.7到10.9需要OpenPartitionDxe.efi启动Recovery分区\n\n内核要求:\n\n * OS X 10.4和10.5由于只支持32位内核空间，所以需要32位的kext\n   * OS X 10.6和10.7同时支持32位和64位内核空间\n * OS X 10.8及更新版本由于只支持64位内核空间，所以需要64位的kext\n   * 运行lipo -archs来了解您的kext支持的体系结构(记住要在二进制文件本身上运行，而不是在.kext包上运行)\n\n核心/线程数限制:\n\n * OS X 10.10及以下版本可能无法引导超过24个线程(由mp_cpus_call_wait() timeout panic显示)\n * OS X 10.11及更新版本有64个线程限制\n * cpus= 引导参数可用作变通方法，或禁用超线程\n\n特别指出:\n\n * Lilu和插件需要10.8或更新版本才能运行\n   * 我们建议在旧版本的OS X上运行FakeSMC\n * OS X 10.6及更老版本需要启用RebuildAppleMemoryMap\n   * 这是为了解决早期的内核问题\n\n英特尔CPU支持图\n\n基于原生内核支持(即没有修改):\n\nCPU代数                            最初支持      最后支持版本    注意                   CPUID\nPentium 4                        10.4.1    10.5.8    仅用于开发工具包             0x0F41\nYonah                            10.4.4    10.6.8    32位                  0x0006E6\nConroe, Merom                    10.4.7    10.11.6   无SSE4                0x0006F2\nPenryn                           10.4.10   10.13.6   无SSE4.2              0x010676\nNehalem                          10.5.6    当前        N/A                  0x0106A2\nLynnfield, Clarksfield           10.6.3              没有支持10.14+的核芯显卡      0x0106E0\nWestmere, Clarkdale, Arrandale   10.6.4                                   0x0206C0\nSandy Bridge                     10.6.7                                   0x0206A0(M/H)\nIvy Bridge                       10.7.3              没有支持12+的核芯显卡         0x0306A0(M/H/G)\nIvy Bridge-E5                    10.9.2              N/A                  0x0306E0\nHaswell                          10.8.5                                   0x0306C0(S)\nBroadwell                        10.10.0                                  0x0306D4(U/Y)\nSkylake                          10.11.0                                  0x0506e3(H/S) 0x0406E3(U/Y)\nKaby Lake                        10.12.4                                  0x0906E9(H/S/G) 0x0806E9(U/Y)\nCoffee Lake                      10.12.6                                  0x0906EA(S/H/E) 0x0806EA(U)\nAmber, Whiskey, Comet Lake       10.14.1                                  0x0806E0(U/Y)\nComet Lake                       10.15.4                                  0x0906E0(S/H)\nIce Lake                                                                  0x0706E5(U)\nRocket Lake                                          需要Comet Lake CPUID   0x0A0671\nTiger Lake                       N/A       N/A       未测试                  0x0806C0(U)\n\nmacOS中的AMD CPU限制\n\n不幸的是，macOS中的许多功能完全不受AMD的支持，还有许多功能部分被破坏。这些包括:\n\n * 依赖AppleHV的虚拟机\n   * 这包括VMWare, Parallels, Docker, Android Studio等\n   * VirtualBox是唯一的例外，因为他们有自己的管理程序\n   * VMware 10和Parallels 13.1.0确实支持它们自己的虚拟机管理程序，但是使用这些过时的虚拟机软件会带来很大的安全威胁\n * Adobe支持\n   * 大多数Adobe的套件依赖于英特尔的Memfast指令集，导致在使用AMD cpu时崩溃\n   * 您可以禁用RAW支持等功能以避免崩溃:Adobe修复\n * 32位支持\n   * 对于那些在Mojave及以下版本中仍然依赖32位软件的用户，请注意原生补丁不支持32位指令\n   * 一个解决办法是安装一个自定义内核，但是你失去了iMessage支持，并且没有为这些内核提供的支持\n * 许多应用程序的稳定性问题\n   * 基于音频的应用最容易出现问题。例如Logic Pro\n   * DaVinci Resolve也有零星的问题\n\n\n# 显卡支持\n\n由于市场上GPU的数量几乎是无限的，所以对显卡的支持变得更加复杂，但总体分解如下:\n\n * 最新版本的macOS支持AMD基于GCN的显卡\n   * 但是不支持AMD APU\n   * AMD基于Lexa的内核的Polaris系列的也不支持\n   * MSI Navi用户的特别注意事项:安装程序无法与5700XT #901一起工作\n     * 这个问题在macOS 11(Big Sur)中不再存在。\n * NVIDIA显卡支持是复杂的:\n   * Maxwell(9XX)和Pascal(10XX) 显卡仅限于macOS 10.13: High Sierra\n   * NVIDIA Turing(20XX,16XX) 显卡所有的macOS版本都不支持\n   * NVIDIA's Ampere(30XX) 显卡所有的macOS版本都不支持\n   * NVIDIA's Kepler(6XX,7XX) 显卡支持到macOS 11: Big Sur\n * Intel GT2+ tier系列核芯显卡\n   * 本指南涵盖了从Ivy Bridge到Ice Lake的核芯显卡支持\n     * 关于GMA系列核芯显卡的更多信息，可以在这里找到:GMA补丁\n   * 注意GT2指的是核芯显卡的层级，低端GT1的核芯显卡在奔腾、赛扬和Atom上是不支持的\n\n对于带有独立显卡的笔记本电脑，还有一个重要的提示:\n\n * 90%的独立显卡无法工作，因为它们连接在macOS不支持的配置中(可切换图形)。对于NVIDIA分立显卡，这通常被称为Optimus。不可能将这些分立的显卡用于内部显示，因此通常建议禁用它们并关闭它们(将在本指南的后面介绍)。\n * 然而，在某些情况下，为任何外部输出(HDMI, mini DisplayPort等)分立GPU供电时可能工作，也可能不工作;在这种情况下，如果它工作，你将不得不保持卡运行。\n * 然而，有些笔记本电脑很少没有可切换的显卡，所以可以使用独立显卡(如果macOS支持的话)，但接线和设置通常会引起问题。\n\n有关支持的GPU的完整列表，请参阅显卡购买指南\n\nIntel显卡支持列表\n\n显卡代数                     最初支持      最后支持版本    注意\n第3代GMA                   10.4.1    10.7.5    需要32位内核和补丁\n第4代GMA                   10.5.0\nArrandale(高清显卡)          10.6.4    10.13.6   只支持LVDS，不支持eDP和外部输出\nSandy Bridge(HD 3000)    10.6.7              N/A\nIvy Bridge(HD 4000)      10.7.3    11.7.x\nHaswell(HD 4XXX, 5XXX)   10.8.5    12.6.x\nBroadwell(5XXX, 6XXX)    10.10.0\nSkylake(HD 5XX)          10.11.0\nKaby Lake(HD 6XX)        10.12.4   当前\nCoffee Lake(UHD 6XX)     10.13.6\nComet Lake(UHD 6XX)      10.15.4\nIce Lake(Gx)             10.15.4             需要引导参数-igfxcdc和-igfxdvmt\nTiger Lake(Xe)           N/A       N/A       无可用驱动程序\nRocket Lake              N/A       N/A       无可用驱动程序\n\nAMD显卡支持列表\n\n显卡代数             最初支持      最后支持版本    注意\nX800             10.3.x    10.7.5    需要32位内核\nX1000            10.4.x              N/A\nTeraScale        10.4.x    10.13.6\nTeraScale 2/3    10.6.x\nGCN 1            10.8.3    12.6.x\nGCN 2/3          10.10.x\nPolaris 10, 20   10.12.1   当前\nVega 10          10.12.6\nVega 20          10.14.5\nNavi 10          10.15.1             需要引导参数agdpmod=pikera\nNavi 20          11.4                目前只有一些Navi 21型号可以工作\n\nNVIDIA显卡支持列表\n\n显卡代数        最初支持      最后支持版本    注意\nGeForce 6   10.2.x    10.7.5    需要32位内核和NVCAP补丁\nGeForce 7   10.4.x              需要打NVCAP补丁\nTesla       10.4.x    10.13.6\nTesla v2    10.5.x\nFermi       10.7.x\nKepler      10.7.x    11.7.x    N/A\nKepler v2   10.8.x\nMaxwell     10.10.x   10.13.6   需要NVIDIA网络驱动\nPascal      10.12.4\nTuring      N/A       N/A       无可用驱动程序\nAmpere\n\n\n# 主板支持\n\n在大多数情况下，只要支持CPU，就支持所有主板。\n\nMSI 500系列AMD主板说明\n\n唯一的例外是MSI 500系列AMD主板(A520, B550和X570)。这些主板在macOS Monterey及以上版本上有问题:\n\n * PCIe设备并不总是被正确枚举\n * Zen 3的BIOS更新支持中断引导\n\n对于这些主板，我们建议使用macOS Big Sur或更早版本。\n\n感谢CaseySJ，这已经在最新版本的AMD原生补丁中修复了!\n\n\n# 存储支持\n\n在大多数情况下，支持所有基于SATA的驱动器和大多数NVMe驱动器。只有少数例外:\n\n * 三星PM981、PM991和美光2200S NVMe固态硬盘\n   \n   * 这些SSD不兼容开箱即用(导致kernel panic)，因此需要NVMeFix.kext来修复这些kernel panic。请注意，即使使用NVMeFix.kext，这些驱动器仍然可能导致启动问题。\n   * 与此相关的是，三星970 EVO Plus NVMe固态硬盘也有同样的问题，但在固件更新中得到了修复;在这里获取更新(Windows下的Samsung Magician或可引导ISO)。\n   * 同样需要注意的是，使用Intel Optane Memory或Micron 3D XPoint进行硬盘加速的笔记本电脑在macOS中是不支持的。一些用户报告说，在Catalina中甚至可以成功地读写支持，但我们强烈建议删除驱动器，以防止任何潜在的启动问题。\n     * 请注意，如果在macOS中禁用Optane部分，则英特尔Optane Memory H10/H20型号兼容。更多信息可以在这里找到(原文)。\n\n * Intel 600p\n   \n   * 虽然不是无法启动，但请注意此型号可能会导致许多问题。Any fix for Intel 600p NVMe Drive? #1286\n   * 660p的型号没问题\n\n\n# 有线网络\n\n实际上，所有有线网络适配器在macOS中都有某种形式的支持，不是有内置驱动程序，就是有社区制作的kext。主要的例外情况:\n\n * Intel I225 2.5Gb NIC\n   * 在HEDT Comet Lake主板上发现\n   * 解决方案是可能的:源和示例\n * Intel I350 1Gb服务器网卡\n   * 通常存在于英特尔和超微的服务器主板的各个代数\n   * 解决方案\n * Intel 10Gb服务器网卡\n   * X520和X540芯片组的解决方案是可能的\n * Mellanox和Qlogic服务器网卡\n\n\n# 无线网络\n\n大多数笔记本电脑自带的WiFi卡都不支持，因为它们通常是英特尔（Intel）或高通（Qualcomm）的。如果幸运的话，您可能有一个受支持的Atheros卡，但支持只运行到High Sierra。\n\n最好的选择是获得支持的博通（Broadcom）卡;请参阅无线网卡购买指南获取建议。\n\n注意:在macOS上Intel WiFi有非官方的(第三方驱动程序)支持，查看无线网卡购买指南了解更多关于驱动程序和支持卡的信息。\n\n\n# 其他\n\n * 指纹传感器\n   * 目前还没有办法模拟Touch ID传感器，所以指纹传感器将无法工作。\n * Windows Hello人脸识别\n   * 一些笔记本电脑带有I2C连接的WHFR(并通过核芯显卡使用)，这些将无法工作。\n   * 有些笔记本电脑带有USB连接的WHFR，如果幸运的话，你可能有相机功能，但没有其他功能。\n * 英特尔智能音响技术\n   * 带有英特尔SST的笔记本电脑将没有任何连接通过它们(通常是内部麦克风)工作，因为它不支持。你可以用Windows上的设备管理器检查。\n * 耳机插孔组合\n   * 一些带有组合耳机插孔的笔记本电脑可能无法通过它们输入音频，必须使用内置麦克风或通过USB连接外部音频输入设备。\n * Thunderbolt USB-C接口\n   * (黑苹果) macOS对Thunderbolt的支持目前仍不确定，对Alpine Ridge控制器的支持更是如此，目前大多数笔记本电脑都有这种控制器。有人尝试让控制器保持开机状态，这样就可以让Thunderbolt和USB-C热插拔工作，但这是以kernel panic和/或USB-C在睡眠后断开为代价的。如果你想使用端口的USB-C端并且能够睡眠，你必须在启动时插入并保持插入状态。\n   * 注意:这不适用于仅USB-C端口-仅适用于Thunderbolt 3和USB-C组合端口。\n   * 在BIOS中禁用Thunderbolt也可以解决这个问题。",normalizedContent:"# 硬件限制\n\n对于macos，在开始安装之前，您需要了解许多硬件限制。这是由于apple支持的硬件数量有限，所以我们不是受到apple的限制，就是受到社区创建的补丁的限制。\n\n要验证的主要硬件部分有:\n\n\n\n * 处理器支持\n * 显卡支持\n * 主板支持\n * 存储支持\n * 有线网络\n * 无线网络\n * 其他\n\n\n\n有关该主题的更详细指南，请参阅此处:\n\n * 显卡购买指南\n   * 检查你的显卡是否受支持，以及你可以运行哪个macos版本。\n * 无线网卡购买指南\n   * 检查是否支持您的无线网卡卡。\n * 购买踩坑指南\n   * 关于应该避免什么以及硬件可能遇到的坑的总体指南。\n\n\n# 处理器支持\n\n对于cpu支持，我们有以下细分:\n\n * 支持32位和64位cpu\n   * 但是，这需要操作系统支持您的体系结构，请参阅下面的cpu要求部分\n * 支持intel台式机cpu。\n   * 本指南提供yonah lake至comet lake支持。\n * intel高端台式机（hedt）和服务器cpu。\n   * 本指南提供nehalem至cascade lake x支持。\n * intel酷睿\"i\"和至强系列笔记本cpu\n   * 本指南提供arrandale至ice lake支持\n   * 请注意，mobile atoms、赛扬和奔腾cpu不支持\n * amd台式机bulldozer (15h), jaguar (16h) 和ryzen (17h) cpu\n   * 不支持amd笔记本cpu\n   * 注意，amd并不支持macos的所有功能，见下文\n\n如欲了解更多详情，请参阅此处:购买踩坑指南\n\ncpu要求\n\n架构需求\n\n * 10.4.1 ~ 10.6.8版本支持32位cpu\n   * 注意10.7.x需要64位用户空间，将32位cpu限制在10.6及以下\n * 注意10.7。x需要64位用户空间，将32位cpu限制为10.6\n\nsse要求:\n\n * 所有intel版本的os x/macos都需要sse3\n * 所有64位版本的os x/macos都需要ssse3\n   * 对于缺少ssse3的cpu(即某些64位奔腾)，我们建议运行32位用户空间(i386-user32)\n * 对于缺少ssse3的cpu(即某些64位奔腾)，我们建议运行32位用户空间(i386-user32)\n * 需要sse4.2\n   * telemtrap.kext支持sse4.1 cpu\n   * 较新的amd驱动程序也需要sse4.2 for metal支持。要解决这个问题，请参见这里:mousse: sse4.2 emulation\n\n固件要求:\n\n * os x 10.4.1到10.4.7需要efi32(即ia32(32位)版本的opencore)\n   * os x 10.4.8到10.7.5支持efi32和efi64\n * os x 10.8及更新版本需要efi64(即x64(64位)版本的opencore)\n * os x 10.7到10.9需要openpartitiondxe.efi启动recovery分区\n\n内核要求:\n\n * os x 10.4和10.5由于只支持32位内核空间，所以需要32位的kext\n   * os x 10.6和10.7同时支持32位和64位内核空间\n * os x 10.8及更新版本由于只支持64位内核空间，所以需要64位的kext\n   * 运行lipo -archs来了解您的kext支持的体系结构(记住要在二进制文件本身上运行，而不是在.kext包上运行)\n\n核心/线程数限制:\n\n * os x 10.10及以下版本可能无法引导超过24个线程(由mp_cpus_call_wait() timeout panic显示)\n * os x 10.11及更新版本有64个线程限制\n * cpus= 引导参数可用作变通方法，或禁用超线程\n\n特别指出:\n\n * lilu和插件需要10.8或更新版本才能运行\n   * 我们建议在旧版本的os x上运行fakesmc\n * os x 10.6及更老版本需要启用rebuildapplememorymap\n   * 这是为了解决早期的内核问题\n\n英特尔cpu支持图\n\n基于原生内核支持(即没有修改):\n\ncpu代数                            最初支持      最后支持版本    注意                   cpuid\npentium 4                        10.4.1    10.5.8    仅用于开发工具包             0x0f41\nyonah                            10.4.4    10.6.8    32位                  0x0006e6\nconroe, merom                    10.4.7    10.11.6   无sse4                0x0006f2\npenryn                           10.4.10   10.13.6   无sse4.2              0x010676\nnehalem                          10.5.6    当前        n/a                  0x0106a2\nlynnfield, clarksfield           10.6.3              没有支持10.14+的核芯显卡      0x0106e0\nwestmere, clarkdale, arrandale   10.6.4                                   0x0206c0\nsandy bridge                     10.6.7                                   0x0206a0(m/h)\nivy bridge                       10.7.3              没有支持12+的核芯显卡         0x0306a0(m/h/g)\nivy bridge-e5                    10.9.2              n/a                  0x0306e0\nhaswell                          10.8.5                                   0x0306c0(s)\nbroadwell                        10.10.0                                  0x0306d4(u/y)\nskylake                          10.11.0                                  0x0506e3(h/s) 0x0406e3(u/y)\nkaby lake                        10.12.4                                  0x0906e9(h/s/g) 0x0806e9(u/y)\ncoffee lake                      10.12.6                                  0x0906ea(s/h/e) 0x0806ea(u)\namber, whiskey, comet lake       10.14.1                                  0x0806e0(u/y)\ncomet lake                       10.15.4                                  0x0906e0(s/h)\nice lake                                                                  0x0706e5(u)\nrocket lake                                          需要comet lake cpuid   0x0a0671\ntiger lake                       n/a       n/a       未测试                  0x0806c0(u)\n\nmacos中的amd cpu限制\n\n不幸的是，macos中的许多功能完全不受amd的支持，还有许多功能部分被破坏。这些包括:\n\n * 依赖applehv的虚拟机\n   * 这包括vmware, parallels, docker, android studio等\n   * virtualbox是唯一的例外，因为他们有自己的管理程序\n   * vmware 10和parallels 13.1.0确实支持它们自己的虚拟机管理程序，但是使用这些过时的虚拟机软件会带来很大的安全威胁\n * adobe支持\n   * 大多数adobe的套件依赖于英特尔的memfast指令集，导致在使用amd cpu时崩溃\n   * 您可以禁用raw支持等功能以避免崩溃:adobe修复\n * 32位支持\n   * 对于那些在mojave及以下版本中仍然依赖32位软件的用户，请注意原生补丁不支持32位指令\n   * 一个解决办法是安装一个自定义内核，但是你失去了imessage支持，并且没有为这些内核提供的支持\n * 许多应用程序的稳定性问题\n   * 基于音频的应用最容易出现问题。例如logic pro\n   * davinci resolve也有零星的问题\n\n\n# 显卡支持\n\n由于市场上gpu的数量几乎是无限的，所以对显卡的支持变得更加复杂，但总体分解如下:\n\n * 最新版本的macos支持amd基于gcn的显卡\n   * 但是不支持amd apu\n   * amd基于lexa的内核的polaris系列的也不支持\n   * msi navi用户的特别注意事项:安装程序无法与5700xt #901一起工作\n     * 这个问题在macos 11(big sur)中不再存在。\n * nvidia显卡支持是复杂的:\n   * maxwell(9xx)和pascal(10xx) 显卡仅限于macos 10.13: high sierra\n   * nvidia turing(20xx,16xx) 显卡所有的macos版本都不支持\n   * nvidia's ampere(30xx) 显卡所有的macos版本都不支持\n   * nvidia's kepler(6xx,7xx) 显卡支持到macos 11: big sur\n * intel gt2+ tier系列核芯显卡\n   * 本指南涵盖了从ivy bridge到ice lake的核芯显卡支持\n     * 关于gma系列核芯显卡的更多信息，可以在这里找到:gma补丁\n   * 注意gt2指的是核芯显卡的层级，低端gt1的核芯显卡在奔腾、赛扬和atom上是不支持的\n\n对于带有独立显卡的笔记本电脑，还有一个重要的提示:\n\n * 90%的独立显卡无法工作，因为它们连接在macos不支持的配置中(可切换图形)。对于nvidia分立显卡，这通常被称为optimus。不可能将这些分立的显卡用于内部显示，因此通常建议禁用它们并关闭它们(将在本指南的后面介绍)。\n * 然而，在某些情况下，为任何外部输出(hdmi, mini displayport等)分立gpu供电时可能工作，也可能不工作;在这种情况下，如果它工作，你将不得不保持卡运行。\n * 然而，有些笔记本电脑很少没有可切换的显卡，所以可以使用独立显卡(如果macos支持的话)，但接线和设置通常会引起问题。\n\n有关支持的gpu的完整列表，请参阅显卡购买指南\n\nintel显卡支持列表\n\n显卡代数                     最初支持      最后支持版本    注意\n第3代gma                   10.4.1    10.7.5    需要32位内核和补丁\n第4代gma                   10.5.0\narrandale(高清显卡)          10.6.4    10.13.6   只支持lvds，不支持edp和外部输出\nsandy bridge(hd 3000)    10.6.7              n/a\nivy bridge(hd 4000)      10.7.3    11.7.x\nhaswell(hd 4xxx, 5xxx)   10.8.5    12.6.x\nbroadwell(5xxx, 6xxx)    10.10.0\nskylake(hd 5xx)          10.11.0\nkaby lake(hd 6xx)        10.12.4   当前\ncoffee lake(uhd 6xx)     10.13.6\ncomet lake(uhd 6xx)      10.15.4\nice lake(gx)             10.15.4             需要引导参数-igfxcdc和-igfxdvmt\ntiger lake(xe)           n/a       n/a       无可用驱动程序\nrocket lake              n/a       n/a       无可用驱动程序\n\namd显卡支持列表\n\n显卡代数             最初支持      最后支持版本    注意\nx800             10.3.x    10.7.5    需要32位内核\nx1000            10.4.x              n/a\nterascale        10.4.x    10.13.6\nterascale 2/3    10.6.x\ngcn 1            10.8.3    12.6.x\ngcn 2/3          10.10.x\npolaris 10, 20   10.12.1   当前\nvega 10          10.12.6\nvega 20          10.14.5\nnavi 10          10.15.1             需要引导参数agdpmod=pikera\nnavi 20          11.4                目前只有一些navi 21型号可以工作\n\nnvidia显卡支持列表\n\n显卡代数        最初支持      最后支持版本    注意\ngeforce 6   10.2.x    10.7.5    需要32位内核和nvcap补丁\ngeforce 7   10.4.x              需要打nvcap补丁\ntesla       10.4.x    10.13.6\ntesla v2    10.5.x\nfermi       10.7.x\nkepler      10.7.x    11.7.x    n/a\nkepler v2   10.8.x\nmaxwell     10.10.x   10.13.6   需要nvidia网络驱动\npascal      10.12.4\nturing      n/a       n/a       无可用驱动程序\nampere\n\n\n# 主板支持\n\n在大多数情况下，只要支持cpu，就支持所有主板。\n\nmsi 500系列amd主板说明\n\n唯一的例外是msi 500系列amd主板(a520, b550和x570)。这些主板在macos monterey及以上版本上有问题:\n\n * pcie设备并不总是被正确枚举\n * zen 3的bios更新支持中断引导\n\n对于这些主板，我们建议使用macos big sur或更早版本。\n\n感谢caseysj，这已经在最新版本的amd原生补丁中修复了!\n\n\n# 存储支持\n\n在大多数情况下，支持所有基于sata的驱动器和大多数nvme驱动器。只有少数例外:\n\n * 三星pm981、pm991和美光2200s nvme固态硬盘\n   \n   * 这些ssd不兼容开箱即用(导致kernel panic)，因此需要nvmefix.kext来修复这些kernel panic。请注意，即使使用nvmefix.kext，这些驱动器仍然可能导致启动问题。\n   * 与此相关的是，三星970 evo plus nvme固态硬盘也有同样的问题，但在固件更新中得到了修复;在这里获取更新(windows下的samsung magician或可引导iso)。\n   * 同样需要注意的是，使用intel optane memory或micron 3d xpoint进行硬盘加速的笔记本电脑在macos中是不支持的。一些用户报告说，在catalina中甚至可以成功地读写支持，但我们强烈建议删除驱动器，以防止任何潜在的启动问题。\n     * 请注意，如果在macos中禁用optane部分，则英特尔optane memory h10/h20型号兼容。更多信息可以在这里找到(原文)。\n\n * intel 600p\n   \n   * 虽然不是无法启动，但请注意此型号可能会导致许多问题。any fix for intel 600p nvme drive? #1286\n   * 660p的型号没问题\n\n\n# 有线网络\n\n实际上，所有有线网络适配器在macos中都有某种形式的支持，不是有内置驱动程序，就是有社区制作的kext。主要的例外情况:\n\n * intel i225 2.5gb nic\n   * 在hedt comet lake主板上发现\n   * 解决方案是可能的:源和示例\n * intel i350 1gb服务器网卡\n   * 通常存在于英特尔和超微的服务器主板的各个代数\n   * 解决方案\n * intel 10gb服务器网卡\n   * x520和x540芯片组的解决方案是可能的\n * mellanox和qlogic服务器网卡\n\n\n# 无线网络\n\n大多数笔记本电脑自带的wifi卡都不支持，因为它们通常是英特尔（intel）或高通（qualcomm）的。如果幸运的话，您可能有一个受支持的atheros卡，但支持只运行到high sierra。\n\n最好的选择是获得支持的博通（broadcom）卡;请参阅无线网卡购买指南获取建议。\n\n注意:在macos上intel wifi有非官方的(第三方驱动程序)支持，查看无线网卡购买指南了解更多关于驱动程序和支持卡的信息。\n\n\n# 其他\n\n * 指纹传感器\n   * 目前还没有办法模拟touch id传感器，所以指纹传感器将无法工作。\n * windows hello人脸识别\n   * 一些笔记本电脑带有i2c连接的whfr(并通过核芯显卡使用)，这些将无法工作。\n   * 有些笔记本电脑带有usb连接的whfr，如果幸运的话，你可能有相机功能，但没有其他功能。\n * 英特尔智能音响技术\n   * 带有英特尔sst的笔记本电脑将没有任何连接通过它们(通常是内部麦克风)工作，因为它不支持。你可以用windows上的设备管理器检查。\n * 耳机插孔组合\n   * 一些带有组合耳机插孔的笔记本电脑可能无法通过它们输入音频，必须使用内置麦克风或通过usb连接外部音频输入设备。\n * thunderbolt usb-c接口\n   * (黑苹果) macos对thunderbolt的支持目前仍不确定，对alpine ridge控制器的支持更是如此，目前大多数笔记本电脑都有这种控制器。有人尝试让控制器保持开机状态，这样就可以让thunderbolt和usb-c热插拔工作，但这是以kernel panic和/或usb-c在睡眠后断开为代价的。如果你想使用端口的usb-c端并且能够睡眠，你必须在启动时插入并保持插入状态。\n   * 注意:这不适用于仅usb-c端口-仅适用于thunderbolt 3和usb-c组合端口。\n   * 在bios中禁用thunderbolt也可以解决这个问题。",charsets:{cjk:!0}},{title:"Credits",frontmatter:{},regularPath:"/misc/credit.html",relativePath:"misc/credit.md",key:"v-5d771336",path:"/misc/credit.html",lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:null,content:"# Credits\n\nNo good guide is made by one man, here's credit to those who've helped out:\n\n * vit9696\n   * One of many developers of OpenCore\n   * Corrections to the original guide\n   * Corrections to this guide...(seriously this man deserves a medal)\n * CorpNewt\n   * Heavily inspiring this guide(if not a rip off) and helping overall with questions and advice\n   * Spoof SSDT source\n   * Creating ProperTree and GenSMBIOS\n * Midi\n   * Corrections and recommendations for the guide\n * AlGrey#9303\n   * AMD Kernel patches\n * NoOne/IOIIIO\n   * For the original AMD Vanilla Guide\n   * Corrections to AMD portion of the guide\n * DhinakG\n   * Random guide related stuff and maintaining the guide\n * 1Revenger1\n   * Maintaining the guide\n * Khronokernel\n   * For both writing and maintaining the guide\n * kernel\n   * For OCSysInfo\n * all the GitHub contributors\n * and the rest of the dortania team for helping out\n\nAnd to the rest who've helped out as well, thank you!\n\nDevelopers of OpenCore:\n\n * al3xtjames\n * Andrey1970AppleLife\n * mhaeuser (formerly Download-Fritz)\n * Goldfish64\n * nms42\n * PMHeart\n * savvamitrofanov\n * vit9696\n\nGuides linked or those that inspired this guide:\n\n * r/Hackintosh Vanilla Desktop Guide\n * All-in-one Vanilla AMD Hackintosh Guide\n * USB Map Guide\n * Intel Framebuffer Patching\n * AppleALC Supported Codecs\n * gfxutil\n\nAnd for those who have recommendations or issues with this guide, you can find the GitHub repo for this site here.\n\nSources:\n\n * OpenCore Documentation\n * KASLR slide:\n   * vit9696's Explainer\n   * Apianti's explainer\n   * KASLR Explainer\n   * More KASLR Explainer\n * Cleaning RC scripts:\n   * Clover Emulated NVRAM Uninstaller\n * ACPI Dumping:\n   * acpica\n * iServices Guide:\n   * Как завести сервисы Apple - iMessage, FaceTime, iCloud\n * iGPU and DRM configuration:\n   * WhateverGreen's manual\n   * WhateverGreen's DRM chart\n   * DRM Testing\n * rEFInd Guide:\n   * rEFInd Manual\n * USB Mapping Guide:\n   * XHCI Wake issues\n   * CorpNewt's USB Map Guide\n   * AppleLife USB Map Guide",normalizedContent:"# credits\n\nno good guide is made by one man, here's credit to those who've helped out:\n\n * vit9696\n   * one of many developers of opencore\n   * corrections to the original guide\n   * corrections to this guide...(seriously this man deserves a medal)\n * corpnewt\n   * heavily inspiring this guide(if not a rip off) and helping overall with questions and advice\n   * spoof ssdt source\n   * creating propertree and gensmbios\n * midi\n   * corrections and recommendations for the guide\n * algrey#9303\n   * amd kernel patches\n * noone/ioiiio\n   * for the original amd vanilla guide\n   * corrections to amd portion of the guide\n * dhinakg\n   * random guide related stuff and maintaining the guide\n * 1revenger1\n   * maintaining the guide\n * khronokernel\n   * for both writing and maintaining the guide\n * kernel\n   * for ocsysinfo\n * all the github contributors\n * and the rest of the dortania team for helping out\n\nand to the rest who've helped out as well, thank you!\n\ndevelopers of opencore:\n\n * al3xtjames\n * andrey1970applelife\n * mhaeuser (formerly download-fritz)\n * goldfish64\n * nms42\n * pmheart\n * savvamitrofanov\n * vit9696\n\nguides linked or those that inspired this guide:\n\n * r/hackintosh vanilla desktop guide\n * all-in-one vanilla amd hackintosh guide\n * usb map guide\n * intel framebuffer patching\n * applealc supported codecs\n * gfxutil\n\nand for those who have recommendations or issues with this guide, you can find the github repo for this site here.\n\nsources:\n\n * opencore documentation\n * kaslr slide:\n   * vit9696's explainer\n   * apianti's explainer\n   * kaslr explainer\n   * more kaslr explainer\n * cleaning rc scripts:\n   * clover emulated nvram uninstaller\n * acpi dumping:\n   * acpica\n * iservices guide:\n   * как завести сервисы apple - imessage, facetime, icloud\n * igpu and drm configuration:\n   * whatevergreen's manual\n   * whatevergreen's drm chart\n   * drm testing\n * refind guide:\n   * refind manual\n * usb mapping guide:\n   * xhci wake issues\n   * corpnewt's usb map guide\n   * applelife usb map guide",charsets:{cyrillic:!0}},{title:"开始使用OpenCore",frontmatter:{},regularPath:"/prerequisites.html",relativePath:"prerequisites.md",key:"v-a7f64bd4",path:"/prerequisites.html",headers:[{level:2,title:"先决条件",slug:"先决条件",normalizedTitle:"先决条件",charIndex:56}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"先决条件",content:"# 开始使用OpenCore\n\n在我们开始制作基于OpenCore的系统之前，我们需要先了解一些事情。\n\n\n# 先决条件\n\n 1. [重要] 时间和耐心。\n    * 如果你有截止日期或重要的工作，不要开始做这个。你不应该把Hackintosh当作工作机器来依赖。\n 2. [重要] 知道你的硬件\n    * 你的CPU名称\n    * 你的图形卡\n    * 你的存储设备(HDD/SSD, NVMe/AHCI/RAID/IDE配置)\n    * 你的笔记本/台式机型号（如果是从OEM厂商获得）\n    * 你的有线网卡\n    * 你的无线/蓝牙卡\n 3. [重要] 基本的命令行知识，以及如何使用终端/命令提示符\n    * 这不仅是[重要]，这是整个指南的基础。如果您不知道如何cd到目录或删除文件，我们无法帮助您。\n 4. [重要] 在_兼容性_一节中看到的兼容的机器。\n    * 硬件限制页面\n 5. [重要] 至少：\n    * 16GB USB（使用macOS创建USB时）\n    * 4GB USB（使用Windows或Linux创建USB时）\n 6. [重要] 以太网连接 (没有WiFi加密狗，以太网USB适配器可能工作取决于macOS支持)，并且你必须知道你的网卡的型号\n    * 您必须有一个物理以太网端口，或兼容的macOS以太网加密狗/适配器。如果你有兼容的WiFi卡你也可以使用它\n      * 请注意，大多数WiFi卡不支持macOS\n    * 对于不能使用以太网但有Android手机的人，你可以将Android手机连接到WiFi，然后使用USB连接。我们要用到HoRNDIS。\n 7. [重要] 正确安装操作系统:\n    * 具体是：\n      * macOS(如果是最新的就更好了)\n      * Windows (Windows 10, 1703或更高版本)\n      * Linux (干净且功能正常，使用Python 2.7或更高版本)\n    * 对于Windows或Linux用户，您需要正在使用的驱动器上空出15GB或以上的可用空间。在Windows上，系统盘(C:)必须有15GB或以上的可用空间。\n    * 对于macOS用户，在系统磁盘上空出至少30GB的可用空间。\n    * 本指南中的大部分工具都需要用到Python\n 8. [重要] 安装了最新版本的BIOS固件\n    * 在大多数情况下，更新BIOS将为macOS提供最好的支持\n    * 这个例外是MSI 500系列AMD主板，在主板支持部分阅读更多信息",normalizedContent:"# 开始使用opencore\n\n在我们开始制作基于opencore的系统之前，我们需要先了解一些事情。\n\n\n# 先决条件\n\n 1. [重要] 时间和耐心。\n    * 如果你有截止日期或重要的工作，不要开始做这个。你不应该把hackintosh当作工作机器来依赖。\n 2. [重要] 知道你的硬件\n    * 你的cpu名称\n    * 你的图形卡\n    * 你的存储设备(hdd/ssd, nvme/ahci/raid/ide配置)\n    * 你的笔记本/台式机型号（如果是从oem厂商获得）\n    * 你的有线网卡\n    * 你的无线/蓝牙卡\n 3. [重要] 基本的命令行知识，以及如何使用终端/命令提示符\n    * 这不仅是[重要]，这是整个指南的基础。如果您不知道如何cd到目录或删除文件，我们无法帮助您。\n 4. [重要] 在_兼容性_一节中看到的兼容的机器。\n    * 硬件限制页面\n 5. [重要] 至少：\n    * 16gb usb（使用macos创建usb时）\n    * 4gb usb（使用windows或linux创建usb时）\n 6. [重要] 以太网连接 (没有wifi加密狗，以太网usb适配器可能工作取决于macos支持)，并且你必须知道你的网卡的型号\n    * 您必须有一个物理以太网端口，或兼容的macos以太网加密狗/适配器。如果你有兼容的wifi卡你也可以使用它\n      * 请注意，大多数wifi卡不支持macos\n    * 对于不能使用以太网但有android手机的人，你可以将android手机连接到wifi，然后使用usb连接。我们要用到horndis。\n 7. [重要] 正确安装操作系统:\n    * 具体是：\n      * macos(如果是最新的就更好了)\n      * windows (windows 10, 1703或更高版本)\n      * linux (干净且功能正常，使用python 2.7或更高版本)\n    * 对于windows或linux用户，您需要正在使用的驱动器上空出15gb或以上的可用空间。在windows上，系统盘(c:)必须有15gb或以上的可用空间。\n    * 对于macos用户，在系统磁盘上空出至少30gb的可用空间。\n    * 本指南中的大部分工具都需要用到python\n 8. [重要] 安装了最新版本的bios固件\n    * 在大多数情况下，更新bios将为macos提供最好的支持\n    * 这个例外是msi 500系列amd主板，在主板支持部分阅读更多信息",charsets:{cjk:!0}},{title:"术语",frontmatter:{},regularPath:"/terminology.html",relativePath:"terminology.md",key:"v-d8e807d4",path:"/terminology.html",lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:null,content:"# 术语\n\n术语        描述\nmacOS     苹果自己的基于UNIX的操作系统，用于Mac机器，并且是“让Mac成为Mac的东西”。\nWindows   微软的专有操作系统，在许多设备上使用和支持(如果你不想头疼，就继续使用这个操作系统)\nLinux     基于Linux内核的开源类unix操作系统家族，Linux内核是由Linus\n          Torvalds于1991年9月17日首次发布的操作系统内核。Linux通常打包在Linux发行版中。请注意，虽然macOS和Linux可能是基于unix的，但它们有很大的不同。\nDistros   发行版的简称。Linux发行版是Linux的发行方式。然而，当谈到macOS时，发行版混合了macOS安装程序和一堆不是来自苹果的工具。不要使用“macOS发行版”\n黑苹果       将macOS安装到PC上的过程，请注意黑苹果不是操作系统，它也可以指被“黑掉”以在其上运行macOS的机器。比如：我在这台Windows机器上安装了macOS，所以我有一个黑苹果。但是我没有安装“黑苹果”。\n引导加载程序    加载操作系统的软件，通常由操作系统创建者制作。从技术上讲，OpenCore本身不是引导加载程序(参见下面的引导管理器解释)。Apple的Boot.efi将是Mac或黑苹果中实际的引导加载程序。\n启动管理器     一个管理引导加载程序的软件-我们有很多这样的:Clover, systemd-boot, OpenCore,\n          rEFInd, rEFIt…这些通常被看作是为实际的引导加载程序准备系统。\n\n----------------------------------------\n\n术语          描述\nOpenCore    黑苹果场景的新热点，由Acidanthera团队考虑到安全性后开发，启动速度更快，重量比Clover轻。它需要做更多的工作来设置，但也支持许多比Clover更原生的东西(如休眠，文件保险箱2，启动热键…)。\nClover      一个引导管理器，现在被认为是OpenCore发布的遗留问题。本指南将不涉及该软件的使用。\nACPI        高级配置和电源接口(Advanced Configuration and Power Interface,\n            ACPI)提供了一个开放标准，操作系统可以使用它来发现和配置计算机硬件组件，本指南后面将讨论更多这方面的内容。\nDSDT/SSDT   ACPI中的表描述了设备以及操作系统应该如何与它们交互，例如将计算机置于睡眠状态，唤醒状态，切换显卡, USB端口。\n.AML        ACPI的编译文件格式，以及你的电脑将执行什么。.DAT是另一个具有完全相同用途的扩展名。\n.DSL        ACPI 的源代码–这是您为计算机编辑和编译的内容。不要将此文件的扩展名混合为“.ASL'.\nKexts       也称为Kernel\n            Extension（内核扩展），是macOS的驱动程序。它们用于执行不同的任务，如设备驱动程序，或用于不同的目的(在黑苹果中)，如为操作系统打补丁，注入信息或运行任务。kext并不是优秀的黑苹果的唯一组成部分，因为它们通常与ACPI补丁和修复一起使用。\nBIOS        基本输入输出系统（The Basic Input/Output\n            System）是用于在启动过程(上电启动)中执行硬件初始化，并为操作系统和程序提供运行时服务的固件。BIOS固件预装在个人电脑的系统板上，它是第一个开机运行的软件(来源:维基百科)。这是一个70年代制作的遗留软件，由于它的成熟，至今仍在使用。\nUEFI        统一可扩展固件接口UEFI (Unified Extensible Firmware\n            Interface)是定义操作系统与平台固件之间软件接口的规范。传统BIOS (Basic Input Output\n            System)固件接口存在于所有兼容IBM\n            pc的个人电脑中，而UEFI将其替换为支持传统BIOS服务的固件实现。UEFI可以支持远程诊断和维修电脑,即使没有安装操作系统。(来源:维基百科)\nUEFI驱动      像其他操作系统一样，UEFI有驱动程序，它们由Clover或OpenCore加载。他们也意味着加载设备或执行其他任务，比如用HfsPlus.efi装载Apple\n            HFS驱动器，修补macOS的boot.efi等等。你可能会发现它们是“Clover驱动”或“OpenCore驱动”，它们都是UEFI驱动程序。（注意:只使用针对特定引导管理器的驱动程序。更多信息可以在Clover转换页面找到）。\n\n----------------------------------------\n\n术语    描述\nEFI   它可以表示两件事:\n      - Mac的固件，与UEFI相同，但修改了很多，只适用于Mac，所以不那么“通用”。\n      -\n      硬盘上存储UEFI读取用于加载操作系统（如Windows引导加载程序）或UEFI应用程序（如OpenCore）的软件的分区，它是FAT32格式的，ID类型为EF00（十六进制）。它可以被命名为ESP或SYSTEM，通常大小在100MB到400MB之间，但大小不影响任何东西。\nMBR   主引导记录（Master Boot\n      Record）是一种特殊类型的引导扇区，位于分区计算机大容量存储设备(如固定磁盘或可移动驱动器，用于IBM\n      pc兼容系统或其他系统)的最开始。MBR于1983年首次引入PC DOS\n      2.0。MBR保存了有关包含文件系统的逻辑分区在该介质上如何组织的信息。MBR还包含可执行代码，用于作为安装的操作系统的加载程序——通常通过将控制传递到加载程序的第二阶段，或者与每个分区的卷引导记录(VBR)结合起来。这个MBR代码通常被称为引导加载程序(source:\n      Wikipedia)。这种格式用于BIOS/Legacy设置。MBR格式支持最多2 TiB的大小和最大的4个主分区。\nGPT   GUID分区表（GPT,GUID Partition\n      Table）是计算机物理存储设备(如硬盘、固态硬盘等)分区表布局的标准，使用了通用唯一标识符(universally\n      unique\n      identifier)，也称为全球唯一标识符(GUIDs)。作为统一可扩展固件接口(UEFI)标准的一部分(统一EFI论坛提出的PC\n      BIOS的替代品)，它仍然被用于一些BIOS系统，因为主引导记录(MBR)分区表的限制，它使用32位来对传统的512字节磁盘扇区进行逻辑块寻址(LBA)(来源:Wikipedia)。通常，这是你想在UEFI系统上使用的磁盘格式。\n\n----------------------------------------\n\n术语          描述\nEC          嵌入式控制器。主板和嵌入式外设(如热键、端口或电池)之间的通信。\nPLUG        允许XCPM,苹果XNU(操作系统内核)电源管理,将允许更好的CPU控制。仅支持Haswell和更新版本。\nAWAC        ACPI唤醒闹钟计数器，主板的内部时钟。与实时时钟(RTC)相比。macOS不能与AWAC时钟,所以他们必须修补。\nPMC         电源管理控制器，在B360, B365, H310, H370,\n            Z390主板上，OEM忘记映射此区域，因此需要SSDT-PMC来避免页面错误\nPNLF        内部背光显示，macOS使用此PNLF设备发送和接收亮度控制信息\nXOSI/_OSI   _OSI用于确定正在引导的是什么操作系统，重命名为XOSI允许我们欺骗硬件，使其认为我们正在引导一个不同的操作系统\nHPET        高精度事件定时器，操作系统使用它来确定如何与设备通信(IRQ)。macOS对设备的设置可能非常挑剔，因此我们有时需要为HPET打补丁。\nRHUB        根USB集线器，其中定义了USB端口。如果这里缺少某些定义，USB端口可能无法在macOS中工作\nIMEI        英特尔管理引擎接口，处理杂项任务。在macOS中，Apple依靠IMEI来实现英特尔GPU的加速。如果使用一个未知的ID和Sandy\n            Bridge使用7系列芯片组,macOS GPU加速将无法找到它。\nUNC         Uncore Bridge，类似于North\n            Bridge，它处理许多与缓存相关的函数。很多时候，OEM会定义这个设备，但没有功能，macOS无法处理这些情况。\nSMBus       Uncore Bridge，类似于North\n            Bridge，它处理许多与缓存相关的函数。很多时候，oem会定义这个设备，但没有功能，macOS无法处理这些情况。",normalizedContent:"# 术语\n\n术语        描述\nmacos     苹果自己的基于unix的操作系统，用于mac机器，并且是“让mac成为mac的东西”。\nwindows   微软的专有操作系统，在许多设备上使用和支持(如果你不想头疼，就继续使用这个操作系统)\nlinux     基于linux内核的开源类unix操作系统家族，linux内核是由linus\n          torvalds于1991年9月17日首次发布的操作系统内核。linux通常打包在linux发行版中。请注意，虽然macos和linux可能是基于unix的，但它们有很大的不同。\ndistros   发行版的简称。linux发行版是linux的发行方式。然而，当谈到macos时，发行版混合了macos安装程序和一堆不是来自苹果的工具。不要使用“macos发行版”\n黑苹果       将macos安装到pc上的过程，请注意黑苹果不是操作系统，它也可以指被“黑掉”以在其上运行macos的机器。比如：我在这台windows机器上安装了macos，所以我有一个黑苹果。但是我没有安装“黑苹果”。\n引导加载程序    加载操作系统的软件，通常由操作系统创建者制作。从技术上讲，opencore本身不是引导加载程序(参见下面的引导管理器解释)。apple的boot.efi将是mac或黑苹果中实际的引导加载程序。\n启动管理器     一个管理引导加载程序的软件-我们有很多这样的:clover, systemd-boot, opencore,\n          refind, refit…这些通常被看作是为实际的引导加载程序准备系统。\n\n----------------------------------------\n\n术语          描述\nopencore    黑苹果场景的新热点，由acidanthera团队考虑到安全性后开发，启动速度更快，重量比clover轻。它需要做更多的工作来设置，但也支持许多比clover更原生的东西(如休眠，文件保险箱2，启动热键…)。\nclover      一个引导管理器，现在被认为是opencore发布的遗留问题。本指南将不涉及该软件的使用。\nacpi        高级配置和电源接口(advanced configuration and power interface,\n            acpi)提供了一个开放标准，操作系统可以使用它来发现和配置计算机硬件组件，本指南后面将讨论更多这方面的内容。\ndsdt/ssdt   acpi中的表描述了设备以及操作系统应该如何与它们交互，例如将计算机置于睡眠状态，唤醒状态，切换显卡, usb端口。\n.aml        acpi的编译文件格式，以及你的电脑将执行什么。.dat是另一个具有完全相同用途的扩展名。\n.dsl        acpi 的源代码–这是您为计算机编辑和编译的内容。不要将此文件的扩展名混合为“.asl'.\nkexts       也称为kernel\n            extension（内核扩展），是macos的驱动程序。它们用于执行不同的任务，如设备驱动程序，或用于不同的目的(在黑苹果中)，如为操作系统打补丁，注入信息或运行任务。kext并不是优秀的黑苹果的唯一组成部分，因为它们通常与acpi补丁和修复一起使用。\nbios        基本输入输出系统（the basic input/output\n            system）是用于在启动过程(上电启动)中执行硬件初始化，并为操作系统和程序提供运行时服务的固件。bios固件预装在个人电脑的系统板上，它是第一个开机运行的软件(来源:维基百科)。这是一个70年代制作的遗留软件，由于它的成熟，至今仍在使用。\nuefi        统一可扩展固件接口uefi (unified extensible firmware\n            interface)是定义操作系统与平台固件之间软件接口的规范。传统bios (basic input output\n            system)固件接口存在于所有兼容ibm\n            pc的个人电脑中，而uefi将其替换为支持传统bios服务的固件实现。uefi可以支持远程诊断和维修电脑,即使没有安装操作系统。(来源:维基百科)\nuefi驱动      像其他操作系统一样，uefi有驱动程序，它们由clover或opencore加载。他们也意味着加载设备或执行其他任务，比如用hfsplus.efi装载apple\n            hfs驱动器，修补macos的boot.efi等等。你可能会发现它们是“clover驱动”或“opencore驱动”，它们都是uefi驱动程序。（注意:只使用针对特定引导管理器的驱动程序。更多信息可以在clover转换页面找到）。\n\n----------------------------------------\n\n术语    描述\nefi   它可以表示两件事:\n      - mac的固件，与uefi相同，但修改了很多，只适用于mac，所以不那么“通用”。\n      -\n      硬盘上存储uefi读取用于加载操作系统（如windows引导加载程序）或uefi应用程序（如opencore）的软件的分区，它是fat32格式的，id类型为ef00（十六进制）。它可以被命名为esp或system，通常大小在100mb到400mb之间，但大小不影响任何东西。\nmbr   主引导记录（master boot\n      record）是一种特殊类型的引导扇区，位于分区计算机大容量存储设备(如固定磁盘或可移动驱动器，用于ibm\n      pc兼容系统或其他系统)的最开始。mbr于1983年首次引入pc dos\n      2.0。mbr保存了有关包含文件系统的逻辑分区在该介质上如何组织的信息。mbr还包含可执行代码，用于作为安装的操作系统的加载程序——通常通过将控制传递到加载程序的第二阶段，或者与每个分区的卷引导记录(vbr)结合起来。这个mbr代码通常被称为引导加载程序(source:\n      wikipedia)。这种格式用于bios/legacy设置。mbr格式支持最多2 tib的大小和最大的4个主分区。\ngpt   guid分区表（gpt,guid partition\n      table）是计算机物理存储设备(如硬盘、固态硬盘等)分区表布局的标准，使用了通用唯一标识符(universally\n      unique\n      identifier)，也称为全球唯一标识符(guids)。作为统一可扩展固件接口(uefi)标准的一部分(统一efi论坛提出的pc\n      bios的替代品)，它仍然被用于一些bios系统，因为主引导记录(mbr)分区表的限制，它使用32位来对传统的512字节磁盘扇区进行逻辑块寻址(lba)(来源:wikipedia)。通常，这是你想在uefi系统上使用的磁盘格式。\n\n----------------------------------------\n\n术语          描述\nec          嵌入式控制器。主板和嵌入式外设(如热键、端口或电池)之间的通信。\nplug        允许xcpm,苹果xnu(操作系统内核)电源管理,将允许更好的cpu控制。仅支持haswell和更新版本。\nawac        acpi唤醒闹钟计数器，主板的内部时钟。与实时时钟(rtc)相比。macos不能与awac时钟,所以他们必须修补。\npmc         电源管理控制器，在b360, b365, h310, h370,\n            z390主板上，oem忘记映射此区域，因此需要ssdt-pmc来避免页面错误\npnlf        内部背光显示，macos使用此pnlf设备发送和接收亮度控制信息\nxosi/_osi   _osi用于确定正在引导的是什么操作系统，重命名为xosi允许我们欺骗硬件，使其认为我们正在引导一个不同的操作系统\nhpet        高精度事件定时器，操作系统使用它来确定如何与设备通信(irq)。macos对设备的设置可能非常挑剔，因此我们有时需要为hpet打补丁。\nrhub        根usb集线器，其中定义了usb端口。如果这里缺少某些定义，usb端口可能无法在macos中工作\nimei        英特尔管理引擎接口，处理杂项任务。在macos中，apple依靠imei来实现英特尔gpu的加速。如果使用一个未知的id和sandy\n            bridge使用7系列芯片组,macos gpu加速将无法找到它。\nunc         uncore bridge，类似于north\n            bridge，它处理许多与缓存相关的函数。很多时候，oem会定义这个设备，但没有功能，macos无法处理这些情况。\nsmbus       uncore bridge，类似于north\n            bridge，它处理许多与缓存相关的函数。很多时候，oem会定义这个设备，但没有功能，macos无法处理这些情况。",charsets:{cjk:!0}},{title:"Understanding the macOS Boot Process",frontmatter:{},regularPath:"/troubleshooting/boot.html",relativePath:"troubleshooting/boot.md",key:"v-5ec70dd4",path:"/troubleshooting/boot.html",headers:[{level:2,title:"OpenCore Booting",slug:"opencore-booting",normalizedTitle:"opencore booting",charIndex:433},{level:2,title:"boot.efi Handoff",slug:"boot-efi-handoff",normalizedTitle:"boot.efi handoff",charIndex:1282},{level:2,title:"XNU/Kernel Handoff",slug:"xnu-kernel-handoff",normalizedTitle:"xnu/kernel handoff",charIndex:1911},{level:2,title:"macOS Handoff",slug:"macos-handoff",normalizedTitle:"macos handoff",charIndex:4353}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"OpenCore Booting boot.efi Handoff XNU/Kernel Handoff macOS Handoff",content:"# Understanding the macOS Boot Process\n\nSo with troubleshooting a hackintosh, it can be a bit difficult to really understand where you're getting stuck as the exact keyword you're trying to search for may not match anything on google. While this page won't solve all your issues, it should at least help better understand where in the macOS boot-process you're getting stuck and hopefully give some ideas as to why you're stuck.\n\n\n# OpenCore Booting\n\nThis section will be brief, as OpenCore boot issues are fairly rare and usually simple user error:\n\n * System powers on and searches for boot devices\n * System locates BOOTx64.efi on your OpenCore USB under EFI/BOOT/\n * BOOTx64.efi is loaded which then chain-loads OpenCore.efi from EFI/OC/\n * NVRAM Properties are applied\n * EFI drivers are loaded from EFI/OC/Drivers\n * Graphics Output Protocol(GOP) is installed\n * ACPI Tables are loaded from EFI/OC/ACPI\n * SMBIOS Data is applied\n * OpenCore loads and shows you all possible boot options\n * You now boot your macOS installer\n\nIf you're having issues booting at this point, main things to check for:\n\n * Stuck on no vault provided!\n * Can't see macOS partitions\n * Booting OpenCore reboots to BIOS\n\nFor the rest of the possible issues, see here:\n\n * OpenCore booting issues\n\n\n# boot.efi Handoff\n\n\n\nThis is where macOS's bootloader(boot.efi) comes onto the scene, specifically what it does is prep the environment for the kernel to load and where OpenCore injects kexts. If you're getting stuck at this point, there's likely an issue with loading the kernel, main culprits:\n\n * Stuck on EndRandomSeed\n * Stuck on [EB|#LOG:EXITBS:START]\n * Couldn't allocate runtime area errors\n\nFor the rest of the possible issues, see here:\n\n * Kernel Issues\n\nNote: In macOS 10.15.4, Apple changed the boot.efi debugging protocol, so things will look quite a bit different from before but all the same rules still apply\n\n\n# XNU/Kernel Handoff\n\nNow that boot.efi has setup everything for us, we now get to watch the kernel do it's thing. This section is commonly referred as the Rooting phase:\n\n\n\nThis section is where SMBIOS data is verified, ACPI tables/Kexts are loaded and macOS tries to get everything in order. Failures here are generally a result of:\n\n * Corrupted SSDTs\n * Corrupted kexts(or incorrectly setup under your config.plist -> Kernel -> Add)\n * Messed up memory map\n\nSee here for more troubleshooting info:\n\n * Kernel Panic Cannot perform kext summary\n * Kernel Panic on Invalid frame pointer\n\n\n\nNow here we have [ PCI configurations begin ], this section can be seen as a hardware test for our systems, kexts and SSDTs we injected, and where IOKit starts hardware probs to find devices to attach to.\n\nThe main things that are tested here:\n\n * Embedded Controllers\n * Storage(NVMe, SATA, etc)\n * PCI/e\n * NVRAM\n * RTC\n * PS2 and I2C\n\nFor more specific info on how to get around this area, see here:\n\n * Stuck on RTC..., PCI Configuration Begins, Previous Shutdown..., HPET, HID: Legacy...\n\n\n\nThis is where the 15 port limit and USB mapping comes into play, and where the infamous \"Waiting for Root Device\" errors pops in, main things to check for:\n\n * \"Waiting for Root Device\" or Prohibited Sign error\n\n\n\nThis is where our FakeSMC/VirtualSMC come into the scene and do their magic, DSMOS itself is a kext that verifies if your system has an SMC and will request a key. If this key is missing, then DSMOS will not decrypt the rest of the binaries and you'll get stuck here. You may also get stuck at AppleACPICPU which is just the same error.\n\n * kextd stall[0]: AppleACPICPU\n\nYour karma check for today:\nThere once was a user that whined\nhis existing OS was so blind,\nhe'd do better to pirate an OS that ran great\nbut found his hardware declined.\nPlease don't steal Mac OS!\nReally, that's way uncool.\n(C) Apple Computer, Inc.\n\n\nSource: Dont Steal Mac OS X.kext\n\n\n\nThis is where Apple's audio driver comes in, and where AppleALC shines. Generally rare to see issues here but if you do, try disabling AppleALC and any other audio related kexts.\n\n\n\nAnd here we get to the GPU driver initialization, and where WhateverGreen also does its magic. Generally errors here are due to the GPU and not WhateverGreen itself, main culprits:\n\n * Stuck on or near IOConsoleUsers: gIOScreenLock...\n * Black screen after IOConsoleUsers: gIOScreenLock... on Navi\n\n\n# macOS Handoff\n\n\n\nAnd you've finally got past all that verbose! If you're getting stuck at the Apple logo after all that verbose, then there's a couple things to check for:\n\n * macOS frozen right before login\n * Black screen after IOConsoleUsers: gIOScreenLock... on Navi\n * Frozen in the macOS installer after 30 seconds",normalizedContent:"# understanding the macos boot process\n\nso with troubleshooting a hackintosh, it can be a bit difficult to really understand where you're getting stuck as the exact keyword you're trying to search for may not match anything on google. while this page won't solve all your issues, it should at least help better understand where in the macos boot-process you're getting stuck and hopefully give some ideas as to why you're stuck.\n\n\n# opencore booting\n\nthis section will be brief, as opencore boot issues are fairly rare and usually simple user error:\n\n * system powers on and searches for boot devices\n * system locates bootx64.efi on your opencore usb under efi/boot/\n * bootx64.efi is loaded which then chain-loads opencore.efi from efi/oc/\n * nvram properties are applied\n * efi drivers are loaded from efi/oc/drivers\n * graphics output protocol(gop) is installed\n * acpi tables are loaded from efi/oc/acpi\n * smbios data is applied\n * opencore loads and shows you all possible boot options\n * you now boot your macos installer\n\nif you're having issues booting at this point, main things to check for:\n\n * stuck on no vault provided!\n * can't see macos partitions\n * booting opencore reboots to bios\n\nfor the rest of the possible issues, see here:\n\n * opencore booting issues\n\n\n# boot.efi handoff\n\n\n\nthis is where macos's bootloader(boot.efi) comes onto the scene, specifically what it does is prep the environment for the kernel to load and where opencore injects kexts. if you're getting stuck at this point, there's likely an issue with loading the kernel, main culprits:\n\n * stuck on endrandomseed\n * stuck on [eb|#log:exitbs:start]\n * couldn't allocate runtime area errors\n\nfor the rest of the possible issues, see here:\n\n * kernel issues\n\nnote: in macos 10.15.4, apple changed the boot.efi debugging protocol, so things will look quite a bit different from before but all the same rules still apply\n\n\n# xnu/kernel handoff\n\nnow that boot.efi has setup everything for us, we now get to watch the kernel do it's thing. this section is commonly referred as the rooting phase:\n\n\n\nthis section is where smbios data is verified, acpi tables/kexts are loaded and macos tries to get everything in order. failures here are generally a result of:\n\n * corrupted ssdts\n * corrupted kexts(or incorrectly setup under your config.plist -> kernel -> add)\n * messed up memory map\n\nsee here for more troubleshooting info:\n\n * kernel panic cannot perform kext summary\n * kernel panic on invalid frame pointer\n\n\n\nnow here we have [ pci configurations begin ], this section can be seen as a hardware test for our systems, kexts and ssdts we injected, and where iokit starts hardware probs to find devices to attach to.\n\nthe main things that are tested here:\n\n * embedded controllers\n * storage(nvme, sata, etc)\n * pci/e\n * nvram\n * rtc\n * ps2 and i2c\n\nfor more specific info on how to get around this area, see here:\n\n * stuck on rtc..., pci configuration begins, previous shutdown..., hpet, hid: legacy...\n\n\n\nthis is where the 15 port limit and usb mapping comes into play, and where the infamous \"waiting for root device\" errors pops in, main things to check for:\n\n * \"waiting for root device\" or prohibited sign error\n\n\n\nthis is where our fakesmc/virtualsmc come into the scene and do their magic, dsmos itself is a kext that verifies if your system has an smc and will request a key. if this key is missing, then dsmos will not decrypt the rest of the binaries and you'll get stuck here. you may also get stuck at appleacpicpu which is just the same error.\n\n * kextd stall[0]: appleacpicpu\n\nyour karma check for today:\nthere once was a user that whined\nhis existing os was so blind,\nhe'd do better to pirate an os that ran great\nbut found his hardware declined.\nplease don't steal mac os!\nreally, that's way uncool.\n(c) apple computer, inc.\n\n\nsource: dont steal mac os x.kext\n\n\n\nthis is where apple's audio driver comes in, and where applealc shines. generally rare to see issues here but if you do, try disabling applealc and any other audio related kexts.\n\n\n\nand here we get to the gpu driver initialization, and where whatevergreen also does its magic. generally errors here are due to the gpu and not whatevergreen itself, main culprits:\n\n * stuck on or near ioconsoleusers: gioscreenlock...\n * black screen after ioconsoleusers: gioscreenlock... on navi\n\n\n# macos handoff\n\n\n\nand you've finally got past all that verbose! if you're getting stuck at the apple logo after all that verbose, then there's a couple things to check for:\n\n * macos frozen right before login\n * black screen after ioconsoleusers: gioscreenlock... on navi\n * frozen in the macos installer after 30 seconds",charsets:{cjk:!0}},{title:"OpenCore Debugging",frontmatter:{},regularPath:"/troubleshooting/debug.html",relativePath:"troubleshooting/debug.md",key:"v-6296e1f6",path:"/troubleshooting/debug.html",headers:[{level:2,title:"File Swaps",slug:"file-swaps",normalizedTitle:"file swaps",charIndex:127},{level:2,title:"Config Changes",slug:"config-changes",normalizedTitle:"config changes",charIndex:141},{level:3,title:"Misc > Debug",slug:"misc-debug",normalizedTitle:"misc &gt; debug",charIndex:null},{level:2,title:"Disabling all logging",slug:"disabling-all-logging",normalizedTitle:"disabling all logging",charIndex:177}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"File Swaps Config Changes Misc > Debug Disabling all logging",content:"# OpenCore Debugging\n\nNeeding to figure out why you're getting issues or stalling? Well, you've come to the right place:\n\n\n\n * File Swaps\n * Config Changes\n   * Misc > Debug\n * Disabling all logging\n\n\n\n\n# File Swaps\n\nTo start, make sure you're using either the DEBUG or NOOPT versions of OpenCore. This will provide much more info than the RELEASE version, the specific files that need to be swapped:\n\n * EFI/BOOT/\n   * BOOTx64.efi\n * EFI/OC/Drivers/\n   * OpenRuntime.efi\n   * OpenCanopy.efi(if you're using it)\n * EFI/OC/\n   * OpenCore.efi\n\n\n\n * Note: Generally best to debug systems without OpenCanopy, if required make sure this file is from DEBUG else there will be virtually no debug information.\n\n\n# Config Changes\n\nNext, head to your config.plist and locate the Misc > Debug section, we have a couple entries we'll want to play with here:\n\n\n# Misc > Debug\n\nHere we'll want to enable the following:\n\n * AppleDebug: YES\n   \n   * Provides much more debugging information, specifically relating to boot.efi and will also store the log to disk.\n\n * ApplePanic: YES\n   \n   * This will allow kernel panics to be stored to disk, highly recommend keeping keepsyms=1 in boot-args to preserve as much info as possible.\n\n * DisableWatchdog: YES\n   \n   * Disables the UEFI watchdog, used for when OpenCore is stalling on something non-critical.\n\n * Target: 67 (or calculate one below)\n   \n   * Used for enabling different levels of debugging\n\nVALUE   COMMENT\n0x01    Enable Logging\n0x02    Enable Onscreen debug\n0x04    Enable logging to Data Hub.\n0x08    Enable serial port logging.\n0x10    Enable UEFI variable logging.\n0x20    Enable non-volatile UEFI variable logging.\n0x40    Enable logging to file.\n\nTo calculate the target, we can use a hex calculator and then convert it to decimal. For us we want to have our values on stored onto a .txt file for later viewing:\n\n * 0x01 — Enable Logging\n * 0x02 — Enable on-screen debug\n   * Note this can heavily increase boot times on firmwares with poor GOP implementations\n * 0x40 — Enable logging to file\n\n0x01 + 0x02 + 0x40 = 0x43\n\n0x43 converted to decimal becomes 67\n\nSo we can set Misc -> Debug -> Target -> 67\n\n * DisplayLevel: 2147483714 (or calculate one below)\n   * Used for setting what is logged\n\nVALUE        COMMENT\n0x00000002   DEBUG_WARN in DEBUG, NOOPT, RELEASE.\n0x00000040   DEBUG_INFO in DEBUG, NOOPT.\n0x00400000   DEBUG_VERBOSE in custom builds.\n0x80000000   DEBUG_ERROR in DEBUG, NOOPT, RELEASE.\n\nA full list can be found in DebugLib.h.\n\nFor us we just want the following:\n\n * 0x00000002 — DEBUG_WARN in DEBUG, NOOPT, RELEASE.\n * 0x00000040 — DEBUG_INFO in DEBUG, NOOPT.\n * 0x80000000 — DEBUG_ERROR in DEBUG, NOOPT, RELEASE.\n\nJust like with Target, we use a hex calculator then convert to decimal:\n\n0x80000042 Converted to decimal becomes 2147483714\n\nMisc -> Debug -> DisplayLevel -> 2147483714\n\nOnce done, your config.plist should look like this:\n\n\n\n\n# Disabling all logging\n\nTo remove all file logging, and debug messages, simply swap out all your OpenCore files for those in RELEASE like we did before in File Swap section.\n\nLastly, to remove writing to disk set the following:\n\n * AppleDebug = NO\n * ApplePanic = NO\n * Target = 0",normalizedContent:"# opencore debugging\n\nneeding to figure out why you're getting issues or stalling? well, you've come to the right place:\n\n\n\n * file swaps\n * config changes\n   * misc > debug\n * disabling all logging\n\n\n\n\n# file swaps\n\nto start, make sure you're using either the debug or noopt versions of opencore. this will provide much more info than the release version, the specific files that need to be swapped:\n\n * efi/boot/\n   * bootx64.efi\n * efi/oc/drivers/\n   * openruntime.efi\n   * opencanopy.efi(if you're using it)\n * efi/oc/\n   * opencore.efi\n\n\n\n * note: generally best to debug systems without opencanopy, if required make sure this file is from debug else there will be virtually no debug information.\n\n\n# config changes\n\nnext, head to your config.plist and locate the misc > debug section, we have a couple entries we'll want to play with here:\n\n\n# misc > debug\n\nhere we'll want to enable the following:\n\n * appledebug: yes\n   \n   * provides much more debugging information, specifically relating to boot.efi and will also store the log to disk.\n\n * applepanic: yes\n   \n   * this will allow kernel panics to be stored to disk, highly recommend keeping keepsyms=1 in boot-args to preserve as much info as possible.\n\n * disablewatchdog: yes\n   \n   * disables the uefi watchdog, used for when opencore is stalling on something non-critical.\n\n * target: 67 (or calculate one below)\n   \n   * used for enabling different levels of debugging\n\nvalue   comment\n0x01    enable logging\n0x02    enable onscreen debug\n0x04    enable logging to data hub.\n0x08    enable serial port logging.\n0x10    enable uefi variable logging.\n0x20    enable non-volatile uefi variable logging.\n0x40    enable logging to file.\n\nto calculate the target, we can use a hex calculator and then convert it to decimal. for us we want to have our values on stored onto a .txt file for later viewing:\n\n * 0x01 — enable logging\n * 0x02 — enable on-screen debug\n   * note this can heavily increase boot times on firmwares with poor gop implementations\n * 0x40 — enable logging to file\n\n0x01 + 0x02 + 0x40 = 0x43\n\n0x43 converted to decimal becomes 67\n\nso we can set misc -> debug -> target -> 67\n\n * displaylevel: 2147483714 (or calculate one below)\n   * used for setting what is logged\n\nvalue        comment\n0x00000002   debug_warn in debug, noopt, release.\n0x00000040   debug_info in debug, noopt.\n0x00400000   debug_verbose in custom builds.\n0x80000000   debug_error in debug, noopt, release.\n\na full list can be found in debuglib.h.\n\nfor us we just want the following:\n\n * 0x00000002 — debug_warn in debug, noopt, release.\n * 0x00000040 — debug_info in debug, noopt.\n * 0x80000000 — debug_error in debug, noopt, release.\n\njust like with target, we use a hex calculator then convert to decimal:\n\n0x80000042 converted to decimal becomes 2147483714\n\nmisc -> debug -> displaylevel -> 2147483714\n\nonce done, your config.plist should look like this:\n\n\n\n\n# disabling all logging\n\nto remove all file logging, and debug messages, simply swap out all your opencore files for those in release like we did before in file swap section.\n\nlastly, to remove writing to disk set the following:\n\n * appledebug = no\n * applepanic = no\n * target = 0",charsets:{}},{title:"Kernel Issues",frontmatter:{},regularPath:"/troubleshooting/extended/kernel-issues.html",relativePath:"troubleshooting/extended/kernel-issues.md",key:"v-553a6410",path:"/troubleshooting/extended/kernel-issues.html",headers:[{level:2,title:"Stuck on [EB|#LOG:EXITBS:START]",slug:"stuck-on-eb-log-exitbs-start",normalizedTitle:"stuck on [eb|#log:exitbs:start]",charIndex:124},{level:3,title:"Booter Issues",slug:"booter-issues",normalizedTitle:"booter issues",charIndex:161},{level:3,title:"Kernel Patch Issues",slug:"kernel-patch-issues",normalizedTitle:"kernel patch issues",charIndex:180},{level:3,title:"UEFI Issues",slug:"uefi-issues",normalizedTitle:"uefi issues",charIndex:205},{level:2,title:"Stuck on EndRandomSeed",slug:"stuck-on-endrandomseed",normalizedTitle:"stuck on endrandomseed",charIndex:220},{level:2,title:"Stuck after selecting macOS partition in OpenCore",slug:"stuck-after-selecting-macos-partition-in-opencore",normalizedTitle:"stuck after selecting macos partition in opencore",charIndex:246},{level:2,title:"Getting the error X64 Exception Type... on AMD FX systems",slug:"getting-the-error-x64-exception-type-on-amd-fx-systems",normalizedTitle:"getting the error x64 exception type... on amd fx systems",charIndex:299},{level:2,title:"Kernel Panic on Invalid frame pointer",slug:"kernel-panic-on-invalid-frame-pointer",normalizedTitle:"kernel panic on invalid frame pointer",charIndex:360},{level:2,title:"Stuck on [EB|LD:OFS] Err(0xE) when booting preboot volume",slug:"stuck-on-eb-ld-ofs-err-0xe-when-booting-preboot-volume",normalizedTitle:"stuck on [eb|ld:ofs] err(0xe) when booting preboot volume",charIndex:401},{level:2,title:"Stuck on OCB: LoadImage failed - Security Violation",slug:"stuck-on-ocb-loadimage-failed-security-violation",normalizedTitle:"stuck on ocb: loadimage failed - security violation",charIndex:462},{level:2,title:"Stuck on OCABC: Memory pool allocation failure - Not Found",slug:"stuck-on-ocabc-memory-pool-allocation-failure-not-found",normalizedTitle:"stuck on ocabc: memory pool allocation failure - not found",charIndex:517},{level:2,title:"Stuck on Buffer Too Small",slug:"stuck-on-buffer-too-small",normalizedTitle:"stuck on buffer too small",charIndex:579},{level:2,title:"Stuck on Plist only kext has CFBundleExecutable key",slug:"stuck-on-plist-only-kext-has-cfbundleexecutable-key",normalizedTitle:"stuck on plist only kext has cfbundleexecutable key",charIndex:608},{level:2,title:"Stuck on This version of Mac OS X is not supported: Reason Mac...",slug:"stuck-on-this-version-of-mac-os-x-is-not-supported-reason-mac",normalizedTitle:"stuck on this version of mac os x is not supported: reason mac...",charIndex:663},{level:2,title:"Couldn't allocate runtime area errors",slug:"couldn-t-allocate-runtime-area-errors",normalizedTitle:"couldn't allocate runtime area errors",charIndex:732},{level:2,title:"Stuck on RTC..., PCI Configuration Begins, Previous Shutdown..., HPET, HID: Legacy...",slug:"stuck-on-rtc-pci-configuration-begins-previous-shutdown-hpet-hid-legacy",normalizedTitle:"stuck on rtc..., pci configuration begins, previous shutdown..., hpet, hid: legacy...",charIndex:773},{level:2,title:"Stuck at ACPI table loading on B550",slug:"stuck-at-acpi-table-loading-on-b550",normalizedTitle:"stuck at acpi table loading on b550",charIndex:862},{level:2,title:'"Waiting for Root Device" or Prohibited Sign error',slug:"waiting-for-root-device-or-prohibited-sign-error",normalizedTitle:"&quot;waiting for root device&quot; or prohibited sign error",charIndex:null},{level:3,title:"USB Issues",slug:"usb-issues",normalizedTitle:"usb issues",charIndex:957},{level:3,title:"SATA Issues",slug:"sata-issues",normalizedTitle:"sata issues",charIndex:973},{level:2,title:"Kernel panic with IOPCIFamily on X99",slug:"kernel-panic-with-iopcifamily-on-x99",normalizedTitle:"kernel panic with iopcifamily on x99",charIndex:988},{level:2,title:"Stuck on or near IOConsoleUsers: gIOScreenLock.../gIOLockState (3...",slug:"stuck-on-or-near-ioconsoleusers-gioscreenlock-giolockstate-3",normalizedTitle:"stuck on or near ioconsoleusers: gioscreenlock.../giolockstate (3...",charIndex:1028},{level:2,title:"Scrambled Screen on laptops",slug:"scrambled-screen-on-laptops",normalizedTitle:"scrambled screen on laptops",charIndex:1100},{level:2,title:"Black screen after IOConsoleUsers: gIOScreenLock... on Navi",slug:"black-screen-after-ioconsoleusers-gioscreenlock-on-navi",normalizedTitle:"black screen after ioconsoleusers: gioscreenlock... on navi",charIndex:1131},{level:2,title:"Kernel Panic Cannot perform kext summary",slug:"kernel-panic-cannot-perform-kext-summary",normalizedTitle:"kernel panic cannot perform kext summary",charIndex:1194},{level:2,title:"Kernel Panic AppleIntelMCEReporter",slug:"kernel-panic-appleintelmcereporter",normalizedTitle:"kernel panic appleintelmcereporter",charIndex:1238},{level:2,title:"Kernel Panic AppleIntelCPUPowerManagement",slug:"kernel-panic-appleintelcpupowermanagement",normalizedTitle:"kernel panic appleintelcpupowermanagement",charIndex:1276},{level:2,title:"Kernel Panic AppleACPIPlatform in 10.13",slug:"kernel-panic-appleacpiplatform-in-10-13",normalizedTitle:"kernel panic appleacpiplatform in 10.13",charIndex:1321},{level:2,title:"macOS frozen right before login",slug:"macos-frozen-right-before-login",normalizedTitle:"macos frozen right before login",charIndex:1364},{level:2,title:"Keyboard works but trackpad does not",slug:"keyboard-works-but-trackpad-does-not",normalizedTitle:"keyboard works but trackpad does not",charIndex:1399},{level:2,title:"kextd stall[0]: AppleACPICPU",slug:"kextd-stall-0-appleacpicpu",normalizedTitle:"kextd stall[0]: appleacpicpu",charIndex:1439},{level:2,title:"Kernel Panic on AppleIntelI210Ethernet",slug:"kernel-panic-on-appleinteli210ethernet",normalizedTitle:"kernel panic on appleinteli210ethernet",charIndex:1471},{level:2,title:'Kernel panic on "Wrong CD Clock Frequency" with Icelake laptop',slug:"kernel-panic-on-wrong-cd-clock-frequency-with-icelake-laptop",normalizedTitle:"kernel panic on &quot;wrong cd clock frequency&quot; with icelake laptop",charIndex:null},{level:2,title:'Kernel panic on "cckprngintgen"',slug:"kernel-panic-on-cckprng-int-gen",normalizedTitle:"kernel panic on &quot;cckprngintgen&quot;",charIndex:null},{level:2,title:"Stuck at Forcing CS_RUNTIME for entitlement in Big Sur",slug:"stuck-at-forcing-cs-runtime-for-entitlement-in-big-sur",normalizedTitle:"stuck at forcing cs_runtime for entitlement in big sur",charIndex:1614},{level:2,title:"Stuck on ramrod(^^^^^^^^^^^^^)",slug:"stuck-on-ramrod",normalizedTitle:"stuck on ramrod(^^^^^^^^^^^^^)",charIndex:1672},{level:2,title:"Virtual Machine Issues",slug:"virtual-machine-issues",normalizedTitle:"virtual machine issues",charIndex:1706},{level:2,title:'Reboot on "AppleUSBHostPort::createDevice: failed to create device" on macOS 11.3+',slug:"reboot-on-appleusbhostport-createdevice-failed-to-create-device-on-macos-11-3",normalizedTitle:"reboot on &quot;appleusbhostport::createdevice: failed to create device&quot; on macos 11.3+",charIndex:null}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:'Stuck on [EB|#LOG:EXITBS:START] Booter Issues Kernel Patch Issues UEFI Issues Stuck on EndRandomSeed Stuck after selecting macOS partition in OpenCore Getting the error X64 Exception Type... on AMD FX systems Kernel Panic on Invalid frame pointer Stuck on [EB|LD:OFS] Err(0xE) when booting preboot volume Stuck on OCB: LoadImage failed - Security Violation Stuck on OCABC: Memory pool allocation failure - Not Found Stuck on Buffer Too Small Stuck on Plist only kext has CFBundleExecutable key Stuck on This version of Mac OS X is not supported: Reason Mac... Couldn\'t allocate runtime area errors Stuck on RTC..., PCI Configuration Begins, Previous Shutdown..., HPET, HID: Legacy... Stuck at ACPI table loading on B550 "Waiting for Root Device" or Prohibited Sign error USB Issues SATA Issues Kernel panic with IOPCIFamily on X99 Stuck on or near IOConsoleUsers: gIOScreenLock.../gIOLockState (3... Scrambled Screen on laptops Black screen after IOConsoleUsers: gIOScreenLock... on Navi Kernel Panic Cannot perform kext summary Kernel Panic AppleIntelMCEReporter Kernel Panic AppleIntelCPUPowerManagement Kernel Panic AppleACPIPlatform in 10.13 macOS frozen right before login Keyboard works but trackpad does not kextd stall[0]: AppleACPICPU Kernel Panic on AppleIntelI210Ethernet Kernel panic on "Wrong CD Clock Frequency" with Icelake laptop Kernel panic on "cckprngintgen" Stuck at Forcing CS_RUNTIME for entitlement in Big Sur Stuck on ramrod(^^^^^^^^^^^^^) Virtual Machine Issues Reboot on "AppleUSBHostPort::createDevice: failed to create device" on macOS 11.3+',content:"# Kernel Issues\n\nIssues surrounding from initial booting the macOS installer to right before the install GUI pops up.\n\n\n\n * Stuck on [EB|#LOG:EXITBS:START]\n   * Booter Issues\n   * Kernel Patch Issues\n   * UEFI Issues\n * Stuck on EndRandomSeed\n * Stuck after selecting macOS partition in OpenCore\n * Getting the error X64 Exception Type... on AMD FX systems\n * Kernel Panic on Invalid frame pointer\n * Stuck on [EB|LD:OFS] Err(0xE) when booting preboot volume\n * Stuck on OCB: LoadImage failed - Security Violation\n * Stuck on OCABC: Memory pool allocation failure - Not Found\n * Stuck on Buffer Too Small\n * Stuck on Plist only kext has CFBundleExecutable key\n * Stuck on This version of Mac OS X is not supported: Reason Mac...\n * Couldn't allocate runtime area errors\n * Stuck on RTC..., PCI Configuration Begins, Previous Shutdown..., HPET, HID: Legacy...\n * Stuck at ACPI table loading on B550\n * \"Waiting for Root Device\" or Prohibited Sign error\n   * USB Issues\n   * SATA Issues\n * Kernel panic with IOPCIFamily on X99\n * Stuck on or near IOConsoleUsers: gIOScreenLock.../gIOLockState (3...\n * Scrambled Screen on laptops\n * Black screen after IOConsoleUsers: gIOScreenLock... on Navi\n * Kernel Panic Cannot perform kext summary\n * Kernel Panic AppleIntelMCEReporter\n * Kernel Panic AppleIntelCPUPowerManagement\n * Kernel Panic AppleACPIPlatform in 10.13\n * macOS frozen right before login\n * Keyboard works but trackpad does not\n * kextd stall[0]: AppleACPICPU\n * Kernel Panic on AppleIntelI210Ethernet\n * Kernel panic on \"Wrong CD Clock Frequency\" with Icelake laptop\n * Kernel panic on \"cckprngintgen\"\n * Stuck at Forcing CS_RUNTIME for entitlement in Big Sur\n * Stuck on ramrod(^^^^^^^^^^^^^)\n * Virtual Machine Issues\n * Reboot on \"AppleUSBHostPort::createDevice: failed to create device\" on macOS 11.3+\n\n\n\n\n# Stuck on [EB|#LOG:EXITBS:START]\n\nThis section will be split into 3 parts, so pay close attention:\n\n * Booter Issues\n * Kernel Patch Issues\n * UEFI Issues\n * Virtual Machine Issues\n\n\n# Booter Issues\n\nThe main culprits to watch for in the Booter section are:\n\n * DevirtualiseMmio\n   \n   * Certain MMIO spaces are still required to function correctly, so you'll need to either exclude these regions in Booter -> MmioWhitelist or disable this quirk outright. More info here: Using DevirtualiseMmio\n   * For TRx40 users, enable this quirk\n   * For X99 users, disable this quirk as it breaks with some firmwares\n\n * SetupVirtualMap\n   \n   * This quirk is required for the majority of firmwares and without it it's very common to kernel panic here, so enable it if not already\n     * Mainly Z390 and older require this quirk enabled\n     * However, certain firmwares(mainly 2020+) do not work with this quirk and so may actually cause this kernel panic:\n       * Intel's Ice Lake series\n       * Intel's Comet Lake series(B460, H470, Z490, etc)\n       * AMD's B550 and A520(Latest BIOS on X570 are also included now)\n         * Many B450 and X470 boards with late 2020 BIOS updates are also included\n       * AMD's TRx40\n       * VMs like QEMU\n       * X299 2020+ BIOS updates(This applies to other X299 boards on the latest BIOS that released either in late 2019 or 2020+)\n\n * EnableWriteUnprotector\n   \n   * Another issue may be that macOS is conflicting with the write protection from CR0 register, to resolve this we have 2 options:\n     * If your firmware supports MATs(2018+ firmwares):\n       * EnableWriteUnprotector -> False\n       * RebuildAppleMemoryMap -> True\n       * SyncRuntimePermissions -> True\n     * For older firmwares:\n       * EnableWriteUnprotector -> True\n       * RebuildAppleMemoryMap -> False\n       * SyncRuntimePermissions -> False\n     * Note: Some laptops(ex. Dell Inspiron 5370) even with MATs support will halt on boot up, in these cases you'll have two options:\n       * Boot with the old firmware quirk combo(ie. With EnableWriteUnprotector and disable RebuildAppleMemoryMap + SyncRuntimePermissions)\n       * Enable DevirtualiseMmio and follow MmioWhitelist guide\n\nRegarding MATs support, firmwares built against EDK 2018 will support this and many OEMs have even added support all the way back to Skylake laptops. Issue is it's not always obvious if an OEM has updated the firmware, you can check the OpenCore logs whether yours supports it(See here how to get a log):\n\nOCABC: MAT support is 1\n\n\n * Note: 1 means it supports MATs, while 0 means it does not.\n\n\n# Kernel Patch Issues\n\nThis section will be split between Intel and AMD users:\n\n# AMD Users\n\n * Missing kernel patches(only applies for AMD CPUs, make sure they're OpenCore patches and not Clover. Clover uses MatchOS while OpenCore has MinKernel and Maxkernel)\n   * Note outdated kernel patches will also have the same effect please ensure you're using the latest patches from AMD OS X\n\n# Intel Users\n\n * AppleXcpmCfgLock and AppleCpuPmCfgLock\n   * Missing CFG or XCPM patches, please enable AppleXcpmCfgLock and AppleCpuPmCfgLock\n     * Haswell and newer only need AppleXcpmCfgLock\n     * Ivy Bridge and older only need AppleCpuPmCfgLock\n       * Broadwell and older need AppleCpuPmCfgLock if running 10.10 or older\n   * Alternatively you can properly disable CFG-Lock: Fixing CFG Lock\n * AppleXcpmExtraMsrs\n   * May also be required, this is generally meant for Pentiums, HEDT and other odd systems not natively supported in macOS.\n\n# Legacy Intel users\n\nFor macOS Big Sur, many firmwares have issues determining the CPU core count and thus will kernel panic too early for screen printing. Via serial, you can see the following panic:\n\nmax_cpus_from_firmware not yet initialized\n\n\nTo resolve:\n\n * Enable AvoidRuntimeDefrag under Booter -> Quirks\n   * This should work for most firmwares\n\nHowever on certain machines like the HP Compaq DC 7900, the firmware will still panic so we need to force a CPU core count value. Only use the below patch if AvoidRuntimeDefrag didn't work:\n\nLegacy CPU Core patch\n\nTo do this, Add the following patch(replacing the 04 from B8 04 00 00 00 C3 with the amount of CPU threads your hardware supports):\n\nKEY           TYPE      VALUE\nBase          String    _acpi_count_enabled_logical_processors\nCount         Integer   1\nEnabled       Boolean   True\nFind          Data      \nIdentifier    String    Kernel\nLimit         Integer   0\nMask          Data      \nMaxKernel     String    \nMinKernel     String    20.0.0\nReplace       Data      B804000000C3\nReplaceMask   Data      \nSkip          Integer   0\n\n\n# UEFI Issues\n\n * ProvideConsoleGop\n   * Needed for transitioning to the next screen, this was originally part of AptioMemoryFix but is now within OpenCore as this quirk. Can be found under UEFI -> Output\n   * Note as of 0.5.6, this quirk is enabled by default in the sample.plist\n * IgnoreInvalidFlexRatio\n   * This is needed for Broadwell and older. Not for AMD and Skylake or newer\n\n\n# Stuck on EndRandomSeed\n\nSame issues above, see here for more details: Stuck on [EB|#LOG:EXITBS:START]\n\n\n# Stuck after selecting macOS partition in OpenCore\n\nSame issues above, see here for more details: Stuck on [EB|#LOG:EXITBS:START]\n\n * Note: Enabling DEBUG OpenCore can help shed some light as well\n\n\n# Getting the error X64 Exception Type... on AMD FX systems\n\nThis error can have multiple causes:\n\n * Compatibility Support Module (CSM) being enabled in your BIOS:\n   \n   Might also be called Legacy Boot Support, Load Legacy Option ROMs/OPROMs\n\n * The ProvideCurrentCpuInfo quirk (required by the unified patches) being incompatible with your firmware:\n   \n   This means you need to use an older version of the patches and Big Sur or older. After downloading the older patches linked above, merge them into your config.plist (making sure to remove the old patches first).\n\nAn example:\n\n\n\n\n# Kernel Panic on Invalid frame pointer\n\nSo this is due to some issue around the Booter -> Quirks you set, main things to check for:\n\n * DevirtualiseMmio\n   \n   * Certain MMIO spaces are still required to function correctly, so you'll need to either exclude these regions in Booter -> MmioWhitelist or disable this quirk outright\n   * More info here: Using DevirtualiseMmio\n\n * SetupVirtualMap\n   \n   * This quirk is required for the majority of firmwares and without it it's very common to kernel panic here, so enable it if not already\n     * However, certain firmwares do not work with this quirk and so may actually cause this kernel panic:\n       * Intel's Ice Lake series\n       * Intel's Comet Lake series\n       * AMD's B550\n       * AMD's A520\n       * AMD's TRx40\n       * VMs like QEMU\n\nAnother issue may be that macOS is conflicting with the write protection from CR0 register, to resolve this we have 2 options:\n\n * If your firmware supports MATs(2018+ firmwares):\n   * EnableWriteUnprotector -> False\n   * RebuildAppleMemoryMap -> True\n   * SyncRuntimePermissions -> True\n * For older firmwares:\n   * EnableWriteUnprotector -> True\n   * RebuildAppleMemoryMap -> False\n   * SyncRuntimePermissions -> False\n\nRegarding MATs support, firmwares built against EDK 2018 will support this and many OEMs have even added support all the way back to Skylake laptops. Issue is it's not always obvious if an OEM has updated the firmware, you can check the OpenCore logs whether yours supports it:\n\nOCABC: MAT support is 1\n\n\nNote: 1 means it supports MATs, while 0 means it does not.\n\n\n# Stuck on [EB|LD:OFS] Err(0xE) when booting preboot volume\n\nFull error:\n\n[EB|`LD:OFS] Err(0xE) @ OPEN (System\\\\Library\\\\PrelinkedKernels\\\\prelinkedkernel)\n\n\nThis can happen when the preboot volume isn't properly updated, to fix this you'll need to boot into recovery and repair it:\n\n 1. Enable JumpstartHotplug under UEFI -> APFS(Recovery may not boot on macOS Big Sur without this option)\n 2. Boot into recovery\n 3. Open the terminal, and run the following:\n\n# First, find your Preboot volume\ndiskutil list\n\n# From the below list, we can see our Preboot volume is disk5s2\n/dev/disk5 (synthesized):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      APFS Container Scheme -                      +255.7 GB   disk5\n                                 Physical Store disk4s2\n   1:                APFS Volume ⁨Big Sur HD - Data⁩       122.5 GB   disk5s1\n   2:                APFS Volume ⁨Preboot⁩                 309.4 MB   disk5s2\n   3:                APFS Volume ⁨Recovery⁩                887.8 MB   disk5s3\n   4:                APFS Volume ⁨VM⁩                      1.1 MB     disk5s4\n   5:                APFS Volume ⁨Big Sur HD⁩              16.2 GB    disk5s5\n   6:              APFS Snapshot ⁨com.apple.os.update-...⁩ 16.2 GB    disk5s5s\n\n# Now mount the Preboot volume\ndiskutil mount disk5s2\n\n# Next run updatePreboot on the Preboot volume\ndiskutil apfs updatePreboot /volume/disk5s2\n\n\nThen finally reboot\n\n\n# Stuck on OCB: LoadImage failed - Security Violation\n\nOCSB: No suitable signature - Security Violation\nOCB: Apple Secure Boot prohibits this boot entry, enforcing!\nOCB: LoadImage failed - Security Violation\n\n\nThis is due to missing outdated Apple Secure Boot manifests present on your preboot volume resulting is a failure to load if you have SecureBootModel set, reason for these files being missing is actually a bug in macOS.\n\nTo resolve this you can do one of the following:\n\n * Disable SecureBootModel\n   * ie. set Misc -> Security -> SecureBootModel -> Disabled\n * Reinstall macOS with the latest version\n * Or copy over the Secure Boot manifests from /usr/standalone/i386 to /Volumes/Preboot/<UUID>/System/Library/CoreServices\n   * Note you will most likely need to do this via terminal as the Preboot volume isn't easily editable via the Finder\n\nTo do this via terminal:\n\n# First, find your Preboot volume\ndiskutil list\n\n# From the below list, we can see our Preboot volume is disk5s2\n/dev/disk5 (synthesized):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      APFS Container Scheme -                      +255.7 GB   disk5\n                                 Physical Store disk4s2\n   1:                APFS Volume ⁨Big Sur HD - Data⁩       122.5 GB   disk5s1\n   2:                APFS Volume ⁨Preboot⁩                 309.4 MB   disk5s2\n   3:                APFS Volume ⁨Recovery⁩                887.8 MB   disk5s3\n   4:                APFS Volume ⁨VM⁩                      1.1 MB     disk5s4\n   5:                APFS Volume ⁨Big Sur HD⁩              16.2 GB    disk5s5\n   6:              APFS Snapshot ⁨com.apple.os.update-...⁩ 16.2 GB    disk5s5s\n\n# Now mount the Preboot volume\ndiskutil mount disk5s2\n\n# CD into your Preboot volume\n# Note the actual volume is under /System/Volumes/Preboot\ncd /System/Volumes/Preboot\n\n# Grab your UUID\nls\n 46923F6E-968E-46E9-AC6D-9E6141DF52FD\n CD844C38-1A25-48D5-9388-5D62AA46CFB8\n\n# If multiple show up(ie. you dual boot multiple versions of macOS), you will\n# need to determine which UUID is correct.\n# Easiest way to determine is printing the value of .disk_label.contentDetails\n# of each volume.\ncat ./46923F6E-968E-46E9-AC6D-9E6141DF52FD/System/Library/CoreServices/.disk_label.contentDetails\n Big Sur HD%\n\ncat ./CD844C38-1A25-48D5-9388-5D62AA46CFB8/System/Library/CoreServices/.disk_label.contentDetails\n Catalina HD%\n\n# Next lets copy over the secure boot files\n# Replace CD844C38-1A25-48D5-9388-5D62AA46CFB8 with your UUID value\ncd ~\nsudo cp -a /usr/standalone/i386/. /System/Volumes/Preboot/CD844C38-1A25-48D5-9388-5D62AA46CFB8/System/Library/CoreServices\n\n\n\n# Stuck on OCABC: Memory pool allocation failure - Not Found\n\nThis is due to incorrect BIOS settings:\n\n * Above4GDecoding is Enabled\n * CSM is Disabled(Enabling Windows8.1/10 WHQL Mode can do the same on some boards)\n   * Note on some laptops, CSM must be enabled\n * BIOS is up-to-date(Z390 and HEDT are known for having poorly written firmwares)\n\n\n# Stuck on Buffer Too Small\n\n * Enable Above4GDecoding in the BIOS\n\n\n# Stuck on Plist only kext has CFBundleExecutable key\n\nMissing or incorrect Executable path in your config.plist, this should be resolved by re-running ProperTree's snapshot tool(Cmd/Ctrl+R).\n\n\n# Stuck on This version of Mac OS X is not supported: Reason Mac...\n\nThis error happens when SMBIOS is one no longer supported by that version of macOS, make sure values are set in PlatformInfo->Generic with Automatic enabled. For a full list of supported SMBIOS and their OSes, see here: Choosing the right SMBIOS\n\nSupported SMBIOS in macOS 10.15, Catalina\n * iMac13,x+\n * iMacPro1,1\n * MacPro6,1+\n * Macmini6,x+\n * MacBook8,1+\n * MacBookAir5,x+\n * MacBookPro9,x+\n\nSupported SMBIOS in macOS 11, Big Sur\n * iMac14,4+\n * iMacPro1,1\n * MacPro6,1+\n * Macmini7,1+\n * MacBook8,1+\n * MacBookAir6,x+\n * MacBookPro11,x+\n\nSupported SMBIOS in macOS 12, Monterey\n * iMac16,1+\n * iMacPro1,1\n * MacPro6,1+\n * Macmini7,1+\n * MacBook9,1+\n * MacBookAir7,1+\n * MacBookPro11,3+\n\nSupported SMBIOS in macOS 13, Ventura\n * iMac18,x+\n * iMacPro1,1\n * MacPro7,1\n * Macmini8,1\n * MacBook10,1\n * MacBookAir8,1+\n * MacBookPro14,x+\n\n\n# Couldn't allocate runtime area errors\n\nSee Fixing KASLR slide values\n\n\n# Stuck on RTC..., PCI Configuration Begins, Previous Shutdown..., HPET, HID: Legacy...\n\nWell this general area is where a lot of PCI devices are first setup and configured, and is where most booting issues will happen. Other names include:\n\n * apfs_module_start...,\n * Waiting for Root device,\n * Waiting on...IOResources...,\n * previous shutdown cause...\n\nThe main places to check:\n\n * Missing EC patch:\n   \n   * Make sure you have your EC SSDT both in EFI/OC/ACPI and ACPI -> Add, double check it's enabled.\n   * If you don't have one, grab it here: Getting started with ACPI\n\n * IRQ conflict:\n   \n   * Most common on older laptops and pre-builts, run SSDTTime's FixHPET option and add the resulting SSDT-HPET.aml and ACPI patches to your config( the SSDT will not work without the ACPI patches)\n\n * PCI allocation issue:\n   \n   * UPDATE YOUR BIOS, make sure it's on the latest. Most OEMs have very broken PCI allocation on older firmwares, especially AMD\n   * Make sure either Above4G is enabled in the BIOS, if no option available then add npci=0x2000 or npci=0x3000 (try both one at a time) to boot args.\n     * Some X99 and X299 boards(ie. GA-X299-UD4) may require both npci boot-arg and Above4G enabled\n     * Do not have both the Above4G setting enabled and npci in boot args, they will conflict\n     * 2020+ BIOS Notes: When enabling Above4G, Resizable BAR Support may become an available. Please ensure that Booter -> Quirks -> ResizeAppleGpuBars is set to 0 if this is enabled.\n   * Other BIOS settings that are important: CSM disabled, Windows 8.1/10 UEFI Mode enabled\n\n * NVMe or SATA issue:\n   \n   * Sometimes if either a bad SATA controller or an unsupported NVMe drive are used, you can commonly get stuck here. Things you can check:\n     * Not using either a Samsung PM981 or Micron 2200S NVMe SSD\n     * Samsung 970 EVO Plus running the latest firmware(older firmwares were known for instability and stalls, see here for more info)\n     * SATA Hot-Plug is disabled in the BIOS(more commonly to cause issues on AMD CPU based systems)\n     * Ensure NVMe drives are set as NVMe mode in BIOS(some BIOS have a bug where you can set NVMe drives as SATA)\n\n * NVRAM Failing:\n   \n   * Common issue HEDT and 300 series motherboards, you have a couple paths to go down:\n     * 300 Series Consumer Intel: See Getting started with ACPI on making SSDT-PMC.aml\n     * HEDT(ie. X99): See Emulating NVRAM on how to stop NVRAM write, note that for install you do not need to run the script. Just setup the config.plist\n\n * RTC Missing:\n   \n   * Commonly found on Intel's 300+ series(ie. Z370, Z490), caused by the RTC clock being disabled by default. See Getting started with ACPI on creating an SSDT-AWAC.aml\n   * X99 and X299 have broken RTC devices, so will need to be fixed with SSDT-RTC0-RANGE. See Getting started with ACPI on creating said file\n   * Some drunk firmware writer at HP also disabled the RTC on the HP 250 G6 with no way to actually re-enable it\n     * Known affected models: HP 15-DA0014dx, HP 250 G6\n     * For users cursed with such hardware you'll need to create a fake RTC clock for macOS to play with. See getting started with ACPI for more details, as well as below image example:\n\nExample of what a disabled RTC with no way to enable looks like(note that there is no value to re-enable it like STAS):\n\n\n\n\n# Stuck at ACPI table loading on B550\n\n\n\nIf you're getting stuck at or near ACPI table loading with an AMD B550 or A520 motherboard, add the following SSDT:\n\n * SSDT-CPUR.aml\n\nAnd please remember to add this SSDT to both EFI/OC/ACPI and your config.plist under ACPI -> Add(ProperTree's snapshot function can do this for you)\n\n\n# \"Waiting for Root Device\" or Prohibited Sign error\n\n * Other names: Stop Sign, Scrambled\n\nThis is generally seen as a USB or SATA error, couple ways to fix:\n\n\n# USB Issues\n\nThis assumes you're only booting the installer USB and not macOS itself.\n\n * If you're hitting the 15 port limit, you need to make an USB Map\n\n * Another issue can be that certain firmware won't pass USB ownership to macOS\n   \n   * UEFI -> Quirks -> ReleaseUsbOwnership -> True\n   * Enabling EHCI/XHCI Handoff in the BIOS can fix this as well\n\n * Sometimes, if the USB is plugged into a 3.x port, plugging it into a 2.0 port can fix this error and vice versa.\n\n * For AMD's 15h and 16h CPUs, you may need to add the following:\n   \n   * XLNCUSBFix.kext\n\n * If XLNCUSBFix still doesn't work, then try the following alongside XLNCUSBFix:\n   \n   * AMD StopSign-fixv5\n\n * X299 Users: Enable \"Above 4G Decoding\"\n   \n   * Odd firmware bug on X299 where USB breaks otherwise\n\n * Missing USB ports in ACPI:\n   \n   * For Intel's Coffee Lake and older, we recommend using USBInjectAll\n   * For Intel's Ice Lake and Comet Lake, we recommend SSDT-RHUB\n     * SSDTTime's 7. USB Reset option can do the same\n   * For AMD, run SSDTTime's 7. USB Reset option and add the provided SSDT-RHUB to your EFI and config.plist\n\n\n# SATA Issues\n\nOn rare occasions(mainly laptops), the SATA controller isn't officially supported by macOS. To resolve this, we'll want to do a few things:\n\n * Set SATA to AHCI mode in the BIOS\n   * macOS doesn't support hardware RAID or IDE mode properly.\n   * Note drives already using Intel Rapid Storage Technology(RST, soft RAID for Windows and Linux) will not be accessible in macOS.\n * SATA-unsupported.kext\n   * Adds support to obscure SATA controllers, commonly being laptops.\n   * For very legacy SATA controllers, AHCIPortInjector.kext may be more suitable.\n * Catalina's patched AppleAHCIPort.kext\n   * For users running macOS 11, Big Sur and having issues. This backports the known working Catalina kext, SATA-unsupported is not needed with this kext\n\nNote that you will only experience this issue after installing macOS onto the drive, booting the macOS installer will not error out due to SATA issues.\n\n\n# Kernel panic with IOPCIFamily on X99\n\nFor those running the X99 platform from Intel, please go over the following:\n\n * The following kernel patches are enabled:\n   * AppleCpuPmCfgLock\n   * AppleXcpmCfgLock\n   * AppleXcpmExtraMsrs\n * You have the following SSDTs:\n   * SSDT-UNC(if not, see Getting started with ACPI on creating said file)\n\n\n# Stuck on or near IOConsoleUsers: gIOScreenLock.../gIOLockState (3...\n\nThis is right before the GPU is properly initialized, verify the following:\n\n * GPU is UEFI capable(GTX 7XX/2013+)\n * CSM is off in the BIOS\n   * May need to be enabled on laptops\n * Forcing PCIe 3.0 link speed\n * Double check that ig-platform-id and device-id are valid if running an iGPU.\n   * Desktop UHD 630's may need to use 00009B3E instead\n * Trying various WhateverGreen Fixes\n   * -igfxmlr boot argument. This can also manifest as a \"Divide by Zero\" error.\n * Coffee Lake iGPU users may also need igfxonln=1 in 10.15.4 and newer\n\n\n# Scrambled Screen on laptops\n\nEnable CSM in your UEFI settings. This may appear as \"Boot legacy ROMs\" or other legacy setting.\n\n\n# Black screen after IOConsoleUsers: gIOScreenLock... on Navi\n\n * Add agdpmod=pikera to boot args\n * Switch between different display outputs\n * Try running MacPro7,1 SMBIOS with the boot-arg agdpmod=ignore\n\nFor MSI Navi users, you'll need to apply the patch mentioned here: Installer not working with 5700XT #901\n\nSpecifically, add the following entry under Kernel -> Patch:\n\nMSI Navi Patch\n\nBase:\nComment: Navi VBIOS Bug Patch\nCount: 1\nEnabled: YES\nFind: 4154592C526F6D2300\nIdentifier: com.apple.kext.AMDRadeonX6000Framebuffer\nLimit: 0\nMask:\nMinKernel: 19.00.00\nMaxKernel: 19.99.99\nReplace: 414D442C526F6D2300\nReplaceMask:\nSkip: 0\n\n\nNote: macOS 11, Big Sur no longer requires this patch for MSI Navi.\n\n\n# Kernel Panic Cannot perform kext summary\n\nGenerally seen as an issue surrounding the prelinked kernel, specifically that macOS is having a hard time interpreting the ones we injected. Verify that:\n\n * Your kexts are in the correct order(master then plugins, Lilu always before the plugins)\n * Kexts with executables have them and plist only kexts don't(ie. USBmap.kext, XHCI-unspported.kext, etc does not contain an executable)\n * Don't include multiple of the same kexts in your config.plist(ie. including multiple copies of VoodooInput from multiple kexts, we recommend choosing the first kext in your config's array and disable the rest)\n\nNote: this error may also look very similar to Kernel Panic on Invalid frame pointer\n\n\n# Kernel Panic AppleIntelMCEReporter\n\nWith macOS Catalina, dual socket support is broken, and a fun fact about AMD firmware is that some boards will actually report multiple socketed CPUs. To fix this, add AppleMCEReporterDisabler to both EFI/OC/Kexts and config.plist -> Kernel -> Add\n\n\n# Kernel Panic AppleIntelCPUPowerManagement\n\nThis is likely due to faulty or outright missing NullCPUPowerManagement. To fix the issue, remove NullCPUPowerManagement from Kernel -> Add and EFI/OC/Kexts then enable DummyPowerManagement under Kernel -> Emulate\n\n * Note: On older Intel CPUs(ie. Penryn and older), it may be due to IRQ conflicts or the HPET device being disabled. To resolve, you have 2 options:\n   * SSDTTime's FixHPET Option\n   * Forcing the HPET Device on\n\nForcing the HPET Device on\n\nUnder ACPI -> Patch:\n\nCOMMENT   STRING    FORCE HPET ONLINE\nEnabled   Boolean   YES\nCount     Number    0\nLimit     Number    0\nFind      Data      A010934F53464C00\nReplace   Data      A40A0FA3A3A3A3A3\n\n\n# Kernel Panic AppleACPIPlatform in 10.13\n\n\n\nOn macOS 10.13, High Sierra the OS is much stricter with ACPI tables, specifically a bug with how headers were handled. To resolve, enable NormalizeHeaders under ACPI -> Quirks in your config.plist\n\n\n# macOS frozen right before login\n\nThis is a common example of screwed up TSC, for most system add CpuTscSync\n\nThe most common way to see the TSC issue:\n\nCASE 1   CASE 2\n         \n\n\n# Keyboard works but trackpad does not\n\nMake sure that VoodooInput is listed before VoodooPS2 and VoodooI2C kexts in your config.plist.\n\nVoodooI2C Troubleshooting\n\nCheck the order that your kexts load - make they match what is shown under Gathering Files:\n\n 1. VoodooGPIO, VoodooInput, and VoodooI2CServices in any order (Found under VoodooI2C.kext/Contents/PlugIns)\n 2. VoodooI2C\n 3. Satellite/Plugin Kext\n\nMake sure you have SSDT-GPIO in EFI/OC/ACPI and in your config.plist under ACPI -> Add in your config.plist. If you are still having issues, reference the Getting Started With ACPI GPIO page.\n\n\n# kextd stall[0]: AppleACPICPU\n\nThis is due to either a missing SMC emulator or broken one, make sure of the following:\n\n * Lilu and VirtualSMC are both in EFI/OC/kexts and in your config.plist\n * Lilu is before VirtualSMC in the kext list\n * Last resort is to try FakeSMC instead, do not have both VirtualSMC and FakeSMC enabled\n\n\n# Kernel Panic on AppleIntelI210Ethernet\n\nFor those running Comet lake motherboards with the I225-V NIC, you may experience a kernel panic on boot due to the I210 kext. To resolve this, make sure you have the correct PciRoot for your Ethernet. This commonly being either:\n\n * PciRoot(0x0)/Pci(0x1C,0x1)/Pci(0x0, 0x0)\n   * By default, this is what Asus and Gigabyte motherboards use\n * PciRoot(0x0)/Pci(0x1C,0x4)/Pci(0x0,0x0)\n   * Some OEMs may use this instead\n\nFor those who can to your PciRoot manually, you'll want to install macOS fully and run the following with gfxutil:\n\n/path/to/gfxutil | grep -i \"8086:15f3\"\n\n\nThis should spit out something like this:\n\n00:1f.6 8086:15f3 /PC00@0/GBE1@1F,6 = PciRoot(0x0)/Pci(0x1F,0x6)\n\n\nThe ending PciRoot(0x0)/Pci(0x1F,0x6) is what you want to add in your config.plist with device-id of F2150000\n\n\n# Kernel panic on \"Wrong CD Clock Frequency\" with Icelake laptop\n\n\n\nTo resolve this kernel panic, ensure you have -igfxcdc in your boot-args.\n\n\n# Kernel panic on \"cckprng_int_gen\"\n\nFull panic:\n\n\"cckprng_int_gen: generator has already been sealed\"\n\n\nThis is likely to be 1 of 2 things:\n\n * Missing SMC Emulator(ie. no VirtualSMC in your config.plist or EFI)\n   * Add VirtualSMC.kext to your config.plist and EFI\n * Incorrect SSDT usage with SSDT-CPUR\n\nFor the latter, ensure you're only using SSDT-CPUR with B550 and A520. Do not use on X570 or older hardware(ie. B450 or A320)\n\n\n# Stuck at Forcing CS_RUNTIME for entitlement in Big Sur\n\n\n\nThis is actually the part at where macOS will seal the system volume, and where it may seem that macOS has gotten stuck. DO NOT RESTART thinking you're stuck, this will take quite some time to complete.\n\n\n# Stuck on ramrod(^^^^^^^^^^^^^)\n\n\n\nIf you get stuck around the ramrod section (specifically, it boots, hits this error, and reboots again back into this, causing a loop), this hints that your SMC emulator is broken. To fix this, you have 2 options:\n\n * Ensure you're using the latest builds of VirtualSMC and Lilu, with the vsmcgen=1 boot-arg\n * Switch over to Rehabman's FakeSMC (you can use the MinKernel/MaxKernel trick mentioned above to restrict FakeSMC to Big Sur and up\n\nAnd when switching kexts, ensure you don't have both FakeSMC and VirtualSMC enabled in your config.plist, as this will cause a conflict.\n\n\n# Virtual Machine Issues\n\n * VMWare 15 is known to get stuck on [EB|#LOG:EXITBS:START]. VMWare 16 resolves the problem.\n\n\n# Reboot on \"AppleUSBHostPort::createDevice: failed to create device\" on macOS 11.3+\n\nThis is due to XhciPortLimit breaking with macOS 11.3 and newer, to resolve this, you must disable XhciPortLimit under Kernel -> Quirks. Please ensure you've mapped your USB ports correctly before doing so.",normalizedContent:"# kernel issues\n\nissues surrounding from initial booting the macos installer to right before the install gui pops up.\n\n\n\n * stuck on [eb|#log:exitbs:start]\n   * booter issues\n   * kernel patch issues\n   * uefi issues\n * stuck on endrandomseed\n * stuck after selecting macos partition in opencore\n * getting the error x64 exception type... on amd fx systems\n * kernel panic on invalid frame pointer\n * stuck on [eb|ld:ofs] err(0xe) when booting preboot volume\n * stuck on ocb: loadimage failed - security violation\n * stuck on ocabc: memory pool allocation failure - not found\n * stuck on buffer too small\n * stuck on plist only kext has cfbundleexecutable key\n * stuck on this version of mac os x is not supported: reason mac...\n * couldn't allocate runtime area errors\n * stuck on rtc..., pci configuration begins, previous shutdown..., hpet, hid: legacy...\n * stuck at acpi table loading on b550\n * \"waiting for root device\" or prohibited sign error\n   * usb issues\n   * sata issues\n * kernel panic with iopcifamily on x99\n * stuck on or near ioconsoleusers: gioscreenlock.../giolockstate (3...\n * scrambled screen on laptops\n * black screen after ioconsoleusers: gioscreenlock... on navi\n * kernel panic cannot perform kext summary\n * kernel panic appleintelmcereporter\n * kernel panic appleintelcpupowermanagement\n * kernel panic appleacpiplatform in 10.13\n * macos frozen right before login\n * keyboard works but trackpad does not\n * kextd stall[0]: appleacpicpu\n * kernel panic on appleinteli210ethernet\n * kernel panic on \"wrong cd clock frequency\" with icelake laptop\n * kernel panic on \"cckprngintgen\"\n * stuck at forcing cs_runtime for entitlement in big sur\n * stuck on ramrod(^^^^^^^^^^^^^)\n * virtual machine issues\n * reboot on \"appleusbhostport::createdevice: failed to create device\" on macos 11.3+\n\n\n\n\n# stuck on [eb|#log:exitbs:start]\n\nthis section will be split into 3 parts, so pay close attention:\n\n * booter issues\n * kernel patch issues\n * uefi issues\n * virtual machine issues\n\n\n# booter issues\n\nthe main culprits to watch for in the booter section are:\n\n * devirtualisemmio\n   \n   * certain mmio spaces are still required to function correctly, so you'll need to either exclude these regions in booter -> mmiowhitelist or disable this quirk outright. more info here: using devirtualisemmio\n   * for trx40 users, enable this quirk\n   * for x99 users, disable this quirk as it breaks with some firmwares\n\n * setupvirtualmap\n   \n   * this quirk is required for the majority of firmwares and without it it's very common to kernel panic here, so enable it if not already\n     * mainly z390 and older require this quirk enabled\n     * however, certain firmwares(mainly 2020+) do not work with this quirk and so may actually cause this kernel panic:\n       * intel's ice lake series\n       * intel's comet lake series(b460, h470, z490, etc)\n       * amd's b550 and a520(latest bios on x570 are also included now)\n         * many b450 and x470 boards with late 2020 bios updates are also included\n       * amd's trx40\n       * vms like qemu\n       * x299 2020+ bios updates(this applies to other x299 boards on the latest bios that released either in late 2019 or 2020+)\n\n * enablewriteunprotector\n   \n   * another issue may be that macos is conflicting with the write protection from cr0 register, to resolve this we have 2 options:\n     * if your firmware supports mats(2018+ firmwares):\n       * enablewriteunprotector -> false\n       * rebuildapplememorymap -> true\n       * syncruntimepermissions -> true\n     * for older firmwares:\n       * enablewriteunprotector -> true\n       * rebuildapplememorymap -> false\n       * syncruntimepermissions -> false\n     * note: some laptops(ex. dell inspiron 5370) even with mats support will halt on boot up, in these cases you'll have two options:\n       * boot with the old firmware quirk combo(ie. with enablewriteunprotector and disable rebuildapplememorymap + syncruntimepermissions)\n       * enable devirtualisemmio and follow mmiowhitelist guide\n\nregarding mats support, firmwares built against edk 2018 will support this and many oems have even added support all the way back to skylake laptops. issue is it's not always obvious if an oem has updated the firmware, you can check the opencore logs whether yours supports it(see here how to get a log):\n\nocabc: mat support is 1\n\n\n * note: 1 means it supports mats, while 0 means it does not.\n\n\n# kernel patch issues\n\nthis section will be split between intel and amd users:\n\n# amd users\n\n * missing kernel patches(only applies for amd cpus, make sure they're opencore patches and not clover. clover uses matchos while opencore has minkernel and maxkernel)\n   * note outdated kernel patches will also have the same effect please ensure you're using the latest patches from amd os x\n\n# intel users\n\n * applexcpmcfglock and applecpupmcfglock\n   * missing cfg or xcpm patches, please enable applexcpmcfglock and applecpupmcfglock\n     * haswell and newer only need applexcpmcfglock\n     * ivy bridge and older only need applecpupmcfglock\n       * broadwell and older need applecpupmcfglock if running 10.10 or older\n   * alternatively you can properly disable cfg-lock: fixing cfg lock\n * applexcpmextramsrs\n   * may also be required, this is generally meant for pentiums, hedt and other odd systems not natively supported in macos.\n\n# legacy intel users\n\nfor macos big sur, many firmwares have issues determining the cpu core count and thus will kernel panic too early for screen printing. via serial, you can see the following panic:\n\nmax_cpus_from_firmware not yet initialized\n\n\nto resolve:\n\n * enable avoidruntimedefrag under booter -> quirks\n   * this should work for most firmwares\n\nhowever on certain machines like the hp compaq dc 7900, the firmware will still panic so we need to force a cpu core count value. only use the below patch if avoidruntimedefrag didn't work:\n\nlegacy cpu core patch\n\nto do this, add the following patch(replacing the 04 from b8 04 00 00 00 c3 with the amount of cpu threads your hardware supports):\n\nkey           type      value\nbase          string    _acpi_count_enabled_logical_processors\ncount         integer   1\nenabled       boolean   true\nfind          data      \nidentifier    string    kernel\nlimit         integer   0\nmask          data      \nmaxkernel     string    \nminkernel     string    20.0.0\nreplace       data      b804000000c3\nreplacemask   data      \nskip          integer   0\n\n\n# uefi issues\n\n * provideconsolegop\n   * needed for transitioning to the next screen, this was originally part of aptiomemoryfix but is now within opencore as this quirk. can be found under uefi -> output\n   * note as of 0.5.6, this quirk is enabled by default in the sample.plist\n * ignoreinvalidflexratio\n   * this is needed for broadwell and older. not for amd and skylake or newer\n\n\n# stuck on endrandomseed\n\nsame issues above, see here for more details: stuck on [eb|#log:exitbs:start]\n\n\n# stuck after selecting macos partition in opencore\n\nsame issues above, see here for more details: stuck on [eb|#log:exitbs:start]\n\n * note: enabling debug opencore can help shed some light as well\n\n\n# getting the error x64 exception type... on amd fx systems\n\nthis error can have multiple causes:\n\n * compatibility support module (csm) being enabled in your bios:\n   \n   might also be called legacy boot support, load legacy option roms/oproms\n\n * the providecurrentcpuinfo quirk (required by the unified patches) being incompatible with your firmware:\n   \n   this means you need to use an older version of the patches and big sur or older. after downloading the older patches linked above, merge them into your config.plist (making sure to remove the old patches first).\n\nan example:\n\n\n\n\n# kernel panic on invalid frame pointer\n\nso this is due to some issue around the booter -> quirks you set, main things to check for:\n\n * devirtualisemmio\n   \n   * certain mmio spaces are still required to function correctly, so you'll need to either exclude these regions in booter -> mmiowhitelist or disable this quirk outright\n   * more info here: using devirtualisemmio\n\n * setupvirtualmap\n   \n   * this quirk is required for the majority of firmwares and without it it's very common to kernel panic here, so enable it if not already\n     * however, certain firmwares do not work with this quirk and so may actually cause this kernel panic:\n       * intel's ice lake series\n       * intel's comet lake series\n       * amd's b550\n       * amd's a520\n       * amd's trx40\n       * vms like qemu\n\nanother issue may be that macos is conflicting with the write protection from cr0 register, to resolve this we have 2 options:\n\n * if your firmware supports mats(2018+ firmwares):\n   * enablewriteunprotector -> false\n   * rebuildapplememorymap -> true\n   * syncruntimepermissions -> true\n * for older firmwares:\n   * enablewriteunprotector -> true\n   * rebuildapplememorymap -> false\n   * syncruntimepermissions -> false\n\nregarding mats support, firmwares built against edk 2018 will support this and many oems have even added support all the way back to skylake laptops. issue is it's not always obvious if an oem has updated the firmware, you can check the opencore logs whether yours supports it:\n\nocabc: mat support is 1\n\n\nnote: 1 means it supports mats, while 0 means it does not.\n\n\n# stuck on [eb|ld:ofs] err(0xe) when booting preboot volume\n\nfull error:\n\n[eb|`ld:ofs] err(0xe) @ open (system\\\\library\\\\prelinkedkernels\\\\prelinkedkernel)\n\n\nthis can happen when the preboot volume isn't properly updated, to fix this you'll need to boot into recovery and repair it:\n\n 1. enable jumpstarthotplug under uefi -> apfs(recovery may not boot on macos big sur without this option)\n 2. boot into recovery\n 3. open the terminal, and run the following:\n\n# first, find your preboot volume\ndiskutil list\n\n# from the below list, we can see our preboot volume is disk5s2\n/dev/disk5 (synthesized):\n   #:                       type name                    size       identifier\n   0:      apfs container scheme -                      +255.7 gb   disk5\n                                 physical store disk4s2\n   1:                apfs volume ⁨big sur hd - data⁩       122.5 gb   disk5s1\n   2:                apfs volume ⁨preboot⁩                 309.4 mb   disk5s2\n   3:                apfs volume ⁨recovery⁩                887.8 mb   disk5s3\n   4:                apfs volume ⁨vm⁩                      1.1 mb     disk5s4\n   5:                apfs volume ⁨big sur hd⁩              16.2 gb    disk5s5\n   6:              apfs snapshot ⁨com.apple.os.update-...⁩ 16.2 gb    disk5s5s\n\n# now mount the preboot volume\ndiskutil mount disk5s2\n\n# next run updatepreboot on the preboot volume\ndiskutil apfs updatepreboot /volume/disk5s2\n\n\nthen finally reboot\n\n\n# stuck on ocb: loadimage failed - security violation\n\nocsb: no suitable signature - security violation\nocb: apple secure boot prohibits this boot entry, enforcing!\nocb: loadimage failed - security violation\n\n\nthis is due to missing outdated apple secure boot manifests present on your preboot volume resulting is a failure to load if you have securebootmodel set, reason for these files being missing is actually a bug in macos.\n\nto resolve this you can do one of the following:\n\n * disable securebootmodel\n   * ie. set misc -> security -> securebootmodel -> disabled\n * reinstall macos with the latest version\n * or copy over the secure boot manifests from /usr/standalone/i386 to /volumes/preboot/<uuid>/system/library/coreservices\n   * note you will most likely need to do this via terminal as the preboot volume isn't easily editable via the finder\n\nto do this via terminal:\n\n# first, find your preboot volume\ndiskutil list\n\n# from the below list, we can see our preboot volume is disk5s2\n/dev/disk5 (synthesized):\n   #:                       type name                    size       identifier\n   0:      apfs container scheme -                      +255.7 gb   disk5\n                                 physical store disk4s2\n   1:                apfs volume ⁨big sur hd - data⁩       122.5 gb   disk5s1\n   2:                apfs volume ⁨preboot⁩                 309.4 mb   disk5s2\n   3:                apfs volume ⁨recovery⁩                887.8 mb   disk5s3\n   4:                apfs volume ⁨vm⁩                      1.1 mb     disk5s4\n   5:                apfs volume ⁨big sur hd⁩              16.2 gb    disk5s5\n   6:              apfs snapshot ⁨com.apple.os.update-...⁩ 16.2 gb    disk5s5s\n\n# now mount the preboot volume\ndiskutil mount disk5s2\n\n# cd into your preboot volume\n# note the actual volume is under /system/volumes/preboot\ncd /system/volumes/preboot\n\n# grab your uuid\nls\n 46923f6e-968e-46e9-ac6d-9e6141df52fd\n cd844c38-1a25-48d5-9388-5d62aa46cfb8\n\n# if multiple show up(ie. you dual boot multiple versions of macos), you will\n# need to determine which uuid is correct.\n# easiest way to determine is printing the value of .disk_label.contentdetails\n# of each volume.\ncat ./46923f6e-968e-46e9-ac6d-9e6141df52fd/system/library/coreservices/.disk_label.contentdetails\n big sur hd%\n\ncat ./cd844c38-1a25-48d5-9388-5d62aa46cfb8/system/library/coreservices/.disk_label.contentdetails\n catalina hd%\n\n# next lets copy over the secure boot files\n# replace cd844c38-1a25-48d5-9388-5d62aa46cfb8 with your uuid value\ncd ~\nsudo cp -a /usr/standalone/i386/. /system/volumes/preboot/cd844c38-1a25-48d5-9388-5d62aa46cfb8/system/library/coreservices\n\n\n\n# stuck on ocabc: memory pool allocation failure - not found\n\nthis is due to incorrect bios settings:\n\n * above4gdecoding is enabled\n * csm is disabled(enabling windows8.1/10 whql mode can do the same on some boards)\n   * note on some laptops, csm must be enabled\n * bios is up-to-date(z390 and hedt are known for having poorly written firmwares)\n\n\n# stuck on buffer too small\n\n * enable above4gdecoding in the bios\n\n\n# stuck on plist only kext has cfbundleexecutable key\n\nmissing or incorrect executable path in your config.plist, this should be resolved by re-running propertree's snapshot tool(cmd/ctrl+r).\n\n\n# stuck on this version of mac os x is not supported: reason mac...\n\nthis error happens when smbios is one no longer supported by that version of macos, make sure values are set in platforminfo->generic with automatic enabled. for a full list of supported smbios and their oses, see here: choosing the right smbios\n\nsupported smbios in macos 10.15, catalina\n * imac13,x+\n * imacpro1,1\n * macpro6,1+\n * macmini6,x+\n * macbook8,1+\n * macbookair5,x+\n * macbookpro9,x+\n\nsupported smbios in macos 11, big sur\n * imac14,4+\n * imacpro1,1\n * macpro6,1+\n * macmini7,1+\n * macbook8,1+\n * macbookair6,x+\n * macbookpro11,x+\n\nsupported smbios in macos 12, monterey\n * imac16,1+\n * imacpro1,1\n * macpro6,1+\n * macmini7,1+\n * macbook9,1+\n * macbookair7,1+\n * macbookpro11,3+\n\nsupported smbios in macos 13, ventura\n * imac18,x+\n * imacpro1,1\n * macpro7,1\n * macmini8,1\n * macbook10,1\n * macbookair8,1+\n * macbookpro14,x+\n\n\n# couldn't allocate runtime area errors\n\nsee fixing kaslr slide values\n\n\n# stuck on rtc..., pci configuration begins, previous shutdown..., hpet, hid: legacy...\n\nwell this general area is where a lot of pci devices are first setup and configured, and is where most booting issues will happen. other names include:\n\n * apfs_module_start...,\n * waiting for root device,\n * waiting on...ioresources...,\n * previous shutdown cause...\n\nthe main places to check:\n\n * missing ec patch:\n   \n   * make sure you have your ec ssdt both in efi/oc/acpi and acpi -> add, double check it's enabled.\n   * if you don't have one, grab it here: getting started with acpi\n\n * irq conflict:\n   \n   * most common on older laptops and pre-builts, run ssdttime's fixhpet option and add the resulting ssdt-hpet.aml and acpi patches to your config( the ssdt will not work without the acpi patches)\n\n * pci allocation issue:\n   \n   * update your bios, make sure it's on the latest. most oems have very broken pci allocation on older firmwares, especially amd\n   * make sure either above4g is enabled in the bios, if no option available then add npci=0x2000 or npci=0x3000 (try both one at a time) to boot args.\n     * some x99 and x299 boards(ie. ga-x299-ud4) may require both npci boot-arg and above4g enabled\n     * do not have both the above4g setting enabled and npci in boot args, they will conflict\n     * 2020+ bios notes: when enabling above4g, resizable bar support may become an available. please ensure that booter -> quirks -> resizeapplegpubars is set to 0 if this is enabled.\n   * other bios settings that are important: csm disabled, windows 8.1/10 uefi mode enabled\n\n * nvme or sata issue:\n   \n   * sometimes if either a bad sata controller or an unsupported nvme drive are used, you can commonly get stuck here. things you can check:\n     * not using either a samsung pm981 or micron 2200s nvme ssd\n     * samsung 970 evo plus running the latest firmware(older firmwares were known for instability and stalls, see here for more info)\n     * sata hot-plug is disabled in the bios(more commonly to cause issues on amd cpu based systems)\n     * ensure nvme drives are set as nvme mode in bios(some bios have a bug where you can set nvme drives as sata)\n\n * nvram failing:\n   \n   * common issue hedt and 300 series motherboards, you have a couple paths to go down:\n     * 300 series consumer intel: see getting started with acpi on making ssdt-pmc.aml\n     * hedt(ie. x99): see emulating nvram on how to stop nvram write, note that for install you do not need to run the script. just setup the config.plist\n\n * rtc missing:\n   \n   * commonly found on intel's 300+ series(ie. z370, z490), caused by the rtc clock being disabled by default. see getting started with acpi on creating an ssdt-awac.aml\n   * x99 and x299 have broken rtc devices, so will need to be fixed with ssdt-rtc0-range. see getting started with acpi on creating said file\n   * some drunk firmware writer at hp also disabled the rtc on the hp 250 g6 with no way to actually re-enable it\n     * known affected models: hp 15-da0014dx, hp 250 g6\n     * for users cursed with such hardware you'll need to create a fake rtc clock for macos to play with. see getting started with acpi for more details, as well as below image example:\n\nexample of what a disabled rtc with no way to enable looks like(note that there is no value to re-enable it like stas):\n\n\n\n\n# stuck at acpi table loading on b550\n\n\n\nif you're getting stuck at or near acpi table loading with an amd b550 or a520 motherboard, add the following ssdt:\n\n * ssdt-cpur.aml\n\nand please remember to add this ssdt to both efi/oc/acpi and your config.plist under acpi -> add(propertree's snapshot function can do this for you)\n\n\n# \"waiting for root device\" or prohibited sign error\n\n * other names: stop sign, scrambled\n\nthis is generally seen as a usb or sata error, couple ways to fix:\n\n\n# usb issues\n\nthis assumes you're only booting the installer usb and not macos itself.\n\n * if you're hitting the 15 port limit, you need to make an usb map\n\n * another issue can be that certain firmware won't pass usb ownership to macos\n   \n   * uefi -> quirks -> releaseusbownership -> true\n   * enabling ehci/xhci handoff in the bios can fix this as well\n\n * sometimes, if the usb is plugged into a 3.x port, plugging it into a 2.0 port can fix this error and vice versa.\n\n * for amd's 15h and 16h cpus, you may need to add the following:\n   \n   * xlncusbfix.kext\n\n * if xlncusbfix still doesn't work, then try the following alongside xlncusbfix:\n   \n   * amd stopsign-fixv5\n\n * x299 users: enable \"above 4g decoding\"\n   \n   * odd firmware bug on x299 where usb breaks otherwise\n\n * missing usb ports in acpi:\n   \n   * for intel's coffee lake and older, we recommend using usbinjectall\n   * for intel's ice lake and comet lake, we recommend ssdt-rhub\n     * ssdttime's 7. usb reset option can do the same\n   * for amd, run ssdttime's 7. usb reset option and add the provided ssdt-rhub to your efi and config.plist\n\n\n# sata issues\n\non rare occasions(mainly laptops), the sata controller isn't officially supported by macos. to resolve this, we'll want to do a few things:\n\n * set sata to ahci mode in the bios\n   * macos doesn't support hardware raid or ide mode properly.\n   * note drives already using intel rapid storage technology(rst, soft raid for windows and linux) will not be accessible in macos.\n * sata-unsupported.kext\n   * adds support to obscure sata controllers, commonly being laptops.\n   * for very legacy sata controllers, ahciportinjector.kext may be more suitable.\n * catalina's patched appleahciport.kext\n   * for users running macos 11, big sur and having issues. this backports the known working catalina kext, sata-unsupported is not needed with this kext\n\nnote that you will only experience this issue after installing macos onto the drive, booting the macos installer will not error out due to sata issues.\n\n\n# kernel panic with iopcifamily on x99\n\nfor those running the x99 platform from intel, please go over the following:\n\n * the following kernel patches are enabled:\n   * applecpupmcfglock\n   * applexcpmcfglock\n   * applexcpmextramsrs\n * you have the following ssdts:\n   * ssdt-unc(if not, see getting started with acpi on creating said file)\n\n\n# stuck on or near ioconsoleusers: gioscreenlock.../giolockstate (3...\n\nthis is right before the gpu is properly initialized, verify the following:\n\n * gpu is uefi capable(gtx 7xx/2013+)\n * csm is off in the bios\n   * may need to be enabled on laptops\n * forcing pcie 3.0 link speed\n * double check that ig-platform-id and device-id are valid if running an igpu.\n   * desktop uhd 630's may need to use 00009b3e instead\n * trying various whatevergreen fixes\n   * -igfxmlr boot argument. this can also manifest as a \"divide by zero\" error.\n * coffee lake igpu users may also need igfxonln=1 in 10.15.4 and newer\n\n\n# scrambled screen on laptops\n\nenable csm in your uefi settings. this may appear as \"boot legacy roms\" or other legacy setting.\n\n\n# black screen after ioconsoleusers: gioscreenlock... on navi\n\n * add agdpmod=pikera to boot args\n * switch between different display outputs\n * try running macpro7,1 smbios with the boot-arg agdpmod=ignore\n\nfor msi navi users, you'll need to apply the patch mentioned here: installer not working with 5700xt #901\n\nspecifically, add the following entry under kernel -> patch:\n\nmsi navi patch\n\nbase:\ncomment: navi vbios bug patch\ncount: 1\nenabled: yes\nfind: 4154592c526f6d2300\nidentifier: com.apple.kext.amdradeonx6000framebuffer\nlimit: 0\nmask:\nminkernel: 19.00.00\nmaxkernel: 19.99.99\nreplace: 414d442c526f6d2300\nreplacemask:\nskip: 0\n\n\nnote: macos 11, big sur no longer requires this patch for msi navi.\n\n\n# kernel panic cannot perform kext summary\n\ngenerally seen as an issue surrounding the prelinked kernel, specifically that macos is having a hard time interpreting the ones we injected. verify that:\n\n * your kexts are in the correct order(master then plugins, lilu always before the plugins)\n * kexts with executables have them and plist only kexts don't(ie. usbmap.kext, xhci-unspported.kext, etc does not contain an executable)\n * don't include multiple of the same kexts in your config.plist(ie. including multiple copies of voodooinput from multiple kexts, we recommend choosing the first kext in your config's array and disable the rest)\n\nnote: this error may also look very similar to kernel panic on invalid frame pointer\n\n\n# kernel panic appleintelmcereporter\n\nwith macos catalina, dual socket support is broken, and a fun fact about amd firmware is that some boards will actually report multiple socketed cpus. to fix this, add applemcereporterdisabler to both efi/oc/kexts and config.plist -> kernel -> add\n\n\n# kernel panic appleintelcpupowermanagement\n\nthis is likely due to faulty or outright missing nullcpupowermanagement. to fix the issue, remove nullcpupowermanagement from kernel -> add and efi/oc/kexts then enable dummypowermanagement under kernel -> emulate\n\n * note: on older intel cpus(ie. penryn and older), it may be due to irq conflicts or the hpet device being disabled. to resolve, you have 2 options:\n   * ssdttime's fixhpet option\n   * forcing the hpet device on\n\nforcing the hpet device on\n\nunder acpi -> patch:\n\ncomment   string    force hpet online\nenabled   boolean   yes\ncount     number    0\nlimit     number    0\nfind      data      a010934f53464c00\nreplace   data      a40a0fa3a3a3a3a3\n\n\n# kernel panic appleacpiplatform in 10.13\n\n\n\non macos 10.13, high sierra the os is much stricter with acpi tables, specifically a bug with how headers were handled. to resolve, enable normalizeheaders under acpi -> quirks in your config.plist\n\n\n# macos frozen right before login\n\nthis is a common example of screwed up tsc, for most system add cputscsync\n\nthe most common way to see the tsc issue:\n\ncase 1   case 2\n         \n\n\n# keyboard works but trackpad does not\n\nmake sure that voodooinput is listed before voodoops2 and voodooi2c kexts in your config.plist.\n\nvoodooi2c troubleshooting\n\ncheck the order that your kexts load - make they match what is shown under gathering files:\n\n 1. voodoogpio, voodooinput, and voodooi2cservices in any order (found under voodooi2c.kext/contents/plugins)\n 2. voodooi2c\n 3. satellite/plugin kext\n\nmake sure you have ssdt-gpio in efi/oc/acpi and in your config.plist under acpi -> add in your config.plist. if you are still having issues, reference the getting started with acpi gpio page.\n\n\n# kextd stall[0]: appleacpicpu\n\nthis is due to either a missing smc emulator or broken one, make sure of the following:\n\n * lilu and virtualsmc are both in efi/oc/kexts and in your config.plist\n * lilu is before virtualsmc in the kext list\n * last resort is to try fakesmc instead, do not have both virtualsmc and fakesmc enabled\n\n\n# kernel panic on appleinteli210ethernet\n\nfor those running comet lake motherboards with the i225-v nic, you may experience a kernel panic on boot due to the i210 kext. to resolve this, make sure you have the correct pciroot for your ethernet. this commonly being either:\n\n * pciroot(0x0)/pci(0x1c,0x1)/pci(0x0, 0x0)\n   * by default, this is what asus and gigabyte motherboards use\n * pciroot(0x0)/pci(0x1c,0x4)/pci(0x0,0x0)\n   * some oems may use this instead\n\nfor those who can to your pciroot manually, you'll want to install macos fully and run the following with gfxutil:\n\n/path/to/gfxutil | grep -i \"8086:15f3\"\n\n\nthis should spit out something like this:\n\n00:1f.6 8086:15f3 /pc00@0/gbe1@1f,6 = pciroot(0x0)/pci(0x1f,0x6)\n\n\nthe ending pciroot(0x0)/pci(0x1f,0x6) is what you want to add in your config.plist with device-id of f2150000\n\n\n# kernel panic on \"wrong cd clock frequency\" with icelake laptop\n\n\n\nto resolve this kernel panic, ensure you have -igfxcdc in your boot-args.\n\n\n# kernel panic on \"cckprng_int_gen\"\n\nfull panic:\n\n\"cckprng_int_gen: generator has already been sealed\"\n\n\nthis is likely to be 1 of 2 things:\n\n * missing smc emulator(ie. no virtualsmc in your config.plist or efi)\n   * add virtualsmc.kext to your config.plist and efi\n * incorrect ssdt usage with ssdt-cpur\n\nfor the latter, ensure you're only using ssdt-cpur with b550 and a520. do not use on x570 or older hardware(ie. b450 or a320)\n\n\n# stuck at forcing cs_runtime for entitlement in big sur\n\n\n\nthis is actually the part at where macos will seal the system volume, and where it may seem that macos has gotten stuck. do not restart thinking you're stuck, this will take quite some time to complete.\n\n\n# stuck on ramrod(^^^^^^^^^^^^^)\n\n\n\nif you get stuck around the ramrod section (specifically, it boots, hits this error, and reboots again back into this, causing a loop), this hints that your smc emulator is broken. to fix this, you have 2 options:\n\n * ensure you're using the latest builds of virtualsmc and lilu, with the vsmcgen=1 boot-arg\n * switch over to rehabman's fakesmc (you can use the minkernel/maxkernel trick mentioned above to restrict fakesmc to big sur and up\n\nand when switching kexts, ensure you don't have both fakesmc and virtualsmc enabled in your config.plist, as this will cause a conflict.\n\n\n# virtual machine issues\n\n * vmware 15 is known to get stuck on [eb|#log:exitbs:start]. vmware 16 resolves the problem.\n\n\n# reboot on \"appleusbhostport::createdevice: failed to create device\" on macos 11.3+\n\nthis is due to xhciportlimit breaking with macos 11.3 and newer, to resolve this, you must disable xhciportlimit under kernel -> quirks. please ensure you've mapped your usb ports correctly before doing so.",charsets:{cjk:!0}},{title:"Miscellaneous Issues",frontmatter:{},regularPath:"/troubleshooting/extended/misc-issues.html",relativePath:"troubleshooting/extended/misc-issues.md",key:"v-e2d292a4",path:"/troubleshooting/extended/misc-issues.html",headers:[{level:2,title:"Can't run acpidump.efi",slug:"can-t-run-acpidump-efi",normalizedTitle:"can't run acpidump.efi",charIndex:107},{level:2,title:"Fixing SSDTTime: Could not locate or download iasl!",slug:"fixing-ssdttime-could-not-locate-or-download-iasl",normalizedTitle:"fixing ssdttime: could not locate or download iasl!",charIndex:133},{level:2,title:"Fix Python: Python is not installed or not found on PATH",slug:"fix-python-python-is-not-installed-or-not-found-on-path",normalizedTitle:"fix python: python is not installed or not found on path",charIndex:188},{level:2,title:"Windows Startup Disk can't see APFS drives",slug:"windows-startup-disk-can-t-see-apfs-drives",normalizedTitle:"windows startup disk can't see apfs drives",charIndex:248},{level:2,title:"Incorrect resolution with OpenCore",slug:"incorrect-resolution-with-opencore",normalizedTitle:"incorrect resolution with opencore",charIndex:294},{level:2,title:"Can't find Windows/BootCamp drive in picker",slug:"can-t-find-windows-bootcamp-drive-in-picker",normalizedTitle:"can't find windows/bootcamp drive in picker",charIndex:332},{level:2,title:"Selecting Startup Disk doesn't apply correctly",slug:"selecting-startup-disk-doesn-t-apply-correctly",normalizedTitle:"selecting startup disk doesn't apply correctly",charIndex:379},{level:2,title:"Booting Windows results in BlueScreen or Linux crashes",slug:"booting-windows-results-in-bluescreen-or-linux-crashes",normalizedTitle:"booting windows results in bluescreen or linux crashes",charIndex:429},{level:2,title:"Booting Windows error: OCB: StartImage failed - Already started",slug:"booting-windows-error-ocb-startimage-failed-already-started",normalizedTitle:"booting windows error: ocb: startimage failed - already started",charIndex:487},{level:2,title:"iASL warning, only X unresolved",slug:"iasl-warning-only-x-unresolved",normalizedTitle:"iasl warning, only x unresolved",charIndex:554},{level:2,title:"Time inconsistency between macOS and Windows",slug:"time-inconsistency-between-macos-and-windows",normalizedTitle:"time inconsistency between macos and windows",charIndex:589}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Can't run acpidump.efi Fixing SSDTTime: Could not locate or download iasl! Fix Python: Python is not installed or not found on PATH Windows Startup Disk can't see APFS drives Incorrect resolution with OpenCore Can't find Windows/BootCamp drive in picker Selecting Startup Disk doesn't apply correctly Booting Windows results in BlueScreen or Linux crashes Booting Windows error: OCB: StartImage failed - Already started iASL warning, only X unresolved Time inconsistency between macOS and Windows",content:"# Miscellaneous Issues\n\nMiscellaneous issues not revolving around macOS itself such as multibooting.\n\n\n\n * Can't run acpidump.efi\n * Fixing SSDTTime: Could not locate or download iasl!\n * Fix Python: Python is not installed or not found on PATH\n * Windows Startup Disk can't see APFS drives\n * Incorrect resolution with OpenCore\n * Can't find Windows/BootCamp drive in picker\n * Selecting Startup Disk doesn't apply correctly\n * Booting Windows results in BlueScreen or Linux crashes\n * Booting Windows error: OCB: StartImage failed - Already started\n * iASL warning, only X unresolved\n * Time inconsistency between macOS and Windows\n\n\n\n\n# Can't run acpidump.efi\n\nCall upon OpenCore shell:\n\nshell> fs0: //replace with proper drive\n\nfs0:\\> dir //to verify this is the right directory\n\n  Directory of fs0:\\\n\n   01/01/01 3:30p  EFI\nfs0:\\> cd EFI\\OC\\Tools //note that its with forward slashes\n\nfs0:\\EFI\\OC\\Tools> acpidump.efi -b -n DSDT -z\n\n\n\n# Fixing SSDTTime: Could not locate or download iasl!\n\nThis is usually due to an outdated version of Python, try either updating Python or add iasl to the scripts folder for SSDTTime:\n\n * iasl macOS version\n * iasl Windows version\n * iasl Linux version\n\n\n# Fix Python: Python is not installed or not found on PATH\n\nEasy fix, download and install the latest python:\n\n * macOS link\n * Windows link\n * Linux link\n\nMake sure Add Python to PATH\n\n\n\n\n# Windows Startup Disk can't see APFS drives\n\n * Outdated BootCamp drivers(generally ver 6.0 will come with brigadier, BootCamp Utility in macOS provides newer version like ver 6.1). CorpNewt has also forked brigadier fixing these issues as well: CorpNewt's brigadier\n\n\n# Incorrect resolution with OpenCore\n\n * Follow Fixing Resolution and Verbose for correct setup, set UIScale to 2 for HiDPI\n * Users also have noticed that setting ConsoleMode to Max will sometimes fail, leaving it empty can help\n\n\n# Can't find Windows/BootCamp drive in picker\n\nSo with OpenCore, we have to note that legacy Windows installs are not supported, only UEFI. Most installs now are UEFI based but those made by BootCamp Assistant are legacy based, so you'll have to find other means to make an installer(Google's your friend). This also means MasterBootRecord/Hybrid partitions are also broken so you'll need to format the drive you want to install onto with DiskUtility. See the Multiboot Guide on best practices\n\nNow to get onto troubleshooting:\n\n * Make sure Misc -> Security -> ScanPolicy is set to 0 to show all drives\n * Enable Misc -> Boot -> Hideself when Windows bootloader is located on the same drive\n\n\n# Selecting Startup Disk doesn't apply correctly\n\nIf you're having issues with Startup Disk correctly applying your new boot entry, this is most likely caused by a missing DevicePathsSupported in your I/O Registry. To resolve this, ensure you are using PlatformInfo -> Automatic -> True\n\nExample of missing DevicePathsSupported:\n\n * Default DevicePath match failure due to different PciRoot #664\n\n\n# Booting Windows results in BlueScreen or Linux crashes\n\nThis is due to alignment issues, make sure SyncRuntimePermissions is enabled on firmwares supporting MATs. Check your logs whether your firmware supports Memory Attribute Tables(generally seen on 2018 firmwares and newer)\n\nCommon Windows error code:\n\n * 0xc000000d\n\n\n# Booting Windows error: OCB: StartImage failed - Already started\n\nThis is due to OpenCore getting confused when trying to boot Windows and accidentally thinking it's booting OpenCore. This can be avoided by either move Windows to it's own drive or adding a custom drive path under BlessOverride. See Configuration.pdf for more details.\n\n\n# iASL warning, only X unresolved\n\nIf you try to decompile your DSDT and get an error similar to this:\n\niASL Warning: There were 19 external control methods found during disassembly, but only 0 were resolved (19 unresolved)\n\n\nThis happens when one ACPI table requires the rest for proper referencing, it does not accept the creation of DSDTs as we're only using it for creating a select few SSDTs. For those who are worried, you can run the following:\n\niasl * [insert all ACPI files here]\n\n\n\n# Time inconsistency between macOS and Windows\n\nThis is due to macOS using Universal Time while Windows relies on Greenwich time, so you'll need to force one OS to a different way of measuring time. We highly recommend modifying Windows instead as it's far less destructive and painful:\n\n * Install Bootcamp utilities\n * Modify Windows' registry",normalizedContent:"# miscellaneous issues\n\nmiscellaneous issues not revolving around macos itself such as multibooting.\n\n\n\n * can't run acpidump.efi\n * fixing ssdttime: could not locate or download iasl!\n * fix python: python is not installed or not found on path\n * windows startup disk can't see apfs drives\n * incorrect resolution with opencore\n * can't find windows/bootcamp drive in picker\n * selecting startup disk doesn't apply correctly\n * booting windows results in bluescreen or linux crashes\n * booting windows error: ocb: startimage failed - already started\n * iasl warning, only x unresolved\n * time inconsistency between macos and windows\n\n\n\n\n# can't run acpidump.efi\n\ncall upon opencore shell:\n\nshell> fs0: //replace with proper drive\n\nfs0:\\> dir //to verify this is the right directory\n\n  directory of fs0:\\\n\n   01/01/01 3:30p  efi\nfs0:\\> cd efi\\oc\\tools //note that its with forward slashes\n\nfs0:\\efi\\oc\\tools> acpidump.efi -b -n dsdt -z\n\n\n\n# fixing ssdttime: could not locate or download iasl!\n\nthis is usually due to an outdated version of python, try either updating python or add iasl to the scripts folder for ssdttime:\n\n * iasl macos version\n * iasl windows version\n * iasl linux version\n\n\n# fix python: python is not installed or not found on path\n\neasy fix, download and install the latest python:\n\n * macos link\n * windows link\n * linux link\n\nmake sure add python to path\n\n\n\n\n# windows startup disk can't see apfs drives\n\n * outdated bootcamp drivers(generally ver 6.0 will come with brigadier, bootcamp utility in macos provides newer version like ver 6.1). corpnewt has also forked brigadier fixing these issues as well: corpnewt's brigadier\n\n\n# incorrect resolution with opencore\n\n * follow fixing resolution and verbose for correct setup, set uiscale to 2 for hidpi\n * users also have noticed that setting consolemode to max will sometimes fail, leaving it empty can help\n\n\n# can't find windows/bootcamp drive in picker\n\nso with opencore, we have to note that legacy windows installs are not supported, only uefi. most installs now are uefi based but those made by bootcamp assistant are legacy based, so you'll have to find other means to make an installer(google's your friend). this also means masterbootrecord/hybrid partitions are also broken so you'll need to format the drive you want to install onto with diskutility. see the multiboot guide on best practices\n\nnow to get onto troubleshooting:\n\n * make sure misc -> security -> scanpolicy is set to 0 to show all drives\n * enable misc -> boot -> hideself when windows bootloader is located on the same drive\n\n\n# selecting startup disk doesn't apply correctly\n\nif you're having issues with startup disk correctly applying your new boot entry, this is most likely caused by a missing devicepathssupported in your i/o registry. to resolve this, ensure you are using platforminfo -> automatic -> true\n\nexample of missing devicepathssupported:\n\n * default devicepath match failure due to different pciroot #664\n\n\n# booting windows results in bluescreen or linux crashes\n\nthis is due to alignment issues, make sure syncruntimepermissions is enabled on firmwares supporting mats. check your logs whether your firmware supports memory attribute tables(generally seen on 2018 firmwares and newer)\n\ncommon windows error code:\n\n * 0xc000000d\n\n\n# booting windows error: ocb: startimage failed - already started\n\nthis is due to opencore getting confused when trying to boot windows and accidentally thinking it's booting opencore. this can be avoided by either move windows to it's own drive or adding a custom drive path under blessoverride. see configuration.pdf for more details.\n\n\n# iasl warning, only x unresolved\n\nif you try to decompile your dsdt and get an error similar to this:\n\niasl warning: there were 19 external control methods found during disassembly, but only 0 were resolved (19 unresolved)\n\n\nthis happens when one acpi table requires the rest for proper referencing, it does not accept the creation of dsdts as we're only using it for creating a select few ssdts. for those who are worried, you can run the following:\n\niasl * [insert all acpi files here]\n\n\n\n# time inconsistency between macos and windows\n\nthis is due to macos using universal time while windows relies on greenwich time, so you'll need to force one os to a different way of measuring time. we highly recommend modifying windows instead as it's far less destructive and painful:\n\n * install bootcamp utilities\n * modify windows' registry",charsets:{}},{title:"OpenCore Boot Issues",frontmatter:{},regularPath:"/troubleshooting/extended/opencore-issues.html",relativePath:"troubleshooting/extended/opencore-issues.md",key:"v-18796e28",path:"/troubleshooting/extended/opencore-issues.html",headers:[{level:2,title:"Stuck on a black screen before picker",slug:"stuck-on-a-black-screen-before-picker",normalizedTitle:"stuck on a black screen before picker",charIndex:140},{level:2,title:"Stuck on no vault provided!",slug:"stuck-on-no-vault-provided",normalizedTitle:"stuck on no vault provided!",charIndex:181},{level:2,title:"Stuck on OC: Invalid Vault mode",slug:"stuck-on-oc-invalid-vault-mode",normalizedTitle:"stuck on oc: invalid vault mode",charIndex:212},{level:2,title:"Can't see macOS partitions",slug:"can-t-see-macos-partitions",normalizedTitle:"can't see macos partitions",charIndex:247},{level:2,title:"Stuck on OCB: OcScanForBootEntries failure - Not Found",slug:"stuck-on-ocb-ocscanforbootentries-failure-not-found",normalizedTitle:"stuck on ocb: ocscanforbootentries failure - not found",charIndex:277},{level:2,title:"Stuck on OCB: failed to match a default boot option",slug:"stuck-on-ocb-failed-to-match-a-default-boot-option",normalizedTitle:"stuck on ocb: failed to match a default boot option",charIndex:335},{level:2,title:"Stuck on OCB: System has no boot entries",slug:"stuck-on-ocb-system-has-no-boot-entries",normalizedTitle:"stuck on ocb: system has no boot entries",charIndex:390},{level:2,title:"Stuck on OCS: No schema for DSDT, KernelAndKextPatch, RtVariable, SMBIOS, SystemParameters...",slug:"stuck-on-ocs-no-schema-for-dsdt-kernelandkextpatch-rtvariable-smbios-systemparameters",normalizedTitle:"stuck on ocs: no schema for dsdt, kernelandkextpatch, rtvariable, smbios, systemparameters...",charIndex:434},{level:2,title:"Stuck on OC: Driver XXX.efi at 0 cannot be found",slug:"stuck-on-oc-driver-xxx-efi-at-0-cannot-be-found",normalizedTitle:"stuck on oc: driver xxx.efi at 0 cannot be found",charIndex:531},{level:2,title:'Receiving "Failed to parse real field of type 1"',slug:"receiving-failed-to-parse-real-field-of-type-1",normalizedTitle:"receiving &quot;failed to parse real field of type 1&quot;",charIndex:null},{level:2,title:"Can't select anything in the picker",slug:"can-t-select-anything-in-the-picker",normalizedTitle:"can't select anything in the picker",charIndex:635},{level:2,title:"SSDTs not being added",slug:"ssdts-not-being-added",normalizedTitle:"ssdts not being added",charIndex:674},{level:2,title:"Booting OpenCore reboots to BIOS",slug:"booting-opencore-reboots-to-bios",normalizedTitle:"booting opencore reboots to bios",charIndex:699},{level:2,title:"OCABC: Incompatible OpenRuntime r4, require r10",slug:"ocabc-incompatible-openruntime-r4-require-r10",normalizedTitle:"ocabc: incompatible openruntime r4, require r10",charIndex:735},{level:2,title:"Failed to open OpenCore image - Access Denied",slug:"failed-to-open-opencore-image-access-denied",normalizedTitle:"failed to open opencore image - access denied",charIndex:786},{level:2,title:"OC: Failed to find SB model disable halting on critical error",slug:"oc-failed-to-find-sb-model-disable-halting-on-critical-error",normalizedTitle:"oc: failed to find sb model disable halting on critical error",charIndex:835},{level:2,title:"Legacy boot stuck on BOOT FAIL!",slug:"legacy-boot-stuck-on-boot-fail",normalizedTitle:"legacy boot stuck on boot fail!",charIndex:900}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Stuck on a black screen before picker Stuck on no vault provided! Stuck on OC: Invalid Vault mode Can't see macOS partitions Stuck on OCB: OcScanForBootEntries failure - Not Found Stuck on OCB: failed to match a default boot option Stuck on OCB: System has no boot entries Stuck on OCS: No schema for DSDT, KernelAndKextPatch, RtVariable, SMBIOS, SystemParameters... Stuck on OC: Driver XXX.efi at 0 cannot be found Receiving \"Failed to parse real field of type 1\" Can't select anything in the picker SSDTs not being added Booting OpenCore reboots to BIOS OCABC: Incompatible OpenRuntime r4, require r10 Failed to open OpenCore image - Access Denied OC: Failed to find SB model disable halting on critical error Legacy boot stuck on BOOT FAIL!",content:"# OpenCore Boot Issues\n\nIssues surrounding from initial booting the USB itself to right before you choose to boot the macOS installer\n\n\n\n * Stuck on a black screen before picker\n * Stuck on no vault provided!\n * Stuck on OC: Invalid Vault mode\n * Can't see macOS partitions\n * Stuck on OCB: OcScanForBootEntries failure - Not Found\n * Stuck on OCB: failed to match a default boot option\n * Stuck on OCB: System has no boot entries\n * Stuck on OCS: No schema for DSDT, KernelAndKextPatch, RtVariable, SMBIOS, SystemParameters...\n * Stuck on OC: Driver XXX.efi at 0 cannot be found\n * Receiving \"Failed to parse real field of type 1\"\n * Can't select anything in the picker\n * SSDTs not being added\n * Booting OpenCore reboots to BIOS\n * OCABC: Incompatible OpenRuntime r4, require r10\n * Failed to open OpenCore image - Access Denied\n * OC: Failed to find SB model disable halting on critical error\n * Legacy boot stuck on BOOT FAIL!\n\n\n\n\n# Stuck on a black screen before picker\n\nThis is likely some error either on your firmware or OpenCore, specifically it's having troubles loading all the drivers and presenting the menu. The best way to diagnose it is via OpenCore's DEBUG Build and checking the logs whether OpenCore actually loaded, and if so what is it getting stuck on.\n\nSituations where OpenCore did not load:\n\n * If there are no logs present even after setting up the DEBUG version of OpenCore with Target set to 67, there's likely an issue either with:\n   * Incorrect USB Folder Structure\n     * See Booting OpenCore reboots to BIOS for more info\n   * Firmware does not support UEFI\n     * You'll need to setup DuetPkg, this is covered in both the macOS and Windows install pages\n\nSituations where OpenCore did load:\n\n * Check the last line printed in your logs, there will likely be either a .efi driver that's been loaded or some form of ASSERT\n   * For ASSERT's, you'll want to actually inform the developers about this issue here: Acidanthera's Bugtracker\n   * For .efi drivers getting stuck, check over the following:\n     * HfsPlus.efi load issues:\n       * Try using HfsPlusLegacy.efi instead\n       * This is recommended for CPUs that do not support RDRAND, mainly relevant for 3rd gen Ivy bridge i3 and older\n       * VBoxHfs.efi is another option however is much slower than HfsPlus's version\n     * HiiDatabase.efi load issues:\n       * Likely your firmware already supports HiiDatabase, so the driver is conflicting. Simply remove the driver as you don't need it.\n\n\n# Stuck on no vault provided!\n\nTurn off Vaulting in your config.plist under Misc -> Security -> Vault by setting it to:\n\n * Optional\n\nIf you have already executed the sign.command you will need to restore the OpenCore.efi file as the 256 byte RSA-2048 signature has been shoved in. Can grab a new copy of OpenCore.efi here: OpenCorePkg\n\nNote: Vault and FileVault are 2 separate things, see Security and FileVault for more details\n\n\n# Stuck on OC: Invalid Vault mode\n\nThis is likely a spelling mistake, options in OpenCore are case-sensitive so make sure you check closely, Optional is the correct way to enter it under Misc -> Security -> Vault\n\n\n# Can't see macOS partitions\n\nMain things to check:\n\n * ScanPolicy set to 0 to show all drives\n * Have the proper firmware drivers such as HfsPlus(Note ApfsDriverLoader shouldn't be used in 0.5.8)\n * Set UnblockFsConnect to True in config.plist -> UEFI -> Quirks. Needed for some HP systems\n * Set SATA Mode: AHCI in BIOS\n * Set UEFI -> APFS to see APFS based drives:\n   * EnableJumpstart: YES\n   * HideVerbose: NO\n   * If running older versions of High Sierra(ie. 10.13.5 or older), set the following:\n     * MinDate: -1\n     * MinVersion: -1\n\n\n# Stuck on OCB: OcScanForBootEntries failure - Not Found\n\nThis is due to OpenCore being unable to find any drives with the current ScanPolicy, setting to 0 will allow all boot options to be shown\n\n * Misc -> Security -> ScanPolicy -> 0\n\n\n# Stuck on OCB: failed to match a default boot option\n\nSame fix as OCB: OcScanForBootEntries failure - Not Found, OpenCore is unable to find any drives with the current ScanPolicy, setting to 0 will allow all boot options to be shown\n\n * Misc -> Security -> ScanPolicy -> 0\n\n\n# Stuck on OCB: System has no boot entries\n\nSame fix as the above 2:\n\n * Misc -> Security -> ScanPolicy -> 0\n\n\n# Stuck on OCS: No schema for DSDT, KernelAndKextPatch, RtVariable, SMBIOS, SystemParameters...\n\nThis is due to either using a Clover config with OpenCore or using a configurator such as Mackie's Clover and OpenCore configurator. You'll need to start over and make a new config or figure out all the garbage you need to remove from your config. This is why we don't support configurators, they are known for these issues\n\n * Note: These same issues will also occur if you mix outdated configs with newer versions of OpenCore. Please update them accordingly\n\n\n# Stuck on OC: Driver XXX.efi at 0 cannot be found\n\nThis is due to an entry being in your config.plist, however not present in your EFI. To resolve:\n\n * Ensure your EFI/OC/Drivers matches up with your config.plist -> UEFI -> Drivers\n   * If not, please run Cmd/Ctrl+R with OpenCore to re-snapshot your config.plist\n\nNote that the entries are case-sensitive.\n\n\n# Receiving \"Failed to parse real field of type 1\"\n\nThis is due to a value set as real when it's not supposed to be, generally being that Xcode converted HaltLevel by accident:\n\n<key>HaltLevel</key>\n <real>2147483648</real>\n\n\nTo fix, swap real for integer:\n\n<key>HaltLevel</key>\n <integer>2147483648</integer>\n\n\n\n# Can't select anything in the picker\n\nThis is due to either a few things\n\n * Incompatible keyboard driver:\n   \n   * Disable PollAppleHotKeys and enable KeySupport, then remove OpenUsbKbDxe from your config.plist -> UEFI -> Drivers\n   * If the above doesn't work, reverse: disable KeySupport, then add OpenUsbKbDxe to your config.plist -> UEFI -> Drivers\n\n * Missing PS2 keyboard driver(Ignore if using a USB keyboard):\n   \n   * While most firmwares will include it by default, some laptops and older PCs may still need Ps2KeyboardDxe.efi to function correctly. Remember to add this to your config.plist as well\n\n\n# SSDTs not being added\n\nSo with OpenCore, there's some extra security checks added around ACPI files, specifically that table length header must equal to the file size. This is actually the fault of iASL when you compiled the file. Example of how to find it:\n\n* Original Table Header:\n*     Signature        \"SSDT\"\n*     Length           0x0000015D (349)\n*     Revision         0x02\n*     Checksum         0xCF\n*     OEM ID           \"ACDT\"\n*     OEM Table ID     \"SsdtEC\"\n*     OEM Revision     0x00001000 (4096)\n*     Compiler ID      \"INTL\"\n*     Compiler Version 0x20190509 (538510601)\n\n\nThe Length and checksum value is what we care about, so if our SSDT is actually 347 bytes then we want to change Length to 0x0000015B (347)(the 015B is in HEX)\n\nBest way to actually fix this is to grab a newer copy of iASL or Acidanthera's copy of MaciASL and remaking the SSDT\n\n * Note: MaciASL distributed by Rehabman are prone to ACPI corruption, please avoid it as they no longer maintain their repos\n\n\n# Booting OpenCore reboots to BIOS\n\n * Incorrect EFI folder structure, make sure all of your OC files are within an EFI folder located on your ESP(EFI system partition)\n\nExample of folder structure\n\n\n\n\n# OCABC: Incompatible OpenRuntime r4, require r10\n\nOutdated OpenRuntime.efi, make sure BOOTx64.efi, OpenCore.efi and OpenRuntime are all from the same exact build. Anything mismatched will break booting\n\n * Note: FwRuntimeServices has been renamed to OpenRuntime with 0.5.7 and newer\n\n\n# Failed to open OpenCore image - Access Denied\n\nOn newer Microsoft Surface device firmwares, loading OpenCore will now result in a security violation even when Secure Boot is disabled. To resolve this, enable UEFI -> Quirks -> DisableSecurityPolicy in your config.plist. See here for more info: Failed to open OpenCore image - Access Denied #1446\n\n\n# OC: Failed to find SB model disable halting on critical error\n\nThis is a typo, ensure that in your config.plist Misc -> Security -> SecureBootModel is set to Disabled\n\n\n# Legacy boot stuck on BOOT FAIL!\n\nThis error means that EFI/OC/OpenCore.efi could not be found on any partition. Double check that the EFI folder structure is correct.\n\nExample of folder structure\n\n",normalizedContent:"# opencore boot issues\n\nissues surrounding from initial booting the usb itself to right before you choose to boot the macos installer\n\n\n\n * stuck on a black screen before picker\n * stuck on no vault provided!\n * stuck on oc: invalid vault mode\n * can't see macos partitions\n * stuck on ocb: ocscanforbootentries failure - not found\n * stuck on ocb: failed to match a default boot option\n * stuck on ocb: system has no boot entries\n * stuck on ocs: no schema for dsdt, kernelandkextpatch, rtvariable, smbios, systemparameters...\n * stuck on oc: driver xxx.efi at 0 cannot be found\n * receiving \"failed to parse real field of type 1\"\n * can't select anything in the picker\n * ssdts not being added\n * booting opencore reboots to bios\n * ocabc: incompatible openruntime r4, require r10\n * failed to open opencore image - access denied\n * oc: failed to find sb model disable halting on critical error\n * legacy boot stuck on boot fail!\n\n\n\n\n# stuck on a black screen before picker\n\nthis is likely some error either on your firmware or opencore, specifically it's having troubles loading all the drivers and presenting the menu. the best way to diagnose it is via opencore's debug build and checking the logs whether opencore actually loaded, and if so what is it getting stuck on.\n\nsituations where opencore did not load:\n\n * if there are no logs present even after setting up the debug version of opencore with target set to 67, there's likely an issue either with:\n   * incorrect usb folder structure\n     * see booting opencore reboots to bios for more info\n   * firmware does not support uefi\n     * you'll need to setup duetpkg, this is covered in both the macos and windows install pages\n\nsituations where opencore did load:\n\n * check the last line printed in your logs, there will likely be either a .efi driver that's been loaded or some form of assert\n   * for assert's, you'll want to actually inform the developers about this issue here: acidanthera's bugtracker\n   * for .efi drivers getting stuck, check over the following:\n     * hfsplus.efi load issues:\n       * try using hfspluslegacy.efi instead\n       * this is recommended for cpus that do not support rdrand, mainly relevant for 3rd gen ivy bridge i3 and older\n       * vboxhfs.efi is another option however is much slower than hfsplus's version\n     * hiidatabase.efi load issues:\n       * likely your firmware already supports hiidatabase, so the driver is conflicting. simply remove the driver as you don't need it.\n\n\n# stuck on no vault provided!\n\nturn off vaulting in your config.plist under misc -> security -> vault by setting it to:\n\n * optional\n\nif you have already executed the sign.command you will need to restore the opencore.efi file as the 256 byte rsa-2048 signature has been shoved in. can grab a new copy of opencore.efi here: opencorepkg\n\nnote: vault and filevault are 2 separate things, see security and filevault for more details\n\n\n# stuck on oc: invalid vault mode\n\nthis is likely a spelling mistake, options in opencore are case-sensitive so make sure you check closely, optional is the correct way to enter it under misc -> security -> vault\n\n\n# can't see macos partitions\n\nmain things to check:\n\n * scanpolicy set to 0 to show all drives\n * have the proper firmware drivers such as hfsplus(note apfsdriverloader shouldn't be used in 0.5.8)\n * set unblockfsconnect to true in config.plist -> uefi -> quirks. needed for some hp systems\n * set sata mode: ahci in bios\n * set uefi -> apfs to see apfs based drives:\n   * enablejumpstart: yes\n   * hideverbose: no\n   * if running older versions of high sierra(ie. 10.13.5 or older), set the following:\n     * mindate: -1\n     * minversion: -1\n\n\n# stuck on ocb: ocscanforbootentries failure - not found\n\nthis is due to opencore being unable to find any drives with the current scanpolicy, setting to 0 will allow all boot options to be shown\n\n * misc -> security -> scanpolicy -> 0\n\n\n# stuck on ocb: failed to match a default boot option\n\nsame fix as ocb: ocscanforbootentries failure - not found, opencore is unable to find any drives with the current scanpolicy, setting to 0 will allow all boot options to be shown\n\n * misc -> security -> scanpolicy -> 0\n\n\n# stuck on ocb: system has no boot entries\n\nsame fix as the above 2:\n\n * misc -> security -> scanpolicy -> 0\n\n\n# stuck on ocs: no schema for dsdt, kernelandkextpatch, rtvariable, smbios, systemparameters...\n\nthis is due to either using a clover config with opencore or using a configurator such as mackie's clover and opencore configurator. you'll need to start over and make a new config or figure out all the garbage you need to remove from your config. this is why we don't support configurators, they are known for these issues\n\n * note: these same issues will also occur if you mix outdated configs with newer versions of opencore. please update them accordingly\n\n\n# stuck on oc: driver xxx.efi at 0 cannot be found\n\nthis is due to an entry being in your config.plist, however not present in your efi. to resolve:\n\n * ensure your efi/oc/drivers matches up with your config.plist -> uefi -> drivers\n   * if not, please run cmd/ctrl+r with opencore to re-snapshot your config.plist\n\nnote that the entries are case-sensitive.\n\n\n# receiving \"failed to parse real field of type 1\"\n\nthis is due to a value set as real when it's not supposed to be, generally being that xcode converted haltlevel by accident:\n\n<key>haltlevel</key>\n <real>2147483648</real>\n\n\nto fix, swap real for integer:\n\n<key>haltlevel</key>\n <integer>2147483648</integer>\n\n\n\n# can't select anything in the picker\n\nthis is due to either a few things\n\n * incompatible keyboard driver:\n   \n   * disable pollapplehotkeys and enable keysupport, then remove openusbkbdxe from your config.plist -> uefi -> drivers\n   * if the above doesn't work, reverse: disable keysupport, then add openusbkbdxe to your config.plist -> uefi -> drivers\n\n * missing ps2 keyboard driver(ignore if using a usb keyboard):\n   \n   * while most firmwares will include it by default, some laptops and older pcs may still need ps2keyboarddxe.efi to function correctly. remember to add this to your config.plist as well\n\n\n# ssdts not being added\n\nso with opencore, there's some extra security checks added around acpi files, specifically that table length header must equal to the file size. this is actually the fault of iasl when you compiled the file. example of how to find it:\n\n* original table header:\n*     signature        \"ssdt\"\n*     length           0x0000015d (349)\n*     revision         0x02\n*     checksum         0xcf\n*     oem id           \"acdt\"\n*     oem table id     \"ssdtec\"\n*     oem revision     0x00001000 (4096)\n*     compiler id      \"intl\"\n*     compiler version 0x20190509 (538510601)\n\n\nthe length and checksum value is what we care about, so if our ssdt is actually 347 bytes then we want to change length to 0x0000015b (347)(the 015b is in hex)\n\nbest way to actually fix this is to grab a newer copy of iasl or acidanthera's copy of maciasl and remaking the ssdt\n\n * note: maciasl distributed by rehabman are prone to acpi corruption, please avoid it as they no longer maintain their repos\n\n\n# booting opencore reboots to bios\n\n * incorrect efi folder structure, make sure all of your oc files are within an efi folder located on your esp(efi system partition)\n\nexample of folder structure\n\n\n\n\n# ocabc: incompatible openruntime r4, require r10\n\noutdated openruntime.efi, make sure bootx64.efi, opencore.efi and openruntime are all from the same exact build. anything mismatched will break booting\n\n * note: fwruntimeservices has been renamed to openruntime with 0.5.7 and newer\n\n\n# failed to open opencore image - access denied\n\non newer microsoft surface device firmwares, loading opencore will now result in a security violation even when secure boot is disabled. to resolve this, enable uefi -> quirks -> disablesecuritypolicy in your config.plist. see here for more info: failed to open opencore image - access denied #1446\n\n\n# oc: failed to find sb model disable halting on critical error\n\nthis is a typo, ensure that in your config.plist misc -> security -> securebootmodel is set to disabled\n\n\n# legacy boot stuck on boot fail!\n\nthis error means that efi/oc/opencore.efi could not be found on any partition. double check that the efi folder structure is correct.\n\nexample of folder structure\n\n",charsets:{}},{title:"Post-Install Issues",frontmatter:{},regularPath:"/troubleshooting/extended/post-issues.html",relativePath:"troubleshooting/extended/post-issues.md",key:"v-fcb203d4",path:"/troubleshooting/extended/post-issues.html",headers:[{level:2,title:"Broken iMessage and Siri",slug:"broken-imessage-and-siri",normalizedTitle:"broken imessage and siri",charIndex:84},{level:2,title:"No on-board audio",slug:"no-on-board-audio",normalizedTitle:"no on-board audio",charIndex:112},{level:2,title:"BIOS reset or sent into Safemode after reboot/shutdown",slug:"bios-reset-or-sent-into-safemode-after-reboot-shutdown",normalizedTitle:"bios reset or sent into safemode after reboot/shutdown",charIndex:133},{level:2,title:"Synaptics PS2 based trackpad doesn't work",slug:"synaptics-ps2-based-trackpad-doesn-t-work",normalizedTitle:"synaptics ps2 based trackpad doesn't work",charIndex:191},{level:2,title:"Fix for Dell breakless PS2 keyboard keys",slug:"fix-for-dell-breakless-ps2-keyboard-keys",normalizedTitle:"fix for dell breakless ps2 keyboard keys",charIndex:236},{level:2,title:"macOS GPU acceleration missing on AMD X570",slug:"macos-gpu-acceleration-missing-on-amd-x570",normalizedTitle:"macos gpu acceleration missing on amd x570",charIndex:280},{level:2,title:"DRM Broken",slug:"drm-broken",normalizedTitle:"drm broken",charIndex:326},{level:2,title:'"Memory Modules Misconfigured" on MacPro7,1',slug:"memory-modules-misconfigured-on-macpro7-1",normalizedTitle:"&quot;memory modules misconfigured&quot; on macpro7,1",charIndex:null},{level:2,title:"Apps crashing on AMD",slug:"apps-crashing-on-amd",normalizedTitle:"apps crashing on amd",charIndex:387},{level:2,title:"Sleep crashing on AMD",slug:"sleep-crashing-on-amd",normalizedTitle:"sleep crashing on amd",charIndex:411},{level:2,title:"AssetCache Content Caching unavailable in virtual machine",slug:"assetcache-content-caching-unavailable-in-virtual-machine",normalizedTitle:"assetcache content caching unavailable in virtual machine",charIndex:436},{level:2,title:"Coffee Lake systems failing to wake",slug:"coffee-lake-systems-failing-to-wake",normalizedTitle:"coffee lake systems failing to wake",charIndex:497},{level:2,title:"No brightness control on Dual GPU laptops",slug:"no-brightness-control-on-dual-gpu-laptops",normalizedTitle:"no brightness control on dual gpu laptops",charIndex:536},{level:2,title:"No temperature/fan sensor output",slug:"no-temperature-fan-sensor-output",normalizedTitle:"no temperature/fan sensor output",charIndex:581},{level:2,title:'"You can\'t change the startup disk to the selected disk" error',slug:"you-can-t-change-the-startup-disk-to-the-selected-disk-error",normalizedTitle:"&quot;you can't change the startup disk to the selected disk&quot; error",charIndex:null},{level:2,title:"Selecting Startup Disk doesn't apply correctly",slug:"selecting-startup-disk-doesn-t-apply-correctly",normalizedTitle:"selecting startup disk doesn't apply correctly",charIndex:683},{level:2,title:"macOS waking up with the wrong time",slug:"macos-waking-up-with-the-wrong-time",normalizedTitle:"macos waking up with the wrong time",charIndex:733},{level:2,title:"No Volume/Brightness control on external monitors",slug:"no-volume-brightness-control-on-external-monitors",normalizedTitle:"no volume/brightness control on external monitors",charIndex:772},{level:2,title:"Time inconsistency between macOS and Windows",slug:"time-inconsistency-between-macos-and-windows",normalizedTitle:"time inconsistency between macos and windows",charIndex:825},{level:2,title:"Disabling SIP",slug:"disabling-sip",normalizedTitle:"disabling sip",charIndex:873},{level:2,title:"Writing to the macOS system partition",slug:"writing-to-the-macos-system-partition",normalizedTitle:"writing to the macos system partition",charIndex:890},{level:2,title:"Rolling back APFS Snapshots",slug:"rolling-back-apfs-snapshots",normalizedTitle:"rolling back apfs snapshots",charIndex:931},{level:2,title:"Apple Watch Unlock issues",slug:"apple-watch-unlock-issues",normalizedTitle:"apple watch unlock issues",charIndex:962},{level:2,title:"4K iGPU output issues over HDMI",slug:"_4k-igpu-output-issues-over-hdmi",normalizedTitle:"4k igpu output issues over hdmi",charIndex:991}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:'Broken iMessage and Siri No on-board audio BIOS reset or sent into Safemode after reboot/shutdown Synaptics PS2 based trackpad doesn\'t work Fix for Dell breakless PS2 keyboard keys macOS GPU acceleration missing on AMD X570 DRM Broken "Memory Modules Misconfigured" on MacPro7,1 Apps crashing on AMD Sleep crashing on AMD AssetCache Content Caching unavailable in virtual machine Coffee Lake systems failing to wake No brightness control on Dual GPU laptops No temperature/fan sensor output "You can\'t change the startup disk to the selected disk" error Selecting Startup Disk doesn\'t apply correctly macOS waking up with the wrong time No Volume/Brightness control on external monitors Time inconsistency between macOS and Windows Disabling SIP Writing to the macOS system partition Rolling back APFS Snapshots Apple Watch Unlock issues 4K iGPU output issues over HDMI',content:"# Post-Install Issues\n\nIssues revolving around macOS once properly installed.\n\n\n\n * Broken iMessage and Siri\n * No on-board audio\n * BIOS reset or sent into Safemode after reboot/shutdown\n * Synaptics PS2 based trackpad doesn't work\n * Fix for Dell breakless PS2 keyboard keys\n * macOS GPU acceleration missing on AMD X570\n * DRM Broken\n * \"Memory Modules Misconfigured\" on MacPro7,1\n * Apps crashing on AMD\n * Sleep crashing on AMD\n * AssetCache Content Caching unavailable in virtual machine\n * Coffee Lake systems failing to wake\n * No brightness control on Dual GPU laptops\n * No temperature/fan sensor output\n * \"You can't change the startup disk to the selected disk\" error\n * Selecting Startup Disk doesn't apply correctly\n * macOS waking up with the wrong time\n * No Volume/Brightness control on external monitors\n * Time inconsistency between macOS and Windows\n * Disabling SIP\n * Writing to the macOS system partition\n * Rolling back APFS Snapshots\n * Apple Watch Unlock issues\n * 4K iGPU output issues over HDMI\n\n\n\n\n# Broken iMessage and Siri\n\nRefer to Fixing iServices section\n\n\n# No on-board audio\n\nRefer to Fixing Audio with AppleALC section\n\n\n# BIOS reset or sent into Safemode after reboot/shutdown\n\nRefer to Fixing RTC/CMOS Resets section\n\n\n# Synaptics PS2 based trackpad doesn't work\n\nYou can try to use SSDT-Enable_DynamicEWMode.dsl. First, you have to open Device Manager, and head to the following:\n\nDevice Manager -> Mice and other pointing devices -> Double click on your trackpad -> Properties -> Details > BIOS device name\n\n\nThen grab SSDT-Enable_DynamicEWMode.dsl By default, this uses PCI0.LPCB.PS2K for the pathing. you'll want to rename accordingly.\n\nExternal (_SB_.PCI0.LPCB.PS2K, DeviceObj) <- Rename this\n\n    Name(_SB.PCI0.LPCB.PS2K.RMCF, Package()  <- Rename this\n\n\n\nThen compile with MaciASL, copy to your OC/ACPI folder, and add it to your config, and you should be good to go.\n\n * Note: Although this will work for most cases, the trackpad may be laggy and you may not be able to use the physical buttons (more details). If you can live without the trackpad, this may be better:\n\nFind the ACPI path of your mouse (see above), then grab SSDT-DisableTrackpadProbe.dsl. By default, this uses PCI0.LPCB.PS2K so you have to change that to your ACPI path if necessary:\n\nExternal (_SB_.PCI0.LPCB.PS2K, DeviceObj) <- Rename this\n\n    Name(_SB.PCI0.LPCB.PS2K.RMCF, Package() <- Rename this\n\n\n\n# Fix for Dell breakless PS2 keyboard keys\n\nFor those with issues surrounding key presses not releasing(ie. pressing infinitely), you'll want to enable VoodooPS2's Dell profile.\n\nFirst of all, you need to find the path to your ACPI keyboard object in the Device Manager:\n\nDevice Manager -> Keyboards -> Double click on your keyboard -> Properties -> Details > BIOS device name\n\n\nAfter this, grab SSDT-KEY-DELL-WN09.dsl and change the ACPI path to the one found above as needed:\n\nExternal (_SB_.PCI0.LPCB.PS2K, DeviceObj) <- Rename this\n\n    Method(_SB.PCI0.LPCB.PS2K._DSM, 4) <- Rename this\n\n\n\n# macOS GPU acceleration missing on AMD X570\n\nVerify the following:\n\n * GPU is UEFI capable(GTX 7XX/2013+)\n * CSM is off in the BIOS\n * Forcing PCIe 3.0 link speed\n\n\n# DRM Broken\n\nRefer to Fixing DRM section\n\n\n# \"Memory Modules Misconfigured\" on MacPro7,1\n\nFollow guide listed here:\n\n * Fixing MacPro7,1 Memory Errors\n\nFor those who simply want to disable the notification(not the error itself) is more than enough. For these users, we recommend installing RestrictEvents\n\n\n# Apps crashing on AMD\n\nEasy fix, buy Intel\n\nSo with AMD, whenever Apple calls CPU specific functions the app will either not work or outright crash. Here are some apps and their \"fixes\":\n\n * Adobe Products don't always work\n   * Some fixes can be found here: Adobe Fixes\n   * Do note these fixes just disables functionality, they're not really fixes\n * Virtual Machine running off of AppleHV's framework will not work(ie: Parallels 15, VMware)\n   * VirtualBox works fine as it doesn't use AppleHV\n   * VMware 10 and older can work as well\n   * Parallels 13.1.0 and older are known to work as well\n * Docker broken\n   * Docker toolbox is the only solution as it's based off of VirtualBox, many features are unavailable with this version\n * IDA Pro won't install\n   * There's an Intel specific check in the installer, app itself is likely fine\n * 15/16h CPU web pages crashing\n   * Follow directions here after UPDATE 5: Fix web pages\n\n\n# Sleep crashing on AMD\n\nThis is generally seen on AMD who use the chipset's USB controller, specifically for the Ryzen series and newer. The main way to tell if you're having issues with this is checking logs after either sleeping or waking:\n\n * In terminal:\n   * log show --last 1d | grep -i \"Wake reason\"\n\nShould result in something like this:\n\nSleep transition timed out after 180 seconds while calling power state change callbacks. Suspected bundle: com.apple.iokit.IOUSBHostFamily.\n\n\nYou can double check which controller is XHC0 via IOReg and checking the Vendor ID(1022 for AMD chipset). The fix for this sleep issue is either:\n\n * Avoid the chipset USB all together(ideally set _STA = 0x0 to disable the controller outright with an SSDT)\n * Correct the USBX power properties to what the controller expects\n\n\n# AssetCache Content Caching unavailable in virtual machine\n\nErrors such as:\n\n$ sudo AssetCacheManagerUtil activate\nAssetCacheManagerUtil[] Failed to activate content caching: Error Domain=ACSMErrorDomain Code=5 \"virtual machine\"...\n\n\narise due to VMM flag being exposed by sysctl.\n\nApply VmAssetCacheEnable kernel patch to disguise the flag and allow normal operation.\n\n\n# Coffee Lake systems failing to wake\n\nIn macOS 10.15.4, there were some changes made to AGPM that can cause wake issues on Coffee Lake systems. Specifically displays hooked up to the iGPU would fail to wake. To resolve this:\n\n * Add igfxonln=1 to boot-args\n * Make sure you're using WhateverGreen v1.3.8 or newer\n\n\n# No brightness control on Dual GPU laptops\n\nIn macOS 11.3, there were some changes made to backlight controlling mechanisms that defaults the backlight to be controlled by the dGPU on Dual GPU laptops with MUX enabled. Optimus only laptops, however, are not affected, since you need to disable the dGPU anyways. Specifically, this problem only causes issues if you have a Dual GPU laptop with the internal screen from an iGPU output and external screens from dGPU outputs (Hybrid Mode on some Mobile Workstations). To resolve this, you may disable either the iGPU or the dGPU, or do the following:\n\n * Verify SSDT-PNLF is installed(ie. EFI/OC/ACPI as well as config.plist -> ACPI -> Add)\n\n * Add below to PciRoot(0x0)/Pci(0x2,0x0):\n\n@0,backlight-control | Data | 01000000\n\napplbkl | Data | 01000000\n\nAAPL,backlight-control | Data | 01000000\n\nAAPL00,backlight-control | Data | 01000000\n\n * Add below to your dGPU PCI address:\n\n@0,backlight-control | Data | 00000000\n\napplbkl | Data | 00000000\n\nAAPL,backlight-control | Data | 00000000\n\n\n# No temperature/fan sensor output\n\nSo couple things:\n\n * iStat Menus doesn't yet support MacPro7,1 readouts\n * VirtualSMC's bundled sensors do not support AMD\n\nFor iStat, you'll have to wait for an update. For AMD users, you can use either:\n\n * SMCAMDProcessor\n   * Still in early beta but great work has been done, note it's been mainly tested on Ryzen\n * FakeSMC3_with_plugins\n\nNote for AMD with FakeSMC:\n\n * FileVault support requires more work with FakeSMC\n * Make sure no other SMC kexts are present, specifically those from VirtualSMC\n\n\n# \"You can't change the startup disk to the selected disk\" error\n\nThis is commonly caused by irregular partition setup of the Windows drive, specifically that the EFI is not the first partition. To fix this, we need to enable this quirk:\n\n * PlatformInfo -> Generic -> AdviseFeatures -> True\n\n\n\n\n# Selecting Startup Disk doesn't apply correctly\n\nIf you're having issues with Startup Disk correctly applying your new boot entry, this is most likely caused by a missing DevicePathsSupported in your I/O Registry. To resolve this, ensure you are using PlatformInfo -> Automatic -> True\n\nExample of missing DevicePathsSupported:\n\n * Default DevicePath match failure due to different PciRoot #664\n\n\n# macOS waking up with the wrong time\n\nAn odd quirk some people may notice is that from wake, macOS will have the incorrect time for a bit before self-correcting with network time check. The root cause of this issue is most likely due to your RTC not ticking, and can be resolved with a new CMOS battery(note that Z270 and newer are quite picky with voltage so choose carefully).\n\nTo verify whether your RTC is working correctly:\n\n * Download VirtualSMC v1.1.5+ and run the smcread tool:\n\n/path/to/smcread -s | grep CLKT\n\n\n\n\nThis should provide you with a hexadecimal value, and once converted it should equal time elapsed from Midnight relative to Cupertino.\n\nSo for this example, we'll grab our value(00010D13) then convert it to decimal and finally divide it by 3600. This should result in the approximate time elapsed(in seconds) since midnight relative to Cupertino\n\n * 00010D13 (Convert to HEX)-> 68883 (Divided by 3600 so we get hours)-> 19.13h(so 19:07:48)\n\nNext you'll want to put your hack to sleep for a bit and wake it, then check the CLKT value once more to see whether it deviated more or if it has a set difference. If you find it didn't actually tick much of at all from the elapsed time, you'll need to look into buying a new battery(with proper voltage)\n\n\n# No Volume/Brightness control on external monitors\n\nOddly enough, macOS has locked down digital audio from having control. To bring back some functionality, the app MonitorControl has done great work on improving support in macOS\n\n\n# Time inconsistency between macOS and Windows\n\nThis is due to macOS using Universal Time while Windows relies on Greenwich time, so you'll need to force one OS to a different way of measuring time. We highly recommend modifying Windows instead as it's far less destructive and painful:\n\n * Install Bootcamp utilities\n * Modify Windows' registry\n\n\n# Disabling SIP\n\nSIP or more properly known as System Integrity Protection, is a security technology that attempts to prevent any malicious software and the end user from damaging the OS. First introduced with OS X El Capitan, SIP has grown over time to control more and more things in macOS, including limiting edits to restricted file locations and 3rd party kext loading with kextload(OpenCore is unaffected as kexts are injected at boot). To resolve this, Apple has provided numerous configuration options in the NVRAM variable csr-active-config which can either be set in the macOS recovery environment or with OpenCore's NVRAM section(The latter will be discussed below).\n\n * WARNING: Disabling SIP can break OS functionality such as software updates in macOS 11, Big Sur and newer. Please be careful to only disable specific SIP values instead of disabling SIP outright to avoid these issues.\n   * Enabling CSR_ALLOW_UNAUTHENTICATED_ROOT and CSR_ALLOW_APPLE_INTERNAL are common options that can break OS updates for users\n\nYou can choose different values to enable or disable certain flags of SIP. Some useful tools to help you with these are BitmaskDecode and csrstat. Common values are as follows (bytes are pre-hex swapped for you, and note that they go under NVRAM -> Add -> 7C436110-AB2A-4BBB-A880-FE41995C9F82 -> csr-active-config):\n\n * 00000000 - SIP completely enabled (0x0).\n * 03000000 - Disable kext signing (0x1) and filesystem protections (0x2).\n * FF030000 - Disable all flags in macOS High Sierra (0x3ff).\n * FF070000 - Disable all flags in macOS Mojave and in macOS Catalina (0x7ff) as Apple introduced a value for executable policy.\n * FF0F0000 - Disable all flags in macOS Big Sur (0xfff) which has another new flag for authenticated root.\n\nNote: Disabling SIP with OpenCore is quite a bit different compared to Clover, specifically that NVRAM variables will not be overwritten unless explicitly told so under the Delete section. So if you've already set SIP once either via OpenCore or in macOS, you must override the variable:\n\n * NVRAM -> Delete -> 7C436110-AB2A-4BBB-A880-FE41995C9F82 -> csr-active-config\n\n\n\n\n# Writing to the macOS system partition\n\nWith macOS Catalina and newer, Apple split the OS and user data into 2 volumes where the system volume is read-only by default. To make these drives writable we'll need to do a few things:\n\n * Note: Users of SecureBootModel may end up in a RecoveryOS boot loop if the system partition has been modified. To resolve this, Reset NVRAM and set SecureBootModel to Disabled\n\nmacOS Catalina\n\n 1. Disable SIP\n 2. Mount drive as writable (Run sudo mount -uw / in terminal)\n\nmacOS Big Sur\n\n 1. Disable SIP\n 2. Mount drive as writable (See below link for command)\n\n * Note: Due to how OS updates work in macOS Big Sur and newer, changing the system volume can in fact break OS updates. Please edit with caution\n\nCommands based off of Apple's KDK documents:\n\n# First, create a mount point for your drive\nmkdir ~/livemount\n\n# Next, find your System volume\ndiskutil list\n\n# From the below list, we can see our System volume is disk5s5\n/dev/disk5 (synthesized):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      APFS Container Scheme -                      +255.7 GB   disk5\n                                 Physical Store disk4s2\n   1:                APFS Volume ⁨Big Sur HD - Data⁩       122.5 GB   disk5s1\n   2:                APFS Volume ⁨Preboot⁩                 309.4 MB   disk5s2\n   3:                APFS Volume ⁨Recovery⁩                887.8 MB   disk5s3\n   4:                APFS Volume ⁨VM⁩                      1.1 MB     disk5s4\n   5:                APFS Volume ⁨Big Sur HD⁩              16.2 GB    disk5s5\n   6:              APFS Snapshot ⁨com.apple.os.update-...⁩ 16.2 GB    disk5s5s\n\n# Mount the drive(ie. disk5s5)\nsudo mount -o nobrowse -t apfs  /dev/disk5s5 ~/livemount\n\n# Now you can freely make any edits to the System volume\n\n# If you edited either the S*/L*/Kernel, S*/L*/Extensions or L*/Extensions,\n# you will need to rebuild the kernel cache\nsudo kmutil install --volume-root ~/livemount --update-all\n\n# Finally, once done editing the system volume we'll want to create a new snapshot\nsudo bless --folder ~/livemount/System/Library/CoreServices --bootefi --create-snapshot\n\n\n\n# Rolling back APFS Snapshots\n\nWith macOS Big Sur, the system volume is now snapshotted allowing you to roll back in case of issues with system updates breaking due to a broken seal. Thanks to new snapshots being created with every OS update, we've got quite a bit to roll back too.\n\nTo roll back, you'll first need to reboot into Recovery partition then select \"Restore From Time Machine Backup\":\n\n\n\n * Credit to Lifewire for image\n\n\n# Apple Watch Unlock issues\n\nFor those with Apple Watch Unlock issues, verify the following:\n\n * You have a supported Apple Wireless card with Bluetooth Low Energy(4.0+)\n * Your watch and Mac are signed in with the same account\n * iServices working correctly(ie. iMessage)\n * There's an option to Unlock with Apple Watch under Security and Privacy setting in System Preferences\n\n\n\nIf the above are met, and you still have unlock issues we recommend running through the below guide:\n\n * Fixing Auto Unlock\n\n\n# 4K iGPU output issues over HDMI\n\nFor machines with HDMI 2.0 capable ports with resolution issues, verify the following:\n\n * 4k output works correctly in Windows\n * Monitor is set explicitly to HDMI 2.0\n   * If using an HDMI to DisplayPort converter, ensure the monitor is set to DisplayPort 1.2 or higher\n * Ensure enough iGPU memory has been allocated\n   * For Broadwell and newer, 64MB is expected to be allocated\n   * Machines relying on WhateverGreen's framebuffer-stolenmem property should know this can cause 4k output issues. Please ensure you can set the iGPU's memory to 64MB allowing you to remove these properties\n * Laptops and many desktop users may need this boot-arg:\n   * -cdfon\n\nFor all other troubleshooting, please reference WhateverGreen's Intel docs",normalizedContent:"# post-install issues\n\nissues revolving around macos once properly installed.\n\n\n\n * broken imessage and siri\n * no on-board audio\n * bios reset or sent into safemode after reboot/shutdown\n * synaptics ps2 based trackpad doesn't work\n * fix for dell breakless ps2 keyboard keys\n * macos gpu acceleration missing on amd x570\n * drm broken\n * \"memory modules misconfigured\" on macpro7,1\n * apps crashing on amd\n * sleep crashing on amd\n * assetcache content caching unavailable in virtual machine\n * coffee lake systems failing to wake\n * no brightness control on dual gpu laptops\n * no temperature/fan sensor output\n * \"you can't change the startup disk to the selected disk\" error\n * selecting startup disk doesn't apply correctly\n * macos waking up with the wrong time\n * no volume/brightness control on external monitors\n * time inconsistency between macos and windows\n * disabling sip\n * writing to the macos system partition\n * rolling back apfs snapshots\n * apple watch unlock issues\n * 4k igpu output issues over hdmi\n\n\n\n\n# broken imessage and siri\n\nrefer to fixing iservices section\n\n\n# no on-board audio\n\nrefer to fixing audio with applealc section\n\n\n# bios reset or sent into safemode after reboot/shutdown\n\nrefer to fixing rtc/cmos resets section\n\n\n# synaptics ps2 based trackpad doesn't work\n\nyou can try to use ssdt-enable_dynamicewmode.dsl. first, you have to open device manager, and head to the following:\n\ndevice manager -> mice and other pointing devices -> double click on your trackpad -> properties -> details > bios device name\n\n\nthen grab ssdt-enable_dynamicewmode.dsl by default, this uses pci0.lpcb.ps2k for the pathing. you'll want to rename accordingly.\n\nexternal (_sb_.pci0.lpcb.ps2k, deviceobj) <- rename this\n\n    name(_sb.pci0.lpcb.ps2k.rmcf, package()  <- rename this\n\n\n\nthen compile with maciasl, copy to your oc/acpi folder, and add it to your config, and you should be good to go.\n\n * note: although this will work for most cases, the trackpad may be laggy and you may not be able to use the physical buttons (more details). if you can live without the trackpad, this may be better:\n\nfind the acpi path of your mouse (see above), then grab ssdt-disabletrackpadprobe.dsl. by default, this uses pci0.lpcb.ps2k so you have to change that to your acpi path if necessary:\n\nexternal (_sb_.pci0.lpcb.ps2k, deviceobj) <- rename this\n\n    name(_sb.pci0.lpcb.ps2k.rmcf, package() <- rename this\n\n\n\n# fix for dell breakless ps2 keyboard keys\n\nfor those with issues surrounding key presses not releasing(ie. pressing infinitely), you'll want to enable voodoops2's dell profile.\n\nfirst of all, you need to find the path to your acpi keyboard object in the device manager:\n\ndevice manager -> keyboards -> double click on your keyboard -> properties -> details > bios device name\n\n\nafter this, grab ssdt-key-dell-wn09.dsl and change the acpi path to the one found above as needed:\n\nexternal (_sb_.pci0.lpcb.ps2k, deviceobj) <- rename this\n\n    method(_sb.pci0.lpcb.ps2k._dsm, 4) <- rename this\n\n\n\n# macos gpu acceleration missing on amd x570\n\nverify the following:\n\n * gpu is uefi capable(gtx 7xx/2013+)\n * csm is off in the bios\n * forcing pcie 3.0 link speed\n\n\n# drm broken\n\nrefer to fixing drm section\n\n\n# \"memory modules misconfigured\" on macpro7,1\n\nfollow guide listed here:\n\n * fixing macpro7,1 memory errors\n\nfor those who simply want to disable the notification(not the error itself) is more than enough. for these users, we recommend installing restrictevents\n\n\n# apps crashing on amd\n\neasy fix, buy intel\n\nso with amd, whenever apple calls cpu specific functions the app will either not work or outright crash. here are some apps and their \"fixes\":\n\n * adobe products don't always work\n   * some fixes can be found here: adobe fixes\n   * do note these fixes just disables functionality, they're not really fixes\n * virtual machine running off of applehv's framework will not work(ie: parallels 15, vmware)\n   * virtualbox works fine as it doesn't use applehv\n   * vmware 10 and older can work as well\n   * parallels 13.1.0 and older are known to work as well\n * docker broken\n   * docker toolbox is the only solution as it's based off of virtualbox, many features are unavailable with this version\n * ida pro won't install\n   * there's an intel specific check in the installer, app itself is likely fine\n * 15/16h cpu web pages crashing\n   * follow directions here after update 5: fix web pages\n\n\n# sleep crashing on amd\n\nthis is generally seen on amd who use the chipset's usb controller, specifically for the ryzen series and newer. the main way to tell if you're having issues with this is checking logs after either sleeping or waking:\n\n * in terminal:\n   * log show --last 1d | grep -i \"wake reason\"\n\nshould result in something like this:\n\nsleep transition timed out after 180 seconds while calling power state change callbacks. suspected bundle: com.apple.iokit.iousbhostfamily.\n\n\nyou can double check which controller is xhc0 via ioreg and checking the vendor id(1022 for amd chipset). the fix for this sleep issue is either:\n\n * avoid the chipset usb all together(ideally set _sta = 0x0 to disable the controller outright with an ssdt)\n * correct the usbx power properties to what the controller expects\n\n\n# assetcache content caching unavailable in virtual machine\n\nerrors such as:\n\n$ sudo assetcachemanagerutil activate\nassetcachemanagerutil[] failed to activate content caching: error domain=acsmerrordomain code=5 \"virtual machine\"...\n\n\narise due to vmm flag being exposed by sysctl.\n\napply vmassetcacheenable kernel patch to disguise the flag and allow normal operation.\n\n\n# coffee lake systems failing to wake\n\nin macos 10.15.4, there were some changes made to agpm that can cause wake issues on coffee lake systems. specifically displays hooked up to the igpu would fail to wake. to resolve this:\n\n * add igfxonln=1 to boot-args\n * make sure you're using whatevergreen v1.3.8 or newer\n\n\n# no brightness control on dual gpu laptops\n\nin macos 11.3, there were some changes made to backlight controlling mechanisms that defaults the backlight to be controlled by the dgpu on dual gpu laptops with mux enabled. optimus only laptops, however, are not affected, since you need to disable the dgpu anyways. specifically, this problem only causes issues if you have a dual gpu laptop with the internal screen from an igpu output and external screens from dgpu outputs (hybrid mode on some mobile workstations). to resolve this, you may disable either the igpu or the dgpu, or do the following:\n\n * verify ssdt-pnlf is installed(ie. efi/oc/acpi as well as config.plist -> acpi -> add)\n\n * add below to pciroot(0x0)/pci(0x2,0x0):\n\n@0,backlight-control | data | 01000000\n\napplbkl | data | 01000000\n\naapl,backlight-control | data | 01000000\n\naapl00,backlight-control | data | 01000000\n\n * add below to your dgpu pci address:\n\n@0,backlight-control | data | 00000000\n\napplbkl | data | 00000000\n\naapl,backlight-control | data | 00000000\n\n\n# no temperature/fan sensor output\n\nso couple things:\n\n * istat menus doesn't yet support macpro7,1 readouts\n * virtualsmc's bundled sensors do not support amd\n\nfor istat, you'll have to wait for an update. for amd users, you can use either:\n\n * smcamdprocessor\n   * still in early beta but great work has been done, note it's been mainly tested on ryzen\n * fakesmc3_with_plugins\n\nnote for amd with fakesmc:\n\n * filevault support requires more work with fakesmc\n * make sure no other smc kexts are present, specifically those from virtualsmc\n\n\n# \"you can't change the startup disk to the selected disk\" error\n\nthis is commonly caused by irregular partition setup of the windows drive, specifically that the efi is not the first partition. to fix this, we need to enable this quirk:\n\n * platforminfo -> generic -> advisefeatures -> true\n\n\n\n\n# selecting startup disk doesn't apply correctly\n\nif you're having issues with startup disk correctly applying your new boot entry, this is most likely caused by a missing devicepathssupported in your i/o registry. to resolve this, ensure you are using platforminfo -> automatic -> true\n\nexample of missing devicepathssupported:\n\n * default devicepath match failure due to different pciroot #664\n\n\n# macos waking up with the wrong time\n\nan odd quirk some people may notice is that from wake, macos will have the incorrect time for a bit before self-correcting with network time check. the root cause of this issue is most likely due to your rtc not ticking, and can be resolved with a new cmos battery(note that z270 and newer are quite picky with voltage so choose carefully).\n\nto verify whether your rtc is working correctly:\n\n * download virtualsmc v1.1.5+ and run the smcread tool:\n\n/path/to/smcread -s | grep clkt\n\n\n\n\nthis should provide you with a hexadecimal value, and once converted it should equal time elapsed from midnight relative to cupertino.\n\nso for this example, we'll grab our value(00010d13) then convert it to decimal and finally divide it by 3600. this should result in the approximate time elapsed(in seconds) since midnight relative to cupertino\n\n * 00010d13 (convert to hex)-> 68883 (divided by 3600 so we get hours)-> 19.13h(so 19:07:48)\n\nnext you'll want to put your hack to sleep for a bit and wake it, then check the clkt value once more to see whether it deviated more or if it has a set difference. if you find it didn't actually tick much of at all from the elapsed time, you'll need to look into buying a new battery(with proper voltage)\n\n\n# no volume/brightness control on external monitors\n\noddly enough, macos has locked down digital audio from having control. to bring back some functionality, the app monitorcontrol has done great work on improving support in macos\n\n\n# time inconsistency between macos and windows\n\nthis is due to macos using universal time while windows relies on greenwich time, so you'll need to force one os to a different way of measuring time. we highly recommend modifying windows instead as it's far less destructive and painful:\n\n * install bootcamp utilities\n * modify windows' registry\n\n\n# disabling sip\n\nsip or more properly known as system integrity protection, is a security technology that attempts to prevent any malicious software and the end user from damaging the os. first introduced with os x el capitan, sip has grown over time to control more and more things in macos, including limiting edits to restricted file locations and 3rd party kext loading with kextload(opencore is unaffected as kexts are injected at boot). to resolve this, apple has provided numerous configuration options in the nvram variable csr-active-config which can either be set in the macos recovery environment or with opencore's nvram section(the latter will be discussed below).\n\n * warning: disabling sip can break os functionality such as software updates in macos 11, big sur and newer. please be careful to only disable specific sip values instead of disabling sip outright to avoid these issues.\n   * enabling csr_allow_unauthenticated_root and csr_allow_apple_internal are common options that can break os updates for users\n\nyou can choose different values to enable or disable certain flags of sip. some useful tools to help you with these are bitmaskdecode and csrstat. common values are as follows (bytes are pre-hex swapped for you, and note that they go under nvram -> add -> 7c436110-ab2a-4bbb-a880-fe41995c9f82 -> csr-active-config):\n\n * 00000000 - sip completely enabled (0x0).\n * 03000000 - disable kext signing (0x1) and filesystem protections (0x2).\n * ff030000 - disable all flags in macos high sierra (0x3ff).\n * ff070000 - disable all flags in macos mojave and in macos catalina (0x7ff) as apple introduced a value for executable policy.\n * ff0f0000 - disable all flags in macos big sur (0xfff) which has another new flag for authenticated root.\n\nnote: disabling sip with opencore is quite a bit different compared to clover, specifically that nvram variables will not be overwritten unless explicitly told so under the delete section. so if you've already set sip once either via opencore or in macos, you must override the variable:\n\n * nvram -> delete -> 7c436110-ab2a-4bbb-a880-fe41995c9f82 -> csr-active-config\n\n\n\n\n# writing to the macos system partition\n\nwith macos catalina and newer, apple split the os and user data into 2 volumes where the system volume is read-only by default. to make these drives writable we'll need to do a few things:\n\n * note: users of securebootmodel may end up in a recoveryos boot loop if the system partition has been modified. to resolve this, reset nvram and set securebootmodel to disabled\n\nmacos catalina\n\n 1. disable sip\n 2. mount drive as writable (run sudo mount -uw / in terminal)\n\nmacos big sur\n\n 1. disable sip\n 2. mount drive as writable (see below link for command)\n\n * note: due to how os updates work in macos big sur and newer, changing the system volume can in fact break os updates. please edit with caution\n\ncommands based off of apple's kdk documents:\n\n# first, create a mount point for your drive\nmkdir ~/livemount\n\n# next, find your system volume\ndiskutil list\n\n# from the below list, we can see our system volume is disk5s5\n/dev/disk5 (synthesized):\n   #:                       type name                    size       identifier\n   0:      apfs container scheme -                      +255.7 gb   disk5\n                                 physical store disk4s2\n   1:                apfs volume ⁨big sur hd - data⁩       122.5 gb   disk5s1\n   2:                apfs volume ⁨preboot⁩                 309.4 mb   disk5s2\n   3:                apfs volume ⁨recovery⁩                887.8 mb   disk5s3\n   4:                apfs volume ⁨vm⁩                      1.1 mb     disk5s4\n   5:                apfs volume ⁨big sur hd⁩              16.2 gb    disk5s5\n   6:              apfs snapshot ⁨com.apple.os.update-...⁩ 16.2 gb    disk5s5s\n\n# mount the drive(ie. disk5s5)\nsudo mount -o nobrowse -t apfs  /dev/disk5s5 ~/livemount\n\n# now you can freely make any edits to the system volume\n\n# if you edited either the s*/l*/kernel, s*/l*/extensions or l*/extensions,\n# you will need to rebuild the kernel cache\nsudo kmutil install --volume-root ~/livemount --update-all\n\n# finally, once done editing the system volume we'll want to create a new snapshot\nsudo bless --folder ~/livemount/system/library/coreservices --bootefi --create-snapshot\n\n\n\n# rolling back apfs snapshots\n\nwith macos big sur, the system volume is now snapshotted allowing you to roll back in case of issues with system updates breaking due to a broken seal. thanks to new snapshots being created with every os update, we've got quite a bit to roll back too.\n\nto roll back, you'll first need to reboot into recovery partition then select \"restore from time machine backup\":\n\n\n\n * credit to lifewire for image\n\n\n# apple watch unlock issues\n\nfor those with apple watch unlock issues, verify the following:\n\n * you have a supported apple wireless card with bluetooth low energy(4.0+)\n * your watch and mac are signed in with the same account\n * iservices working correctly(ie. imessage)\n * there's an option to unlock with apple watch under security and privacy setting in system preferences\n\n\n\nif the above are met, and you still have unlock issues we recommend running through the below guide:\n\n * fixing auto unlock\n\n\n# 4k igpu output issues over hdmi\n\nfor machines with hdmi 2.0 capable ports with resolution issues, verify the following:\n\n * 4k output works correctly in windows\n * monitor is set explicitly to hdmi 2.0\n   * if using an hdmi to displayport converter, ensure the monitor is set to displayport 1.2 or higher\n * ensure enough igpu memory has been allocated\n   * for broadwell and newer, 64mb is expected to be allocated\n   * machines relying on whatevergreen's framebuffer-stolenmem property should know this can cause 4k output issues. please ensure you can set the igpu's memory to 64mb allowing you to remove these properties\n * laptops and many desktop users may need this boot-arg:\n   * -cdfon\n\nfor all other troubleshooting, please reference whatevergreen's intel docs",charsets:{cjk:!0}},{title:"Userspace Issues",frontmatter:{},regularPath:"/troubleshooting/extended/userspace-issues.html",relativePath:"troubleshooting/extended/userspace-issues.md",key:"v-d2375ad4",path:"/troubleshooting/extended/userspace-issues.html",headers:[{level:2,title:"macOS installer in Russian",slug:"macos-installer-in-russian",normalizedTitle:"macos installer in russian",charIndex:100},{level:2,title:"macOS Installer being damaged",slug:"macos-installer-being-damaged",normalizedTitle:"macos installer being damaged",charIndex:130},{level:2,title:"Stuck on or near IOConsoleUsers: gIOScreenLock.../gIOLockState (3...",slug:"stuck-on-or-near-ioconsoleusers-gioscreenlock-giolockstate-3",normalizedTitle:"stuck on or near ioconsoleusers: gioscreenlock.../giolockstate (3...",charIndex:163},{level:2,title:"Scrambled Screen on laptops",slug:"scrambled-screen-on-laptops",normalizedTitle:"scrambled screen on laptops",charIndex:235},{level:2,title:"Black screen after IOConsoleUsers: gIOScreenLock... on laptops and AIOs",slug:"black-screen-after-ioconsoleusers-gioscreenlock-on-laptops-and-aios",normalizedTitle:"black screen after ioconsoleusers: gioscreenlock... on laptops and aios",charIndex:266},{level:2,title:"Black screen after IOConsoleUsers: gIOScreenLock... on Navi",slug:"black-screen-after-ioconsoleusers-gioscreenlock-on-navi",normalizedTitle:"black screen after ioconsoleusers: gioscreenlock... on navi",charIndex:341},{level:2,title:"Frozen in the macOS installer after 30 seconds",slug:"frozen-in-the-macos-installer-after-30-seconds",normalizedTitle:"frozen in the macos installer after 30 seconds",charIndex:404},{level:2,title:"15h/16h CPU reboot after Data & Privacy screen",slug:"_15h-16h-cpu-reboot-after-data-privacy-screen",normalizedTitle:"15h/16h cpu reboot after data &amp; privacy screen",charIndex:null},{level:2,title:"macOS frozen right before login",slug:"macos-frozen-right-before-login",normalizedTitle:"macos frozen right before login",charIndex:504},{level:2,title:"MediaKit reports not enough space",slug:"mediakit-reports-not-enough-space",normalizedTitle:"mediakit reports not enough space",charIndex:539},{level:2,title:"DiskUtility failing to erase",slug:"diskutility-failing-to-erase",normalizedTitle:"diskutility failing to erase",charIndex:576},{level:2,title:"SATA Drives Not Shown in DiskUtility",slug:"sata-drives-not-shown-in-diskutility",normalizedTitle:"sata drives not shown in diskutility",charIndex:608},{level:2,title:"Stuck at 2 minutes remaining",slug:"stuck-at-2-minutes-remaining",normalizedTitle:"stuck at 2 minutes remaining",charIndex:648},{level:2,title:"The recovery server cannot get contacted",slug:"the-recovery-server-cannot-get-contacted",normalizedTitle:"the recovery server cannot get contacted",charIndex:680},{level:2,title:"Keyboard and Mouse broken in Big Sur",slug:"keyboard-and-mouse-broken-in-big-sur",normalizedTitle:"keyboard and mouse broken in big sur",charIndex:724},{level:2,title:"Stuck on Your Mac needs a firmware update in order to install to this volume",slug:"stuck-on-your-mac-needs-a-firmware-update-in-order-to-install-to-this-volume",normalizedTitle:"stuck on your mac needs a firmware update in order to install to this volume",charIndex:764}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"macOS installer in Russian macOS Installer being damaged Stuck on or near IOConsoleUsers: gIOScreenLock.../gIOLockState (3... Scrambled Screen on laptops Black screen after IOConsoleUsers: gIOScreenLock... on laptops and AIOs Black screen after IOConsoleUsers: gIOScreenLock... on Navi Frozen in the macOS installer after 30 seconds 15h/16h CPU reboot after Data & Privacy screen macOS frozen right before login MediaKit reports not enough space DiskUtility failing to erase SATA Drives Not Shown in DiskUtility Stuck at 2 minutes remaining The recovery server cannot get contacted Keyboard and Mouse broken in Big Sur Stuck on Your Mac needs a firmware update in order to install to this volume",content:"# Userspace Issues\n\nIssues regarding once you've booted the installer and the GUI has loaded.\n\n\n\n * macOS installer in Russian\n * macOS Installer being damaged\n * Stuck on or near IOConsoleUsers: gIOScreenLock.../gIOLockState (3...\n * Scrambled Screen on laptops\n * Black screen after IOConsoleUsers: gIOScreenLock... on laptops and AIOs\n * Black screen after IOConsoleUsers: gIOScreenLock... on Navi\n * Frozen in the macOS installer after 30 seconds\n * 15h/16h CPU reboot after Data & Privacy screen\n * macOS frozen right before login\n * MediaKit reports not enough space\n * DiskUtility failing to erase\n * SATA Drives Not Shown in DiskUtility\n * Stuck at 2 minutes remaining\n * The recovery server cannot get contacted\n * Keyboard and Mouse broken in Big Sur\n * Stuck on Your Mac needs a firmware update in order to install to this volume\n\n\n\n\n# macOS installer in Russian\n\nDefault sample config is in Russian because slavs rule the Hackintosh world, check your prev-lang:kbd value under NVRAM -> Add -> 7C436110-AB2A-4BBB-A880-FE41995C9F82. Set to 656e2d55533a30 for American: en-US:0 and a full list can be found in AppleKeyboardLayouts.txt. For those using with a simple text editor(ie. UEFI Shell, Notepad++, etc), 656e2d55533a30 will become ZW4tVVM6MA==\n\nYou may also need to reset NVRAM in the boot picker as well\n\n * Note: Thinkpad laptops are known to be semi-bricked after an NVRAM reset in OpenCore, we recommend resetting NVRAM by updating the BIOS on these machines.\n\nStill didn't work? Well time for the big guns. We'll force remove that exact property and let OpenCore rebuild it:\n\nNVRAM -> Delete -> 7C436110-AB2A-4BBB-A880-FE41995C9F82 -> Item 0 then set it Type String and Value prev-lang:kbd\n\n\n\n\n# macOS Installer being damaged\n\nIf you've download macOS before October 2019, you likely have an expired macOS Installer certificate, there's 2 ways to fix this:\n\n * Download newest copy of macOS\n * Change date in terminal to when the certificate was valid\n\nFor the latter:\n\n * Disconnect all networking devices(Ethernet, disable WiFi)\n * In the recovery terminal set to September 1st, 2019:\n\ndate 0901000019\n\n\n\n# Stuck on or near IOConsoleUsers: gIOScreenLock.../gIOLockState (3...\n\nThis is right before the GPU is properly initialized, verify the following:\n\n * GPU is UEFI capable(GTX 7XX/2013+)\n * CSM is off in the BIOS\n * Forcing PCIe 3.0 link speed\n * Double check that ig-platform-id and device-id are valid if running an iGPU.\n   * Desktop UHD 630's may need to use 00009B3E instead\n * Trying various WhateverGreen Fixes\n   * -igfxmlr boot argument. This can also manifest as a \"Divide by Zero\" error.\n * Coffee Lake iGPU users may also need igfxonln=1 in 10.15.4 and newer\n\n\n# Scrambled Screen on laptops\n\nEnable CSM in your UEFI settings. This may appear as \"Boot legacy ROMs\" or other legacy setting.\n\n\n# Black screen after IOConsoleUsers: gIOScreenLock... on laptops and AIOs\n\nVerify the following:\n\n * SSDT-PNLF is installed(ie. EFI/OC/ACPI as well as config.plist -> ACPI -> Add)\n * iGPU properties were setup correctly under DeviceProperties -> Add -> PciRoot(0x0)/Pci(0x2,0x0)\n * Coffee Lake and newer laptops, add -igfxblr to your boot-args\n   * Alternatively, add enable-backlight-registers-fix | Data | 01000000 to PciRoot(0x0)/Pci(0x2,0x0)\n\nAdditionally, verify issues mentioned in Stuck on or near IOConsoleUsers: gIOScreenLock...\n\n\n# Black screen after IOConsoleUsers: gIOScreenLock... on Navi\n\n * Add agdpmod=pikera to boot args\n * Switch between different display outputs\n * Try running MacPro7,1 SMBIOS with the boot-arg agdpmod=ignore\n\nFor MSI Navi users, you'll need to apply the patch mentioned here: Installer not working with 5700XT #901\n\nSpecifically, add the following entry under Kernel -> Patch:\n\nBase:\nComment: Navi VBIOS Bug Patch\nCount: 1\nEnabled: YES\nFind: 4154592C526F6D2300\nIdentifier: com.apple.kext.AMDRadeonX6000Framebuffer\nLimit: 0\nMask:\nMinKernel:\nMaxKernel:\nReplace: 414D442C526F6D2300\nReplaceMask:\nSkip: 0\n\n\n\n# Frozen in the macOS installer after 30 seconds\n\nThis is likely due to faulty or outright missing NullCPUPowerManagement, the one hosted on AMD OSX's Vanilla Guide is corrupted. Go yell at Shannee to fix it. To fix the issue, remove NullCPUPowerManagement from Kernel -> Add and EFI/OC/Kexts then enable DummyPowerManagement under Kernel -> Emulate\n\n\n# 15h/16h CPU reboot after Data & Privacy screen\n\nFollow directions here after UPDATE 2: Fix Data and Privacy reboot\n\n\n# macOS frozen right before login\n\nThis is a common example of screwed up TSC, for most system add CpuTscSync\n\nFor Skylake-X, many firmwares including Asus and EVGA won't write to all cores. So we'll need to reset the TSC on cold boot and wake with TSCAdjustReset. Compiled version can be found here: TSCAdjustReset.kext. Note that you must open up the kext(ShowPackageContents in finder, Contents -> Info.plist) and change the Info.plist -> IOKitPersonalities -> IOPropertyMatch -> IOCPUNumber to the number of CPU threads you have starting from 0(i9 7980xe 18 core would be 35 as it has 36 threads total)\n\nThe most common way to see the TSC issue:\n\nCASE 1   CASE 2\n         \n\n\n# MediaKit reports not enough space\n\nThis error is due to a small EFI, by default Windows will create a 100MB EFI whereas macOS will expect 200MB. To get around this you have 2 way to go:\n\n * Expand the EFI of the drive to 200MB(See Google on how)\n * Format the entire drive instead of just the partition\n   * Note by default Disk Utility only shows partitions, press Cmd/Win+2 to show all devices(Alternatively you can press the view button)\n\nDEFAULT   SHOW ALL DEVICES(CMD+2)\n          \n\n\n# DiskUtility failing to erase\n\nThis is either 1(or more) of 5 issues:\n\n * Formatting partition and not the drive, see MediaKit reports not enough space\n * DiskUtility has an odd bug where it will fail on first erase, try erasing again\n * SATA Hot-plug support in the BIOS is causing issues(try disabling this option)\n * Old firmware, make sure the drive is on the latest firmware\n * And finally, you may just have a bad drive\n\n\n# SATA Drives Not Shown in DiskUtility\n\n * Make sure SATA Mode is AHCI in bios\n * Certain SATA controllers may not be officially supported by macOS, for these cases you'll want to grab CtlnaAHCIPort.kext\n   * For very legacy SATA controllers, AHCIPortInjector.kext may be more suitable.\n\n\n# Stuck at 2 minutes remaining\n\n\n\nThis error is directly related to the stage at which macOS will write certain NVRAM variables for your system to boot next, and so when there's issues revolving around NVRAM it'll stall here.\n\nTo resolve, we have a few options:\n\n * 300 series Intel Fix(ie. Z390):\n   * SSDT-PMC\n * Others can set the following in their config.plist:\n   * LegacyEnable -> YES\n   * LegacyOverwrite -> YES\n   * WriteFlash -> YES\n\n\n# The recovery server cannot get contacted\n\nIf you made your installer in Windows or Linux, then this means your USB installer is recovery based. What this means is that only a small portion of the macOS installer is on disk while the rest must be downloaded from Apple servers in the installer. And reason we do not include full installer guides is due to unstable HFS drivers and other utilities that commonly end up with data corruption.\n\nTo resolve the error, you have a few options:\n\n * Ensure you have a working Ethernet or WiFi connection\n   * Open Network Utility under Utilties header in the installer and see if your Network Card shows up\n     * If you network card doesn't show up, it's likely you're missing the right Network kext\n       * Please refer here: Ethernet Kexts and Finding your hardware\n     * If the network card does show up, next run ping -c3 www.google.com in the installer's terminal to ensure your network connection is working\n       * If nothing shows, either your network or kexts are acting up\n         * We recommend trying older variants of kexts in cases where newer builds have weird bugs with your hardware\n       * If it does return something, then the issue is on Apple's end. You'll simply need to try to install again another time unfortunately\n\nCHECK NIC   PING\n            \n\n\n# Keyboard and Mouse broken in Big Sur\n\nFor certain legacy systems(ie. Core2 Duo/2010 and older), you may notice that while the USB ports work your HID-based devices such as the keyboard and mouse may be broken. To resolve this, add the following patch:\n\nIOHIDFamily Patch\n\nconfig.plist -> Kernel -> Patch:\n\nKEY           TYPE      VALUE\nBase          String    _isSingleUser\nCount         Integer   1\nEnabled       Boolean   True\nFind          Data      \nIdentifier    String    com.apple.iokit.IOHIDFamily\nLimit         Integer   0\nMask          Data      \nMaxKernel     String    \nMinKernel     String    20.0.0\nReplace       Data      B801000000C3\nReplaceMask   Data      \nSkip          Integer   0\n\nSource\n\n\n# Stuck on Your Mac needs a firmware update in order to install to this volume\n\nIf you're being prompted to update your firmware to install with an APFS volume, this likely indicates an outdated SMBIOS table. First, verify the following:\n\n * You have PlatformInfo -> Automatic enabled\n * UpdateSMBIOSMode is set to Create\n   * Make sure CustomSMBIOSGuid is disabled\n   * For Dell and VAIO machines, ensure that CustomSMBIOSGuid is enabled and UpdateSMBIOSMode is set to Custom instead\n     * CustomSMBIOSGuid and UpdateSMBIOSMode should always be in tandem with each other\n * Using a SMBIOS supported in this version of macOS\n   * ie. you're not using -no_compat_check\n * You're using the latest version of OpenCore\n\nIf you still receive this error, then there's likely some outdated SMBIOS info in OpenCore itself. We recommend changing to a similar SMBIOS and see if this is resolved. For a full list of SMBIOS, see here: Choosing the right SMBIOS",normalizedContent:"# userspace issues\n\nissues regarding once you've booted the installer and the gui has loaded.\n\n\n\n * macos installer in russian\n * macos installer being damaged\n * stuck on or near ioconsoleusers: gioscreenlock.../giolockstate (3...\n * scrambled screen on laptops\n * black screen after ioconsoleusers: gioscreenlock... on laptops and aios\n * black screen after ioconsoleusers: gioscreenlock... on navi\n * frozen in the macos installer after 30 seconds\n * 15h/16h cpu reboot after data & privacy screen\n * macos frozen right before login\n * mediakit reports not enough space\n * diskutility failing to erase\n * sata drives not shown in diskutility\n * stuck at 2 minutes remaining\n * the recovery server cannot get contacted\n * keyboard and mouse broken in big sur\n * stuck on your mac needs a firmware update in order to install to this volume\n\n\n\n\n# macos installer in russian\n\ndefault sample config is in russian because slavs rule the hackintosh world, check your prev-lang:kbd value under nvram -> add -> 7c436110-ab2a-4bbb-a880-fe41995c9f82. set to 656e2d55533a30 for american: en-us:0 and a full list can be found in applekeyboardlayouts.txt. for those using with a simple text editor(ie. uefi shell, notepad++, etc), 656e2d55533a30 will become zw4tvvm6ma==\n\nyou may also need to reset nvram in the boot picker as well\n\n * note: thinkpad laptops are known to be semi-bricked after an nvram reset in opencore, we recommend resetting nvram by updating the bios on these machines.\n\nstill didn't work? well time for the big guns. we'll force remove that exact property and let opencore rebuild it:\n\nnvram -> delete -> 7c436110-ab2a-4bbb-a880-fe41995c9f82 -> item 0 then set it type string and value prev-lang:kbd\n\n\n\n\n# macos installer being damaged\n\nif you've download macos before october 2019, you likely have an expired macos installer certificate, there's 2 ways to fix this:\n\n * download newest copy of macos\n * change date in terminal to when the certificate was valid\n\nfor the latter:\n\n * disconnect all networking devices(ethernet, disable wifi)\n * in the recovery terminal set to september 1st, 2019:\n\ndate 0901000019\n\n\n\n# stuck on or near ioconsoleusers: gioscreenlock.../giolockstate (3...\n\nthis is right before the gpu is properly initialized, verify the following:\n\n * gpu is uefi capable(gtx 7xx/2013+)\n * csm is off in the bios\n * forcing pcie 3.0 link speed\n * double check that ig-platform-id and device-id are valid if running an igpu.\n   * desktop uhd 630's may need to use 00009b3e instead\n * trying various whatevergreen fixes\n   * -igfxmlr boot argument. this can also manifest as a \"divide by zero\" error.\n * coffee lake igpu users may also need igfxonln=1 in 10.15.4 and newer\n\n\n# scrambled screen on laptops\n\nenable csm in your uefi settings. this may appear as \"boot legacy roms\" or other legacy setting.\n\n\n# black screen after ioconsoleusers: gioscreenlock... on laptops and aios\n\nverify the following:\n\n * ssdt-pnlf is installed(ie. efi/oc/acpi as well as config.plist -> acpi -> add)\n * igpu properties were setup correctly under deviceproperties -> add -> pciroot(0x0)/pci(0x2,0x0)\n * coffee lake and newer laptops, add -igfxblr to your boot-args\n   * alternatively, add enable-backlight-registers-fix | data | 01000000 to pciroot(0x0)/pci(0x2,0x0)\n\nadditionally, verify issues mentioned in stuck on or near ioconsoleusers: gioscreenlock...\n\n\n# black screen after ioconsoleusers: gioscreenlock... on navi\n\n * add agdpmod=pikera to boot args\n * switch between different display outputs\n * try running macpro7,1 smbios with the boot-arg agdpmod=ignore\n\nfor msi navi users, you'll need to apply the patch mentioned here: installer not working with 5700xt #901\n\nspecifically, add the following entry under kernel -> patch:\n\nbase:\ncomment: navi vbios bug patch\ncount: 1\nenabled: yes\nfind: 4154592c526f6d2300\nidentifier: com.apple.kext.amdradeonx6000framebuffer\nlimit: 0\nmask:\nminkernel:\nmaxkernel:\nreplace: 414d442c526f6d2300\nreplacemask:\nskip: 0\n\n\n\n# frozen in the macos installer after 30 seconds\n\nthis is likely due to faulty or outright missing nullcpupowermanagement, the one hosted on amd osx's vanilla guide is corrupted. go yell at shannee to fix it. to fix the issue, remove nullcpupowermanagement from kernel -> add and efi/oc/kexts then enable dummypowermanagement under kernel -> emulate\n\n\n# 15h/16h cpu reboot after data & privacy screen\n\nfollow directions here after update 2: fix data and privacy reboot\n\n\n# macos frozen right before login\n\nthis is a common example of screwed up tsc, for most system add cputscsync\n\nfor skylake-x, many firmwares including asus and evga won't write to all cores. so we'll need to reset the tsc on cold boot and wake with tscadjustreset. compiled version can be found here: tscadjustreset.kext. note that you must open up the kext(showpackagecontents in finder, contents -> info.plist) and change the info.plist -> iokitpersonalities -> iopropertymatch -> iocpunumber to the number of cpu threads you have starting from 0(i9 7980xe 18 core would be 35 as it has 36 threads total)\n\nthe most common way to see the tsc issue:\n\ncase 1   case 2\n         \n\n\n# mediakit reports not enough space\n\nthis error is due to a small efi, by default windows will create a 100mb efi whereas macos will expect 200mb. to get around this you have 2 way to go:\n\n * expand the efi of the drive to 200mb(see google on how)\n * format the entire drive instead of just the partition\n   * note by default disk utility only shows partitions, press cmd/win+2 to show all devices(alternatively you can press the view button)\n\ndefault   show all devices(cmd+2)\n          \n\n\n# diskutility failing to erase\n\nthis is either 1(or more) of 5 issues:\n\n * formatting partition and not the drive, see mediakit reports not enough space\n * diskutility has an odd bug where it will fail on first erase, try erasing again\n * sata hot-plug support in the bios is causing issues(try disabling this option)\n * old firmware, make sure the drive is on the latest firmware\n * and finally, you may just have a bad drive\n\n\n# sata drives not shown in diskutility\n\n * make sure sata mode is ahci in bios\n * certain sata controllers may not be officially supported by macos, for these cases you'll want to grab ctlnaahciport.kext\n   * for very legacy sata controllers, ahciportinjector.kext may be more suitable.\n\n\n# stuck at 2 minutes remaining\n\n\n\nthis error is directly related to the stage at which macos will write certain nvram variables for your system to boot next, and so when there's issues revolving around nvram it'll stall here.\n\nto resolve, we have a few options:\n\n * 300 series intel fix(ie. z390):\n   * ssdt-pmc\n * others can set the following in their config.plist:\n   * legacyenable -> yes\n   * legacyoverwrite -> yes\n   * writeflash -> yes\n\n\n# the recovery server cannot get contacted\n\nif you made your installer in windows or linux, then this means your usb installer is recovery based. what this means is that only a small portion of the macos installer is on disk while the rest must be downloaded from apple servers in the installer. and reason we do not include full installer guides is due to unstable hfs drivers and other utilities that commonly end up with data corruption.\n\nto resolve the error, you have a few options:\n\n * ensure you have a working ethernet or wifi connection\n   * open network utility under utilties header in the installer and see if your network card shows up\n     * if you network card doesn't show up, it's likely you're missing the right network kext\n       * please refer here: ethernet kexts and finding your hardware\n     * if the network card does show up, next run ping -c3 www.google.com in the installer's terminal to ensure your network connection is working\n       * if nothing shows, either your network or kexts are acting up\n         * we recommend trying older variants of kexts in cases where newer builds have weird bugs with your hardware\n       * if it does return something, then the issue is on apple's end. you'll simply need to try to install again another time unfortunately\n\ncheck nic   ping\n            \n\n\n# keyboard and mouse broken in big sur\n\nfor certain legacy systems(ie. core2 duo/2010 and older), you may notice that while the usb ports work your hid-based devices such as the keyboard and mouse may be broken. to resolve this, add the following patch:\n\niohidfamily patch\n\nconfig.plist -> kernel -> patch:\n\nkey           type      value\nbase          string    _issingleuser\ncount         integer   1\nenabled       boolean   true\nfind          data      \nidentifier    string    com.apple.iokit.iohidfamily\nlimit         integer   0\nmask          data      \nmaxkernel     string    \nminkernel     string    20.0.0\nreplace       data      b801000000c3\nreplacemask   data      \nskip          integer   0\n\nsource\n\n\n# stuck on your mac needs a firmware update in order to install to this volume\n\nif you're being prompted to update your firmware to install with an apfs volume, this likely indicates an outdated smbios table. first, verify the following:\n\n * you have platforminfo -> automatic enabled\n * updatesmbiosmode is set to create\n   * make sure customsmbiosguid is disabled\n   * for dell and vaio machines, ensure that customsmbiosguid is enabled and updatesmbiosmode is set to custom instead\n     * customsmbiosguid and updatesmbiosmode should always be in tandem with each other\n * using a smbios supported in this version of macos\n   * ie. you're not using -no_compat_check\n * you're using the latest version of opencore\n\nif you still receive this error, then there's likely some outdated smbios info in opencore itself. we recommend changing to a similar smbios and see if this is resolved. for a full list of smbios, see here: choosing the right smbios",charsets:{cjk:!0}},{title:"System Debugging: In-depth",frontmatter:{},regularPath:"/troubleshooting/kernel-debugging.html",relativePath:"troubleshooting/kernel-debugging.md",key:"v-28172d7c",path:"/troubleshooting/kernel-debugging.html",headers:[{level:2,title:"EFI Setup",slug:"efi-setup",normalizedTitle:"efi setup",charIndex:320},{level:2,title:"Config.plist Setup",slug:"config-plist-setup",normalizedTitle:"config.plist setup",charIndex:333},{level:3,title:"Misc",slug:"misc",normalizedTitle:"misc",charIndex:357},{level:3,title:"NVRAM",slug:"nvram",normalizedTitle:"nvram",charIndex:367},{level:2,title:"Serial Setup(Optional)",slug:"serial-setup-optional",normalizedTitle:"serial setup(optional)",charIndex:376},{level:3,title:"Hardware Setup",slug:"hardware-setup",normalizedTitle:"hardware setup",charIndex:404},{level:3,title:"CoolTerm Setup",slug:"coolterm-setup",normalizedTitle:"coolterm setup",charIndex:424},{level:2,title:"Kernel Debug Kits (Optional)",slug:"kernel-debug-kits-optional",normalizedTitle:"kernel debug kits (optional)",charIndex:442},{level:3,title:"KDK on an Installed OS",slug:"kdk-on-an-installed-os",normalizedTitle:"kdk on an installed os",charIndex:476},{level:3,title:"Uninstalling the KDK",slug:"uninstalling-the-kdk",normalizedTitle:"uninstalling the kdk",charIndex:504}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"EFI Setup Config.plist Setup Misc NVRAM Serial Setup(Optional) Hardware Setup CoolTerm Setup Kernel Debug Kits (Optional) KDK on an Installed OS Uninstalling the KDK",content:"# System Debugging: In-depth\n\nThis section will go a bit deeper into the troubleshooting rabbit hole, specifically focusing on more low level debugging with proper debug output and optional serial setup.\n\nNote: 99% of users do not need this level of debugging, this is only for the hardcore or extreme edge-cases.\n\n\n\n * EFI Setup\n * Config.plist Setup\n   * Misc\n   * NVRAM\n * Serial Setup(Optional)\n   * Hardware Setup\n   * CoolTerm Setup\n * Kernel Debug Kits (Optional)\n   * KDK on an Installed OS\n   * Uninstalling the KDK\n\n\n\n\n# EFI Setup\n\nFor most part, there's fairly minimal changes required. Main things we recommend are DEBUG version of OpenCore and all your kexts. This can help ensure you get all the necessary data, see here for more details on OpenCore debugging: OpenCore debugging\n\nBesides just using DEBUG variants of OpenCore and kexts, these tools can also help out greatly:\n\n * DebugEnhancer.kext\n   \n   * Helps greatly with kernel debugging while also patching kern.msgbuf to 10485760 and allowing a much larger kernel-log.\n   * Note this kext cannot start with kernel initialization, so early logs are not patched until the kext is loaded right before PCI Configuration Stage\n\n * SSDT-DBG\n   \n   * Enables debug statements from your ACPI tables, helping for in-OS ACPI event debugging\n   * Note you will need to compile the SSDT\n\n\n# Config.plist Setup\n\nFor serial setup, OpenCore actually makes this quite straight forward.\n\n\n# Misc\n\n# Serial\n\n * Init: YES\n   * Initializes the serial port from OpenCore\n   * Needed for sending OpenCore logging to the serial port\n\n# Debug\n\n * Target: 67\n   * Enables debug output with OpenCore\n   * Target = 75 adds the additional serial output flag(0x08) if you plan to use serial\n   * You can calculate your own value here: OpenCore debugging\n\n\n# NVRAM\n\n# boot-args\n\nHere we get to set some variables that will help us with debug output, for us we'll be using the following boot-args:\n\n-v keepsyms=1 debug=0x12a msgbuf=1048576\n\n\nNow lets go over what each arg does:\n\n * -v\n   * Enables verbose output\n * keepsyms=1\n   * Ensures symbols are kept during kernel panics, which are greatly helpful for troubleshooting\n * debug=0x12a\n   * Combination of DB_PRT (0x2), DB_KPRT (0x8), DB_SLOG (0x20), and DB_LOG_PI_SCRN (0x100)\n   * A full list of values for the latest version of XNU can be found here: debug.h\n * msgbuf=1048576\n   * Sets the kernel's message buffer size, this helps with getting proper logs during boot\n   * 1048576 is 1MB(/1024^2), can be larger if required\n   * Note not required with DebugEnhancer.kext, however for early kernel logs it's still required\n\nOther helpful boot-args:\n\nDepending on what you're debugging, you may also find these boot-args extremely helpful:\n\n * -liludbgall\n   * Enables debugging on Lilu and any other plugins, though note that this requires DEBUG versions of the kexts\n * io=0xff\n   * Enables IOKit debugging, with greater output. Be aware that the logging-amount of this parameter will be huge and will slow down the system. Especially while booting.\n * igdebug=0xff\n   * Enables iGPU related debugging, helpful when working with iGPU systems\n * serial=5\n   * Redirects output to serial if you plan to use serial\n   * Recommended for early kernel output before PCI Configuration\n * acpi_layer=0x8\n   * Enables ACPI_TABLES debug, see acoutput.h for more information\n   * 0xFFFFFFFF alternatively enables all layers\n * acpi_level=0x2\n   * Sets ACPI_LV_DEBUG_OBJECT debug, see acoutput.h for more information\n   * 0xFFFF5F alternatively implies ACPI_ALL_COMPONENTS\n\n\n# Serial Setup(Optional)\n\n * Hardware Setup\n * EFI Setup\n * Config.plist Setup\n\nWhile optional, serial can be super helpful in grabbing all the important info flooding your PC. It's also the only way to properly log super early kernel panics(such as things right after [EB|#LOG:EXITBS:START])\n\nFor this setup, you'll need a few things:\n\n * A serial header/port on the test machine\n * A serial-to-serial or serial-to-USB cable\n * A second machine to receive the serial logging(with either Serial or USB)\n * Software to monitor the serial output\n   * For this guide, we'll use CoolTerm as it supports macOS, Linux, Windows and even Raspberry Pi's\n   * screen and other methods are also supported\n\n\n# Hardware Setup\n\nFor this example, we'll be using an Asus X299-E Strix board which does have a serial header. To verify whether your board comes with one, check the owners or service manual and search for the serial/COM port:\n\n\n\nAs you can see, we have a COM port on the bottom of our motherboard and even provides us with a diagram for manually hooking up our serial pins if you're not using a 9/10 Pin Serial Header to DB9 adapter.\n\nAlternatively, some machine come with DB9 Serial ports right on the rear IO such as this Dell Optiplex 780 SFF(note that VGA and Serial are not the same connector):\n\nFor my X299 setup, I'm using a simple Serial header to DB9, then a DB9 to USB RS 232 adapter which finally terminates at my laptop:\n\nSERIAL HEADER TO DB9   DB9 TO USB RS 232 ADAPTER\n                       \n\nThe OpenCore manual generally recommends CP21202-based UART devices:\n\n> To obtain the log during boot you can make the use of serial port debugging. Serial port debugging is enabled in Target, e.g. 0xB for onscreen with serial. OpenCore uses 115200 baud rate, 8 data bits, no parity, and 1 stop bit. For macOS your best choice are CP2102-based UART devices. Connect motherboard TX to USB UART RX, and motherboard GND to USB UART GND. Use screen utility to get the output, or download GUI software, such as CoolTerm. Note: On several motherboards (and possibly USB UART dongles) PIN naming may be incorrect. It is very common to have GND swapped with RX, thus you have to connect motherboard “TX” to USB UART GND, and motherboard “GND” to USB UART RX.\n\nImportant reminder: Don't forget to also enable the serial port in your BIOS, most motherboards will disable it by default\n\n\n# CoolTerm Setup\n\nNow lets fire up CoolTerm and set a few options. When you open CoolTerm, you'll likely be greeted with a simple window. Here select the Options entry:\n\n\n\nHere we're given quite a few options, but the mains ones we care about are:\n\n * Port: Ensure this matches with your serial controller.\n * Baudrate = 115200\n * Data Bits = 8\n * Parity = none\n * Stop Bit = 1\n\nNext save these settings, and select the Connect entry. This will provide you a live log from serial:\n\n\n\nTo record, simply head to Connections -> Capture to Text/Binary File -> Start...(Cmd+R):\n\n\n\n\n# Kernel Debug Kits (Optional)\n\n * KDK on an Installed OS\n * Uninstalling the KDK\n\nKernel Debug Kits(KDKs) are a great way to get even more logging information from the kernel and core kexts, KDKs specifically are debug versions of macOS's core foundation provided from Apple themselves. They include both more logging as well as ASSERTs allowing you to more directly see issues with your setup. Note however we will not be discussing bridged debugging or lldb usage.\n\nCAUTION: Installing KDKs on work machines can lead to issues with OS updates as well as bricked installs. Please debug on dedicated macOS installs to avoid data loss\n\nTo start, we'll first need a minimum of a free developer account from Apple. Once you've signed up for a minimum of a free tier, you can now access KDKs from the More Downloads page:\n\n * Note: Free tiers will be limited to release KDKs, only beta KDKs are provided for paid developer accounts\n * Note 2: Apple hosts KDKs as far back as OS X 10.5, Leopard so don't worry about your OS not being supported\n\n\n\nTo determine which KDK build you need with beta builds, run the following in terminal:\n\nsw_vers | grep BuildVersion\n\n\nFor this, I will be downloading Kernel Debug Kit 11.3 build 20E5186d. Once downloaded, mount the disk image and you'll find the KDK installer. By default, the KDK will only install itself for \"Performing Two-Machine Debugging\" and will provide zero extra benefit on the host machine for kernel debugging by default.\n\n\n# KDK on an Installed OS\n\nTo enable debugging on the host machine, you'll need to do the following:\n\n 1. Run the KDK Install pkg\n 2. Disable SIP(OS X 10.11+)\n 3. Mount root partition as writable(macOS 10.15+)\n 4. Install debug kernel and kexts\n 5. Update boot-args\n 6. Reboot and check your work\n\n# 1. Run the KDK Install pkg\n\nSimply run the pkg as normal:\n\n\n\nOnce installed, you'll find the KDK components such as the debug kernel located at /Library/Developer/KDKs:\n\n\n\n# 2. Disabling SIP\n\n * Applicable for OS X 10.11, El Capitan and newer\n\nTo disable SIP, users have 2 choices:\n\n * Disable via Recovery\n\n * Disable via config.plist\n\nGenerally we highly recommend recovery to easily revert with NVRAM reset, however some users may require SIP to be disabled through NVRAM wipes as well.\n\nFor the former, simply reboot into macOS Recovery, open terminal and run the following:\n\ncsrutil disable\ncsrutil authenticated-root disable # Big Sur+\n\n\nReboot, and SIP will have been adjusted accordingly. You can run csrutil status in terminal to verify it worked.\n\n * CAUTION: For users relying on OpenCore's ApECID feature, please be aware this must be disabled to use the KDK.\n\n# 3. Mount root partition as writable\n\n * Applicable for macOS 10.15, Catalina and newer\n\nMounting the root volume as writable is easy, however the process is a bit long:\n\n# Big Sur+\n# First, create a mount point for your drive\nmkdir ~/livemount\n\n# Next, find your System volume\ndiskutil list\n\n# From the below list, we can see our System volume is disk5s5\n/dev/disk5 (synthesized):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      APFS Container Scheme -                      +255.7 GB   disk5\n                                 Physical Store disk4s2\n   1:                APFS Volume ⁨Big Sur HD - Data⁩       122.5 GB   disk5s1\n   2:                APFS Volume ⁨Preboot⁩                 309.4 MB   disk5s2\n   3:                APFS Volume ⁨Recovery⁩                887.8 MB   disk5s3\n   4:                APFS Volume ⁨VM⁩                      1.1 MB     disk5s4\n   5:                APFS Volume ⁨Big Sur HD⁩              16.2 GB    disk5s5\n   6:              APFS Snapshot ⁨com.apple.os.update-...⁩ 16.2 GB    disk5s5s\n\n# Mount the drive(ie. disk5s5)\nsudo mount -o nobrowse -t apfs  /dev/disk5s5 ~/livemount\n\n# Now you can freely make any edits to the System volume\n\n\n# Catalina only\nsudo mount -uw /\n\n\n# 4. Install debug kernel and kexts\n\nNow we install our KDK into the system:\n\n# Install KDK to System Volume\n# Ensure to replace <KDK Version>\n# For 10.15 and older, swap livemount with /Volumes/<Target Volume>\nsudo ditto /Library/Developer/KDKs/<KDK Version>/System ~/livemount/System\n\n# Rebuild Truethe kernel cache(Big Sur and newer)\nsudo kmutil install --volume-root ~/livemount --update-all\n\n# Rebuild the kernel cache(Catalina and older)\nsudo kextcache -invalidate /Volumes/<Target Volume>\n\n# Finally, once done editing the system volume\n# we'll want to create a new snapshot (Big Sur and newer)\nsudo bless --folder ~/livemount/System/Library/CoreServices --bootefi --create-snapshot\n\n\n# 5. Update boot-args\n\nNow that you've finished setting up the KDK and installed it, we now need to tell boot.efi which kernel to use. You have 2 options to choose from:\n\n * kcsuffix=debug (removed with Big Sur)\n * kcsuffix=development\n * kcsuffix=kasan\n\ndevelopment arg will set the new default debug kernel in Big Sur, while kasan is a much more logging intensive kernel that incorporates AddressSanitizer.\n\nOnce you've decided which kernel is ideal for you, add the kcsuffix arg to your boot-args in your config.plist\n\n# 6. Reboot and check your work\n\nAssuming everything was done correctly, you'll now want to reboot and check that the correct kernel was booted:\n\nsysctl kern.osbuildconfig\n kern.osbuildconfig: kasan\n\n\nAnd as we can see, we're successfully booting a KASAN kernel.\n\n\n# Uninstalling the KDK\n\nUninstalling the KDK is fairly simple, however can be a bit destructive if not care.\n\n 1. Mount root partition as writable(macOS 10.15+)\n 2. Remove debug kernel and kexts\n 3. Re-enable SIP\n 4. Clean boot-args\n 5. Reboot and check your work\n\nSteps:\n\n# 1. Mount root partition as writable(macOS 10.15+)\n\n# Big Sur+\n# First, create a mount point for your drive\n# Skip of still present from mounting volume last time\nmkdir ~/livemount\n\n# Next, find your System volume\ndiskutil list\n\n# From the below list, we can see our System volume is disk5s5\n/dev/disk5 (synthesized):\n   #:                       TYPE NAME                    SIZE       IDENTIFIER\n   0:      APFS Container Scheme -                      +255.7 GB   disk5\n                                 Physical Store disk4s2\n   1:                APFS Volume ⁨Big Sur HD - Data⁩       122.5 GB   disk5s1\n   2:                APFS Volume ⁨Preboot⁩                 309.4 MB   disk5s2\n   3:                APFS Volume ⁨Recovery⁩                887.8 MB   disk5s3\n   4:                APFS Volume ⁨VM⁩                      1.1 MB     disk5s4\n   5:                APFS Volume ⁨Big Sur HD⁩              16.2 GB    disk5s5\n   6:              APFS Snapshot ⁨com.apple.os.update-...⁩ 16.2 GB    disk5s5s\n\n# Mount the drive (ie. disk5s5)\nsudo mount -o nobrowse -t apfs  /dev/disk5s5 ~/livemount\n\n\n# Catalina only\nsudo mount -uw /\n\n\n# 2. Remove debug kernel and kexts\n\n# Revert to old snapshot (Big Sur+)\nsudo bless --mount ~/livemount --bootefi --last-sealed-snapshot\n\n\n# Reset kernel cache (Catalina and older)\nsudo rm /System/Library/Caches/com.apple.kext.caches/Startup/kernelcache.de*\nsudo rm /System/Library/PrelinkedKernels/prelinkedkernel.de*\nsudo kextcache -invalidate /\n\n\n# 3. Re-enable SIP\n\n * Recovery commands(if previously changed via recovery):\n\ncsrutil enable\ncsrutil authenticated-root enable # Big Sur+\n\n\n * config.plist changes(if previously changed via config.plist):\n   * Enabling via config.plist\n\n# 4. Clean boot-args\n\nDon't forget to remove kcsuffix= in your boot-args\n\n# 5. Reboot and check your work\n\nAssuming everything was done correctly, you'll now want to reboot and check that the correct kernel was booted:\n\nsysctl kern.osbuildconfig\n kern.osbuildconfig: release\n\n\nAnd as we can see, we're successfully booting a KASAN kernel.",normalizedContent:"# system debugging: in-depth\n\nthis section will go a bit deeper into the troubleshooting rabbit hole, specifically focusing on more low level debugging with proper debug output and optional serial setup.\n\nnote: 99% of users do not need this level of debugging, this is only for the hardcore or extreme edge-cases.\n\n\n\n * efi setup\n * config.plist setup\n   * misc\n   * nvram\n * serial setup(optional)\n   * hardware setup\n   * coolterm setup\n * kernel debug kits (optional)\n   * kdk on an installed os\n   * uninstalling the kdk\n\n\n\n\n# efi setup\n\nfor most part, there's fairly minimal changes required. main things we recommend are debug version of opencore and all your kexts. this can help ensure you get all the necessary data, see here for more details on opencore debugging: opencore debugging\n\nbesides just using debug variants of opencore and kexts, these tools can also help out greatly:\n\n * debugenhancer.kext\n   \n   * helps greatly with kernel debugging while also patching kern.msgbuf to 10485760 and allowing a much larger kernel-log.\n   * note this kext cannot start with kernel initialization, so early logs are not patched until the kext is loaded right before pci configuration stage\n\n * ssdt-dbg\n   \n   * enables debug statements from your acpi tables, helping for in-os acpi event debugging\n   * note you will need to compile the ssdt\n\n\n# config.plist setup\n\nfor serial setup, opencore actually makes this quite straight forward.\n\n\n# misc\n\n# serial\n\n * init: yes\n   * initializes the serial port from opencore\n   * needed for sending opencore logging to the serial port\n\n# debug\n\n * target: 67\n   * enables debug output with opencore\n   * target = 75 adds the additional serial output flag(0x08) if you plan to use serial\n   * you can calculate your own value here: opencore debugging\n\n\n# nvram\n\n# boot-args\n\nhere we get to set some variables that will help us with debug output, for us we'll be using the following boot-args:\n\n-v keepsyms=1 debug=0x12a msgbuf=1048576\n\n\nnow lets go over what each arg does:\n\n * -v\n   * enables verbose output\n * keepsyms=1\n   * ensures symbols are kept during kernel panics, which are greatly helpful for troubleshooting\n * debug=0x12a\n   * combination of db_prt (0x2), db_kprt (0x8), db_slog (0x20), and db_log_pi_scrn (0x100)\n   * a full list of values for the latest version of xnu can be found here: debug.h\n * msgbuf=1048576\n   * sets the kernel's message buffer size, this helps with getting proper logs during boot\n   * 1048576 is 1mb(/1024^2), can be larger if required\n   * note not required with debugenhancer.kext, however for early kernel logs it's still required\n\nother helpful boot-args:\n\ndepending on what you're debugging, you may also find these boot-args extremely helpful:\n\n * -liludbgall\n   * enables debugging on lilu and any other plugins, though note that this requires debug versions of the kexts\n * io=0xff\n   * enables iokit debugging, with greater output. be aware that the logging-amount of this parameter will be huge and will slow down the system. especially while booting.\n * igdebug=0xff\n   * enables igpu related debugging, helpful when working with igpu systems\n * serial=5\n   * redirects output to serial if you plan to use serial\n   * recommended for early kernel output before pci configuration\n * acpi_layer=0x8\n   * enables acpi_tables debug, see acoutput.h for more information\n   * 0xffffffff alternatively enables all layers\n * acpi_level=0x2\n   * sets acpi_lv_debug_object debug, see acoutput.h for more information\n   * 0xffff5f alternatively implies acpi_all_components\n\n\n# serial setup(optional)\n\n * hardware setup\n * efi setup\n * config.plist setup\n\nwhile optional, serial can be super helpful in grabbing all the important info flooding your pc. it's also the only way to properly log super early kernel panics(such as things right after [eb|#log:exitbs:start])\n\nfor this setup, you'll need a few things:\n\n * a serial header/port on the test machine\n * a serial-to-serial or serial-to-usb cable\n * a second machine to receive the serial logging(with either serial or usb)\n * software to monitor the serial output\n   * for this guide, we'll use coolterm as it supports macos, linux, windows and even raspberry pi's\n   * screen and other methods are also supported\n\n\n# hardware setup\n\nfor this example, we'll be using an asus x299-e strix board which does have a serial header. to verify whether your board comes with one, check the owners or service manual and search for the serial/com port:\n\n\n\nas you can see, we have a com port on the bottom of our motherboard and even provides us with a diagram for manually hooking up our serial pins if you're not using a 9/10 pin serial header to db9 adapter.\n\nalternatively, some machine come with db9 serial ports right on the rear io such as this dell optiplex 780 sff(note that vga and serial are not the same connector):\n\nfor my x299 setup, i'm using a simple serial header to db9, then a db9 to usb rs 232 adapter which finally terminates at my laptop:\n\nserial header to db9   db9 to usb rs 232 adapter\n                       \n\nthe opencore manual generally recommends cp21202-based uart devices:\n\n> to obtain the log during boot you can make the use of serial port debugging. serial port debugging is enabled in target, e.g. 0xb for onscreen with serial. opencore uses 115200 baud rate, 8 data bits, no parity, and 1 stop bit. for macos your best choice are cp2102-based uart devices. connect motherboard tx to usb uart rx, and motherboard gnd to usb uart gnd. use screen utility to get the output, or download gui software, such as coolterm. note: on several motherboards (and possibly usb uart dongles) pin naming may be incorrect. it is very common to have gnd swapped with rx, thus you have to connect motherboard “tx” to usb uart gnd, and motherboard “gnd” to usb uart rx.\n\nimportant reminder: don't forget to also enable the serial port in your bios, most motherboards will disable it by default\n\n\n# coolterm setup\n\nnow lets fire up coolterm and set a few options. when you open coolterm, you'll likely be greeted with a simple window. here select the options entry:\n\n\n\nhere we're given quite a few options, but the mains ones we care about are:\n\n * port: ensure this matches with your serial controller.\n * baudrate = 115200\n * data bits = 8\n * parity = none\n * stop bit = 1\n\nnext save these settings, and select the connect entry. this will provide you a live log from serial:\n\n\n\nto record, simply head to connections -> capture to text/binary file -> start...(cmd+r):\n\n\n\n\n# kernel debug kits (optional)\n\n * kdk on an installed os\n * uninstalling the kdk\n\nkernel debug kits(kdks) are a great way to get even more logging information from the kernel and core kexts, kdks specifically are debug versions of macos's core foundation provided from apple themselves. they include both more logging as well as asserts allowing you to more directly see issues with your setup. note however we will not be discussing bridged debugging or lldb usage.\n\ncaution: installing kdks on work machines can lead to issues with os updates as well as bricked installs. please debug on dedicated macos installs to avoid data loss\n\nto start, we'll first need a minimum of a free developer account from apple. once you've signed up for a minimum of a free tier, you can now access kdks from the more downloads page:\n\n * note: free tiers will be limited to release kdks, only beta kdks are provided for paid developer accounts\n * note 2: apple hosts kdks as far back as os x 10.5, leopard so don't worry about your os not being supported\n\n\n\nto determine which kdk build you need with beta builds, run the following in terminal:\n\nsw_vers | grep buildversion\n\n\nfor this, i will be downloading kernel debug kit 11.3 build 20e5186d. once downloaded, mount the disk image and you'll find the kdk installer. by default, the kdk will only install itself for \"performing two-machine debugging\" and will provide zero extra benefit on the host machine for kernel debugging by default.\n\n\n# kdk on an installed os\n\nto enable debugging on the host machine, you'll need to do the following:\n\n 1. run the kdk install pkg\n 2. disable sip(os x 10.11+)\n 3. mount root partition as writable(macos 10.15+)\n 4. install debug kernel and kexts\n 5. update boot-args\n 6. reboot and check your work\n\n# 1. run the kdk install pkg\n\nsimply run the pkg as normal:\n\n\n\nonce installed, you'll find the kdk components such as the debug kernel located at /library/developer/kdks:\n\n\n\n# 2. disabling sip\n\n * applicable for os x 10.11, el capitan and newer\n\nto disable sip, users have 2 choices:\n\n * disable via recovery\n\n * disable via config.plist\n\ngenerally we highly recommend recovery to easily revert with nvram reset, however some users may require sip to be disabled through nvram wipes as well.\n\nfor the former, simply reboot into macos recovery, open terminal and run the following:\n\ncsrutil disable\ncsrutil authenticated-root disable # big sur+\n\n\nreboot, and sip will have been adjusted accordingly. you can run csrutil status in terminal to verify it worked.\n\n * caution: for users relying on opencore's apecid feature, please be aware this must be disabled to use the kdk.\n\n# 3. mount root partition as writable\n\n * applicable for macos 10.15, catalina and newer\n\nmounting the root volume as writable is easy, however the process is a bit long:\n\n# big sur+\n# first, create a mount point for your drive\nmkdir ~/livemount\n\n# next, find your system volume\ndiskutil list\n\n# from the below list, we can see our system volume is disk5s5\n/dev/disk5 (synthesized):\n   #:                       type name                    size       identifier\n   0:      apfs container scheme -                      +255.7 gb   disk5\n                                 physical store disk4s2\n   1:                apfs volume ⁨big sur hd - data⁩       122.5 gb   disk5s1\n   2:                apfs volume ⁨preboot⁩                 309.4 mb   disk5s2\n   3:                apfs volume ⁨recovery⁩                887.8 mb   disk5s3\n   4:                apfs volume ⁨vm⁩                      1.1 mb     disk5s4\n   5:                apfs volume ⁨big sur hd⁩              16.2 gb    disk5s5\n   6:              apfs snapshot ⁨com.apple.os.update-...⁩ 16.2 gb    disk5s5s\n\n# mount the drive(ie. disk5s5)\nsudo mount -o nobrowse -t apfs  /dev/disk5s5 ~/livemount\n\n# now you can freely make any edits to the system volume\n\n\n# catalina only\nsudo mount -uw /\n\n\n# 4. install debug kernel and kexts\n\nnow we install our kdk into the system:\n\n# install kdk to system volume\n# ensure to replace <kdk version>\n# for 10.15 and older, swap livemount with /volumes/<target volume>\nsudo ditto /library/developer/kdks/<kdk version>/system ~/livemount/system\n\n# rebuild truethe kernel cache(big sur and newer)\nsudo kmutil install --volume-root ~/livemount --update-all\n\n# rebuild the kernel cache(catalina and older)\nsudo kextcache -invalidate /volumes/<target volume>\n\n# finally, once done editing the system volume\n# we'll want to create a new snapshot (big sur and newer)\nsudo bless --folder ~/livemount/system/library/coreservices --bootefi --create-snapshot\n\n\n# 5. update boot-args\n\nnow that you've finished setting up the kdk and installed it, we now need to tell boot.efi which kernel to use. you have 2 options to choose from:\n\n * kcsuffix=debug (removed with big sur)\n * kcsuffix=development\n * kcsuffix=kasan\n\ndevelopment arg will set the new default debug kernel in big sur, while kasan is a much more logging intensive kernel that incorporates addresssanitizer.\n\nonce you've decided which kernel is ideal for you, add the kcsuffix arg to your boot-args in your config.plist\n\n# 6. reboot and check your work\n\nassuming everything was done correctly, you'll now want to reboot and check that the correct kernel was booted:\n\nsysctl kern.osbuildconfig\n kern.osbuildconfig: kasan\n\n\nand as we can see, we're successfully booting a kasan kernel.\n\n\n# uninstalling the kdk\n\nuninstalling the kdk is fairly simple, however can be a bit destructive if not care.\n\n 1. mount root partition as writable(macos 10.15+)\n 2. remove debug kernel and kexts\n 3. re-enable sip\n 4. clean boot-args\n 5. reboot and check your work\n\nsteps:\n\n# 1. mount root partition as writable(macos 10.15+)\n\n# big sur+\n# first, create a mount point for your drive\n# skip of still present from mounting volume last time\nmkdir ~/livemount\n\n# next, find your system volume\ndiskutil list\n\n# from the below list, we can see our system volume is disk5s5\n/dev/disk5 (synthesized):\n   #:                       type name                    size       identifier\n   0:      apfs container scheme -                      +255.7 gb   disk5\n                                 physical store disk4s2\n   1:                apfs volume ⁨big sur hd - data⁩       122.5 gb   disk5s1\n   2:                apfs volume ⁨preboot⁩                 309.4 mb   disk5s2\n   3:                apfs volume ⁨recovery⁩                887.8 mb   disk5s3\n   4:                apfs volume ⁨vm⁩                      1.1 mb     disk5s4\n   5:                apfs volume ⁨big sur hd⁩              16.2 gb    disk5s5\n   6:              apfs snapshot ⁨com.apple.os.update-...⁩ 16.2 gb    disk5s5s\n\n# mount the drive (ie. disk5s5)\nsudo mount -o nobrowse -t apfs  /dev/disk5s5 ~/livemount\n\n\n# catalina only\nsudo mount -uw /\n\n\n# 2. remove debug kernel and kexts\n\n# revert to old snapshot (big sur+)\nsudo bless --mount ~/livemount --bootefi --last-sealed-snapshot\n\n\n# reset kernel cache (catalina and older)\nsudo rm /system/library/caches/com.apple.kext.caches/startup/kernelcache.de*\nsudo rm /system/library/prelinkedkernels/prelinkedkernel.de*\nsudo kextcache -invalidate /\n\n\n# 3. re-enable sip\n\n * recovery commands(if previously changed via recovery):\n\ncsrutil enable\ncsrutil authenticated-root enable # big sur+\n\n\n * config.plist changes(if previously changed via config.plist):\n   * enabling via config.plist\n\n# 4. clean boot-args\n\ndon't forget to remove kcsuffix= in your boot-args\n\n# 5. reboot and check your work\n\nassuming everything was done correctly, you'll now want to reboot and check that the correct kernel was booted:\n\nsysctl kern.osbuildconfig\n kern.osbuildconfig: release\n\n\nand as we can see, we're successfully booting a kasan kernel.",charsets:{cjk:!0}},{title:"General Troubleshooting",frontmatter:{},regularPath:"/troubleshooting/troubleshooting.html",relativePath:"troubleshooting/troubleshooting.md",key:"v-7c34b9d6",path:"/troubleshooting/troubleshooting.html",headers:[{level:2,title:"Table of Contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:510}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Table of Contents",content:"# General Troubleshooting\n\nThis section is for those having issues booting either OpenCore, macOS or having issues inside macOS. If you're confused as to where exactly in the macOS boot process you're stuck, reading the macOS Boot Process page can help clarify things.\n\nAnd if your issue is not covered, please read the official OpenCore documentation: Configuration.pdf. This document goes into much more technical detail around how OpenCore works and has much more detailed info on all supported quirks.\n\n\n# Table of Contents\n\nIf you're unsure where you're currently stuck, please see here: Understanding the macOS Boot Process\n\n * OpenCore Boot Issues\n   * This section refers to booting the actual USB and getting to OpenCore's picker. Anything after the picker, like booting macOS, should see below\n * Kernelspace Issues\n   * Covering everything that many occur in early boot from the moment you select macOS in the OpenCore menu, till the point right before the Apple logo and the installer GUI loads\n * Userspace Issues\n   * Covering the process from loading macOS's GUI to installing macOS on the drive\n * Post-Install Issues\n   * Covering issues once macOS has been installed and is fully booted\n * Miscellaneous Issues\n   * Covering issues after macOS's installation or with other OSes",normalizedContent:"# general troubleshooting\n\nthis section is for those having issues booting either opencore, macos or having issues inside macos. if you're confused as to where exactly in the macos boot process you're stuck, reading the macos boot process page can help clarify things.\n\nand if your issue is not covered, please read the official opencore documentation: configuration.pdf. this document goes into much more technical detail around how opencore works and has much more detailed info on all supported quirks.\n\n\n# table of contents\n\nif you're unsure where you're currently stuck, please see here: understanding the macos boot process\n\n * opencore boot issues\n   * this section refers to booting the actual usb and getting to opencore's picker. anything after the picker, like booting macos, should see below\n * kernelspace issues\n   * covering everything that many occur in early boot from the moment you select macos in the opencore menu, till the point right before the apple logo and the installer gui loads\n * userspace issues\n   * covering the process from loading macos's gui to installing macos on the drive\n * post-install issues\n   * covering issues once macos has been installed and is fully booted\n * miscellaneous issues\n   * covering issues after macos's installation or with other oses",charsets:{}},{title:"为什么是OpenCore胜过Clover和其他",frontmatter:{},regularPath:"/why-oc.html",relativePath:"why-oc.md",key:"v-19ea0ab0",path:"/why-oc.html",headers:[{level:2,title:"OpenCore特性",slug:"opencore特性",normalizedTitle:"opencore特性",charIndex:103},{level:3,title:"软件支持",slug:"软件支持",normalizedTitle:"软件支持",charIndex:119},{level:2,title:"OpenCore的缺点",slug:"opencore的缺点",normalizedTitle:"opencore的缺点",charIndex:127},{level:2,title:"常见的流言",slug:"常见的流言",normalizedTitle:"常见的流言",charIndex:142},{level:3,title:"OpenCore是否因为测试版而不稳定?",slug:"opencore是否因为测试版而不稳定",normalizedTitle:"opencore是否因为测试版而不稳定?",charIndex:153},{level:3,title:"OpenCore是否总是向其他操作系统注入SMBIOS和ACPI数据?",slug:"opencore是否总是向其他操作系统注入smbios和acpi数据",normalizedTitle:"opencore是否总是向其他操作系统注入smbios和acpi数据?",charIndex:179},{level:3,title:"OpenCore需要重新安装吗?",slug:"opencore需要重新安装吗",normalizedTitle:"opencore需要重新安装吗?",charIndex:220},{level:3,title:"OpenCore只支持有限版本的macOS吗?",slug:"opencore只支持有限版本的macos吗",normalizedTitle:"opencore只支持有限版本的macos吗?",charIndex:242},{level:3,title:"OpenCore支持旧的硬件吗?",slug:"opencore支持旧的硬件吗",normalizedTitle:"opencore支持旧的硬件吗?",charIndex:271},{level:3,title:"OpenCore支持Windows/Linux启动吗?",slug:"opencore支持windows-linux启动吗",normalizedTitle:"opencore支持windows/linux启动吗?",charIndex:293},{level:3,title:"黑苹果的合法性",slug:"黑苹果的合法性",normalizedTitle:"黑苹果的合法性",charIndex:326},{level:3,title:"macOS支持NVIDIA显卡吗?",slug:"macos支持nvidia显卡吗",normalizedTitle:"macos支持nvidia显卡吗?",charIndex:339}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"OpenCore特性 软件支持 OpenCore的缺点 常见的流言 OpenCore是否因为测试版而不稳定? OpenCore是否总是向其他操作系统注入SMBIOS和ACPI数据? OpenCore需要重新安装吗? OpenCore只支持有限版本的macOS吗? OpenCore支持旧的硬件吗? OpenCore支持Windows/Linux启动吗? 黑苹果的合法性 macOS支持NVIDIA显卡吗?",content:"# 为什么是OpenCore胜过Clover和其他\n\n本节包含了为什么社区一直过渡到OpenCore的简要概述，并旨在消除社区中的一些常见神话。那些只想要一台macOS机器的人可以跳过这一页。\n\n\n\n * OpenCore特性\n   * 软件支持\n * OpenCore的缺点\n * 常见的流言\n   * OpenCore是否因为测试版而不稳定?\n   * OpenCore是否总是向其他操作系统注入SMBIOS和ACPI数据?\n   * OpenCore需要重新安装吗?\n   * OpenCore只支持有限版本的macOS吗?\n   * OpenCore支持旧的硬件吗?\n   * OpenCore支持Windows/Linux启动吗?\n   * 黑苹果的合法性\n   * macOS支持NVIDIA显卡吗?\n\n\n\n\n# OpenCore特性\n\n * 更多操作系统支持!\n   * OpenCore现在支持更多版本的OS X和macOS，而无需Clover和Chameleon必须实现的痛苦hack\n   * 这包括操作系统10.4：Tiger，甚至是最新版本13：Ventura!\n * 平均而言，OpenCore系统的启动速度比使用Clover的系统更快，因为不必要的补丁较少\n * 更好的整体稳定性，因为补丁可以更精确:\n   * macOS 10.15.4更新\n   * AMD OSX补丁不需要更新每一个次要的安全更新\n * 更好的总体安全在许多形式:\n   * 无需禁用系统完整性保护(SIP)\n   * 内置文件保险箱2支持\n   * 保险箱 允许创建EFI快照，防止不必要的修改\n   * 跳跃的\n     * 无论是UEFI还是Apple的变体\n * 通过读取启动盘设置的NVRAM变量，支持BootCamp切换和启动设备选择，就像真正的Mac一样。\n * 通过boot.efi支持引导热键-在启动时按住Option或ESC选择启动设备，Cmd+R进入恢复或Cmd+Opt+P+R重置NVRAM。\n\n\n# 软件支持\n\n有人可能想从其他引导加载程序切换的最大原因实际上是软件支持:\n\n * Kext不再测试Clover:\n   * kext出问题了?许多开发人员，包括Acidanthera组织(您最喜欢的kext的制造商)不会提供支持，除非在OpenCore上\n * 许多固件驱动程序被合并到OpenCore:\n   * APFS支持\n   * 文件保险箱支持\n   * 固件补丁\n\n\n# OpenCore的缺点\n\nClover的大部分功能实际上在OpenCore中以一些quick的形式得到支持，但是在过渡时，您应该密切关注OpenCore缺失的功能，因为这可能会影响您自己:\n\n * 不支持启动基于MBR的操作系统\n   * 解决办法是在OpenCore中链加载rEFInd一次\n * 不支持基于UEFI的VBIOS补丁\n   * 这可以在macOS中完成\n * 不支持旧显卡的自动DeviceProperty注入\n   * ie. InjectIntel, InjectNVIDIA and InjectAti\n   * 不支持旧显卡的自动DeviceProperty注入 显卡补丁\n * 不支持IRQ冲突补丁\n   * 可以用SSDTTime解决\n * 不支持旧CPU的P和C状态生成\n * 不支持硬件UUID注入\n * 不支持许多Clover的XCPM补丁\n   * 例如Ivy Bridge XCPM补丁\n * 不支持隐藏特定驱动器\n * 不支持在OpenCore菜单中更改设置\n * 不修补PCIRoot UID值\n * 不支持macOS专用的ACPI补丁\n\n\n# 常见的流言\n\n\n# OpenCore是否因为测试版而不稳定?\n\n短回答：否\n\n长回答：否\n\nOpenCore的版本号并不代表项目的质量。相反，它更像是一种看到项目垫脚石的方式。Acidanthera仍然有很多他们想做的项目，包括整体改进和更多的功能支持。\n\n例如，OpenCore通过适当的安全审计，以确保其符合UEFI安全引导，并且是唯一一个经过严格审查并获得此类支持的黑苹果引导加载程序。\n\n版本0.6.1最初被设计为OpenCore的官方版本，因为它将有适当的UEFI/Apple安全引导，并且将是OpenCore作为公共工具发布一周年。然而，由于macOS Big Sur的情况，以及为了支持它而重写OpenCore的预链接器，决定将1.0.0再推迟一年。\n\n目前的路线图:\n\n * 2019：测试\n * 2020：安全启动\n * 2021：细化\n\n因此，请不要将版本号视为障碍，而应将其视为值得期待的东西。\n\n\n# OpenCore是否总是向其他操作系统注入SMBIOS和ACPI数据?\n\n默认情况下，OpenCore将假定所有操作系统在ACPI和SMBIOS信息方面应该被平等对待。这种想法的原因包括三个部分:\n\n * 这允许适当的多引导支持，像BootCamp\n * 避免制作不良的DSDT，并鼓励正确的ACPI实践\n * 避免信息被多次注入的边缘情况，这在Clover中很常见\n   * 比如：您将如何处理SMBIOS和ACPI数据注入，一旦您启动boot.efi，然后被踢出？更改已经在内存中，因此试图撤销它们可能非常危险。这就是为什么Clover的方法不受欢迎。\n\n然而，在OpenCore中有一些怪癖，允许SMBIOS注入受到macOS的限制，通过修补macOS从哪里读取SMBIOS信息。CustomSMBIOSMode设置为Custom时使用CustomSMIOSGuidquirk将来可能会中断，因此我们只建议在其他操作系统中某些软件中断的情况下使用此选项。为了最好的稳定性，请禁用这些怪癖。\n\n\n# OpenCore需要重新安装吗?\n\n如果你的安装是“普通”的，那就完全不一样了——这指的是操作系统是否以任何方式被篡改了，比如在系统卷中安装了第三方文本，或者苹果不支持的其他修改。当您的系统被严重篡改时，无论是您还是第三方工具(如Hackintool)，我们建议重新安装，以避免任何潜在的问题。\n\nClover用户特别注意:安装OpenCore时请重置NVRAM。许多Clover变量可能与OpenCore和macOS冲突。\n\n * 注意:Thinkpad笔记本电脑在OpenCore中重置NVRAM后是半砖的，我们建议通过更新这些机器上的BIOS来重置NVRAM。\n\n\n# OpenCore只支持有限版本的macOS吗?\n\n从OpenCore 0.6.2开始，你现在可以启动每一个Intel版本的macOS，一直到OS X 10.4!然而，适当的支持取决于您的硬件，所以请自己验证:硬件限制\n\nmacOS安装画廊\n\nAcidanthera已经测试了很多版本，我自己也在我的旧HP DC 7900 (Core2 Quad Q8300)上运行了很多版本的OS X。这里只是我测试过的一个小画廊:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# OpenCore支持旧的硬件吗?\n\n到目前为止，只要操作系统本身支持，大多数英特尔硬件都是支持的!但是，请参阅硬件限制页面了解更多关于OS X/macOS版本支持哪些硬件的信息。\n\n目前，英特尔的Yonah和更新的系列cpu已经在OpenCore上进行了适当的测试。\n\n\n# OpenCore支持Windows/Linux启动吗?\n\nOpenCore将自动检测Windows，无需任何额外配置。在OpenCore 0.7.3中，OpenLinuxBoot作为EFI驱动程序被添加到OpenCore中，它将自动检测Linux分区。这需要ext4_x64.efi或btrfs_x64.efi，具体取决于它在您的发行版中使用的格式。对于引导加载程序具有不规则路径或名称的任何操作系统，您可以简单地将其添加到BlessOverride部分。\n\n\n# 黑苹果的合法性\n\n黑苹果处于法律的灰色地带，主要是因为虽然这并不违法，但我们实际上违反了EULA。这并不违法的原因是:\n\n * 我们从苹果服务器直接下载macOS\n * 我们是作为一个非营利性的教学和个人使用的组织\n   * 计划使用黑苹果工作或想要转售的人应该参考Psystar案例和他们的地区法律\n\n虽然EULA规定macOS只能安装在真正的Mac或在真正的Mac上运行的虚拟机上(第2B-i和2B-iii节)，但没有强制执行的法律完全禁止这一点。然而，重新打包和修改macOS安装程序的网站确实存在潜在DMCA删除风险等问题。\n\n * 注意: 这不是法律建议，所以如果你有任何担忧，请自己做出适当的评估，并与你的律师讨论。\n\n\n# macOS支持NVIDIA显卡吗?\n\n由于在新版本的macOS中围绕NVIDIA支持的问题，许多用户得出的结论是macOS从不支持NVIDIA 显卡。在Monterey Beta 7发布之前，苹果一直支持搭载NVIDIA显卡的Mac(比如2013年搭载Kepler显卡的MacBook Pro)。虽然有社区制作的补丁来恢复支持，但它们需要禁用SIP(系统完整性保护)，从而禁用macOS中的重要安全功能。\n\n另一个问题与任何更新的NVIDIA显卡有关，因为苹果公司停止了与它们一起出货的机器，因此它们从未获得苹果公司的官方操作系统支持。相反，用户不得不依赖NVIDIA的第三方驱动程序。由于苹果新推出的安全启动的问题，他们不能再支持网络驱动程序，因此NVIDIA不能在更新的平台上发布它们，将它们限制在macOS 10.13, High Sierra。\n\n有关操作系统支持的更多信息，请参阅这里:显卡购买指南",normalizedContent:"# 为什么是opencore胜过clover和其他\n\n本节包含了为什么社区一直过渡到opencore的简要概述，并旨在消除社区中的一些常见神话。那些只想要一台macos机器的人可以跳过这一页。\n\n\n\n * opencore特性\n   * 软件支持\n * opencore的缺点\n * 常见的流言\n   * opencore是否因为测试版而不稳定?\n   * opencore是否总是向其他操作系统注入smbios和acpi数据?\n   * opencore需要重新安装吗?\n   * opencore只支持有限版本的macos吗?\n   * opencore支持旧的硬件吗?\n   * opencore支持windows/linux启动吗?\n   * 黑苹果的合法性\n   * macos支持nvidia显卡吗?\n\n\n\n\n# opencore特性\n\n * 更多操作系统支持!\n   * opencore现在支持更多版本的os x和macos，而无需clover和chameleon必须实现的痛苦hack\n   * 这包括操作系统10.4：tiger，甚至是最新版本13：ventura!\n * 平均而言，opencore系统的启动速度比使用clover的系统更快，因为不必要的补丁较少\n * 更好的整体稳定性，因为补丁可以更精确:\n   * macos 10.15.4更新\n   * amd osx补丁不需要更新每一个次要的安全更新\n * 更好的总体安全在许多形式:\n   * 无需禁用系统完整性保护(sip)\n   * 内置文件保险箱2支持\n   * 保险箱 允许创建efi快照，防止不必要的修改\n   * 跳跃的\n     * 无论是uefi还是apple的变体\n * 通过读取启动盘设置的nvram变量，支持bootcamp切换和启动设备选择，就像真正的mac一样。\n * 通过boot.efi支持引导热键-在启动时按住option或esc选择启动设备，cmd+r进入恢复或cmd+opt+p+r重置nvram。\n\n\n# 软件支持\n\n有人可能想从其他引导加载程序切换的最大原因实际上是软件支持:\n\n * kext不再测试clover:\n   * kext出问题了?许多开发人员，包括acidanthera组织(您最喜欢的kext的制造商)不会提供支持，除非在opencore上\n * 许多固件驱动程序被合并到opencore:\n   * apfs支持\n   * 文件保险箱支持\n   * 固件补丁\n\n\n# opencore的缺点\n\nclover的大部分功能实际上在opencore中以一些quick的形式得到支持，但是在过渡时，您应该密切关注opencore缺失的功能，因为这可能会影响您自己:\n\n * 不支持启动基于mbr的操作系统\n   * 解决办法是在opencore中链加载refind一次\n * 不支持基于uefi的vbios补丁\n   * 这可以在macos中完成\n * 不支持旧显卡的自动deviceproperty注入\n   * ie. injectintel, injectnvidia and injectati\n   * 不支持旧显卡的自动deviceproperty注入 显卡补丁\n * 不支持irq冲突补丁\n   * 可以用ssdttime解决\n * 不支持旧cpu的p和c状态生成\n * 不支持硬件uuid注入\n * 不支持许多clover的xcpm补丁\n   * 例如ivy bridge xcpm补丁\n * 不支持隐藏特定驱动器\n * 不支持在opencore菜单中更改设置\n * 不修补pciroot uid值\n * 不支持macos专用的acpi补丁\n\n\n# 常见的流言\n\n\n# opencore是否因为测试版而不稳定?\n\n短回答：否\n\n长回答：否\n\nopencore的版本号并不代表项目的质量。相反，它更像是一种看到项目垫脚石的方式。acidanthera仍然有很多他们想做的项目，包括整体改进和更多的功能支持。\n\n例如，opencore通过适当的安全审计，以确保其符合uefi安全引导，并且是唯一一个经过严格审查并获得此类支持的黑苹果引导加载程序。\n\n版本0.6.1最初被设计为opencore的官方版本，因为它将有适当的uefi/apple安全引导，并且将是opencore作为公共工具发布一周年。然而，由于macos big sur的情况，以及为了支持它而重写opencore的预链接器，决定将1.0.0再推迟一年。\n\n目前的路线图:\n\n * 2019：测试\n * 2020：安全启动\n * 2021：细化\n\n因此，请不要将版本号视为障碍，而应将其视为值得期待的东西。\n\n\n# opencore是否总是向其他操作系统注入smbios和acpi数据?\n\n默认情况下，opencore将假定所有操作系统在acpi和smbios信息方面应该被平等对待。这种想法的原因包括三个部分:\n\n * 这允许适当的多引导支持，像bootcamp\n * 避免制作不良的dsdt，并鼓励正确的acpi实践\n * 避免信息被多次注入的边缘情况，这在clover中很常见\n   * 比如：您将如何处理smbios和acpi数据注入，一旦您启动boot.efi，然后被踢出？更改已经在内存中，因此试图撤销它们可能非常危险。这就是为什么clover的方法不受欢迎。\n\n然而，在opencore中有一些怪癖，允许smbios注入受到macos的限制，通过修补macos从哪里读取smbios信息。customsmbiosmode设置为custom时使用customsmiosguidquirk将来可能会中断，因此我们只建议在其他操作系统中某些软件中断的情况下使用此选项。为了最好的稳定性，请禁用这些怪癖。\n\n\n# opencore需要重新安装吗?\n\n如果你的安装是“普通”的，那就完全不一样了——这指的是操作系统是否以任何方式被篡改了，比如在系统卷中安装了第三方文本，或者苹果不支持的其他修改。当您的系统被严重篡改时，无论是您还是第三方工具(如hackintool)，我们建议重新安装，以避免任何潜在的问题。\n\nclover用户特别注意:安装opencore时请重置nvram。许多clover变量可能与opencore和macos冲突。\n\n * 注意:thinkpad笔记本电脑在opencore中重置nvram后是半砖的，我们建议通过更新这些机器上的bios来重置nvram。\n\n\n# opencore只支持有限版本的macos吗?\n\n从opencore 0.6.2开始，你现在可以启动每一个intel版本的macos，一直到os x 10.4!然而，适当的支持取决于您的硬件，所以请自己验证:硬件限制\n\nmacos安装画廊\n\nacidanthera已经测试了很多版本，我自己也在我的旧hp dc 7900 (core2 quad q8300)上运行了很多版本的os x。这里只是我测试过的一个小画廊:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# opencore支持旧的硬件吗?\n\n到目前为止，只要操作系统本身支持，大多数英特尔硬件都是支持的!但是，请参阅硬件限制页面了解更多关于os x/macos版本支持哪些硬件的信息。\n\n目前，英特尔的yonah和更新的系列cpu已经在opencore上进行了适当的测试。\n\n\n# opencore支持windows/linux启动吗?\n\nopencore将自动检测windows，无需任何额外配置。在opencore 0.7.3中，openlinuxboot作为efi驱动程序被添加到opencore中，它将自动检测linux分区。这需要ext4_x64.efi或btrfs_x64.efi，具体取决于它在您的发行版中使用的格式。对于引导加载程序具有不规则路径或名称的任何操作系统，您可以简单地将其添加到blessoverride部分。\n\n\n# 黑苹果的合法性\n\n黑苹果处于法律的灰色地带，主要是因为虽然这并不违法，但我们实际上违反了eula。这并不违法的原因是:\n\n * 我们从苹果服务器直接下载macos\n * 我们是作为一个非营利性的教学和个人使用的组织\n   * 计划使用黑苹果工作或想要转售的人应该参考psystar案例和他们的地区法律\n\n虽然eula规定macos只能安装在真正的mac或在真正的mac上运行的虚拟机上(第2b-i和2b-iii节)，但没有强制执行的法律完全禁止这一点。然而，重新打包和修改macos安装程序的网站确实存在潜在dmca删除风险等问题。\n\n * 注意: 这不是法律建议，所以如果你有任何担忧，请自己做出适当的评估，并与你的律师讨论。\n\n\n# macos支持nvidia显卡吗?\n\n由于在新版本的macos中围绕nvidia支持的问题，许多用户得出的结论是macos从不支持nvidia 显卡。在monterey beta 7发布之前，苹果一直支持搭载nvidia显卡的mac(比如2013年搭载kepler显卡的macbook pro)。虽然有社区制作的补丁来恢复支持，但它们需要禁用sip(系统完整性保护)，从而禁用macos中的重要安全功能。\n\n另一个问题与任何更新的nvidia显卡有关，因为苹果公司停止了与它们一起出货的机器，因此它们从未获得苹果公司的官方操作系统支持。相反，用户不得不依赖nvidia的第三方驱动程序。由于苹果新推出的安全启动的问题，他们不能再支持网络驱动程序，因此nvidia不能在更新的平台上发布它们，将它们限制在macos 10.13, high sierra。\n\n有关操作系统支持的更多信息，请参阅这里:显卡购买指南",charsets:{cjk:!0}},{title:"查找你的硬件",frontmatter:{},regularPath:"/find-hardware.html",relativePath:"find-hardware.md",key:"v-5f1eef94",path:"/find-hardware.html",headers:[{level:2,title:"使用Windows查找你的硬件",slug:"使用windows查找你的硬件",normalizedTitle:"使用windows查找你的硬件",charIndex:132},{level:3,title:"CPU型号",slug:"cpu型号",normalizedTitle:"cpu型号",charIndex:153},{level:3,title:"显卡型号",slug:"显卡型号",normalizedTitle:"显卡型号",charIndex:164},{level:3,title:"芯片组型号",slug:"芯片组型号",normalizedTitle:"芯片组型号",charIndex:174},{level:3,title:"键盘，触控板和触摸屏连接类型",slug:"键盘-触控板和触摸屏连接类型",normalizedTitle:"键盘，触控板和触摸屏连接类型",charIndex:185},{level:3,title:"音频编解码器",slug:"音频编解码器",normalizedTitle:"音频编解码器",charIndex:205},{level:3,title:"网络控制器型号",slug:"网络控制器型号",normalizedTitle:"网络控制器型号",charIndex:217},{level:3,title:"磁盘型号",slug:"磁盘型号",normalizedTitle:"磁盘型号",charIndex:230},{level:2,title:"使用Linux查找你的硬件",slug:"使用linux查找你的硬件",normalizedTitle:"使用linux查找你的硬件",charIndex:238},{level:3,title:"CPU型号",slug:"cpu型号-2",normalizedTitle:"cpu型号",charIndex:153},{level:3,title:"显卡型号",slug:"显卡型号-2",normalizedTitle:"显卡型号",charIndex:164},{level:3,title:"芯片组型号",slug:"芯片组型号-2",normalizedTitle:"芯片组型号",charIndex:174},{level:3,title:"键盘，触控板和触摸屏连接类型",slug:"键盘-触控板和触摸屏连接类型-2",normalizedTitle:"键盘，触控板和触摸屏连接类型",charIndex:185},{level:3,title:"音频编解码器",slug:"音频编解码器-2",normalizedTitle:"音频编解码器",charIndex:205},{level:3,title:"网络控制器型号",slug:"网络控制器型号-2",normalizedTitle:"网络控制器型号",charIndex:217},{level:3,title:"磁盘型号",slug:"磁盘型号-2",normalizedTitle:"磁盘型号",charIndex:230},{level:2,title:"使用OCSysInfo查找硬件",slug:"使用ocsysinfo查找硬件",normalizedTitle:"使用ocsysinfo查找硬件",charIndex:342},{level:3,title:"发现硬件",slug:"发现硬件",normalizedTitle:"发现硬件",charIndex:363},{level:3,title:"CPU型号",slug:"cpu型号-3",normalizedTitle:"cpu型号",charIndex:153},{level:3,title:"显卡型号",slug:"显卡型号-3",normalizedTitle:"显卡型号",charIndex:164},{level:3,title:"键盘和触控板连接类型",slug:"键盘和触控板连接类型",normalizedTitle:"键盘和触控板连接类型",charIndex:394},{level:3,title:"音频编解码器",slug:"音频编解码器-3",normalizedTitle:"音频编解码器",charIndex:205},{level:3,title:"网卡型号",slug:"网卡型号",normalizedTitle:"网卡型号",charIndex:422},{level:3,title:"磁盘型号",slug:"磁盘型号-3",normalizedTitle:"磁盘型号",charIndex:230}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"使用Windows查找你的硬件 CPU型号 显卡型号 芯片组型号 键盘，触控板和触摸屏连接类型 音频编解码器 网络控制器型号 磁盘型号 使用Linux查找你的硬件 CPU型号 显卡型号 芯片组型号 键盘，触控板和触摸屏连接类型 音频编解码器 网络控制器型号 磁盘型号 使用OCSysInfo查找硬件 发现硬件 CPU型号 显卡型号 键盘和触控板连接类型 音频编解码器 网卡型号 磁盘型号",content:"# 查找你的硬件\n\n本节主要是一个关于如何找到当前正在运行的硬件的迷你指南;这主要与笔记本电脑和预构建用户相关，因为硬件规格更难获得。如果你已经知道你有什么硬件，你可以跳过这一页，转到创建USB。\n\n为此，我们假设您安装了Windows或Linux:\n\n\n\n * 使用Windows查找你的硬件\n   * CPU型号\n   * 显卡型号\n   * 芯片组型号\n   * 键盘，触控板和触摸屏连接类型\n   * 音频编解码器\n   * 网络控制器型号\n   * 磁盘型号\n * 使用Linux查找你的硬件\n   * CPU型号\n   * 显卡型号\n   * 芯片组型号\n   * 键盘，触控板和触摸屏连接类型\n   * 音频编解码器\n   * 网络控制器型号\n   * 磁盘型号\n * 使用OCSysInfo查找硬件\n   * 发现硬件\n   * CPU型号\n   * 显卡型号\n   * 键盘和触控板连接类型\n   * 音频编解码器\n   * 网卡型号\n   * 磁盘型号\n\n\n\n\n# 使用Windows查找你的硬件\n\n为此，我们主要有2种选择:\n\n * Windows的内置设备管理器\n * AIDA64\n\n由于更容易使用GUI，我们建议下载AIDA64并运行它，因为它更容易获取规格。但是，我们将向您展示获取硬件规格的两种方法。\n\n\n# CPU型号\n\nAIDA64   设备管理器\n         \n\n\n# 显卡型号\n\nAIDA64   设备管理器\n         \n\n\n# 芯片组型号\n\nAIDA64   设备管理器\n         \n\n * 注意:基于英特尔SOC的CPU将在同一芯片上拥有芯片组和其他功能，而不是专用芯片。这意味着试图检测确切的芯片组有点困难\n\n\n# 键盘，触控板和触摸屏连接类型\n\n设备管理器\n\n\n遗憾的是，AIDA64没有提供任何有关指针设备的有用信息，因此我们建议使用设备管理器。\n\n * 你可以在下面找到这些设备:\n   \n   * 人体学接口设备（HID）\n   * 键盘\n   * 鼠标和其他指针设备\n\n * 要查看设备的确切连接类型，请选择指针设备，然后进入查看 -> 按连接列出设备。这将澄清它是否通过PS2, I2C, SMBus, USB等\n\n根据设备的不同，它可能显示在多个名称和连接下。需要关注的主要问题有:\n\nSMBus\n\n这些将显示为一个直接的PCI设备，如' Synaptics SMBus Driver '或' ELAN SMBus Driver '\n\n * Synaptics设备将显示在PS2下的Synaptics PS2 device/Synaptics Pointing Device和PCI下的Synaptics SMBus Driver\n\n\n\n正如你所看到的，我们在左边的图像中得到了2个Synaptics设备，但是如果我们仔细观察，我们会发现顶部的设备是PS2，而底部的是SMBus。虽然你可以在任何一种模式下使用触控板，但SMBus通常提供更好的手势支持和准确性。\n\nUSB\n\n按类型列出的设备   按连接方式划分的设备\n           \n\n这些将显示为PS2兼容的触控板，当我们将连接视图切换到设备连接时，也会显示在USB下。\n\nI2C\n\n它们几乎总是显示为一个Microsoft HID device，但也可以显示为其他触控板。但它们总是会在I2C下出现。\n\n\n# 音频编解码器\n\nAIDA64   设备管理器\n         \n\n由于某些OEM提供设备名称的方式，您使用设备管理器获得最准确信息的方法是通过PCI ID(如pci 14F1, 50F4)。这意味着你需要搜索ID并找出确切的设备ID。但是AIDA64可以正确地呈现名称，这对最终用户来说相当容易。\n\n\n# 网络控制器型号\n\nAIDA64   设备管理器\n         \n\n由于某些oem提供设备名称的方式，您可以通过设备管理器获得最准确的信息是通过PCI ID(例如PCI\\VEN_14E4&DEV_43A0 对应于供应商ID14E4和设备ID43A0)。这意味着你需要谷歌ID并找出确切的设备ID;然而，AIDA64可以正确地呈现名称，这可能会容易得多。\n\n\n# 磁盘型号\n\nAIDA64   设备管理器\n         \n\n由于OEM没有提供有关驱动器的详细信息，您需要Google一下哪个驱动器与显示的名称匹配。\n\n\n# 使用Linux查找你的硬件\n\n为了使用Linux查找硬件，我们将使用一些工具:\n\n * pciutils\n * dmidecode\n\n下面是要在终端中运行的命令列表，值得庆幸的是，大多数Linux发行版都已经安装了这些工具。如果没有，您可能会在发行版的包管理器中找到它们。\n\n\n# CPU型号\n\ngrep -i \"model name\" /proc/cpuinfo\n\n\n\n# 显卡型号\n\nlspci | grep -i --color \"vga\\|3d\\|2d\"\n\n\n\n# 芯片组型号\n\ndmidecode -t baseboard\n\n\n\n# 键盘，触控板和触摸屏连接类型\n\ndmesg | grep -i input\n\n\n\n# 音频编解码器\n\naplay -l\n\n\n\n# 网络控制器型号\n\n基本信息:\n\nlspci | grep -i network\n\n\n更深入的信息:\n\nlshw -class network\n\n\n\n# 磁盘型号\n\nlshw -class disk -class storage\n\n\n\n# 使用OCSysInfo查找硬件\n\n获取和运行OCSysInfo有两种方法:\n\n * 预编译的二进制文件\n * 手动克隆存储库\n\n提示\n\n我们建议您下载二进制文件, 因为这是最简单和最容易的方法。\n\n如果您想了解更多关于手动克隆存储库的信息，可以查看OCSysInfo[指南]。(https://github.com/KernelWanderers/OCSysInfo/tree/main/mini-guide).\n\n\n# 发现硬件\n\n警告\n\n笔记本电脑用户:在我们开始之前，我们建议您断开任何外部USB设备，因为这可能导致模棱两可或不必要的信息收集，可能会使您感到困惑。\n\n成功安装并运行应用程序后，您应该看到以下屏幕:\n\n\n\n从这里，你可以输入d，然后按ENTER/RETURN，之后，你应该会看到一个类似的屏幕:\n\n\n\n\n# CPU型号\n\n\n\n除了CPU型号，它还列出了CPU的代号、支持的最高SSE版本和SSSE3可用性。\n\n\n# 显卡型号\n\n\n\n在这种情况下，机器有两个显卡:\n\n * 核芯显卡 (Intel UHD Graphics 630)\n * 独立显卡 (AMD Radeon R9 390X)\n\n除了模型名称外，它还列出了显卡的代号，ACPI和PCI路径，随着您在黑苹果旅程中的进展，您可能很快就会发现这些有大用处。\n\n\n# 键盘和触控板连接类型\n\nSMBus触控板\n\n触控板: SMBus\n键盘: PS/2\n\nThatCopy提供图片\n\nI2C触控板\n\n触控板: I2C\n键盘: PS/2\n\nMahas提供图片\n\nPS/2 触控板\n\n触控板: PS/2\n键盘: PS/2\n\nTasty0提供图片\n\n\n# 音频编解码器\n\n\n\n\n# 网卡型号\n\n\n\n\n# 磁盘型号\n\n",normalizedContent:"# 查找你的硬件\n\n本节主要是一个关于如何找到当前正在运行的硬件的迷你指南;这主要与笔记本电脑和预构建用户相关，因为硬件规格更难获得。如果你已经知道你有什么硬件，你可以跳过这一页，转到创建usb。\n\n为此，我们假设您安装了windows或linux:\n\n\n\n * 使用windows查找你的硬件\n   * cpu型号\n   * 显卡型号\n   * 芯片组型号\n   * 键盘，触控板和触摸屏连接类型\n   * 音频编解码器\n   * 网络控制器型号\n   * 磁盘型号\n * 使用linux查找你的硬件\n   * cpu型号\n   * 显卡型号\n   * 芯片组型号\n   * 键盘，触控板和触摸屏连接类型\n   * 音频编解码器\n   * 网络控制器型号\n   * 磁盘型号\n * 使用ocsysinfo查找硬件\n   * 发现硬件\n   * cpu型号\n   * 显卡型号\n   * 键盘和触控板连接类型\n   * 音频编解码器\n   * 网卡型号\n   * 磁盘型号\n\n\n\n\n# 使用windows查找你的硬件\n\n为此，我们主要有2种选择:\n\n * windows的内置设备管理器\n * aida64\n\n由于更容易使用gui，我们建议下载aida64并运行它，因为它更容易获取规格。但是，我们将向您展示获取硬件规格的两种方法。\n\n\n# cpu型号\n\naida64   设备管理器\n         \n\n\n# 显卡型号\n\naida64   设备管理器\n         \n\n\n# 芯片组型号\n\naida64   设备管理器\n         \n\n * 注意:基于英特尔soc的cpu将在同一芯片上拥有芯片组和其他功能，而不是专用芯片。这意味着试图检测确切的芯片组有点困难\n\n\n# 键盘，触控板和触摸屏连接类型\n\n设备管理器\n\n\n遗憾的是，aida64没有提供任何有关指针设备的有用信息，因此我们建议使用设备管理器。\n\n * 你可以在下面找到这些设备:\n   \n   * 人体学接口设备（hid）\n   * 键盘\n   * 鼠标和其他指针设备\n\n * 要查看设备的确切连接类型，请选择指针设备，然后进入查看 -> 按连接列出设备。这将澄清它是否通过ps2, i2c, smbus, usb等\n\n根据设备的不同，它可能显示在多个名称和连接下。需要关注的主要问题有:\n\nsmbus\n\n这些将显示为一个直接的pci设备，如' synaptics smbus driver '或' elan smbus driver '\n\n * synaptics设备将显示在ps2下的synaptics ps2 device/synaptics pointing device和pci下的synaptics smbus driver\n\n\n\n正如你所看到的，我们在左边的图像中得到了2个synaptics设备，但是如果我们仔细观察，我们会发现顶部的设备是ps2，而底部的是smbus。虽然你可以在任何一种模式下使用触控板，但smbus通常提供更好的手势支持和准确性。\n\nusb\n\n按类型列出的设备   按连接方式划分的设备\n           \n\n这些将显示为ps2兼容的触控板，当我们将连接视图切换到设备连接时，也会显示在usb下。\n\ni2c\n\n它们几乎总是显示为一个microsoft hid device，但也可以显示为其他触控板。但它们总是会在i2c下出现。\n\n\n# 音频编解码器\n\naida64   设备管理器\n         \n\n由于某些oem提供设备名称的方式，您使用设备管理器获得最准确信息的方法是通过pci id(如pci 14f1, 50f4)。这意味着你需要搜索id并找出确切的设备id。但是aida64可以正确地呈现名称，这对最终用户来说相当容易。\n\n\n# 网络控制器型号\n\naida64   设备管理器\n         \n\n由于某些oem提供设备名称的方式，您可以通过设备管理器获得最准确的信息是通过pci id(例如pci\\ven_14e4&dev_43a0 对应于供应商id14e4和设备id43a0)。这意味着你需要谷歌id并找出确切的设备id;然而，aida64可以正确地呈现名称，这可能会容易得多。\n\n\n# 磁盘型号\n\naida64   设备管理器\n         \n\n由于oem没有提供有关驱动器的详细信息，您需要google一下哪个驱动器与显示的名称匹配。\n\n\n# 使用linux查找你的硬件\n\n为了使用linux查找硬件，我们将使用一些工具:\n\n * pciutils\n * dmidecode\n\n下面是要在终端中运行的命令列表，值得庆幸的是，大多数linux发行版都已经安装了这些工具。如果没有，您可能会在发行版的包管理器中找到它们。\n\n\n# cpu型号\n\ngrep -i \"model name\" /proc/cpuinfo\n\n\n\n# 显卡型号\n\nlspci | grep -i --color \"vga\\|3d\\|2d\"\n\n\n\n# 芯片组型号\n\ndmidecode -t baseboard\n\n\n\n# 键盘，触控板和触摸屏连接类型\n\ndmesg | grep -i input\n\n\n\n# 音频编解码器\n\naplay -l\n\n\n\n# 网络控制器型号\n\n基本信息:\n\nlspci | grep -i network\n\n\n更深入的信息:\n\nlshw -class network\n\n\n\n# 磁盘型号\n\nlshw -class disk -class storage\n\n\n\n# 使用ocsysinfo查找硬件\n\n获取和运行ocsysinfo有两种方法:\n\n * 预编译的二进制文件\n * 手动克隆存储库\n\n提示\n\n我们建议您下载二进制文件, 因为这是最简单和最容易的方法。\n\n如果您想了解更多关于手动克隆存储库的信息，可以查看ocsysinfo[指南]。(https://github.com/kernelwanderers/ocsysinfo/tree/main/mini-guide).\n\n\n# 发现硬件\n\n警告\n\n笔记本电脑用户:在我们开始之前，我们建议您断开任何外部usb设备，因为这可能导致模棱两可或不必要的信息收集，可能会使您感到困惑。\n\n成功安装并运行应用程序后，您应该看到以下屏幕:\n\n\n\n从这里，你可以输入d，然后按enter/return，之后，你应该会看到一个类似的屏幕:\n\n\n\n\n# cpu型号\n\n\n\n除了cpu型号，它还列出了cpu的代号、支持的最高sse版本和ssse3可用性。\n\n\n# 显卡型号\n\n\n\n在这种情况下，机器有两个显卡:\n\n * 核芯显卡 (intel uhd graphics 630)\n * 独立显卡 (amd radeon r9 390x)\n\n除了模型名称外，它还列出了显卡的代号，acpi和pci路径，随着您在黑苹果旅程中的进展，您可能很快就会发现这些有大用处。\n\n\n# 键盘和触控板连接类型\n\nsmbus触控板\n\n触控板: smbus\n键盘: ps/2\n\nthatcopy提供图片\n\ni2c触控板\n\n触控板: i2c\n键盘: ps/2\n\nmahas提供图片\n\nps/2 触控板\n\n触控板: ps/2\n键盘: ps/2\n\ntasty0提供图片\n\n\n# 音频编解码器\n\n\n\n\n# 网卡型号\n\n\n\n\n# 磁盘型号\n\n",charsets:{cjk:!0}},{title:"macOS 13: Ventura",frontmatter:{},regularPath:"/extras/ventura.html",relativePath:"extras/ventura.md",key:"v-2b0aa648",path:"/extras/ventura.html",headers:[{level:2,title:"Table of Contents",slug:"table-of-contents",normalizedTitle:"table of contents",charIndex:24},{level:2,title:"Prerequisites",slug:"prerequisites",normalizedTitle:"prerequisites",charIndex:69},{level:3,title:"Dropped CPU Support",slug:"dropped-cpu-support",normalizedTitle:"dropped cpu support",charIndex:88},{level:3,title:"Supported SMBIOS",slug:"supported-smbios",normalizedTitle:"supported smbios",charIndex:113},{level:3,title:"Supported hardware",slug:"supported-hardware",normalizedTitle:"supported hardware",charIndex:135},{level:3,title:"AMD Patches",slug:"amd-patches",normalizedTitle:"amd patches",charIndex:159}],lastUpdated:"9/17/2023, 12:47:54 PM",lastUpdatedTimestamp:1694954874e3,headersStr:"Table of Contents Prerequisites Dropped CPU Support Supported SMBIOS Supported hardware AMD Patches",content:"# macOS 13: Ventura\n\n\n# Table of Contents\n\n\n\n * Table of Contents\n * Prerequisites\n   * Dropped CPU Support\n   * Supported SMBIOS\n   * Supported hardware\n   * AMD Patches\n\n\n\n\n# Prerequisites\n\n\n# Dropped CPU Support\n\nmacOS Ventura drops support for pre-Haswell CPUs. Much of userspace now requires AVX2 support, along with AMD Polaris GPU drivers and some instances of AVX2 instructions in some kexts. Although the kexts can be patched or downgraded, the Polaris GPU drivers and most of userspace rely on AVX2 too much to be able to be patched.\n\nApple has left a dyld cache that does not use AVX2 instructions in Ventura to support Rosetta on Apple Silicon machines, but this cache is not installed by default. You can use CryptexFixup to force this dyld cache to be installed, but:\n\n * Apple may remove this cache at any time in the future if they add AVX2 support to Rosetta\n * Delta updates (small 1-3GB updates) will no longer be available and you must install the full update (12GB), as delta updates only contain the non-AVX2 cache on Apple Silicon machines\n * Polaris GPUs remain unsupported on machines without AVX2\n\nBecause of these caveats, Dortania will no longer be supporting pre-Haswell CPUs for Ventura and above. The pages for these CPUs will remain updated for Monterey.\n\n\n# Supported SMBIOS\n\nSMBIOS dropped in Ventura:\n\n * iMac17,x and older\n * Macmini7,1 and older\n * MacBook9,1 and older\n * MacBookAir7,x and older\n * MacBookPro13,x and older\n * MacPro6,1 and older\n\nIf your SMBIOS was supported in Monterey and is not included above, you're good to go!\n\nSupported SMBIOS\n * iMac18,x and newer\n * MacPro7,1 and newer\n * iMacPro1,1 and newer\n * Macmini8,1\n * MacBook10,1\n * MacBookAir8,1 and newer\n * MacBookPro14,x and newer\n\nClick here for a full list of supported SMBIOS.\n\nFor those on architectures no longer supported by Ventura:\n\n * All desktops with dGPUs should use iMac18,2, MacPro7,1 or iMacPro1,1. Unsupported GPUs still require OCLP, while supported GPUs do not.\n * All desktops with unsupported iGPUs should use iMac18,1.\n * All unsupported laptops (Haswell, Broadwell, Skylake) should use MacBookPro14,1.\n\n\n# Supported hardware\n\nDropped GPU Hardware:\n\n * Haswell (HD 4200/4400/4600/5000/P4600/P4700, Iris 5100, Iris Pro 5200)\n\n * Broadwell (HD 5300/5500/5600/6000/P5700, Iris 6100, Iris Pro 6200/P6300)\n\n * Skylake (HD 5xx/P5xx, Iris 5xx, Iris Pro 5xx/P5xx)\n   \n   * Skylake can be spoofed as Kaby Lake with WhateverGreen v1.6.1 and up\n   * Change your device-id and AAPL,ig-platform-id to the most similar Kaby Lake model\n   * If using the same EFI to boot Monterey and below, add -igfxsklaskbl to your boot args\n\n * You can use OpenCore-Legacy-Patcher to add back support\n   \n   * No support is provided for Hackintoshes using OCLP!\n   * You will lose access to non-full updates (Small 1-3GB updates)\n   * Requires SIP, Apple Secure Boot, and AMFI disabled.\n\n\n# AMD Patches\n\nFor those on AMD CPUs, make sure to update your kernel patches for Ventura. Don't forget to update your patches as well with the core count of your CPU. The patches which need to be edited are all named algrey - Force cpuid_cores_per_package, and you only need to change the Replace value. You should change:\n\n * B8000000 0000 => B8 <core count> 0000 0000\n * BA000000 0000 => BA <core count> 0000 0000\n * BA000000 0090 => BA <core count> 0000 0090\n\nWhere <core count> is replaced with the physical core count of your CPU in hexadecimal. For example, an 8-Core 5800X would have the new Replace value be:\n\n * B8 08 0000 0000\n * BA 08 0000 0000\n * BA 08 0000 0090\n\nCore Count => Hexadecimal Table\n\nCORE COUNT   HEXADECIMAL\n4 Core       04\n6 Core       06\n8 Core       08\n12 Core      0C\n16 Core      10\n24 Core      18\n32 Core      20\n64 Core      40",normalizedContent:"# macos 13: ventura\n\n\n# table of contents\n\n\n\n * table of contents\n * prerequisites\n   * dropped cpu support\n   * supported smbios\n   * supported hardware\n   * amd patches\n\n\n\n\n# prerequisites\n\n\n# dropped cpu support\n\nmacos ventura drops support for pre-haswell cpus. much of userspace now requires avx2 support, along with amd polaris gpu drivers and some instances of avx2 instructions in some kexts. although the kexts can be patched or downgraded, the polaris gpu drivers and most of userspace rely on avx2 too much to be able to be patched.\n\napple has left a dyld cache that does not use avx2 instructions in ventura to support rosetta on apple silicon machines, but this cache is not installed by default. you can use cryptexfixup to force this dyld cache to be installed, but:\n\n * apple may remove this cache at any time in the future if they add avx2 support to rosetta\n * delta updates (small 1-3gb updates) will no longer be available and you must install the full update (12gb), as delta updates only contain the non-avx2 cache on apple silicon machines\n * polaris gpus remain unsupported on machines without avx2\n\nbecause of these caveats, dortania will no longer be supporting pre-haswell cpus for ventura and above. the pages for these cpus will remain updated for monterey.\n\n\n# supported smbios\n\nsmbios dropped in ventura:\n\n * imac17,x and older\n * macmini7,1 and older\n * macbook9,1 and older\n * macbookair7,x and older\n * macbookpro13,x and older\n * macpro6,1 and older\n\nif your smbios was supported in monterey and is not included above, you're good to go!\n\nsupported smbios\n * imac18,x and newer\n * macpro7,1 and newer\n * imacpro1,1 and newer\n * macmini8,1\n * macbook10,1\n * macbookair8,1 and newer\n * macbookpro14,x and newer\n\nclick here for a full list of supported smbios.\n\nfor those on architectures no longer supported by ventura:\n\n * all desktops with dgpus should use imac18,2, macpro7,1 or imacpro1,1. unsupported gpus still require oclp, while supported gpus do not.\n * all desktops with unsupported igpus should use imac18,1.\n * all unsupported laptops (haswell, broadwell, skylake) should use macbookpro14,1.\n\n\n# supported hardware\n\ndropped gpu hardware:\n\n * haswell (hd 4200/4400/4600/5000/p4600/p4700, iris 5100, iris pro 5200)\n\n * broadwell (hd 5300/5500/5600/6000/p5700, iris 6100, iris pro 6200/p6300)\n\n * skylake (hd 5xx/p5xx, iris 5xx, iris pro 5xx/p5xx)\n   \n   * skylake can be spoofed as kaby lake with whatevergreen v1.6.1 and up\n   * change your device-id and aapl,ig-platform-id to the most similar kaby lake model\n   * if using the same efi to boot monterey and below, add -igfxsklaskbl to your boot args\n\n * you can use opencore-legacy-patcher to add back support\n   \n   * no support is provided for hackintoshes using oclp!\n   * you will lose access to non-full updates (small 1-3gb updates)\n   * requires sip, apple secure boot, and amfi disabled.\n\n\n# amd patches\n\nfor those on amd cpus, make sure to update your kernel patches for ventura. don't forget to update your patches as well with the core count of your cpu. the patches which need to be edited are all named algrey - force cpuid_cores_per_package, and you only need to change the replace value. you should change:\n\n * b8000000 0000 => b8 <core count> 0000 0000\n * ba000000 0000 => ba <core count> 0000 0000\n * ba000000 0090 => ba <core count> 0000 0090\n\nwhere <core count> is replaced with the physical core count of your cpu in hexadecimal. for example, an 8-core 5800x would have the new replace value be:\n\n * b8 08 0000 0000\n * ba 08 0000 0000\n * ba 08 0000 0090\n\ncore count => hexadecimal table\n\ncore count   hexadecimal\n4 core       04\n6 core       06\n8 core       08\n12 core      0c\n16 core      10\n24 core      18\n32 core      20\n64 core      40",charsets:{}}],themeConfig:{lastUpdated:!0,lastUpdatedText:"最后更新",repo:"https://github.com/xuanxuan1231/OpenCore-Install-Guide",editLinks:!0,editLinkText:"帮助我们改进此页！",logo:"/homepage.png",nav:[{text:"Dortania指南翻译",items:[{text:"主页",link:"https://xuanxuan1231.github.io/"},{text:"ACPI入门",link:"https://xuanxuan1231.github.io/Getting-Started-With-ACPI/"},{text:"OpenCore安装后",link:"https://xuanxuan1231.github.io/OpenCore-Post-Install/"},{text:"OpenCore多重引导",link:"https://xuanxuan1231.github.io/OpenCore-Multiboot/"},{text:"显卡购买指南",link:"https://xuanxuan1231.github.io/GPU-Buyers-Guide/"},{text:"无线网卡购买指南",link:"https://xuanxuan1231.github.io/Wireless-Buyers-Guide/"},{text:"购买踩坑指南",link:"https://xuanxuan1231.github.io/Anti-Hackintosh-Buyers-Guide/"}]}],sidebar:[{title:"介绍",collapsable:!1,sidebarDepth:1,children:["prerequisites","macos-limits","find-hardware","terminology","why-oc"]},{title:"USB创建",collapsable:!1,sidebarDepth:2,children:[{title:"创建USB",collapsable:!0,path:"/installer-guide/",sidebarDepth:1,children:["/installer-guide/mac-install","/installer-guide/windows-install","/installer-guide/linux-install"]},"/installer-guide/opencore-efi","ktext",["https://xuanxuan1231.github.io/Getting-Started-With-ACPI/","ACPI入门"],"/config.plist/"]},{title:"配置",collapsable:!1,children:[{title:"Intel台式机config.plist",collapsable:!0,sidebarDepth:1,children:[["/config.plist/penryn","Penryn"],["/config.plist/clarkdale","Clarkdale"],["/config.plist/sandy-bridge","Sandy Bridge"],["/config.plist/ivy-bridge","Ivy Bridge"],["/config.plist/haswell","Haswell"],["/config.plist/skylake","Skylake"],["/config.plist/kaby-lake","Kaby Lake"],["/config.plist/coffee-lake","Coffee Lake"],["/config.plist/comet-lake","Comet Lake"]]},{title:"Intel笔记本config.plist",collapsable:!0,sidebarDepth:1,children:[["/config-laptop.plist/arrandale","Arrandale"],["/config-laptop.plist/sandy-bridge","Sandy Bridge"],["/config-laptop.plist/ivy-bridge","Ivy Bridge"],["/config-laptop.plist/haswell","Haswell"],["/config-laptop.plist/broadwell","Broadwell"],["/config-laptop.plist/skylake","Skylake"],["/config-laptop.plist/kaby-lake","Kaby Lake"],["/config-laptop.plist/coffee-lake","Coffee Lake and Whiskey Lake"],["/config-laptop.plist/coffee-lake-plus","Coffee Lake Plus and Comet Lake"],["/config-laptop.plist/icelake","Ice Lake"]]},{title:"Intel HEDT config.plist",collapsable:!0,sidebarDepth:1,children:["/config-HEDT/nehalem","/config-HEDT/ivy-bridge-e","/config-HEDT/haswell-e","/config-HEDT/broadwell-e","/config-HEDT/skylake-x"]},{title:"AMD台式机config.plist",collapsable:!0,sidebarDepth:1,children:["/AMD/fx","/AMD/zen"]},["/config.plist/security","Apple安全启动"]]},{title:"安装",collapsable:!1,children:["/installation/installation-process"]},{title:"排错",collapsable:!1,children:["/troubleshooting/troubleshooting",{title:"",collapsable:!1,children:["/troubleshooting/extended/opencore-issues","/troubleshooting/extended/kernel-issues","/troubleshooting/extended/userspace-issues","/troubleshooting/extended/post-issues","/troubleshooting/extended/misc-issues"]},"/troubleshooting/debug","/troubleshooting/boot","/troubleshooting/kernel-debugging"]},{title:"安装后",collapsable:!1,children:[["https://xuanxuan1231.github.io/OpenCore-Post-Install/","安装后"],{title:"通用",collapsable:!0,sidebarDepth:1,children:[["https://xuanxuan1231.github.io/OpenCore-Post-Install/universal/security","安全性和文件保险箱"],["https://xuanxuan1231.github.io/OpenCore-Post-Install/universal/audio","修复音频"],["https://xuanxuan1231.github.io/OpenCore-Post-Install/universal/oc2hdd","不用USB引导"],["https://xuanxuan1231.github.io/OpenCore-Post-Install/universal/update","更新OpenCore，内核扩展和macOS"],["https://xuanxuan1231.github.io/OpenCore-Post-Install/universal/drm","修复DRM"],["https://xuanxuan1231.github.io/OpenCore-Post-Install/universal/iservices","修复i服务"],["https://xuanxuan1231.github.io/OpenCore-Post-Install/universal/pm","修复电源管理"],["https://xuanxuan1231.github.io/OpenCore-Post-Install/universal/sleep","修复睡眠"],["https://xuanxuan1231.github.io/OpenCore-Post-Install/usb/","修复USB"]]},{title:"笔记本的特殊性",collapsable:!0,children:[["https://xuanxuan1231.github.io/OpenCore-Post-Install/laptop-specific/battery","修复电池读数"]]},{title:"美化",collapsable:!0,children:[["https://xuanxuan1231.github.io/OpenCore-Post-Install/cosmetic/verbose","修复分辨率和啰嗦模式"],["https://xuanxuan1231.github.io/OpenCore-Post-Install/cosmetic/gui","添加GUI和引导铃声"]]},{title:"多重引导",collapsable:!0,children:[["https://xuanxuan1231.github.io/OpenCore-Multiboot/","OpenCore Multiboot"],["https://xuanxuan1231.github.io/OpenCore-Post-Install/multiboot/bootstrap","设置启动器选项"],["https://xuanxuan1231.github.io/OpenCore-Post-Install/multiboot/bootcamp","安装BootCamp"]]},{title:"其他",collapsable:!0,children:[["https://xuanxuan1231.github.io/OpenCore-Post-Install/misc/rtc","修复RTC"],["https://xuanxuan1231.github.io/OpenCore-Post-Install/misc/msr-lock","修复CFG锁"],["https://xuanxuan1231.github.io/OpenCore-Post-Install/misc/nvram","模拟NVRAM"]]}]},{title:"Extras",collapsable:!1,sidebarDepth:2,children:["/extras/kaslr-fix","/extras/spoof","/extras/ventura",["https://github.com/xuanxuan1231/OpenCore-Install-Guide/tree/master/clover-conversion","Clover Conversion"],"/extras/smbios-support.md"]},{title:"Misc",collapsable:!1,children:["CONTRIBUTING","/misc/credit"]}]}};t(238);Kt.component("Badge",()=>Promise.all([t.e(0),t.e(6)]).then(t.bind(null,565))),Kt.component("ThemeManager",()=>t.e(7).then(t.bind(null,564))),Kt.component("Badge",()=>Promise.all([t.e(0),t.e(62)]).then(t.bind(null,640))),Kt.component("CodeBlock",()=>Promise.all([t.e(0),t.e(4)]).then(t.bind(null,560))),Kt.component("CodeGroup",()=>Promise.all([t.e(0),t.e(5)]).then(t.bind(null,561)));t(239);var Yr={name:"BackToTop",props:{threshold:{type:Number,default:300}},data:()=>({scrollTop:null}),computed:{show(){return this.scrollTop>this.threshold}},mounted(){this.scrollTop=this.getScrollTop(),window.addEventListener("scroll",Sr()(()=>{this.scrollTop=this.getScrollTop()},100))},methods:{getScrollTop:()=>window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0,scrollToTop(){window.scrollTo({top:0,behavior:"smooth"}),this.scrollTop=0}}},Kr=(t(240),Object(zr.a)(Yr,(function(){var e=this._self._c;return e("transition",{attrs:{name:"fade"}},[this.show?e("svg",{staticClass:"go-to-top",attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 49.484 28.284"},on:{click:this.scrollToTop}},[e("g",{attrs:{transform:"translate(-229 -126.358)"}},[e("rect",{attrs:{fill:"currentColor",width:"35",height:"5",rx:"2",transform:"translate(229 151.107) rotate(-45)"}}),this._v(" "),e("rect",{attrs:{fill:"currentColor",width:"35",height:"5",rx:"2",transform:"translate(274.949 154.642) rotate(-135)"}})])]):this._e()])}),[],!1,null,"5fd4ef0c",null).exports);t(241);function jr(e){const n=document.documentElement.getBoundingClientRect(),t=e.getBoundingClientRect();return{x:t.left-n.left,y:t.top-n.top}}var Wr=[{},({Vue:e})=>{e.mixin({computed:{$dataBlock(){return this.$options.__data__block__}}})},{},{},({Vue:e})=>{e.component("BackToTop",Kr)},({Vue:e,router:n})=>{n.options.scrollBehavior=(n,t,o)=>{if(o)return window.scrollTo({top:o.y,behavior:"smooth"});if(n.hash){if(e.$vuepress.$get("disableScrollBehavior"))return!1;const t=document.querySelector(n.hash);return!!t&&window.scrollTo({top:jr(t).y,behavior:"smooth"})}return window.scrollTo({top:0,behavior:"smooth"})}}],Xr=t(46);class Qr extends class{constructor(){this.store=new Kt({data:{state:{}}})}$get(e){return this.store.state[e]}$set(e,n){Kt.set(this.store.state,e,n)}$emit(...e){this.store.$emit(...e)}$on(...e){this.store.$on(...e)}}{}Object.assign(Qr.prototype,{getPageAsyncComponent:sr,getLayoutAsyncComponent:rr,getAsyncComponent:lr,getVueComponent:dr});var $r={install(e){const n=new Qr;e.$vuepress=n,e.prototype.$vuepress=n}};function Jr(e,n){const t=n.toLowerCase();return e.options.routes.some(e=>e.path.toLowerCase()===t)}var Zr={props:{pageKey:String,slotKey:{type:String,default:"default"}},render(e){const n=this.pageKey||this.$parent.$page.key;return ur("pageKey",n),Kt.component(n)||Kt.component(n,sr(n)),Kt.component(n)?e(n):e("")}},el={functional:!0,props:{slotKey:String,required:!0},render:(e,{props:n,slots:t})=>e("div",{class:["content__"+n.slotKey]},t()[n.slotKey])},nl={computed:{openInNewWindowTitle(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},tl=(t(242),t(243),Object(zr.a)(nl,(function(){var e=this._self._c;return e("span",[e("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[e("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),e("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),e("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports),ol={functional:!0,render(e,{parent:n,children:t}){if(n._isMounted)return t;n.$once("hook:mounted",()=>{n.$forceUpdate()})}};Kt.config.productionTip=!1,Kt.use(Hs),Kt.use($r),Kt.mixin(function(e,n,t=Kt){!function(e){e.locales&&Object.keys(e.locales).forEach(n=>{e.locales[n].path=n});Object.freeze(e)}(n),t.$vuepress.$set("siteData",n);const o=new(e(t.$vuepress.$get("siteData"))),i=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(o)),a={};return Object.keys(i).reduce((e,n)=>(n.startsWith("$")&&(e[n]=i[n].get),e),a),{computed:a}}(e=>class{setPage(e){this.__page=e}get $site(){return e}get $themeConfig(){return this.$site.themeConfig}get $frontmatter(){return this.$page.frontmatter}get $localeConfig(){const{locales:e={}}=this.$site;let n,t;for(const o in e)"/"===o?t=e[o]:0===this.$page.path.indexOf(o)&&(n=e[o]);return n||t||{}}get $siteTitle(){return this.$localeConfig.title||this.$site.title||""}get $canonicalUrl(){const{canonicalUrl:e}=this.$page.frontmatter;return"string"==typeof e&&e}get $title(){const e=this.$page,{metaTitle:n}=this.$page.frontmatter;if("string"==typeof n)return n;const t=this.$siteTitle,o=e.frontmatter.home?null:e.frontmatter.title||e.title;return t?o?o+" | "+t:t:o||"VuePress"}get $description(){const e=function(e){if(e){const n=e.filter(e=>"description"===e.name)[0];if(n)return n.content}}(this.$page.frontmatter.meta);return e||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}get $lang(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}get $localePath(){return this.$localeConfig.path||"/"}get $themeLocaleConfig(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}get $page(){return this.__page?this.__page:function(e,n){for(let t=0;t<e.length;t++){const o=e[t];if(o.path.toLowerCase()===n.toLowerCase())return o}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}},Hr)),Kt.component("Content",Zr),Kt.component("ContentSlotsDistributor",el),Kt.component("OutboundLink",tl),Kt.component("ClientOnly",ol),Kt.component("Layout",rr("Layout")),Kt.component("NotFound",rr("NotFound")),Kt.prototype.$withBase=function(e){const n=this.$site.base;return"/"===e.charAt(0)?n+e.slice(1):e},window.__VUEPRESS__={version:"1.9.10",hash:"912fa43"},async function(e){const n="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:Hr.routerBase||Hr.base,t=new Hs({base:n,mode:"history",fallback:!1,routes:Vr,scrollBehavior:(e,n,t)=>t||(e.hash?!Kt.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(e.hash)}:{x:0,y:0})});!function(e){e.beforeEach((n,t,o)=>{if(Jr(e,n.path))o();else if(/(\/|\.html)$/.test(n.path))if(/\/$/.test(n.path)){const t=n.path.replace(/\/$/,"")+".html";Jr(e,t)?o(t):o()}else o();else{const t=n.path+"/",i=n.path+".html";Jr(e,i)?o(i):Jr(e,t)?o(t):o()}})}(t);const o={};try{await Promise.all(Wr.filter(e=>"function"==typeof e).map(n=>n({Vue:Kt,options:o,router:t,siteData:Hr,isServer:e})))}catch(e){console.error(e)}return{app:new Kt(Object.assign(o,{router:t,render:e=>e("div",{attrs:{id:"app"}},[e("RouterView",{ref:"layout"}),e("div",{class:"global-ui"},Xr.a.map(n=>e(n)))])})),router:t}}(!1).then(({app:e,router:n})=>{n.onReady(()=>{e.$mount("#app")})})}]);